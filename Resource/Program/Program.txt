		ROUTINE A00_MapInputs 
				RC: "############################$N"
				    "BIW MES$N"
				    "Input Mapping Routine$N"
				    "############################$N"
				    "$N"
				    "Map all required transaction inputs per MES Station$N"
				    "$N"
				    "### Station/Robot MES Tag is completely configurable ###$N"
				    "Create a tag with the Same Station Robot name and add MES$N"
				    "Data type should be created as udtMES_SxxTLx$N"
				    "Add every transaction or interface with data type Ludt_MES_Main";
				N: NOP();
				RC: "############################$N"
				    "MES Transaction$N"
				    "Manual Order Start$N"
				    "############################";
				N: XIC(S005TL1.Int.FaultResetPB)OTE(S005TL1MES.ManualOS.FltRst);
				N: XIC(S005TL1.Int.AutoMode)XIC(S005TL1.Int.Empty)XIC(Edit.Bit)XIO(Z005_040.Utility.RunoutMode.Seld)OTE(S005TL1MES.ManualOS.Trigger);
				N: XIC(Edit.Bit)OTU(S005TL1MES.ManualOS.Retry);
				N: [XIC(S005TL1MES.ManualOS.Bypass.PB) [XIO(S005TL1MES.ManualOS.Bypass.Seld) XIO(S005TL1MES.ManualOS.Bypass.Toggle) [OTL(S005TL1MES.ManualOS.Bypass.Seld) ,OTL(S005TL1MES.ManualOS.Bypass.Toggle) ] ,XIC(S005TL1MES.ManualOS.Bypass.Seld) XIO(S005TL1MES.ManualOS.Bypass.Toggle) [OTU(S005TL1MES.ManualOS.Bypass.Seld) ,OTL(S005TL1MES.ManualOS.Bypass.Toggle) ] ] ,XIO(S005TL1MES.ManualOS.Bypass.PB) OTU(S005TL1MES.ManualOS.Bypass.Toggle) ];
				RC: "############################$N"
				    "MES Transaction$N"
				    "MES Take In / Take Out$N"
				    "############################";
				N: OTU(S005TL1MES.MES_TakeInOut.FltRst);
				N: OTU(S005TL1MES.MES_TakeInOut.Trigger);
				N: OTU(S005TL1MES.MES_TakeInOut.Retry);
				N: [XIC(S005TL1MES.MES_TakeInOut.Bypass.PB) [XIO(S005TL1MES.MES_TakeInOut.Bypass.Seld) XIO(S005TL1MES.MES_TakeInOut.Bypass.Toggle) [OTL(S005TL1MES.MES_TakeInOut.Bypass.Seld) ,OTL(S005TL1MES.MES_TakeInOut.Bypass.Toggle) ] ,XIC(S005TL1MES.MES_TakeInOut.Bypass.Seld) XIO(S005TL1MES.MES_TakeInOut.Bypass.Toggle) [OTU(S005TL1MES.MES_TakeInOut.Bypass.Seld) ,OTL(S005TL1MES.MES_TakeInOut.Bypass.Toggle) ] ] ,XIO(S005TL1MES.MES_TakeInOut.Bypass.PB) OTU(S005TL1MES.MES_TakeInOut.Bypass.Toggle) ];
				RC: "############################$N"
				    " MES Transaction$N"
				    "OEM Take In / Take Out$N"
				    "############################";
				N: OTU(S005TL1MES.OEM_TakeInOut.FltRst);
				N: OTU(S005TL1MES.OEM_TakeInOut.Trigger);
				N: OTU(S005TL1MES.OEM_TakeInOut.Retry);
				N: [XIC(S005TL1MES.OEM_TakeInOut.Bypass.PB) [XIO(S005TL1MES.OEM_TakeInOut.Bypass.Seld) XIO(S005TL1MES.OEM_TakeInOut.Bypass.Toggle) [OTL(S005TL1MES.OEM_TakeInOut.Bypass.Seld) ,OTL(S005TL1MES.OEM_TakeInOut.Bypass.Toggle) ] ,XIC(S005TL1MES.OEM_TakeInOut.Bypass.Seld) XIO(S005TL1MES.OEM_TakeInOut.Bypass.Toggle) [OTU(S005TL1MES.OEM_TakeInOut.Bypass.Seld) ,OTL(S005TL1MES.OEM_TakeInOut.Bypass.Toggle) ] ] ,XIO(S005TL1MES.OEM_TakeInOut.Bypass.PB) OTU(S005TL1MES.OEM_TakeInOut.Bypass.Toggle) ];
				RC: "############################$N"
				    " MES Transaction$N"
				    "Order Booking$N"
				    "############################";
				N: OTU(S005TL1MES.OrderBooking.FltRst);
				N: OTU(S005TL1MES.OrderBooking.Trigger);
				N: OTU(S005TL1MES.OrderBooking.Retry);
				N: [XIC(S005TL1MES.OrderBooking.Bypass.PB) [XIO(S005TL1MES.OrderBooking.Bypass.Seld) XIO(S005TL1MES.OrderBooking.Bypass.Toggle) [OTL(S005TL1MES.OrderBooking.Bypass.Seld) ,OTL(S005TL1MES.OrderBooking.Bypass.Toggle) ] ,XIC(S005TL1MES.OrderBooking.Bypass.Seld) XIO(S005TL1MES.OrderBooking.Bypass.Toggle) [OTU(S005TL1MES.OrderBooking.Bypass.Seld) ,OTL(S005TL1MES.OrderBooking.Bypass.Toggle) ] ] ,XIO(S005TL1MES.OrderBooking.Bypass.PB) OTU(S005TL1MES.OrderBooking.Bypass.Toggle) ];
				RC: "############################$N"
				    " MES Transaction$N"
				    "Order Data Request$N"
				    "############################";
				N: OTU(S005TL1MES.OrderDataReq.FltRst);
				N: OTU(S005TL1MES.OrderDataReq.Trigger);
				N: OTU(S005TL1MES.OrderDataReq.Retry);
				N: [XIC(S005TL1MES.OrderDataReq.Bypass.PB) [XIO(S005TL1MES.OrderDataReq.Bypass.Seld) XIO(S005TL1MES.OrderDataReq.Bypass.Toggle) [OTL(S005TL1MES.OrderDataReq.Bypass.Seld) ,OTL(S005TL1MES.OrderDataReq.Bypass.Toggle) ] ,XIC(S005TL1MES.OrderDataReq.Bypass.Seld) XIO(S005TL1MES.OrderDataReq.Bypass.Toggle) [OTU(S005TL1MES.OrderDataReq.Bypass.Seld) ,OTL(S005TL1MES.OrderDataReq.Bypass.Toggle) ] ] ,XIO(S005TL1MES.OrderDataReq.Bypass.PB) OTU(S005TL1MES.OrderDataReq.Bypass.Toggle) ];
		END_ROUTINE

		ROUTINE MainRoutine 
				N: JSR(ManualOrderStart,0);
				N: JSR(MES_TakeInTakeOut,0);
				N: JSR(OEM_TakeInTakeOut,0);
				N: JSR(OrderBooking,0);
		END_ROUTINE

		ROUTINE ManualOrderStart 
				RC: "###############################################################################################$N"
				    "Create Date: 2022.06.14$N"
				    "Created by: A.Solomon, MAS Equipment & Engineering$N"
				    "Last Revision Date: 2023.01.23$N"
				    "Last Revised by: A.Solomon, MAS Equipment & Engineering$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				RC: "###############################################################################################$N"
				    "MES Interface Add-On Instruction$N"
				    "Outputs To MES$N"
				    "To Be Completed By OEM$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				RC: "###############################################################################################$N"
				    "-REQUIRED-$N"
				    "Request To Reset Faults / Errors$N"
				    "################################################################################################$N"
				    "";
				N: XIC(S005TL1MES.ManualOS.FltRst)OTE(BIW_S005TL1_ManualOrderStart.pinReq.FaultReset);
				RC: "###############################################################################################$N"
				    "-REQUIRED-$N"
				    "Tells MES That The Equipment Is Ready For A Cycle To Begin$N"
				    "This Is Typically Driven By A Part Present, RFID Tag Present or a Serial Number Being Populated$N"
				    "Dropping This Bit Will Lose All Build Information$N"
				    "################################################################################################$N"
				    "";
				N: XIC(S005TL1MES.ManualOS.Trigger)EQU(BIW_XXX_S005_LEFT_OS_Manual.pin_RCV.Response,0)EQU(BIW_XXX_S005_LEFT_OS_Manual.pin_RCV.SerialNumber,'')EQU(BIW_XXX_S005_LEFT_OS_Manual.pin_RCV.SequenceNumber,0)XIO(BIW_S005TL1_ManualOrderStart.stsDiag.Faulted)OTL(BIW_S005TL1_ManualOrderStart.pinReq.Trigger);
				RC: "###############################################################################################$N"
				    "-OPTIONAL-$N"
				    "Used For Debugging Purposes$N"
				    "Allows The Call To Be Retriggered$N"
				    "################################################################################################$N"
				    "";
				N: XIC(S005TL1MES.ManualOS.Retry)OTE(BIW_S005TL1_ManualOrderStart.pinReq.Retry);
				RC: "###############################################################################################$N"
				    "-OPTIONAL-$N"
				    "Sets MES In Bypass$N"
				    "The Intention Of This Is For Debugging Equipment Without Interference From MES$N"
				    "Can Also Be Used In Some Cases To Run The Equipment Without MES, If MES Has Errors Responding$N"
				    "Should Set A Fault If This Is Active & The Equipment Is In Produciton$N"
				    "################################################################################################$N"
				    "";
				N: XIC(S005TL1MES.ManualOS.Bypass.Seld)[OTE(BIW_S005TL1_ManualOrderStart.pinReq.Bypass.Active) ,OTE(BIW_S005TL1_ManualOrderStart.pinReq.Bypass.Force_OK) ];
				RC: "###############################################################################################$N"
				    "Add-On Instruction To Handle Get Build Instructions Handshake With MES$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				N: vMES_v0100(BIW_S005TL1_ManualOrderStart.stsAOI,BIW_S005TL1_ManualOrderStart.pinReq,BIW_S005TL1_ManualOrderStart.poutHMI,BIW_S005TL1_ManualOrderStart.poutCmn,BIW_S005TL1_ManualOrderStart.poutLastCmn,BIW_S005TL1_ManualOrderStart.stsDiag,BIW_XXX_S005_LEFT_OS_Manual.pin_RCV,BIW_XXX_S005_LEFT_OS_Manual.pout_XMIT);
				RC: "################################################################################################$N"
				    "###############################################################################################$N"
				    "CONFIGURED FAULT CODES:$N"
				    "################################################################################################$N"
				    "################################################################################################$N"
				    "-2 = Fault: Add-On Instruction Is Not Running$N"
				    "###############################################################################################$N"
				    "1101 = Fault: MES Get Build Request Has Exceeded The Allowed Amount Of Retries$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1102 = Fault: Serial Number, VIN or Sequence Number Is Missing From Request$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1103 = Fault: Area Name Is Missing From Request$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1104 = Fault: The Configured Max Retries Is Invalid$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1105 = Fault: The Configured Retry Time Is Invalid$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1106 = Fault: Triggers For BOTH Push & Pull Are ON$N"
				    "################################################################################################$N"
				    "";
				N: EQU(BIW_S005TL1_ManualOrderStart.stsAOI.stsFaultCode,BIW_S005TL1_ManualOrderStart.stsAOI.stsFaultCode)NOP();
				N: XIC(BIW_S005TL1_ManualOrderStart.pinReq.Trigger)[EQU(BIW_XXX_S005_LEFT_OS_Manual.pin_RCV.Response,1) ,XIC(BIW_S005TL1_ManualOrderStart.stsAOI.stsOK) ]NEQ(BIW_XXX_S005_LEFT_OS_Manual.pin_RCV.SerialNumber,'')NEQ(BIW_XXX_S005_LEFT_OS_Manual.pin_RCV.SequenceNumber,0)OTE(S005TL1MES.ManualOS.DataAvailable);
				N: XIC(S005TL1MES.ManualOS.DataAvailable)XIC(S005TL1MES.ManualOS.SR.Int.NoPart)XIC(Edit.Bit)[XIO(S005TL1MES.ManualOS.DataXferOns) [[MOV(BIW_XXX_S005_LEFT_OS_Manual.pin_RCV.SerialNumber,S005TL1MES.ManualOS.SR.Data.PartID) ,MOV(BIW_XXX_S005_LEFT_OS_Manual.pin_RCV.SequenceNumber,S005TL1MES.ManualOS.SR.Data.SeqNum) ,MOV(BIW_XXX_S005_LEFT_OS_Manual.pin_RCV.RFID,S005TL1MES.ManualOS.SR.Data.RFID) ,MOV(Edit.String,S005TL1MES.ManualOS.SR.Data.PartNum) ,MOV(Edit.String,S005TL1MES.ManualOS.SR.Data.JobNum) ,MOV(Edit.Dint,S005TL1MES.ManualOS.SR.Data.JobType) ] ,[EQU(BIW_XXX_S005_LEFT_OS_Manual.pin_RCV.OrderState,'New') MOV(1,S005TL1MES.ManualOS.SR.Data.State) ,EQU(BIW_XXX_S005_LEFT_OS_Manual.pin_RCV.OrderState,'Released') MOV(2,S005TL1MES.ManualOS.SR.Data.State) ,EQU(BIW_XXX_S005_LEFT_OS_Manual.pin_RCV.OrderState,'Hold') MOV(3,S005TL1MES.ManualOS.SR.Data.State) ,EQU(BIW_XXX_S005_LEFT_OS_Manual.pin_RCV.OrderState,'Running') MOV(4,S005TL1MES.ManualOS.SR.Data.State) ,EQU(BIW_XXX_S005_LEFT_OS_Manual.pin_RCV.OrderState,'Booked') MOV(5,S005TL1MES.ManualOS.SR.Data.State) ,EQU(BIW_XXX_S005_LEFT_OS_Manual.pin_RCV.OrderState,'Closed') MOV(6,S005TL1MES.ManualOS.SR.Data.State) ] ] ,OTL(S005TL1MES.ManualOS.DataXferOns) ];
				N: XIC(S005TL1MES.ManualOS.DataXferOns)XIC(Edit.Bit)[OTU(BIW_S005TL1_ManualOrderStart.pinReq.Trigger) ,EQU(BIW_XXX_S005_LEFT_OS_Manual.pin_RCV.Response,0) OTU(S005TL1MES.ManualOS.DataXferOns) ];
				N: XIC(Edit.Bit)ONS(S005TL1MES.ManualOS.LeavingOns)OTE(S005TL1MES.ManualOS.Leaving);
				N: XIC(S005TL1MES.ManualOS.Leaving)CPS(S005TL1MES.ManualOS.ZeroSR,S005TL1MES.ManualOS.SR,1);
		END_ROUTINE

		ROUTINE MES_TakeInTakeOut 
				RC: "###############################################################################################$N"
				    "Create Date: 2022.06.14$N"
				    "Created by: A.Solomon, MAS Equipment & Engineering$N"
				    "Last Revision Date: 2023.01.23$N"
				    "Last Revised by: A.Solomon, MAS Equipment & Engineering$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				RC: "###############################################################################################$N"
				    "MES Interface Add-On Instruction$N"
				    "Outputs To MES$N"
				    "To Be Completed By OEM$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				RC: "###############################################################################################$N"
				    "-OPTIONAL BASED ON USE-CASE-$N"
				    "-DO NOT CHANGE CONDITIONS-$N"
				    "Serial Number Output To MES$N"
				    "################################################################################################$N"
				    "";
				N: COP(Example.SerialNumber,BIW_S005_MES_TakeInTakeOut.pinReq.SerialNumber,1);
				RC: "###############################################################################################$N"
				    "-OPTIONAL BASED ON USE-CASE-$N"
				    "-DO NOT CHANGE CONDITIONS-$N"
				    "VIN Output To MES$N"
				    "################################################################################################$N"
				    "";
				N: COP(Example.VIN,BIW_S005_MES_TakeInTakeOut.pinReq.VIN,1);
				RC: "###############################################################################################$N"
				    "-OPTIONAL BASED ON USE-CASE-$N"
				    "-DO NOT CHANGE CONDITIONS-$N"
				    "Sequence Number Output To MES$N"
				    "################################################################################################$N"
				    "";
				N: MOV(Example.SequenceNumber,BIW_S005_MES_TakeInTakeOut.pinReq.SequenceNumber);
				RC: "###############################################################################################$N"
				    "-REQUIRED-$N"
				    "Request To Reset Faults / Errors$N"
				    "################################################################################################$N"
				    "";
				N: AFI()OTE(BIW_S005_MES_TakeInTakeOut.pinReq.FaultReset);
				RC: "###############################################################################################$N"
				    "-REQUIRED-$N"
				    "Tells MES That The Equipment Is Ready For A Cycle To Begin$N"
				    "This Is Typically Driven By A Part Present, RFID Tag Present or a Serial Number Being Populated$N"
				    "Dropping This Bit Will Lose All Build Information$N"
				    "################################################################################################$N"
				    "";
				N: AFI()XIO(BIW_S005_MES_TakeInTakeOut.stsDiag.Faulted)OTE(BIW_S005_MES_TakeInTakeOut.pinReq.Trigger);
				RC: "###############################################################################################$N"
				    "-OPTIONAL-$N"
				    "Used For Debugging Purposes$N"
				    "Allows The Call To Be Retriggered$N"
				    "################################################################################################$N"
				    "";
				N: XIC(OEM_ToDo)OTE(BIW_S005_MES_TakeInTakeOut.pinReq.Retry);
				RC: "###############################################################################################$N"
				    "-OPTIONAL-$N"
				    "Sets MES In Bypass$N"
				    "The Intention Of This Is For Debugging Equipment Without Interference From MES$N"
				    "Can Also Be Used In Some Cases To Run The Equipment Without MES, If MES Has Errors Responding$N"
				    "Should Set A Fault If This Is Active & The Equipment Is In Produciton$N"
				    "################################################################################################$N"
				    "";
				N: AFI()[OTE(BIW_S005_MES_TakeInTakeOut.pinReq.Bypass.Active) ,OTE(BIW_S005_MES_TakeInTakeOut.pinReq.Bypass.Force_OK) ];
				RC: "###############################################################################################$N"
				    "Add-On Instruction To Handle Get Build Instructions Handshake With MES$N"
				    "################################################################################################$N"
				    "";
				N: AFI()NOP();
				N: vMES_v0100(BIW_S005_MES_TakeInTakeOut.stsAOI,BIW_S005_MES_TakeInTakeOut.pinReq,BIW_S005_MES_TakeInTakeOut.poutHMI,BIW_S005_MES_TakeInTakeOut.poutCmn,BIW_S005_MES_TakeInTakeOut.poutLastCmn,BIW_S005_MES_TakeInTakeOut.stsDiag,BIW_XXX_S005_LEFT_MES_TakeInTakeOut.pin_RCV,BIW_XXX_S005_LEFT_MES_TakeInTakeOut.pout_XMIT);
				RC: "################################################################################################$N"
				    "###############################################################################################$N"
				    "CONFIGURED FAULT CODES:$N"
				    "################################################################################################$N"
				    "################################################################################################$N"
				    "-2 = Fault: Add-On Instruction Is Not Running$N"
				    "###############################################################################################$N"
				    "1101 = Fault: MES Get Build Request Has Exceeded The Allowed Amount Of Retries$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1102 = Fault: Serial Number, VIN or Sequence Number Is Missing From Request$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1103 = Fault: Area Name Is Missing From Request$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1104 = Fault: The Configured Max Retries Is Invalid$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1105 = Fault: The Configured Retry Time Is Invalid$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1106 = Fault: Triggers For BOTH Push & Pull Are ON$N"
				    "################################################################################################$N"
				    "";
				N: EQU(BIW_S005_MES_TakeInTakeOut.stsAOI.stsFaultCode,BIW_S005_MES_TakeInTakeOut.stsAOI.stsFaultCode)NOP();
		END_ROUTINE

		ROUTINE OEM_TakeInTakeOut 
				RC: "###############################################################################################$N"
				    "Create Date: 2022.06.14$N"
				    "Created by: A.Solomon, MAS Equipment & Engineering$N"
				    "Last Revision Date: 2023.01.23$N"
				    "Last Revised by: A.Solomon, MAS Equipment & Engineering$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				RC: "###############################################################################################$N"
				    "MES Interface Add-On Instruction$N"
				    "Outputs To MES$N"
				    "To Be Completed By OEM$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				RC: "###############################################################################################$N"
				    "-OPTIONAL BASED ON USE-CASE-$N"
				    "-DO NOT CHANGE CONDITIONS-$N"
				    "Serial Number Output To MES$N"
				    "################################################################################################$N"
				    "";
				N: COP(Example.SerialNumber,BIW_S005_TakeInTakeOut.pinReq.SerialNumber,1);
				RC: "###############################################################################################$N"
				    "-OPTIONAL BASED ON USE-CASE-$N"
				    "-DO NOT CHANGE CONDITIONS-$N"
				    "VIN Output To MES$N"
				    "################################################################################################$N"
				    "";
				N: COP(Example.VIN,BIW_S005_TakeInTakeOut.pinReq.VIN,1);
				RC: "###############################################################################################$N"
				    "-OPTIONAL BASED ON USE-CASE-$N"
				    "-DO NOT CHANGE CONDITIONS-$N"
				    "Sequence Number Output To MES$N"
				    "################################################################################################$N"
				    "";
				N: MOV(Example.SequenceNumber,BIW_S005_TakeInTakeOut.pinReq.SequenceNumber);
				RC: "###############################################################################################$N"
				    "-OPTIONAL BASED ON USE-CASE-$N"
				    "-DO NOT CHANGE CONDITIONS-$N"
				    "Status Code Output To MES$N"
				    "Move 1 For Take Out / Mov 2 For Take In$N"
				    "################################################################################################$N"
				    "";
				N: MOV(Example.Status_Code,BIW_S005_TakeInTakeOut.pinReq.Status_Code);
				RC: "###############################################################################################$N"
				    "-REQUIRED-$N"
				    "Request To Reset Faults / Errors$N"
				    "################################################################################################$N"
				    "";
				N: AFI()OTE(BIW_S005_TakeInTakeOut.pinReq.FaultReset);
				RC: "###############################################################################################$N"
				    "-REQUIRED-$N"
				    "Tells MES That The Equipment Is Ready For A Cycle To Begin$N"
				    "This Is Typically Driven By A Part Present, RFID Tag Present or a Serial Number Being Populated$N"
				    "Dropping This Bit Will Lose All Build Information$N"
				    "################################################################################################$N"
				    "";
				N: AFI()XIO(BIW_S005_TakeInTakeOut.stsDiag.Faulted)OTE(BIW_S005_TakeInTakeOut.pinReq.Trigger);
				RC: "###############################################################################################$N"
				    "-OPTIONAL-$N"
				    "Used For Debugging Purposes$N"
				    "Allows The Call To Be Retriggered$N"
				    "################################################################################################$N"
				    "";
				N: XIC(OEM_ToDo)OTE(BIW_S005_TakeInTakeOut.pinReq.Retry);
				RC: "###############################################################################################$N"
				    "-OPTIONAL-$N"
				    "Sets MES In Bypass$N"
				    "The Intention Of This Is For Debugging Equipment Without Interference From MES$N"
				    "Can Also Be Used In Some Cases To Run The Equipment Without MES, If MES Has Errors Responding$N"
				    "Should Set A Fault If This Is Active & The Equipment Is In Produciton$N"
				    "################################################################################################$N"
				    "";
				N: AFI()[OTE(BIW_S005_TakeInTakeOut.pinReq.Bypass.Active) ,OTE(BIW_S005_TakeInTakeOut.pinReq.Bypass.Force_OK) ];
				RC: "###############################################################################################$N"
				    "Add-On Instruction To Handle Get Build Instructions Handshake With MES$N"
				    "################################################################################################$N"
				    "";
				N: AFI()NOP();
				N: vMES_v0100(BIW_S005_TakeInTakeOut.stsAOI,BIW_S005_TakeInTakeOut.pinReq,BIW_S005_TakeInTakeOut.poutHMI,BIW_S005_TakeInTakeOut.poutCmn,BIW_S005_TakeInTakeOut.poutLastCmn,BIW_S005_TakeInTakeOut.stsDiag,BIW_XXX_S005_LEFT_OEM_TakeInTakeOut.pin_RCV,BIW_XXX_S005_LEFT_OEM_TakeInTakeOut.pout_XMIT);
				RC: "################################################################################################$N"
				    "###############################################################################################$N"
				    "CONFIGURED FAULT CODES:$N"
				    "################################################################################################$N"
				    "################################################################################################$N"
				    "-2 = Fault: Add-On Instruction Is Not Running$N"
				    "###############################################################################################$N"
				    "1101 = Fault: MES Get Build Request Has Exceeded The Allowed Amount Of Retries$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1102 = Fault: Serial Number, VIN or Sequence Number Is Missing From Request$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1103 = Fault: Area Name Is Missing From Request$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1104 = Fault: The Configured Max Retries Is Invalid$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1105 = Fault: The Configured Retry Time Is Invalid$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1106 = Fault: Triggers For BOTH Push & Pull Are ON$N"
				    "################################################################################################$N"
				    "";
				N: EQU(BIW_S005_TakeInTakeOut.stsAOI.stsFaultCode,BIW_S005_TakeInTakeOut.stsAOI.stsFaultCode)NOP();
		END_ROUTINE

		ROUTINE OrderBooking 
				RC: "###############################################################################################$N"
				    "Create Date: 2022.06.14$N"
				    "Created by: A.Solomon, MAS Equipment & Engineering$N"
				    "Last Revision Date: 2023.01.23$N"
				    "Last Revised by: A.Solomon, MAS Equipment & Engineering$N"
				    "################################################################################################";
				N: NOP();
				RC: "###############################################################################################$N"
				    "MES Interface Add-On Instruction$N"
				    "Outputs To MES$N"
				    "To Be Completed By OEM$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				RC: "###############################################################################################$N"
				    "-OPTIONAL BASED ON USE-CASE-$N"
				    "-DO NOT CHANGE CONDITIONS-$N"
				    "Serial Number Output To MES$N"
				    "################################################################################################$N"
				    "";
				N: COP(Example.SerialNumber,BIW_S040_OrderBooking.pinReq.SerialNumber,1);
				RC: "###############################################################################################$N"
				    "-OPTIONAL BASED ON USE-CASE-$N"
				    "-DO NOT CHANGE CONDITIONS-$N"
				    "Identifier Number Output To MES$N"
				    "################################################################################################$N"
				    "";
				N: COP(Example.Identifier,BIW_S040_OrderBooking.pinReq.Identifier,1);
				RC: "###############################################################################################$N"
				    "-OPTIONAL BASED ON USE-CASE-$N"
				    "-DO NOT CHANGE CONDITIONS-$N"
				    "VIN Output To MES$N"
				    "################################################################################################$N"
				    "";
				N: COP(Example.VIN,BIW_S040_OrderBooking.pinReq.VIN,1);
				RC: "###############################################################################################$N"
				    "-OPTIONAL BASED ON USE-CASE-$N"
				    "-DO NOT CHANGE CONDITIONS-$N"
				    "Sequence Number Output To MES$N"
				    "################################################################################################$N"
				    "";
				N: MOV(Example.SequenceNumber,BIW_S040_OrderBooking.pinReq.SequenceNumber);
				RC: "###############################################################################################$N"
				    "-REQUIRED-$N"
				    "Request To Reset Faults / Errors$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Edit.Bit)OTE(BIW_S040_OrderBooking.pinReq.FaultReset);
				RC: "###############################################################################################$N"
				    "-REQUIRED-$N"
				    "Tells MES That The Equipment Is Ready For A Cycle To Begin$N"
				    "This Is Typically Driven By A Part Present, RFID Tag Present or a Serial Number Being Populated$N"
				    "Dropping This Bit Will Lose All Build Information$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Edit.Bit)XIO(BIW_S040_OrderBooking.stsDiag.Faulted)OTE(BIW_S040_OrderBooking.pinReq.Trigger);
				RC: "###############################################################################################$N"
				    "-OPTIONAL-$N"
				    "Used For Debugging Purposes$N"
				    "Allows The Call To Be Retriggered$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Edit.Bit)OTE(BIW_S040_OrderBooking.pinReq.Retry);
				RC: "###############################################################################################$N"
				    "-OPTIONAL-$N"
				    "Sets MES In Bypass$N"
				    "The Intention Of This Is For Debugging Equipment Without Interference From MES$N"
				    "Can Also Be Used In Some Cases To Run The Equipment Without MES, If MES Has Errors Responding$N"
				    "Should Set A Fault If This Is Active & The Equipment Is In Produciton$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Edit.Bit)[OTE(BIW_S040_OrderBooking.pinReq.Bypass.Active) ,OTE(BIW_S040_OrderBooking.pinReq.Bypass.Force_OK) ];
				RC: "###############################################################################################$N"
				    "Add-On Instruction To Handle Get Build Instructions Handshake With MES$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				N: vMES_v0100(BIW_S040_OrderBooking.stsAOI,BIW_S040_OrderBooking.pinReq,BIW_S040_OrderBooking.poutHMI,BIW_S040_OrderBooking.poutCmn,BIW_S040_OrderBooking.poutLastCmn,BIW_S040_OrderBooking.stsDiag,BIW_XXX_S040_LEFT_OB.pin_RCV,BIW_XXX_S040_LEFT_OB.pout_XMIT);
				RC: "################################################################################################$N"
				    "###############################################################################################$N"
				    "CONFIGURED FAULT CODES:$N"
				    "################################################################################################$N"
				    "################################################################################################$N"
				    "-2 = Fault: Add-On Instruction Is Not Running$N"
				    "###############################################################################################$N"
				    "1101 = Fault: MES Get Build Request Has Exceeded The Allowed Amount Of Retries$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1102 = Fault: Serial Number, VIN or Sequence Number Is Missing From Request$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1103 = Fault: Area Name Is Missing From Request$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1104 = Fault: The Configured Max Retries Is Invalid$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1105 = Fault: The Configured Retry Time Is Invalid$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1106 = Fault: Triggers For BOTH Push & Pull Are ON$N"
				    "################################################################################################$N"
				    "";
				N: EQU(BIW_S040_OrderBooking.stsAOI.stsFaultCode,BIW_S040_OrderBooking.stsAOI.stsFaultCode)NOP();
		END_ROUTINE

		ROUTINE OrderDataRequest 
				RC: "###############################################################################################$N"
				    "Create Date: 2022.06.14$N"
				    "Created by: A.Solomon, MAS Equipment & Engineering$N"
				    "Last Revision Date: 2023.01.23$N"
				    "Last Revised by: A.Solomon, MAS Equipment & Engineering$N"
				    "################################################################################################";
				N: NOP();
				RC: "###############################################################################################$N"
				    "MES Interface Add-On Instruction$N"
				    "Outputs To MES$N"
				    "To Be Completed By OEM$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				RC: "###############################################################################################$N"
				    "-OPTIONAL BASED ON USE-CASE-$N"
				    "-DO NOT CHANGE CONDITIONS-$N"
				    "Serial Number Output To MES$N"
				    "################################################################################################$N"
				    "";
				N: COP(Example.SerialNumber,EM010000_OrderDataRequest.pinReq.SerialNumber,1);
				RC: "###############################################################################################$N"
				    "-OPTIONAL BASED ON USE-CASE-$N"
				    "-DO NOT CHANGE CONDITIONS-$N"
				    "Idenifier Number Output To MES$N"
				    "################################################################################################$N"
				    "";
				N: COP(Example.Identifier,EM010000_OrderDataRequest.pinReq.Identifier,1);
				RC: "###############################################################################################$N"
				    "-OPTIONAL BASED ON USE-CASE-$N"
				    "-DO NOT CHANGE CONDITIONS-$N"
				    "VIN Output To MES$N"
				    "################################################################################################$N"
				    "";
				N: COP(Example.VIN,EM010000_OrderDataRequest.pinReq.VIN,1);
				RC: "###############################################################################################$N"
				    "-OPTIONAL BASED ON USE-CASE-$N"
				    "-DO NOT CHANGE CONDITIONS-$N"
				    "Sequence Number Output To MES$N"
				    "################################################################################################$N"
				    "";
				N: MOV(Example.SequenceNumber,EM010000_OrderDataRequest.pinReq.SequenceNumber);
				RC: "###############################################################################################$N"
				    "-REQUIRED-$N"
				    "Request To Reset Faults / Errors$N"
				    "################################################################################################$N"
				    "";
				N: AFI()OTE(EM010000_OrderDataRequest.pinReq.FaultReset);
				RC: "###############################################################################################$N"
				    "-REQUIRED-$N"
				    "Tells MES That The Equipment Is Ready For A Cycle To Begin$N"
				    "This Is Typically Driven By A Part Present, RFID Tag Present or a Serial Number Being Populated$N"
				    "Dropping This Bit Will Lose All Build Information$N"
				    "################################################################################################$N"
				    "";
				N: AFI()XIO(EM010000_OrderDataRequest.stsDiag.Faulted)OTE(EM010000_OrderDataRequest.pinReq.Trigger);
				RC: "###############################################################################################$N"
				    "-OPTIONAL-$N"
				    "Used For Debugging Purposes$N"
				    "Allows The Call To Be Retriggered$N"
				    "################################################################################################$N"
				    "";
				N: XIC(OEM_ToDo)OTE(EM010000_OrderDataRequest.pinReq.Retry);
				RC: "###############################################################################################$N"
				    "-OPTIONAL-$N"
				    "Sets MES In Bypass$N"
				    "The Intention Of This Is For Debugging Equipment Without Interference From MES$N"
				    "Can Also Be Used In Some Cases To Run The Equipment Without MES, If MES Has Errors Responding$N"
				    "Should Set A Fault If This Is Active & The Equipment Is In Produciton$N"
				    "################################################################################################$N"
				    "";
				N: AFI()[OTE(EM010000_OrderDataRequest.pinReq.Bypass.Active) ,OTE(EM010000_OrderDataRequest.pinReq.Bypass.Force_OK) ];
				RC: "###############################################################################################$N"
				    "Add-On Instruction To Handle Get Build Instructions Handshake With MES$N"
				    "################################################################################################$N"
				    "";
				N: AFI()NOP();
				N: vMES_v0100(EM010000_OrderDataRequest.stsAOI,EM010000_OrderDataRequest.pinReq,EM010000_OrderDataRequest.poutHMI,EM010000_OrderDataRequest.poutCmn,EM010000_OrderDataRequest.poutLastCmn,EM010000_OrderDataRequest.stsDiag,PT2_EM3_EM301000_LEFT_ODR.pin_RCV,PT2_EM3_EM301000_LEFT_ODR.pout_XMIT);
				RC: "################################################################################################$N"
				    "###############################################################################################$N"
				    "CONFIGURED FAULT CODES:$N"
				    "################################################################################################$N"
				    "################################################################################################$N"
				    "-2 = Fault: Add-On Instruction Is Not Running$N"
				    "###############################################################################################$N"
				    "1101 = Fault: MES Get Build Request Has Exceeded The Allowed Amount Of Retries$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1102 = Fault: Serial Number, VIN or Sequence Number Is Missing From Request$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1103 = Fault: Area Name Is Missing From Request$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1104 = Fault: The Configured Max Retries Is Invalid$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1105 = Fault: The Configured Retry Time Is Invalid$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1106 = Fault: Triggers For BOTH Push & Pull Are ON$N"
				    "################################################################################################$N"
				    "";
				N: EQU(EM010000_OrderDataRequest.stsAOI.stsFaultCode,EM010000_OrderDataRequest.stsAOI.stsFaultCode)NOP();
		END_ROUTINE

		ROUTINE PLCtoMES_ProcData 
				RC: "###############################################################################################$N"
				    "Create Date: 2022.06.14$N"
				    "Created by: A.Solomon, MAS Equipment & Engineering$N"
				    "Last Revision Date: 2023.01.23$N"
				    "Last Revised by: A.Solomon, MAS Equipment & Engineering$N"
				    "################################################################################################";
				N: NOP();
				RC: "###############################################################################################$N"
				    "MES Interface Add-On Instruction$N"
				    "Outputs To MES$N"
				    "To Be Completed By OEM$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				RC: "###############################################################################################$N"
				    "-OPTIONAL BASED ON USE-CASE-$N"
				    "-DO NOT CHANGE CONDITIONS-$N"
				    "Serial Number Output To MES$N"
				    "################################################################################################$N"
				    "";
				N: [COP(Example.SerialNumber,BIW_S005TL1_PLCtoMES_ProcData.pinReq.SerialNumber,1) ,COP(Example.Identifier,BIW_S005TL1_PLCtoMES_ProcData.pinReq.Identifier,1) ,COP(Example.VIN,BIW_S005TL1_PLCtoMES_ProcData.pinReq.VIN,1) ,MOV(Example.SequenceNumber,BIW_S005TL1_PLCtoMES_ProcData.pinReq.SequenceNumber) ];
				RC: "###############################################################################################$N"
				    "-REQUIRED-$N"
				    "Request To Reset Faults / Errors$N"
				    "################################################################################################$N"
				    "";
				N: XIC(OEM_ToDo)OTE(BIW_S005TL1_PLCtoMES_ProcData.pinReq.FaultReset);
				RC: "###############################################################################################$N"
				    "-REQUIRED-$N"
				    "Tells MES That The Equipment Is Ready For A Cycle To Begin$N"
				    "This Is Typically Driven By A Part Present, RFID Tag Present or a Serial Number Being Populated$N"
				    "Dropping This Bit Will Lose All Build Information$N"
				    "################################################################################################$N"
				    "";
				N: XIC(OEM_ToDo)XIO(BIW_S005TL1_PLCtoMES_ProcData.stsDiag.Faulted)OTE(BIW_S005TL1_PLCtoMES_ProcData.pinReq.Trigger);
				RC: "###############################################################################################$N"
				    "-OPTIONAL-$N"
				    "Used For Debugging Purposes$N"
				    "Allows The Call To Be Retriggered$N"
				    "################################################################################################$N"
				    "";
				N: XIC(OEM_ToDo)OTE(BIW_S005TL1_PLCtoMES_ProcData.pinReq.Retry);
				RC: "###############################################################################################$N"
				    "-OPTIONAL-$N"
				    "Allows The Station To Set  An Ok Status To MES$N"
				    "################################################################################################$N"
				    "";
				N: XIC(OEM_ToDo)OTE(BIW_S005TL1_PLCtoMES_ProcData.pinReq.OK);
				RC: "###############################################################################################$N"
				    "-OPTIONAL-$N"
				    "Allows The Station To Set  An NOk Status To MES$N"
				    "################################################################################################$N"
				    "";
				N: XIC(OEM_ToDo)OTE(BIW_S005TL1_PLCtoMES_ProcData.pinReq.NOK);
				RC: "###############################################################################################$N"
				    "-OPTIONAL-$N"
				    "Sets MES In Bypass$N"
				    "The Intention Of This Is For Debugging Equipment Without Interference From MES$N"
				    "Can Also Be Used In Some Cases To Run The Equipment Without MES, If MES Has Errors Responding$N"
				    "Should Set A Fault If This Is Active & The Equipment Is In Produciton$N"
				    "################################################################################################$N"
				    "";
				N: XIC(OEM_ToDo)[OTE(BIW_S005TL1_PLCtoMES_ProcData.pinReq.Bypass.Active) ,OTE(BIW_S005TL1_PLCtoMES_ProcData.pinReq.Bypass.Force_OK) ];
				RC: "###############################################################################################$N"
				    "Add-On Instruction To Handle Get Build Instructions Handshake With MES$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				N: vMES_v0100(BIW_S005TL1_PLCtoMES_ProcData.stsAOI,BIW_S005TL1_PLCtoMES_ProcData.pinReq,BIW_S005TL1_PLCtoMES_ProcData.poutHMI,BIW_S005TL1_PLCtoMES_ProcData.poutCmn,BIW_S005TL1_PLCtoMES_ProcData.poutLastCmn,BIW_S005TL1_PLCtoMES_ProcData.stsDiag,BIW_XXX_S005TL1_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S005TL1_LEFT_PLCtoMES_PDCA.pout_XMIT);
				RC: "################################################################################################$N"
				    "###############################################################################################$N"
				    "CONFIGURED FAULT CODES:$N"
				    "################################################################################################$N"
				    "################################################################################################$N"
				    "-2 = Fault: Add-On Instruction Is Not Running$N"
				    "###############################################################################################$N"
				    "1101 = Fault: MES Get Build Request Has Exceeded The Allowed Amount Of Retries$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1102 = Fault: Serial Number, VIN or Sequence Number Is Missing From Request$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1103 = Fault: Area Name Is Missing From Request$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1104 = Fault: The Configured Max Retries Is Invalid$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1105 = Fault: The Configured Retry Time Is Invalid$N"
				    "################################################################################################$N"
				    "###############################################################################################$N"
				    "1106 = Fault: Triggers For BOTH Push & Pull Are ON$N"
				    "################################################################################################$N"
				    "";
				N: EQU(BIW_S005TL1_PLCtoMES_ProcData.stsAOI.stsFaultCode,BIW_S005TL1_PLCtoMES_ProcData.stsAOI.stsFaultCode)NOP();
				RC: "###############################################################################################$N"
				    "Add-On Instruction To Handle Get Build Instructions Handshake With MES$N"
				    "################################################################################################$N"
				    "";
				N: AFI()NOP();
				RC: "#########################$N"
				    "$N"
				    "ROBOTS$N"
				    "$N"
				    "#########################";
				N: vMES_v0100(BIW_S005RB01_PLCtoMES_ProcData.stsAOI,BIW_S005RB01_PLCtoMES_ProcData.pinReq,BIW_S005RB01_PLCtoMES_ProcData.poutHMI,BIW_S005RB01_PLCtoMES_ProcData.poutCmn,BIW_S005RB01_PLCtoMES_ProcData.poutLastCmn,BIW_S005RB01_PLCtoMES_ProcData.stsDiag,BIW_XXX_S005RB01_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S005RB01_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S005RB02_PLCtoMES_ProcData.stsAOI,BIW_S005RB02_PLCtoMES_ProcData.pinReq,BIW_S005RB02_PLCtoMES_ProcData.poutHMI,BIW_S005RB02_PLCtoMES_ProcData.poutCmn,BIW_S005RB02_PLCtoMES_ProcData.poutLastCmn,BIW_S005RB02_PLCtoMES_ProcData.stsDiag,BIW_XXX_S005RB02_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S005RB02_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S010RB01_PLCtoMES_ProcData.stsAOI,BIW_S010RB01_PLCtoMES_ProcData.pinReq,BIW_S010RB01_PLCtoMES_ProcData.poutHMI,BIW_S010RB01_PLCtoMES_ProcData.poutCmn,BIW_S010RB01_PLCtoMES_ProcData.poutLastCmn,BIW_S010RB01_PLCtoMES_ProcData.stsDiag,BIW_XXX_S010RB01_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S010RB01_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S010RB02_PLCtoMES_ProcData.stsAOI,BIW_S010RB02_PLCtoMES_ProcData.pinReq,BIW_S010RB02_PLCtoMES_ProcData.poutHMI,BIW_S010RB02_PLCtoMES_ProcData.poutCmn,BIW_S010RB02_PLCtoMES_ProcData.poutLastCmn,BIW_S010RB02_PLCtoMES_ProcData.stsDiag,BIW_XXX_S010RB02_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S010RB02_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S015RB01_PLCtoMES_ProcData.stsAOI,BIW_S015RB01_PLCtoMES_ProcData.pinReq,BIW_S015RB01_PLCtoMES_ProcData.poutHMI,BIW_S015RB01_PLCtoMES_ProcData.poutCmn,BIW_S015RB01_PLCtoMES_ProcData.poutLastCmn,BIW_S015RB01_PLCtoMES_ProcData.stsDiag,BIW_XXX_S015RB01_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S015RB01_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S015RB02_PLCtoMES_ProcData.stsAOI,BIW_S015RB02_PLCtoMES_ProcData.pinReq,BIW_S015RB02_PLCtoMES_ProcData.poutHMI,BIW_S015RB02_PLCtoMES_ProcData.poutCmn,BIW_S015RB02_PLCtoMES_ProcData.poutLastCmn,BIW_S015RB02_PLCtoMES_ProcData.stsDiag,BIW_XXX_S015RB02_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S015RB02_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S018RB01_PLCtoMES_ProcData.stsAOI,BIW_S018RB01_PLCtoMES_ProcData.pinReq,BIW_S018RB01_PLCtoMES_ProcData.poutHMI,BIW_S018RB01_PLCtoMES_ProcData.poutCmn,BIW_S018RB01_PLCtoMES_ProcData.poutLastCmn,BIW_S018RB01_PLCtoMES_ProcData.stsDiag,BIW_XXX_S018RB01_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S018RB01_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S018RB02_PLCtoMES_ProcData.stsAOI,BIW_S018RB02_PLCtoMES_ProcData.pinReq,BIW_S018RB02_PLCtoMES_ProcData.poutHMI,BIW_S018RB02_PLCtoMES_ProcData.poutCmn,BIW_S018RB02_PLCtoMES_ProcData.poutLastCmn,BIW_S018RB02_PLCtoMES_ProcData.stsDiag,BIW_XXX_S018RB02_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S018RB02_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S019RB01_PLCtoMES_ProcData.stsAOI,BIW_S019RB01_PLCtoMES_ProcData.pinReq,BIW_S019RB01_PLCtoMES_ProcData.poutHMI,BIW_S019RB01_PLCtoMES_ProcData.poutCmn,BIW_S019RB01_PLCtoMES_ProcData.poutLastCmn,BIW_S019RB01_PLCtoMES_ProcData.stsDiag,BIW_XXX_S019RB01_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S019RB01_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S020RB01_PLCtoMES_ProcData.stsAOI,BIW_S020RB01_PLCtoMES_ProcData.pinReq,BIW_S020RB01_PLCtoMES_ProcData.poutHMI,BIW_S020RB01_PLCtoMES_ProcData.poutCmn,BIW_S020RB01_PLCtoMES_ProcData.poutLastCmn,BIW_S020RB01_PLCtoMES_ProcData.stsDiag,BIW_XXX_S020RB01_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S020RB01_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S020RB02_PLCtoMES_ProcData.stsAOI,BIW_S020RB02_PLCtoMES_ProcData.pinReq,BIW_S020RB02_PLCtoMES_ProcData.poutHMI,BIW_S020RB02_PLCtoMES_ProcData.poutCmn,BIW_S020RB02_PLCtoMES_ProcData.poutLastCmn,BIW_S020RB02_PLCtoMES_ProcData.stsDiag,BIW_XXX_S020RB02_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S020RB02_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S020RB03_PLCtoMES_ProcData.stsAOI,BIW_S020RB03_PLCtoMES_ProcData.pinReq,BIW_S020RB03_PLCtoMES_ProcData.poutHMI,BIW_S020RB03_PLCtoMES_ProcData.poutCmn,BIW_S020RB03_PLCtoMES_ProcData.poutLastCmn,BIW_S020RB03_PLCtoMES_ProcData.stsDiag,BIW_XXX_S020RB03_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S020RB03_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S020RB04_PLCtoMES_ProcData.stsAOI,BIW_S020RB04_PLCtoMES_ProcData.pinReq,BIW_S020RB04_PLCtoMES_ProcData.poutHMI,BIW_S020RB04_PLCtoMES_ProcData.poutCmn,BIW_S020RB04_PLCtoMES_ProcData.poutLastCmn,BIW_S020RB04_PLCtoMES_ProcData.stsDiag,BIW_XXX_S020RB04_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S020RB04_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S020RB05_PLCtoMES_ProcData.stsAOI,BIW_S020RB05_PLCtoMES_ProcData.pinReq,BIW_S020RB05_PLCtoMES_ProcData.poutHMI,BIW_S020RB05_PLCtoMES_ProcData.poutCmn,BIW_S020RB05_PLCtoMES_ProcData.poutLastCmn,BIW_S020RB05_PLCtoMES_ProcData.stsDiag,BIW_XXX_S020RB05_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S020RB05_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S020RB06_PLCtoMES_ProcData.stsAOI,BIW_S020RB06_PLCtoMES_ProcData.pinReq,BIW_S020RB06_PLCtoMES_ProcData.poutHMI,BIW_S020RB06_PLCtoMES_ProcData.poutCmn,BIW_S020RB06_PLCtoMES_ProcData.poutLastCmn,BIW_S020RB06_PLCtoMES_ProcData.stsDiag,BIW_XXX_S020RB06_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S020RB06_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S030RB01_PLCtoMES_ProcData.stsAOI,BIW_S030RB01_PLCtoMES_ProcData.pinReq,BIW_S030RB01_PLCtoMES_ProcData.poutHMI,BIW_S030RB01_PLCtoMES_ProcData.poutCmn,BIW_S030RB01_PLCtoMES_ProcData.poutLastCmn,BIW_S030RB01_PLCtoMES_ProcData.stsDiag,BIW_XXX_S030RB01_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S030RB01_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S030RB02_PLCtoMES_ProcData.stsAOI,BIW_S030RB02_PLCtoMES_ProcData.pinReq,BIW_S030RB02_PLCtoMES_ProcData.poutHMI,BIW_S030RB02_PLCtoMES_ProcData.poutCmn,BIW_S030RB02_PLCtoMES_ProcData.poutLastCmn,BIW_S030RB02_PLCtoMES_ProcData.stsDiag,BIW_XXX_S030RB02_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S030RB02_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S040RB01_PLCtoMES_ProcData.stsAOI,BIW_S040RB01_PLCtoMES_ProcData.pinReq,BIW_S040RB01_PLCtoMES_ProcData.poutHMI,BIW_S040RB01_PLCtoMES_ProcData.poutCmn,BIW_S040RB01_PLCtoMES_ProcData.poutLastCmn,BIW_S040RB01_PLCtoMES_ProcData.stsDiag,BIW_XXX_S040RB01_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S040RB01_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S040RB02_PLCtoMES_ProcData.stsAOI,BIW_S040RB02_PLCtoMES_ProcData.pinReq,BIW_S040RB02_PLCtoMES_ProcData.poutHMI,BIW_S040RB02_PLCtoMES_ProcData.poutCmn,BIW_S040RB02_PLCtoMES_ProcData.poutLastCmn,BIW_S040RB02_PLCtoMES_ProcData.stsDiag,BIW_XXX_S040RB02_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S040RB02_LEFT_PLCtoMES_PDCA.pout_XMIT);
				RC: "#########################$N"
				    "$N"
				    "STATIONS$N"
				    "$N"
				    "#########################";
				N: vMES_v0100(BIW_S010TL1_PLCtoMES_ProcData.stsAOI,BIW_S010TL1_PLCtoMES_ProcData.pinReq,BIW_S010TL1_PLCtoMES_ProcData.poutHMI,BIW_S010TL1_PLCtoMES_ProcData.poutCmn,BIW_S010TL1_PLCtoMES_ProcData.poutLastCmn,BIW_S010TL1_PLCtoMES_ProcData.stsDiag,BIW_XXX_S010TL1_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S010TL1_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S015RT1_PLCtoMES_ProcData.stsAOI,BIW_S015RT1_PLCtoMES_ProcData.pinReq,BIW_S015RT1_PLCtoMES_ProcData.poutHMI,BIW_S015RT1_PLCtoMES_ProcData.poutCmn,BIW_S015RT1_PLCtoMES_ProcData.poutLastCmn,BIW_S015RT1_PLCtoMES_ProcData.stsDiag,BIW_XXX_S015RT1_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S015RT1_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S019TO1_PLCtoMES_ProcData.stsAOI,BIW_S019TO1_PLCtoMES_ProcData.pinReq,BIW_S019TO1_PLCtoMES_ProcData.poutHMI,BIW_S019TO1_PLCtoMES_ProcData.poutCmn,BIW_S019TO1_PLCtoMES_ProcData.poutLastCmn,BIW_S019TO1_PLCtoMES_ProcData.stsDiag,BIW_XXX_S019TO1_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S019TO1_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S020TL1_PLCtoMES_ProcData.stsAOI,BIW_S020TL1_PLCtoMES_ProcData.pinReq,BIW_S020TL1_PLCtoMES_ProcData.poutHMI,BIW_S020TL1_PLCtoMES_ProcData.poutCmn,BIW_S020TL1_PLCtoMES_ProcData.poutLastCmn,BIW_S020TL1_PLCtoMES_ProcData.stsDiag,BIW_XXX_S020TL1_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S020TL1_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S050TL1_PLCtoMES_ProcData.stsAOI,BIW_S050TL1_PLCtoMES_ProcData.pinReq,BIW_S050TL1_PLCtoMES_ProcData.poutHMI,BIW_S050TL1_PLCtoMES_ProcData.poutCmn,BIW_S050TL1_PLCtoMES_ProcData.poutLastCmn,BIW_S050TL1_PLCtoMES_ProcData.stsDiag,BIW_XXX_S050TL1_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S050TL1_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S050TL2_PLCtoMES_ProcData.stsAOI,BIW_S050TL2_PLCtoMES_ProcData.pinReq,BIW_S050TL2_PLCtoMES_ProcData.poutHMI,BIW_S050TL2_PLCtoMES_ProcData.poutCmn,BIW_S050TL2_PLCtoMES_ProcData.poutLastCmn,BIW_S050TL2_PLCtoMES_ProcData.stsDiag,BIW_XXX_S050TL2_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S050TL2_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S050TL3_PLCtoMES_ProcData.stsAOI,BIW_S050TL3_PLCtoMES_ProcData.pinReq,BIW_S050TL3_PLCtoMES_ProcData.poutHMI,BIW_S050TL3_PLCtoMES_ProcData.poutCmn,BIW_S050TL3_PLCtoMES_ProcData.poutLastCmn,BIW_S050TL3_PLCtoMES_ProcData.stsDiag,BIW_XXX_S050TL3_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S050TL3_LEFT_PLCtoMES_PDCA.pout_XMIT)vMES_v0100(BIW_S050TL4_PLCtoMES_ProcData.stsAOI,BIW_S050TL4_PLCtoMES_ProcData.pinReq,BIW_S050TL4_PLCtoMES_ProcData.poutHMI,BIW_S050TL4_PLCtoMES_ProcData.poutCmn,BIW_S050TL4_PLCtoMES_ProcData.poutLastCmn,BIW_S050TL4_PLCtoMES_ProcData.stsDiag,BIW_XXX_S050TL4_LEFT_PLCtoMES_PDCA.pin_RCV,BIW_XXX_S050TL4_LEFT_PLCtoMES_PDCA.pout_XMIT);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S001CNV1 (Class := Standard,
	                  MAIN := "Main",
	                  MODE := 0,
	                  DisableFlag := 0,
	                  UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE B00_NetworkDiag 
				RC: "************************************************************$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "CNV01 Ethernet Devices Diagnostic$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "VM $N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: XIC(S001CNV1.Int.VM1Installed)GSV(Module,S001CNV1VM1,EntryStatus,S001CNV1.Int.VM1.ENet.EntryStatus)[EQU(16#4000,S001CNV1.Int.VM1.ENet.EntryStatus) OTE(S001CNV1.Int.VM1.ENet.Running) ,EQU(16#6000,S001CNV1.Int.VM1.ENet.EntryStatus) OTE(S001CNV1.Int.VM1.ENet.Inhibited) ,EQU(16#1000,S001CNV1.Int.VM1.ENet.EntryStatus) OTE(S001CNV1.Int.VM1.ENet.Fault) ];
				RC: "************************************************************$N"
				    "VM $N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: XIC(S001CNV1.Int.VM2Installed)GSV(Module,S001CNV1VM2,EntryStatus,S001CNV1.Int.VM2.ENet.EntryStatus)[EQU(16#4000,S001CNV1.Int.VM2.ENet.EntryStatus) OTE(S001CNV1.Int.VM2.ENet.Running) ,EQU(16#6000,S001CNV1.Int.VM2.ENet.EntryStatus) OTE(S001CNV1.Int.VM2.ENet.Inhibited) ,EQU(16#1000,S001CNV1.Int.VM2.ENet.EntryStatus) OTE(S001CNV1.Int.VM2.ENet.Fault) ];
				RC: "************************************************************$N"
				    "VM $N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: XIC(S001CNV1.Int.VM3Installed)GSV(Module,S001CNV1VM3,EntryStatus,S001CNV1.Int.VM3.ENet.EntryStatus)[EQU(16#4000,S001CNV1.Int.VM3.ENet.EntryStatus) OTE(S001CNV1.Int.VM3.ENet.Running) ,EQU(16#6000,S001CNV1.Int.VM3.ENet.EntryStatus) OTE(S001CNV1.Int.VM3.ENet.Inhibited) ,EQU(16#1000,S001CNV1.Int.VM3.ENet.EntryStatus) OTE(S001CNV1.Int.VM3.ENet.Fault) ];
				RC: "************************************************************$N"
				    "VM $N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: XIC(S001CNV1.Int.VM4Installed)GSV(Module,S001CNV1VM4,EntryStatus,S001CNV1.Int.VM4.ENet.EntryStatus)[EQU(16#4000,S001CNV1.Int.VM4.ENet.EntryStatus) OTE(S001CNV1.Int.VM4.ENet.Running) ,EQU(16#6000,S001CNV1.Int.VM4.ENet.EntryStatus) OTE(S001CNV1.Int.VM4.ENet.Inhibited) ,EQU(16#1000,S001CNV1.Int.VM4.ENet.EntryStatus) OTE(S001CNV1.Int.VM4.ENet.Fault) ];
				RC: "************************************************************$N"
				    "VM $N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: XIC(S001CNV1.Int.VM5Installed)GSV(Module,S001CNV1VM5,EntryStatus,S001CNV1.Int.VM5.ENet.EntryStatus)[EQU(16#4000,S001CNV1.Int.VM5.ENet.EntryStatus) OTE(S001CNV1.Int.VM5.ENet.Running) ,EQU(16#6000,S001CNV1.Int.VM5.ENet.EntryStatus) OTE(S001CNV1.Int.VM5.ENet.Inhibited) ,EQU(16#1000,S001CNV1.Int.VM5.ENet.EntryStatus) OTE(S001CNV1.Int.VM5.ENet.Fault) ];
		END_ROUTINE

		ROUTINE B01_MapInputs 
				RC: "************************************************************$N"
				    "Conveyor$N"
				    "$N"
				    "Mapping Inputs Editable IO Blocks$N"
				    "Delete any unused VM  and custom with active VMs$N"
				    "************************************************************";
				N: NOP();
				N: [OTL(S001CNV1.Int.VM1Installed) OTL(S001CNV1.Int.VM2Installed) OTL(S001CNV1.Int.VM3Installed) ,OTL(S001CNV1.Int.VM4Installed) OTL(S001CNV1.Int.VM5Installed) OTU(S001CNV1.Int.VM6Installed) ];
				N: [XIC(S001CNV1.Int.VM1.ENet.Running) CPS(S001CNV1VM1:I.Data[0],S001CNV1.Int.VM1.I1,1) CPS(S001CNV1VM1:I.Data[0],S001CNV1.Int.VM1.I1,1) ,XIO(S001CNV1.Int.VM1.ENet.Running) CLR(S001CNV1.Int.VM1.I1) ];
				N: [XIC(S001CNV1.Int.VM2.ENet.Running) CPS(S001CNV1VM2:I.Data[0],S001CNV1.Int.VM2.I1,1) ,XIO(S001CNV1.Int.VM2.ENet.Running) CLR(S001CNV1.Int.VM2.I1) ];
				N: [XIC(S001CNV1.Int.VM3.ENet.Running) CPS(S001CNV1VM3:I.Data[0],S001CNV1.Int.VM3.I1,1) CPS(S001CNV1VM3:I.Data[2],S001CNV1.Int.VM3.I2,1) ,XIO(S001CNV1.Int.VM3.ENet.Running) CLR(S001CNV1.Int.VM3.I1) ];
				N: [XIC(S001CNV1.Int.VM4.ENet.Running) CPS(S001CNV1VM4:I.Data[0],S001CNV1.Int.VM4.I1,1) ,XIO(S001CNV1.Int.VM4.ENet.Running) CLR(S001CNV1.Int.VM4.I1) ];
				N: [XIC(S001CNV1.Int.VM5.ENet.Running) CPS(S001CNV1VM5:I.Data[0],S001CNV1.Int.VM5.I1,1) CPS(S001CNV1VM5:I.Data[2],S001CNV1.Int.VM5.I2,1) ,XIO(S001CNV1.Int.VM5.ENet.Running) CLR(S001CNV1.Int.VM5.I1) ];
				N: [XIC(S001CNV1.Int.VM1.ENet.Running) ,XIO(S001CNV1.Int.VM1Installed) ][XIC(S001CNV1.Int.VM2.ENet.Running) ,XIO(S001CNV1.Int.VM2Installed) ][XIC(S001CNV1.Int.VM3.ENet.Running) ,XIO(S001CNV1.Int.VM3Installed) ][XIC(S001CNV1.Int.VM4.ENet.Running) ,XIO(S001CNV1.Int.VM4Installed) ][XIC(S001CNV1.Int.VM5.ENet.Running) ,XIO(S001CNV1.Int.VM5Installed) ][XIC(S001CNV1.Int.VM6.ENet.Running) ,XIO(S001CNV1.Int.VM6Installed) ]OTE(S001CNV1.Int.CommPPOk)OTE(S001CNV1.Int.CommAirOk)OTE(S001CNV1.Int.CommOk);
				RC: "************************************************************$N"
				    "Conveyor$N"
				    "Permissives to Enable Conveyor  Functionality$N"
				    "$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Conveyor$N"
				    "Setup Load and Unload PwrEnld depent if both is in the same safety zone$N"
				    " $N"
				    "$N"
				    "************************************************************";
				N: [XIC(S001CNV1Sfty.All_Estop_OK) OTE(S001CNV1.Int.All_EStops_OK) ,XIC(S001CNV1Sfty.All_DiscSwitch_OK) OTE(S001CNV1.Int.All_DiscSwitch_OK) ,XIC(S001CNV1Sfty.PowerEnbld) OTE(S001CNV1.Unld.PowerEnbld) OTE(S001CNV1.Load.PowerEnbld) ,XIC(S001CNV1Sfty.All_Zone_LC_OK) OTE(S001CNV1.Int.All_Zone_LC_OK) ,XIC(S001CNV1Sfty.All_LC_OK) OTE(S001CNV1.Int.All_LC_OK) ,XIC(S001CNV1Sfty.VFD1_RdytoRun) OTE(S001CNV1.Int.RdyToRun) ];
				RC: "************************************************************$N"
				    "Conveyor$N"
				    "Chain Tension Ok Monitoring$N"
				    "*Replace Edit.Bit for the correct input signal$N"
				    "$N"
				    "************************************************************";
				N: XIC(S001CNV1.Int.CommOk)[XIC(Edit.Bit) OTE(S001CNV1.M.RHChainTensionOK) ,XIC(Edit.Bit) OTE(S001CNV1.M.LHChainTensionOK) ];
		END_ROUTINE

		ROUTINE C00_Conveyor_Motor 
				RC: "************************************************************$N"
				    "ArmorStart ST1$N"
				    "************************************************************";
				N: NOP();
				N: [XIC(S001CNV1.Int.All_EStops_OK) OTE(S001CNV1.M.RunIntlk.Inp_Intlk00) ,XIC(S001CNV1.Int.All_DiscSwitch_OK) OTE(S001CNV1.M.RunIntlk.Inp_Intlk01) ,XIC(S001CNV1.Load.PowerEnbld) OTE(S001CNV1.M.RunIntlk.Inp_Intlk02) ,XIC(S001CNV1.Unld.PowerEnbld) OTE(S001CNV1.M.RunIntlk.Inp_Intlk03) ,XIC(S001CNV1.Int.All_Zone_LC_OK) OTE(S001CNV1.M.RunIntlk.Inp_Intlk04) ,XIC(S001CNV1.Int.All_LC_OK) OTE(S001CNV1.M.RunIntlk.Inp_Intlk05) ,XIC(S001CNV1.Int.RdyToRun) OTE(S001CNV1.M.RunIntlk.Inp_Intlk06) ,XIC(S001CNV1.M.RHChainTensionOK) OTE(S001CNV1.M.RunIntlk.Inp_Intlk07) ,XIC(S001CNV1.M.LHChainTensionOK) OTE(S001CNV1.M.RunIntlk.Inp_Intlk08) ,P_Intlk(S001CNV1.M.RunIntlk) ];
				N: XIC(S001CNV1.M.RunIntlk.Sts_IntlkOK)XIO(S001CNV1.M.ResPwrSvr)TON(S001CNV1.M.PwrSvrTmr,?,?);
				N: [XIO(S001CNV1.Load.RbtsClr.Sts_PermOK) ,[XIO(S001CNV1.Unld.RbtsClr.Sts_PermOK) ,XIO(S001CNV1.Unld.RbtClr2) ,XIO(S001CNV1.Unld.RbtClr3) ] ,XIC(Z005_040.AnyFltResetPB) XIO(S001CNV1.M.RunningFwd) ][OTE(S001CNV1.M.ResPwrSvr) ,XIC(S001CNV1.M.ResPwrSvr) RES(S001CNV1.M.PwrSvrTmr) ];
				N: XIO(S001CNV1VFD1:I.Ready)XIO(S001CNV1VFD1:I.WarningPresent)XIO(S001CNV1VFD1:I.TripPresent)OTE(S001CNV1.M.RunEnbld);
				N: [OTE(S001CNV1.M.PermFwd.Inp_Perm00) ,XIC(S001CNV1.Load.PowerEnbld) OTE(S001CNV1.M.PermFwd.Inp_Perm01) ,XIC(S001CNV1.Unld.PowerEnbld) OTE(S001CNV1.M.PermFwd.Inp_Perm02) ,XIO(S001CNV1.Int.CommOk) OTE(S001CNV1.M.PermFwd.Inp_Perm03) ,XIC(S001CNV1.Load.AirOn) OTE(S001CNV1.M.PermFwd.Inp_Perm04) ,XIC(S001CNV1.Unld.AirOn) OTE(S001CNV1.M.PermFwd.Inp_Perm05) ,XIO(S001CNV1.Load.ActuatorFault) OTE(S001CNV1.M.PermFwd.Inp_Perm06) ,XIO(S001CNV1.Unld.ActuatorFault) OTE(S001CNV1.M.PermFwd.Inp_Perm07) ,XIO(S001CNV1.M.RunningRev) OTE(S001CNV1.M.PermFwd.Inp_Perm08) ,XIC(S001CNV1.M.RunEnbld) OTE(S001CNV1.M.PermFwd.Inp_Perm09) ,XIC(S001CNV1.M.PwrSvrTmr.DN) OTE(S001CNV1.M.PermFwd.Inp_Perm10) ,P_Perm(S001CNV1.M.PermFwd) ];
				N: [OTE(S001CNV1.M.PermRev.Inp_Perm00) ,XIC(S001CNV1.Load.PowerEnbld) OTE(S001CNV1.M.PermRev.Inp_Perm01) ,XIC(S001CNV1.Unld.PowerEnbld) OTE(S001CNV1.M.PermRev.Inp_Perm02) ,XIO(S001CNV1.M.RunningFwd) OTE(S001CNV1.M.PermRev.Inp_Perm03) ,XIC(S001CNV1.M.RunEnbld) OTE(S001CNV1.M.PermRev.Inp_Perm04) ,XIC(S001CNV1.M.PwrSvrTmr.DN) OTE(S001CNV1.M.PermRev.Inp_Perm05) ,P_Perm(S001CNV1.M.PermRev) ];
				RC: "Map VFD1 Outputs";
				N: XIC(S001CNV1.M.RunIntlk.Sts_IntlkOK)[[XIC(S001CNV1.Load.AutoSel) XIC(S001CNV1.Unld.AutoMode) ,XIC(S001CNV1.Load.ManualMode) XIC(S001CNV1.Unld.ManualMode) XIC(S001CNV1.M.JogFwdPB) ] XIC(S001CNV1.M.PermFwd.Sts_PermOK) OTE(S001CNV1VFD1:O.RunForward) ,[XIC(S001CNV1.Load.AutoSel) XIC(S001CNV1.Unld.AutoMode) ,XIC(S001CNV1.Load.ManualMode) XIC(S001CNV1.Unld.ManualMode) XIC(S001CNV1.M.JogRevPB) ] XIC(S001CNV1.M.PermRev.Sts_PermOK) OTE(S001CNV1VFD1:O.RunReverse) ];
				N: [XIC(S001CNV1VFD1:I.RunningForward) OTE(S001CNV1.M.RunningFwd) ,XIC(S001CNV1VFD1:I.RunningReverse) OTE(S001CNV1.M.RunningRev) ];
		END_ROUTINE

		ROUTINE D00_Motion 
				RC: "************************************************************$N"
				    "CONVEYOR UNITS MAP$N"
				    "$N"
				    "LOAD STOP$N"
				    "************************************************************$N"
				    "$N"
				    "Map Load Stop Inputs$N"
				    "*Replace Edit.Bit for the correct input signal$N"
				    " Example CNV01.sta.VM1.I1.XX Replace for the correct input signal";
				N: [OTE(S001CNV1.Act[1].Installed.0) ,XIC(Edit.Bit) XIC(S001CNV1.Int.VM1.I1.1) OTE(S001CNV1.Act[1].Work.Pxs.0) ,XIC(Edit.Bit) XIC(S001CNV1.Int.VM1.I1.0) OTE(S001CNV1.Act[1].Home.Pxs.0) ];
				RC: "************************************************************$N"
				    "Actuator Common Interlock$N"
				    "Close/Open$N"
				    "************************************************************";
				N: [XIC(S001CNV1Sfty.PowerEnbld) OTE(S001CNV1.Act[1].ActMtnIntlk.Inp_Intlk00) ,XIC(S001CNV1.Int.All_Zone_LC_OK) OTE(S001CNV1.Act[1].ActMtnIntlk.Inp_Intlk01) ,XIC(S001CNV1.Int.All_LC_OK) OTE(S001CNV1.Act[1].ActMtnIntlk.Inp_Intlk02) ,XIC(S001CNV1.Load.AirOn) OTE(S001CNV1.Act[1].ActMtnIntlk.Inp_Intlk03) ,P_Intlk(S001CNV1.Act[1].ActMtnIntlk) ,XIC(S001CNV1.Act[1].ActMtnIntlk.Sts_IntlkOK) OTE(S001CNV1.Act[1].ActMtnEnbld) ];
				RC: "***************************************************************************$N"
				    "Replace:$N"
				    "--| |-- $QEdit.Bit$Q with work position req before to move $N"
				    "***************************************************************************";
				N: XIC(S001CNV1.Act[1].ActMtnEnbld)XIC(S001CNV1.Load.RbtsClr.Sts_PermOK)XIC(Edit.Bit)OTE(S001CNV1.Act[1].Work.Clr);
				N: [XIC(S001CNV1.Load.AutoSel) XIC(S001CNV1.Pallet[1].PalletLivingMem) XIO(S001CNV1.Act[1].Home.Comp) OTE(S001CNV1.Act[1].Work.AutoCmd) ,XIC(S001CNV1.Load.ManualMode) XIC(S001CNV1.Act[1].ocmdWork) OTE(S001CNV1.Act[1].Work.ManualCmdPB) ];
				N: XIC(S001CNV1.Act[1].Work.Comp)OTE(S001CNV1.Act[1].Work.Seal);
				RC: "***************************************************************************$N"
				    "Actuador Advance HMI Indicator$N"
				    "***************************************************************************";
				N: [XIC(S001CNV1.Act[1].Work.Comp) ,[XIC(S001CNV1.Load.ManualMode) XIC(S001CNV1.Act[1].Work.Clr) ,XIC(S001CNV1.Act[1].Work.Out) ] XIC(Status.FlasherLow) ]OTE(S001CNV1.Act[1].stsWork);
				RC: "***************************************************************************$N"
				    "Replace:$N"
				    "--| |-- $QEdit.Bit$Q with home pos or req before to move $N"
				    "***************************************************************************";
				N: XIC(S001CNV1.Act[1].ActMtnEnbld)XIC(S001CNV1.Load.RbtsClr.Sts_PermOK)XIO(S001CNV1.Pallet[1].PalletEmptyRls)XIO(S001CNV1.Pallet[1].PalletClear)XIO(S001CNV1.Pallet[1].PalletLivingMem)XIC(S001CNV1.Pallet[1].PalletPres)XIO(S001CNV1.Pallet[1].NoStopFault)XIC(Edit.Bit)OTE(S001CNV1.Act[1].Home.Clr);
				N: [XIC(S001CNV1.Load.AutoSel) XIO(S001CNV1.M.ResPwrSvr) [XIC(S001CNV1.Pallet[1].GoodPalletPres) XIC(S001CNV1.Load.Comp1) XIC(S001CNV1.Load.AllPPandSR) ,XIO(S001CNV1.Pallet[1].GoodPalletPres) XIC(S001CNV1.Pallet[1].BadPalletPres) ] OTE(S001CNV1.Act[1].Home.AutoCmd) ,XIC(S001CNV1.Load.ManualMode) XIC(S001CNV1.Act[1].ocmdHome) OTE(S001CNV1.Act[1].Home.ManualCmdPB) ];
				N: XIC(S001CNV1.Act[1].Home.Comp)OTE(S001CNV1.Act[1].Home.Seal);
				RC: "***************************************************************************$N"
				    "Actuador Return HMI Indicator$N"
				    "***************************************************************************";
				N: [XIC(S001CNV1.Act[1].Home.Comp) ,[XIC(S001CNV1.Load.ManualMode) XIC(S001CNV1.Act[1].Home.Clr) ,XIC(S001CNV1.Act[1].Home.Out) ] XIC(Status.FlasherLow) ]OTE(S001CNV1.Act[1].stsHome);
				RC: "************************************************************$N"
				    "CONVEYOR UNITS MAP$N"
				    "PRELOAD STOP$N"
				    "************************************************************$N"
				    "$N"
				    "Map Load Stop Inputs$N"
				    "*Replace Edit.Bit for the correct input signal$N"
				    " Example CNV01.sta.VM1.I1.XX Replace for the correct input signal";
				N: [OTE(S001CNV1.Act[2].Installed.0) ,XIC(Edit.Bit) XIC(S001CNV1.Int.VM1.I1.1) OTE(S001CNV1.Act[2].Work.Pxs.0) ,XIC(Edit.Bit) XIC(S001CNV1.Int.VM1.I1.0) OTE(S001CNV1.Act[2].Home.Pxs.0) ];
				RC: "************************************************************$N"
				    "Actuator Common Interlock$N"
				    "Close/Open$N"
				    "************************************************************";
				N: [XIC(S001CNV1Sfty.PowerEnbld) OTE(S001CNV1.Act[2].ActMtnIntlk.Inp_Intlk00) ,XIC(S001CNV1.Int.All_Zone_LC_OK) OTE(S001CNV1.Act[2].ActMtnIntlk.Inp_Intlk01) ,XIC(S001CNV1.Int.All_LC_OK) OTE(S001CNV1.Act[2].ActMtnIntlk.Inp_Intlk02) ,XIC(S001CNV1.Load.AirOn) OTE(S001CNV1.Act[2].ActMtnIntlk.Inp_Intlk03) ,P_Intlk(S001CNV1.Act[2].ActMtnIntlk) ,XIC(S001CNV1.Act[2].ActMtnIntlk.Sts_IntlkOK) OTE(S001CNV1.Act[2].ActMtnEnbld) ];
				RC: "***************************************************************************$N"
				    "Replace:$N"
				    "--| |-- $QEdit.Bit$Q with work position req before to move $N"
				    "***************************************************************************";
				N: XIC(S001CNV1.Act[2].ActMtnEnbld)XIC(S001CNV1.Load.RbtsClr.Sts_PermOK)XIC(Edit.Bit)OTE(S001CNV1.Act[2].Work.Clr);
				N: [XIC(S001CNV1.Load.AutoSel) XIC(S001CNV1.Pallet[2].PalletLivingMem) XIO(S001CNV1.Act[2].Home.Comp) OTE(S001CNV1.Act[2].Work.AutoCmd) ,XIC(S001CNV1.Load.ManualMode) XIC(S001CNV1.Act[2].ocmdWork) OTE(S001CNV1.Act[2].Work.ManualCmdPB) ];
				N: XIC(S001CNV1.Act[2].Work.Comp)OTE(S001CNV1.Act[2].Work.Seal);
				RC: "***************************************************************************$N"
				    "Actuador Advance HMI Indicator$N"
				    "***************************************************************************";
				N: [XIC(S001CNV1.Act[2].Work.Comp) ,[XIC(S001CNV1.Load.ManualMode) XIC(S001CNV1.Act[2].Work.Clr) ,XIC(S001CNV1.Act[2].Work.Out) ] XIC(Status.FlasherLow) ]OTE(S001CNV1.Act[2].stsWork);
				RC: "***************************************************************************$N"
				    "Replace:$N"
				    "--| |-- $QEdit.Bit$Q with home pos or req before to move $N"
				    "***************************************************************************";
				N: XIC(S001CNV1.Act[2].ActMtnEnbld)XIC(S001CNV1.Load.RbtsClr.Sts_PermOK)XIO(S001CNV1.Pallet[2].PalletEmptyRls)XIO(S001CNV1.Pallet[2].PalletClear)XIO(S001CNV1.Pallet[2].PalletLivingMem)XIC(S001CNV1.Pallet[2].PalletPres)XIO(S001CNV1.Pallet[2].NoStopFault)XIC(Edit.Bit)OTE(S001CNV1.Act[2].Home.Clr);
				N: [XIC(S001CNV1.Load.AutoSel) XIO(S001CNV1.M.ResPwrSvr) [XIC(S001CNV1.Pallet[2].GoodPalletPres) ,XIO(S001CNV1.Pallet[12].GoodPalletPres) XIC(S001CNV1.Pallet[12].BadPalletPres) ] OTE(S001CNV1.Act[2].Home.AutoCmd) ,XIC(S001CNV1.Load.ManualMode) XIC(S001CNV1.Act[2].ocmdHome) OTE(S001CNV1.Act[2].Home.ManualCmdPB) ];
				N: XIC(S001CNV1.Act[2].Home.Comp)OTE(S001CNV1.Act[2].Home.Seal);
				RC: "***************************************************************************$N"
				    "Actuador Return HMI Indicator$N"
				    "***************************************************************************";
				N: [XIC(S001CNV1.Act[2].Home.Comp) ,[XIC(S001CNV1.Load.ManualMode) XIC(S001CNV1.Act[2].Home.Clr) ,XIC(S001CNV1.Act[2].Home.Out) ] XIC(Status.FlasherLow) ]OTE(S001CNV1.Act[2].stsHome);
				RC: "************************************************************$N"
				    "CONVEYOR UNITS MAP$N"
				    "UNLOAD STOP$N"
				    "************************************************************$N"
				    "$N"
				    "Map Load Stop Inputs$N"
				    "*Replace Edit.Bit for the correct input signal$N"
				    " Example CNV01.sta.VM1.I1.XX Replace for the correct input signal";
				N: [OTE(S001CNV1.Act[11].Installed.0) ,XIC(Edit.Bit) XIC(S001CNV1.Int.VM1.I1.1) OTE(S001CNV1.Act[11].Work.Pxs.0) ,XIC(Edit.Bit) XIC(S001CNV1.Int.VM1.I1.0) OTE(S001CNV1.Act[11].Home.Pxs.0) ];
				RC: "************************************************************$N"
				    "Actuator Common Interlock$N"
				    "Close/Open$N"
				    "************************************************************";
				N: [XIC(S001CNV1Sfty.PowerEnbld) OTE(S001CNV1.Act[11].ActMtnIntlk.Inp_Intlk00) ,XIC(S001CNV1.Int.All_Zone_LC_OK) OTE(S001CNV1.Act[11].ActMtnIntlk.Inp_Intlk01) ,XIC(S001CNV1.Int.All_LC_OK) OTE(S001CNV1.Act[11].ActMtnIntlk.Inp_Intlk02) ,XIC(S001CNV1.Unld.AirOn) OTE(S001CNV1.Act[11].ActMtnIntlk.Inp_Intlk03) ,P_Intlk(S001CNV1.Act[11].ActMtnIntlk) ,XIC(S001CNV1.Act[11].ActMtnIntlk.Sts_IntlkOK) OTE(S001CNV1.Act[11].ActMtnEnbld) ];
				RC: "***************************************************************************$N"
				    "Replace:$N"
				    "--| |-- $QEdit.Bit$Q with work position req before to move $N"
				    "***************************************************************************";
				N: XIC(S001CNV1.Act[11].ActMtnEnbld)XIC(S001CNV1.Unld.RbtsClr.Sts_PermOK)XIC(Edit.Bit)OTE(S001CNV1.Act[11].Work.Clr);
				N: [XIC(S001CNV1.Unld.AutoMode) XIC(S001CNV1.Pallet[11].PalletLivingMem) XIO(S001CNV1.Act[11].Home.Comp) OTE(S001CNV1.Act[11].Work.AutoCmd) ,XIC(S001CNV1.Unld.ManualMode) XIC(S001CNV1.Act[11].ocmdWork) OTE(S001CNV1.Act[11].Work.ManualCmdPB) ];
				N: XIC(S001CNV1.Act[11].Work.Comp)OTE(S001CNV1.Act[11].Work.Seal);
				RC: "***************************************************************************$N"
				    "Actuador Advance HMI Indicator$N"
				    "***************************************************************************";
				N: [XIC(S001CNV1.Act[11].Work.Comp) ,[XIC(S001CNV1.Unld.ManualMode) XIC(S001CNV1.Act[11].Work.Clr) ,XIC(S001CNV1.Act[11].Work.Out) ] XIC(Status.FlasherLow) ]OTE(S001CNV1.Act[11].stsWork);
				RC: "***************************************************************************$N"
				    "Replace:$N"
				    "--| |-- $QEdit.Bit$Q with home pos or req before to move $N"
				    "***************************************************************************";
				N: XIC(S001CNV1.Act[11].ActMtnEnbld)XIC(S001CNV1.Unld.RbtsClr.Sts_PermOK)XIO(S001CNV1.Pallet[11].PalletEmptyRls)XIC(S001CNV1.Unld.PartsPresNo)XIO(S001CNV1.Pallet[11].PalletClear)XIO(S001CNV1.Pallet[11].PalletLivingMem)XIC(S001CNV1.Pallet[11].PalletPres)XIO(S001CNV1.Pallet[11].NoStopFault)XIC(Edit.Bit)OTE(S001CNV1.Act[11].Home.Clr);
				N: [XIC(S001CNV1.Unld.AutoMode) XIO(S001CNV1.M.ResPwrSvr) [XIC(S001CNV1.Pallet[11].GoodPalletPres) XIC(S001CNV1.Unld.Comp1) XIC(S001CNV1.Unld.Empty) ,XIO(S001CNV1.Pallet[11].GoodPalletPres) XIC(S001CNV1.Pallet[11].BadPalletPres) ] OTE(S001CNV1.Act[11].Home.AutoCmd) ,XIC(S001CNV1.Unld.ManualMode) XIC(S001CNV1.Act[11].ocmdHome) OTE(S001CNV1.Act[11].Home.ManualCmdPB) ];
				N: XIC(S001CNV1.Act[11].Home.Comp)OTE(S001CNV1.Act[11].Home.Seal);
				RC: "***************************************************************************$N"
				    "Actuador Return HMI Indicator$N"
				    "***************************************************************************";
				N: [XIC(S001CNV1.Act[11].Home.Comp) ,[XIC(S001CNV1.Unld.ManualMode) XIC(S001CNV1.Act[11].Home.Clr) ,XIC(S001CNV1.Act[11].Home.Out) ] XIC(Status.FlasherLow) ]OTE(S001CNV1.Act[11].stsHome);
				RC: "************************************************************$N"
				    "CONVEYOR UNITS MAP$N"
				    "PREUNLOAD STOP$N"
				    "************************************************************$N"
				    "$N"
				    "Map Load Stop Inputs$N"
				    "*Replace Edit.Bit for the correct input signal$N"
				    " Example CNV01.sta.VM1.I1.XX Replace for the correct input signal";
				N: [OTE(S001CNV1.Act[12].Installed.0) ,XIC(Edit.Bit) XIC(S001CNV1.Int.VM1.I1.1) OTE(S001CNV1.Act[12].Work.Pxs.0) ,XIC(Edit.Bit) XIC(S001CNV1.Int.VM1.I1.0) OTE(S001CNV1.Act[12].Home.Pxs.0) ];
				RC: "************************************************************$N"
				    "Actuator Common Interlock$N"
				    "Close/Open$N"
				    "************************************************************";
				N: [XIC(S001CNV1Sfty.PowerEnbld) OTE(S001CNV1.Act[12].ActMtnIntlk.Inp_Intlk00) ,XIC(S001CNV1.Int.All_Zone_LC_OK) OTE(S001CNV1.Act[12].ActMtnIntlk.Inp_Intlk01) ,XIC(S001CNV1.Int.All_LC_OK) OTE(S001CNV1.Act[12].ActMtnIntlk.Inp_Intlk02) ,XIC(S001CNV1.Unld.AirOn) OTE(S001CNV1.Act[12].ActMtnIntlk.Inp_Intlk03) ,P_Intlk(S001CNV1.Act[12].ActMtnIntlk) ,XIC(S001CNV1.Act[12].ActMtnIntlk.Sts_IntlkOK) OTE(S001CNV1.Act[12].ActMtnEnbld) ];
				RC: "***************************************************************************$N"
				    "Replace:$N"
				    "--| |-- $QEdit.Bit$Q with work position req before to move $N"
				    "***************************************************************************";
				N: XIC(S001CNV1.Act[12].ActMtnEnbld)XIC(S001CNV1.Unld.RbtsClr.Sts_PermOK)XIC(Edit.Bit)OTE(S001CNV1.Act[12].Work.Clr);
				N: [XIC(S001CNV1.Unld.AutoMode) XIC(S001CNV1.Pallet[12].PalletLivingMem) XIO(S001CNV1.Act[12].Home.Comp) OTE(S001CNV1.Act[12].Work.AutoCmd) ,XIC(S001CNV1.Unld.ManualMode) XIC(S001CNV1.Act[12].ocmdWork) OTE(S001CNV1.Act[12].Work.ManualCmdPB) ];
				N: XIC(S001CNV1.Act[12].Work.Comp)OTE(S001CNV1.Act[12].Work.Seal);
				RC: "***************************************************************************$N"
				    "Actuador Advance HMI Indicator$N"
				    "***************************************************************************";
				N: [XIC(S001CNV1.Act[12].Work.Comp) ,[XIC(S001CNV1.Unld.ManualMode) XIC(S001CNV1.Act[12].Work.Clr) ,XIC(S001CNV1.Act[12].Work.Out) ] XIC(Status.FlasherLow) ]OTE(S001CNV1.Act[12].stsWork);
				RC: "***************************************************************************$N"
				    "Replace:$N"
				    "--| |-- $QEdit.Bit$Q with home pos or req before to move $N"
				    "***************************************************************************";
				N: XIC(S001CNV1.Act[12].ActMtnEnbld)XIC(S001CNV1.Unld.RbtsClr.Sts_PermOK)XIO(S001CNV1.Pallet[12].PalletEmptyRls)XIO(S001CNV1.Pallet[12].PalletClear)XIO(S001CNV1.Pallet[12].PalletLivingMem)XIC(S001CNV1.Pallet[12].PalletPres)XIO(S001CNV1.Pallet[12].NoStopFault)XIC(Edit.Bit)OTE(S001CNV1.Act[12].Home.Clr);
				N: [XIC(S001CNV1.Unld.AutoMode) XIO(S001CNV1.M.ResPwrSvr) [XIC(S001CNV1.Pallet[12].GoodPalletPres) ,XIO(S001CNV1.Pallet[12].GoodPalletPres) XIC(S001CNV1.Pallet[12].BadPalletPres) ] OTE(S001CNV1.Act[12].Home.AutoCmd) ,XIC(S001CNV1.Unld.ManualMode) XIC(S001CNV1.Act[12].ocmdHome) OTE(S001CNV1.Act[12].Home.ManualCmdPB) ];
				N: XIC(S001CNV1.Act[12].Home.Comp)OTE(S001CNV1.Act[12].Home.Seal);
				RC: "***************************************************************************$N"
				    "Actuador Advance HMI Indicator$N"
				    "***************************************************************************";
				N: [XIC(S001CNV1.Act[12].Home.Comp) ,[XIC(S001CNV1.Unld.ManualMode) XIC(S001CNV1.Act[12].Home.Clr) ,XIC(S001CNV1.Act[12].Home.Out) ] XIC(Status.FlasherLow) ]OTE(S001CNV1.Act[12].stsHome);
		END_ROUTINE

		ROUTINE D01_Part_Present 
				RC: "************************************************************$N"
				    "Load side$N"
				    "Part Presents Logic $N"
				    "-l l-Incude real inputs replacing   -l l-edit.bit$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "PP Common Inputs$N"
				    "$N"
				    "Assign each PP[X] to a Part Present Load Group$N"
				    "$N"
				    "PP1_xxx - 1st Load Part Presents$N"
				    "PP2_xxx - 2nd Load Part Presents$N"
				    "PP3_xxx - 3rd Load Part Presents$N"
				    "PP4_xxx - 4th Load Part Presents$N"
				    "************************************************************";
				N: NOP();
				N: XIO(S001CNV1.Int.DryCycle)XIC(sZ005_040.PowerEnbld)XIC(S001CNV1.Int.CommPPOk)XIC(S001CNV1.Int.CommAirOk)XIC(S001CNV1.Int.CommOk)XIC(Edit.Bit)OTE(S001CNV1.Int.PPActFltsEnbld);
				RC: "************************************************************$N"
				    "Part Present Logic$N"
				    "$N"
				    "************************************************************$N"
				    "Part Present AOI Parameter Mapping";
				N: NOP();
				RC: "************************************************************$N"
				    "PartPresent- MODEL1$N"
				    "  ************************************************************$N"
				    "DryCycle Load Condition$N"
				    "If the Tool is loaded by a Robot, The Timer should be removed";
				N: XIC(S001CNV1.Int.DryCycle)XIC(S001CNV1.Pallet[1].PalletPres)XIO(S001CNV1.Pallet[1].BadPalletPres)XIC(S001CNV1.Load.Clear)XIO(S001CNV1.Load.Disable)[XIC(S001CNV1.Load.Pos1) XIC(S005RB01.I1.AtDrop1) XIO(S001CNV1.Load.Comp1) ,XIC(S001CNV1.Load.Pos2) XIC(S005RB01.I1.AtDrop2) XIO(S001CNV1.Load.Comp2) ]XIO(S001CNV1.Load.HoldEndOfCycle)[OTE(S001CNV1.Load.PP[1].inpPPDryCycleLoadTrgr) ,OTE(S001CNV1.Load.PP[2].inpPPDryCycleLoadTrgr) ];
				RC: "************************************************************$N"
				    "PartPresent - MODEL1$N"
				    "$N"
				    "************************************************************$N"
				    "DryCycle Unload Condition";
				N: XIC(S001CNV1.Int.DryCycle)XIC(S001CNV1.Pallet[1].PalletLivingMem)[OTE(S001CNV1.Load.PP[1].inpPPDryCycleUnldTrgr) ,OTE(S001CNV1.Load.PP[2].inpPPDryCycleUnldTrgr) ];
				RC: "************************************************************$N"
				    "PartPresent- MODEL1$N"
				    "  ************************************************************$N"
				    "DryCycle Load Condition At Unload Side$N"
				    "If the Tool is loaded by a Robot, The Timer should be removed";
				N: XIC(S001CNV1.Int.DryCycle)XIC(S001CNV1.Pallet[11].PalletPres)XIO(S001CNV1.Pallet[11].BadPalletPres)[OTE(S001CNV1.Unld.PP[1].inpPPDryCycleLoadTrgr) ,OTE(S001CNV1.Unld.PP[2].inpPPDryCycleLoadTrgr) ];
				RC: "************************************************************$N"
				    "PartPresent  - MODEL1$N"
				    "************************************************************$N"
				    "DryCycle Unload Condition$N"
				    "";
				N: XIC(S001CNV1.Int.DryCycle)[XIC(S001CNV1.Unld.Pos1) XIC(S005RB01.I1.AtPick1) XIO(S001CNV1.Unld.Comp1) ,XIC(S001CNV1.Unld.Pos2) XIC(S005RB01.I1.AtPick2) XIO(S001CNV1.Unld.Comp2) ,XIC(S001CNV1.Unld.Pos3) XIC(S005RB01.I1.AtPick3) XIO(S001CNV1.Unld.Comp3) ][OTE(S001CNV1.Unld.PP[1].inpPPDryCycleUnldTrgr) ,OTE(S001CNV1.Unld.PP[2].inpPPDryCycleUnldTrgr) ];
				RC: "************************************************************$N"
				    "Set Used/Installed Sensors$N"
				    "************************************************************$N"
				    "Change instruction to OTE if sensor used.$N"
				    "Change instruction to OTU if the sensor will not be used/installed";
				N: OTE(S001CNV1.Load.PP[1].inpPPSensorInst.0)OTE(S001CNV1.Load.PP[1].inpPPSensorInst.1)OTU(S001CNV1.Load.PP[1].inpPPSensorInst.2)OTU(S001CNV1.Load.PP[1].inpPPSensorInst.3)OTU(S001CNV1.Load.PP[1].inpPPSensorInst.4)OTU(S001CNV1.Load.PP[1].inpPPSensorInst.5)OTU(S001CNV1.Load.PP[1].inpPPSensorInst.6)OTU(S001CNV1.Load.PP[1].inpPPSensorInst.7);
				RC: "************************************************************$N"
				    "Add all first load Switch Inputs$N"
				    "Model 1$N"
				    "************************************************************";
				N: [[XIC(S001CNV1.Int.VM1.I1.0) OTE(S001CNV1.Load.PP[1].inpPPSensor.0) ,XIC(S001CNV1.Int.VM1.I1.1) OTE(S001CNV1.Load.PP[1].inpPPSensor.1) ] ,XIC(S001CNV1.Int.DryCycle) XIC(S001CNV1.Load.PP[1].stsPPMem) MOV(2#0000_0011,S001CNV1.Load.PP[1].inpPPSensor) ];
				N: [XIC(S001CNV1.Int.VM1.I1.0) ,XIC(S001CNV1.Int.VM1.I1.1) ]OTE(S001CNV1.Load.PP[1].PPAnySensor);
				RC: "************************************************************$N"
				    "Change Edit.Bit with required conditions for PP to be ON/OFF$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(S001CNV1.Load.PP[1].inpOnCondition);
				N: XIC(Edit.Bit)OTE(S001CNV1.Load.PP[1].inpOffCondition);
				RC: "************************************************************$N"
				    "Set Used/Installed Sensors$N"
				    "************************************************************$N"
				    "Change instruction to OTE if sensor used.$N"
				    "Change instruction to OTU if the sensor will not be used/installed";
				N: OTE(S001CNV1.Load.PP[2].inpPPSensorInst.0)OTE(S001CNV1.Load.PP[2].inpPPSensorInst.1)OTE(S001CNV1.Load.PP[2].inpPPSensorInst.2)OTU(S001CNV1.Load.PP[2].inpPPSensorInst.3)OTU(S001CNV1.Load.PP[2].inpPPSensorInst.4)OTU(S001CNV1.Load.PP[2].inpPPSensorInst.5)OTU(S001CNV1.Load.PP[2].inpPPSensorInst.6)OTU(S001CNV1.Load.PP[2].inpPPSensorInst.7);
				RC: "************************************************************$N"
				    "Add all second load Switch Inputs$N"
				    "Model Air$N"
				    "************************************************************";
				N: [[XIC(S001CNV1.Int.VM1.I1.2) OTE(S001CNV1.Load.PP[2].inpPPSensor.0) ,XIC(S001CNV1.Int.VM1.I1.3) OTE(S001CNV1.Load.PP[2].inpPPSensor.1) ,XIC(S001CNV1.Int.VM1.I1.4) OTE(S001CNV1.Load.PP[2].inpPPSensor.2) ] ,XIC(S001CNV1.Int.DryCycle) XIC(S001CNV1.Load.PP[2].stsPPMem) MOV(2#0000_0111,S001CNV1.Load.PP[2].inpPPSensor) ];
				N: [XIC(S001CNV1.Int.VM1.I1.2) ,XIC(S001CNV1.Int.VM1.I1.3) ,XIC(S001CNV1.Int.VM1.I1.4) ]OTE(S001CNV1.Load.PP[2].PPAnySensor);
				RC: "************************************************************$N"
				    "Change Edit.Bit with required conditions for PP to be ON/OFF$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(S001CNV1.Load.PP[2].inpOnCondition);
				N: XIC(Edit.Bit)OTE(S001CNV1.Load.PP[2].inpOffCondition);
				RC: "Model 1 Part Present AOIs$N"
				    "Lucid AIR";
				N: PartPresent(S001CNV1.Load.PP[1],S001CNV1.Load.PP[1].inpPPSensor,S001CNV1.Load.PP[1].inpOnCondition,S001CNV1.Load.PP[1].inpOffCondition,S001CNV1.Int.DryCycle,S001CNV1.Int.PPActFltsEnbld)PartPresent(S001CNV1.Load.PP[2],S001CNV1.Load.PP[2].inpPPSensor,S001CNV1.Load.PP[2].inpOnCondition,S001CNV1.Load.PP[2].inpOffCondition,S001CNV1.Int.DryCycle,S001CNV1.Int.PPActFltsEnbld);
				N: [XIC(S001CNV1.Load.PP[1].stsPPNotOK) ,XIC(S001CNV1.Load.PP[2].stsPPNotOK) ]OTE(S001CNV1.Load.PPFault);
				RC: "************************************************************$N"
				    "Unload Side$N"
				    "Part Presents Logic $N"
				    "-l l-Incude real inputs replacing   -l l-edit.bit$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Set Used/Installed Sensors$N"
				    "************************************************************$N"
				    "Change instruction to OTE if sensor used.$N"
				    "Change instruction to OTU if the sensor will not be used/installed";
				N: OTE(S001CNV1.Unld.PP[1].inpPPSensorInst.0)OTE(S001CNV1.Unld.PP[1].inpPPSensorInst.1)OTU(S001CNV1.Unld.PP[1].inpPPSensorInst.2)OTU(S001CNV1.Unld.PP[1].inpPPSensorInst.3)OTU(S001CNV1.Unld.PP[1].inpPPSensorInst.4)OTU(S001CNV1.Unld.PP[1].inpPPSensorInst.5)OTU(S001CNV1.Unld.PP[1].inpPPSensorInst.6)OTU(S001CNV1.Unld.PP[1].inpPPSensorInst.7);
				RC: "************************************************************$N"
				    "Add all first Unld Switch Inputs$N"
				    "Model 2$N"
				    "************************************************************";
				N: [[XIC(S001CNV1.Int.VM1.I2.0) OTE(S001CNV1.Unld.PP[1].inpPPSensor.0) ,XIC(S001CNV1.Int.VM1.I2.1) OTE(S001CNV1.Unld.PP[1].inpPPSensor.1) ] ,XIC(S001CNV1.Int.DryCycle) XIC(S001CNV1.Unld.PP[1].stsPPMem) MOV(2#0000_0011,S001CNV1.Unld.PP[1].inpPPSensor) ];
				N: [XIC(S001CNV1.Int.VM1.I2.0) ,XIC(S001CNV1.Int.VM1.I2.1) ]OTE(S001CNV1.Unld.PP[1].PPAnySensor);
				RC: "************************************************************$N"
				    "Change Edit.Bit with required conditions for PP to be ON/OFF$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(S001CNV1.Unld.PP[1].inpOnCondition);
				N: XIC(Edit.Bit)OTE(S001CNV1.Unld.PP[1].inpOffCondition);
				RC: "************************************************************$N"
				    "Set Used/Installed Sensors$N"
				    "************************************************************$N"
				    "Change instruction to OTE if sensor used.$N"
				    "Change instruction to OTU if the sensor will not be used/installed";
				N: OTE(S001CNV1.Unld.PP[2].inpPPSensorInst.0)OTE(S001CNV1.Unld.PP[2].inpPPSensorInst.1)OTE(S001CNV1.Unld.PP[2].inpPPSensorInst.2)OTU(S001CNV1.Unld.PP[2].inpPPSensorInst.3)OTU(S001CNV1.Unld.PP[2].inpPPSensorInst.4)OTU(S001CNV1.Unld.PP[2].inpPPSensorInst.5)OTU(S001CNV1.Unld.PP[2].inpPPSensorInst.6)OTU(S001CNV1.Unld.PP[2].inpPPSensorInst.7);
				RC: "************************************************************$N"
				    "Add all Second load Switch Inputs$N"
				    "Model Gravity$N"
				    "************************************************************";
				N: [[XIC(S001CNV1.Int.VM1.I2.2) OTE(S001CNV1.Unld.PP[2].inpPPSensor.0) ,XIC(S001CNV1.Int.VM1.I2.3) OTE(S001CNV1.Unld.PP[2].inpPPSensor.1) ,XIC(S001CNV1.Int.VM1.I2.4) OTE(S001CNV1.Unld.PP[2].inpPPSensor.2) ] ,XIC(S001CNV1.Int.DryCycle) XIC(S001CNV1.Unld.PP[2].stsPPMem) MOV(2#0000_0111,S001CNV1.Unld.PP[2].inpPPSensor) ];
				N: [XIC(S001CNV1.Int.VM1.I2.2) ,XIC(S001CNV1.Int.VM1.I2.3) ,XIC(S001CNV1.Int.VM1.I2.4) ]OTE(S001CNV1.Unld.PP[2].PPAnySensor);
				RC: "************************************************************$N"
				    "Change Edit.Bit with required conditions for PP to be ON/OFF$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(S001CNV1.Unld.PP[2].inpOnCondition);
				N: XIC(Edit.Bit)OTE(S001CNV1.Unld.PP[2].inpOffCondition);
				RC: "Model 2 Part Present AOIs$N"
				    "Lucid GRAVITY";
				N: PartPresent(S001CNV1.Unld.PP[1],S001CNV1.Unld.PP[1].inpPPSensor,S001CNV1.Unld.PP[1].inpOnCondition,S001CNV1.Unld.PP[1].inpOffCondition,S001CNV1.Int.DryCycle,S001CNV1.Int.PPActFltsEnbld)PartPresent(S001CNV1.Unld.PP[2],S001CNV1.Unld.PP[2].inpPPSensor,S001CNV1.Unld.PP[2].inpOnCondition,S001CNV1.Unld.PP[2].inpOffCondition,S001CNV1.Int.DryCycle,S001CNV1.Int.PPActFltsEnbld);
				RC: "************************************************************$N"
				    "Parts Present Fault$N"
				    "************************************************************";
				N: NOP();
				N: [XIC(S001CNV1.Unld.PP[1].stsPPNotOK) ,XIC(S001CNV1.Unld.PP[2].stsPPNotOK) ]OTE(S001CNV1.Unld.PPFault);
				RC: "************************************************************$N"
				    "Map Part Presents Map Indicators$N"
				    "************************************************************";
				N: NOP();
		END_ROUTINE

		ROUTINE D02_Load_Stop 
				RC: "************************************************************$N"
				    "Stop Setup$N"
				    "************************************************************$N"
				    "*$N"
				    "* [ PalletPres ] will set this station$'s Pallet detect$N"
				    "* [ Good PalletPres ] Good Pallet Detected$N"
				    "* [ BadPalletPres ] Bad Pallet Detected$N"
				    "* [ LineClear ] will set line clear for this Stop. $N"
				    "* [ Line Full ] will set line full for this Stop.$N"
				    "If there$'s no switch for conditions above: should use $QAlways_Off$Q.$N"
				    "$N"
				    "Replace Edit.Bit or real Input signal, CNV01.sta.VM1.I1.XX  just is an example";
				N: NOP();
				N: XIC(S001CNV1.Int.CommOk)[XIC(S001CNV1.Pallet[1].PalletPresTmr.DN) OTE(S001CNV1.Pallet[1].PalletPres) ,XIC(S001CNV1.Pallet[1].NoPalletPresTmr.DN) OTE(S001CNV1.Pallet[1].NoPalletPres) ,XIC(S001CNV1.Pallet[1].GooPalletPresTmr.DN) OTE(S001CNV1.Pallet[1].GoodPalletPres) ,XIC(S001CNV1.Pallet[1].PalletPresHBTmr.DN) OTE(S001CNV1.Pallet[1].PalletPresHB) ,XIC(S001CNV1.Pallet[1].BadPalletPresTmr.DN) OTE(S001CNV1.Pallet[1].BadPalletPres) ,XIC(S001CNV1.Pallet[1].PlletClearTmr.DN) OTE(S001CNV1.Pallet[1].PalletClear) ,XIC(S001CNV1.Pallet[1].LineFullTmr.DN) OTE(S001CNV1.Pallet[1].LineFull) ];
				N: [XIC(S001CNV1.Int.VM1.I1.1) XIC(Edit.Bit) MOV(2000,S001CNV1.Pallet[1].PalletPresTmr.PRE) TON(S001CNV1.Pallet[1].PalletPresTmr,?,?) ,XIO(S001CNV1.Pallet[1].PalletPres) MOV(500,S001CNV1.Pallet[1].NoPalletPresTmr.PRE) TON(S001CNV1.Pallet[1].NoPalletPresTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.2) XIC(Edit.Bit) MOV(0,S001CNV1.Pallet[1].GooPalletPresTmr.PRE) TON(S001CNV1.Pallet[1].GooPalletPresTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.10) XIC(Edit.Bit) MOV(500,S001CNV1.Pallet[1].PalletPresHBTmr.PRE) TON(S001CNV1.Pallet[1].PalletPresHBTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.3) XIC(Edit.Bit) MOV(2000,S001CNV1.Pallet[1].BadPalletPresTmr.PRE) TON(S001CNV1.Pallet[1].BadPalletPresTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.12) XIC(Edit.Bit) MOV(500,S001CNV1.Pallet[1].PlletClearTmr.PRE) TON(S001CNV1.Pallet[1].PlletClearTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.9) XIC(Edit.Bit) MOV(500,S001CNV1.Pallet[1].LineFullTmr.PRE) TON(S001CNV1.Pallet[1].LineFullTmr,?,?) ];
				N: [XIC(S001CNV1.Pallet[1].PalletClear) OTU(S001CNV1.Pallet[1].PalletLivingMem) ,XIC(S001CNV1.M.RunningFwd) XIC(S001CNV1.Pallet[1].NoPalletPresTmr.DN) XIO(S001CNV1.Act[1].Work.Comp) OTL(S001CNV1.Pallet[1].PalletLivingMem) ];
				RC: "****************************************************************************************************$N"
				    "Actuator Advance Logic$N"
				    "****************************************************************************************************";
				N: [XIC(S001CNV1.Act[1].Home.AutoCmd) ,XIC(S001CNV1.Act[1].Home.ManualCmdPB) ]XIC(S001CNV1.Act[1].Home.Clr)OTE(S001CNV1.Act[1].Work.SealRst);
				N: [XIC(S001CNV1.Load.AutoSel) XIC(S001CNV1.Act[1].Work.AutoCmd) ,XIC(S001CNV1.Load.ManualMode) XIC(S001CNV1.Act[1].Work.ManualCmdPB) ,XIC(S001CNV1.Act[1].Work.Out) XIC(S001CNV1.Act[1].Work.Seal) ]XIC(S001CNV1.Act[1].Work.Clr)XIO(S001CNV1.Act[1].Work.SealRst)OTE(S001CNV1.Act[1].Work.Out);
				N: XIC(S001CNV1.Act[1].Work.Out)OTL(S001CNV1.Act[1].Work.Mem);
				N: XIC(S001CNV1.Act[1].Home.Out)OTU(S001CNV1.Act[1].Work.Mem);
				N: [XIC(S001CNV1.Act[1].Work.Pxs.0) XIO(S001CNV1.Act[1].Home.Pxs.0) ,XIO(S001CNV1.Act[1].Installed.0) ][XIC(S001CNV1.Act[1].Work.Pxs.1) XIO(S001CNV1.Act[1].Home.Pxs.1) ,XIO(S001CNV1.Act[1].Installed.1) ][XIC(S001CNV1.Act[1].Work.Pxs.2) XIO(S001CNV1.Act[1].Home.Pxs.2) ,XIO(S001CNV1.Act[1].Installed.2) ][XIC(S001CNV1.Act[1].Work.Pxs.3) XIO(S001CNV1.Act[1].Home.Pxs.3) ,XIO(S001CNV1.Act[1].Installed.3) ][XIC(S001CNV1.Act[1].Work.Pxs.4) XIO(S001CNV1.Act[1].Home.Pxs.4) ,XIO(S001CNV1.Act[1].Installed.4) ][XIC(S001CNV1.Act[1].Work.Pxs.5) XIO(S001CNV1.Act[1].Home.Pxs.5) ,XIO(S001CNV1.Act[1].Installed.5) ][XIC(S001CNV1.Act[1].Work.Pxs.6) XIO(S001CNV1.Act[1].Home.Pxs.6) ,XIO(S001CNV1.Act[1].Installed.6) ][XIC(S001CNV1.Act[1].Work.Pxs.7) XIO(S001CNV1.Act[1].Home.Pxs.7) ,XIO(S001CNV1.Act[1].Installed.7) ]OTE(S001CNV1.Act[1].Work.Comp);
				N: [XIC(S001CNV1.Act[1].Work.Out) [RTO(S001CNV1.Act[1].Work.FltTmr,?,?) ,XIC(S001CNV1.Act[1].Work.Comp) OTL(S001CNV1.Act[1].Work.FltTmr.DN) ] ,XIC(S001CNV1.Act[1].Home.Out) RES(S001CNV1.Act[1].Work.FltTmr) ,XIC(S001CNV1.Act[1].Work.FltTmr.DN) XIO(S001CNV1.Act[1].Work.Comp) XIC(S001CNV1.Int.PPActFltsEnbld) [OTE(S001CNV1.Act[1].Work.MtnFlt) ,XIC(S001CNV1.Act[1].Home.Comp) OTE(S001CNV1.Act[1].Work.VlvFlt) ] ];
				RC: "****************************************************************************************************$N"
				    "Actuator Open Logic$N"
				    "****************************************************************************************************";
				N: [XIC(S001CNV1.Act[1].Work.AutoCmd) ,XIC(S001CNV1.Act[1].Work.ManualCmdPB) ]XIC(S001CNV1.Act[1].Work.Clr)OTE(S001CNV1.Act[1].Home.SealRst);
				N: [XIC(S001CNV1.Load.AutoSel) XIC(S001CNV1.Act[1].Home.AutoCmd) ,XIC(S001CNV1.Load.ManualMode) XIC(S001CNV1.Act[1].Home.ManualCmdPB) ,XIC(S001CNV1.Act[1].Home.Out) XIC(S001CNV1.Act[1].Home.Seal) ]XIC(S001CNV1.Act[1].Home.Clr)XIO(S001CNV1.Act[1].Home.SealRst)OTE(S001CNV1.Act[1].Home.Out);
				N: XIC(S001CNV1.Act[1].Home.Out)OTL(S001CNV1.Act[1].Home.Mem);
				N: XIC(S001CNV1.Act[1].Work.Out)OTU(S001CNV1.Act[1].Home.Mem);
				N: [XIC(S001CNV1.Act[1].Home.Pxs.0) XIO(S001CNV1.Act[1].Work.Pxs.0) ,XIO(S001CNV1.Act[1].Installed.0) ][XIC(S001CNV1.Act[1].Home.Pxs.1) XIO(S001CNV1.Act[1].Work.Pxs.1) ,XIO(S001CNV1.Act[1].Installed.1) ][XIC(S001CNV1.Act[1].Home.Pxs.2) XIO(S001CNV1.Act[1].Work.Pxs.2) ,XIO(S001CNV1.Act[1].Installed.2) ][XIC(S001CNV1.Act[1].Home.Pxs.3) XIO(S001CNV1.Act[1].Work.Pxs.3) ,XIO(S001CNV1.Act[1].Installed.3) ][XIC(S001CNV1.Act[1].Home.Pxs.4) XIO(S001CNV1.Act[1].Work.Pxs.4) ,XIO(S001CNV1.Act[1].Installed.4) ][XIC(S001CNV1.Act[1].Home.Pxs.5) XIO(S001CNV1.Act[1].Work.Pxs.5) ,XIO(S001CNV1.Act[1].Installed.5) ][XIC(S001CNV1.Act[1].Home.Pxs.6) XIO(S001CNV1.Act[1].Work.Pxs.6) ,XIO(S001CNV1.Act[1].Installed.6) ][XIC(S001CNV1.Act[1].Home.Pxs.7) XIO(S001CNV1.Act[1].Work.Pxs.7) ,XIO(S001CNV1.Act[1].Installed.7) ]OTE(S001CNV1.Act[1].Home.Comp);
				N: [XIC(S001CNV1.Act[1].Home.Out) [RTO(S001CNV1.Act[1].Home.FltTmr,?,?) ,XIC(S001CNV1.Act[1].Home.Comp) OTL(S001CNV1.Act[1].Home.FltTmr.DN) ] ,XIC(S001CNV1.Act[1].Work.Out) RES(S001CNV1.Act[1].Home.FltTmr) ,XIC(S001CNV1.Act[1].Home.FltTmr.DN) XIO(S001CNV1.Act[1].Home.Comp) XIC(S001CNV1.Int.PPActFltsEnbld) [OTE(S001CNV1.Act[1].Home.MtnFlt) ,XIC(S001CNV1.Act[1].Work.Comp) OTE(S001CNV1.Act[1].Home.VlvFlt) ] ];
				N: [XIC(S001CNV1.Act[1].Home.MtnFlt) ,XIC(S001CNV1.Act[1].Home.VlvFlt) ,XIC(S001CNV1.Act[1].Work.MtnFlt) ,XIC(S001CNV1.Act[1].Work.VlvFlt) ]OTE(S001CNV1.Act[1].Faulted);
		END_ROUTINE

		ROUTINE D03_Preload_Stop 
				RC: "************************************************************$N"
				    "Stop Setup$N"
				    "************************************************************$N"
				    "*$N"
				    "* [ PalletPres ] will set this station$'s Pallet detect$N"
				    "* [ Good PalletPres ] Good Pallet Detected$N"
				    "* [ BadPalletPres ] Bad Pallet Detected$N"
				    "* [ LineClear ] will set line clear for this Stop. $N"
				    "* [ Line Full ] will set line full for this Stop.$N"
				    "If there$'s no switch for conditions above: should use $QAlways_Off$Q.$N"
				    "$N"
				    "Replace Edit.Bit or real Input signal, CNV01.sta.VM1.I1.XX  just is an example";
				N: NOP();
				N: XIC(S001CNV1.Int.CommOk)[XIC(S001CNV1.Pallet[2].PalletPresTmr.DN) OTE(S001CNV1.Pallet[2].PalletPres) ,XIC(S001CNV1.Pallet[2].NoPalletPresTmr.DN) OTE(S001CNV1.Pallet[2].NoPalletPres) ,XIC(S001CNV1.Pallet[2].GooPalletPresTmr.DN) OTE(S001CNV1.Pallet[2].GoodPalletPres) ,XIC(S001CNV1.Pallet[2].PalletPresHBTmr.DN) OTE(S001CNV1.Pallet[2].PalletPresHB) ,XIC(S001CNV1.Pallet[2].BadPalletPresTmr.DN) OTE(S001CNV1.Pallet[2].BadPalletPres) ,XIC(S001CNV1.Pallet[2].PlletClearTmr.DN) OTE(S001CNV1.Pallet[2].PalletClear) ,XIC(S001CNV1.Pallet[2].LineFullTmr.DN) OTE(S001CNV1.Pallet[2].LineFull) ];
				N: [XIC(S001CNV1.Int.VM1.I1.1) XIC(Edit.Bit) MOV(2000,S001CNV1.Pallet[2].PalletPresTmr.PRE) TON(S001CNV1.Pallet[2].PalletPresTmr,?,?) ,XIO(S001CNV1.Pallet[2].PalletPres) MOV(2000,S001CNV1.Pallet[2].NoPalletPresTmr.PRE) TON(S001CNV1.Pallet[2].NoPalletPresTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.2) XIC(Edit.Bit) MOV(0,S001CNV1.Pallet[2].GooPalletPresTmr.PRE) TON(S001CNV1.Pallet[2].GooPalletPresTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.10) XIC(Edit.Bit) MOV(500,S001CNV1.Pallet[2].PalletPresHBTmr.PRE) TON(S001CNV1.Pallet[2].PalletPresHBTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.3) XIC(Edit.Bit) MOV(2000,S001CNV1.Pallet[2].BadPalletPresTmr.PRE) TON(S001CNV1.Pallet[2].BadPalletPresTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.12) XIC(Edit.Bit) MOV(500,S001CNV1.Pallet[2].PlletClearTmr.PRE) TON(S001CNV1.Pallet[2].PlletClearTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.9) XIC(Edit.Bit) MOV(500,S001CNV1.Pallet[2].LineFullTmr.PRE) TON(S001CNV1.Pallet[2].LineFullTmr,?,?) ];
				N: [XIC(S001CNV1.Pallet[2].PalletClear) OTU(S001CNV1.Pallet[2].PalletLivingMem) ,XIC(S001CNV1.M.RunningFwd) XIC(S001CNV1.Pallet[2].NoPalletPresTmr.DN) XIO(S001CNV1.Act[2].Work.Comp) OTL(S001CNV1.Pallet[2].PalletLivingMem) ];
				RC: "****************************************************************************************************$N"
				    "Actuator Advance Logic$N"
				    "****************************************************************************************************";
				N: [XIC(S001CNV1.Act[2].Home.AutoCmd) ,XIC(S001CNV1.Act[2].Home.ManualCmdPB) ]XIC(S001CNV1.Act[2].Home.Clr)OTE(S001CNV1.Act[2].Work.SealRst);
				N: [XIC(S001CNV1.Load.AutoSel) XIC(S001CNV1.Act[2].Work.AutoCmd) ,XIC(S001CNV1.Load.ManualMode) XIC(S001CNV1.Act[2].Work.ManualCmdPB) ,XIC(S001CNV1.Act[2].Work.Out) XIC(S001CNV1.Act[2].Work.Seal) ]XIC(S001CNV1.Act[2].Work.Clr)XIO(S001CNV1.Act[2].Work.SealRst)OTE(S001CNV1.Act[2].Work.Out);
				N: XIC(S001CNV1.Act[2].Work.Out)OTL(S001CNV1.Act[2].Work.Mem);
				N: XIC(S001CNV1.Act[2].Home.Out)OTU(S001CNV1.Act[2].Work.Mem);
				N: [XIC(S001CNV1.Act[2].Work.Pxs.0) XIO(S001CNV1.Act[2].Home.Pxs.0) ,XIO(S001CNV1.Act[2].Installed.0) ][XIC(S001CNV1.Act[2].Work.Pxs.1) XIO(S001CNV1.Act[2].Home.Pxs.1) ,XIO(S001CNV1.Act[2].Installed.1) ][XIC(S001CNV1.Act[2].Work.Pxs.2) XIO(S001CNV1.Act[2].Home.Pxs.2) ,XIO(S001CNV1.Act[2].Installed.2) ][XIC(S001CNV1.Act[2].Work.Pxs.3) XIO(S001CNV1.Act[2].Home.Pxs.3) ,XIO(S001CNV1.Act[2].Installed.3) ][XIC(S001CNV1.Act[2].Work.Pxs.4) XIO(S001CNV1.Act[2].Home.Pxs.4) ,XIO(S001CNV1.Act[2].Installed.4) ][XIC(S001CNV1.Act[2].Work.Pxs.5) XIO(S001CNV1.Act[2].Home.Pxs.5) ,XIO(S001CNV1.Act[2].Installed.5) ][XIC(S001CNV1.Act[2].Work.Pxs.6) XIO(S001CNV1.Act[2].Home.Pxs.6) ,XIO(S001CNV1.Act[2].Installed.6) ][XIC(S001CNV1.Act[2].Work.Pxs.7) XIO(S001CNV1.Act[2].Home.Pxs.7) ,XIO(S001CNV1.Act[2].Installed.7) ]OTE(S001CNV1.Act[2].Work.Comp);
				N: [XIC(S001CNV1.Act[2].Work.Out) [RTO(S001CNV1.Act[2].Work.FltTmr,?,?) ,XIC(S001CNV1.Act[2].Work.Comp) OTL(S001CNV1.Act[2].Work.FltTmr.DN) ] ,XIC(S001CNV1.Act[2].Home.Out) RES(S001CNV1.Act[2].Work.FltTmr) ,XIC(S001CNV1.Act[2].Work.FltTmr.DN) XIO(S001CNV1.Act[2].Work.Comp) XIC(S001CNV1.Int.PPActFltsEnbld) [OTE(S001CNV1.Act[2].Work.MtnFlt) ,XIC(S001CNV1.Act[2].Home.Comp) OTE(S001CNV1.Act[2].Work.VlvFlt) ] ];
				RC: "****************************************************************************************************$N"
				    "Actuator Open Logic$N"
				    "****************************************************************************************************";
				N: [XIC(S001CNV1.Act[2].Work.AutoCmd) ,XIC(S001CNV1.Act[2].Work.ManualCmdPB) ]XIC(S001CNV1.Act[2].Work.Clr)OTE(S001CNV1.Act[2].Home.SealRst);
				N: [XIC(S001CNV1.Load.AutoSel) XIC(S001CNV1.Act[2].Home.AutoCmd) ,XIC(S001CNV1.Load.ManualMode) XIC(S001CNV1.Act[2].Home.ManualCmdPB) ,XIC(S001CNV1.Act[2].Home.Out) XIC(S001CNV1.Act[2].Home.Seal) ]XIC(S001CNV1.Act[2].Home.Clr)XIO(S001CNV1.Act[2].Home.SealRst)OTE(S001CNV1.Act[2].Home.Out);
				N: XIC(S001CNV1.Act[2].Home.Out)OTL(S001CNV1.Act[2].Home.Mem);
				N: XIC(S001CNV1.Act[2].Work.Out)OTU(S001CNV1.Act[2].Home.Mem);
				N: [XIC(S001CNV1.Act[2].Home.Pxs.0) XIO(S001CNV1.Act[2].Work.Pxs.0) ,XIO(S001CNV1.Act[2].Installed.0) ][XIC(S001CNV1.Act[2].Home.Pxs.1) XIO(S001CNV1.Act[2].Work.Pxs.1) ,XIO(S001CNV1.Act[2].Installed.1) ][XIC(S001CNV1.Act[2].Home.Pxs.2) XIO(S001CNV1.Act[2].Work.Pxs.2) ,XIO(S001CNV1.Act[2].Installed.2) ][XIC(S001CNV1.Act[2].Home.Pxs.3) XIO(S001CNV1.Act[2].Work.Pxs.3) ,XIO(S001CNV1.Act[2].Installed.3) ][XIC(S001CNV1.Act[2].Home.Pxs.4) XIO(S001CNV1.Act[2].Work.Pxs.4) ,XIO(S001CNV1.Act[2].Installed.4) ][XIC(S001CNV1.Act[2].Home.Pxs.5) XIO(S001CNV1.Act[2].Work.Pxs.5) ,XIO(S001CNV1.Act[2].Installed.5) ][XIC(S001CNV1.Act[2].Home.Pxs.6) XIO(S001CNV1.Act[2].Work.Pxs.6) ,XIO(S001CNV1.Act[2].Installed.6) ][XIC(S001CNV1.Act[2].Home.Pxs.7) XIO(S001CNV1.Act[2].Work.Pxs.7) ,XIO(S001CNV1.Act[2].Installed.7) ]OTE(S001CNV1.Act[2].Home.Comp);
				N: [XIC(S001CNV1.Act[2].Home.Out) [RTO(S001CNV1.Act[2].Home.FltTmr,?,?) ,XIC(S001CNV1.Act[2].Home.Comp) OTL(S001CNV1.Act[2].Home.FltTmr.DN) ] ,XIC(S001CNV1.Act[2].Work.Out) RES(S001CNV1.Act[2].Home.FltTmr) ,XIC(S001CNV1.Act[2].Home.FltTmr.DN) XIO(S001CNV1.Act[2].Home.Comp) XIC(S001CNV1.Int.PPActFltsEnbld) [OTE(S001CNV1.Act[2].Home.MtnFlt) ,XIC(S001CNV1.Act[2].Work.Comp) OTE(S001CNV1.Act[2].Home.VlvFlt) ] ];
				N: [XIC(S001CNV1.Act[2].Home.MtnFlt) ,XIC(S001CNV1.Act[2].Home.VlvFlt) ,XIC(S001CNV1.Act[2].Work.MtnFlt) ,XIC(S001CNV1.Act[2].Work.VlvFlt) ]OTE(S001CNV1.Act[2].Faulted);
		END_ROUTINE

		ROUTINE D11_Unload_Stop 
				RC: "************************************************************$N"
				    "Stop Setup$N"
				    "************************************************************$N"
				    "*$N"
				    "* [ PalletPres ] will set this station$'s Pallet detect$N"
				    "* [ Good PalletPres ] Good Pallet Detected$N"
				    "* [ BadPalletPres ] Bad Pallet Detected$N"
				    "* [ LineClear ] will set line clear for this Stop. $N"
				    "* [ Line Full ] will set line full for this Stop.$N"
				    "If there$'s no switch for conditions above: should use $QAlways_Off$Q.$N"
				    "$N"
				    "Replace Edit.Bit or real Input signal, CNV01.sta.VM1.I1.XX  just is an example";
				N: NOP();
				N: XIC(S001CNV1.Int.CommOk)[XIC(S001CNV1.Pallet[11].PalletPresTmr.DN) OTE(S001CNV1.Pallet[11].PalletPres) ,XIC(S001CNV1.Pallet[11].NoPalletPresTmr.DN) OTE(S001CNV1.Pallet[11].NoPalletPres) ,XIC(S001CNV1.Pallet[11].GooPalletPresTmr.DN) OTE(S001CNV1.Pallet[11].GoodPalletPres) ,XIC(S001CNV1.Pallet[11].PalletPresHBTmr.DN) OTE(S001CNV1.Pallet[11].PalletPresHB) ,XIC(S001CNV1.Pallet[11].BadPalletPresTmr.DN) OTE(S001CNV1.Pallet[11].BadPalletPres) ,XIC(S001CNV1.Pallet[11].PlletClearTmr.DN) OTE(S001CNV1.Pallet[11].PalletClear) ,XIC(S001CNV1.Pallet[11].LineFullTmr.DN) OTE(S001CNV1.Pallet[11].LineFull) ];
				N: [XIC(S001CNV1.Int.VM1.I1.1) XIC(Edit.Bit) MOV(2000,S001CNV1.Pallet[11].PalletPresTmr.PRE) TON(S001CNV1.Pallet[11].PalletPresTmr,?,?) ,XIO(S001CNV1.Pallet[11].PalletPres) MOV(2000,S001CNV1.Pallet[11].NoPalletPresTmr.PRE) TON(S001CNV1.Pallet[11].NoPalletPresTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.2) XIC(Edit.Bit) MOV(0,S001CNV1.Pallet[11].GooPalletPresTmr.PRE) TON(S001CNV1.Pallet[11].GooPalletPresTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.10) XIC(Edit.Bit) MOV(500,S001CNV1.Pallet[11].PalletPresHBTmr.PRE) TON(S001CNV1.Pallet[11].PalletPresHBTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.3) XIC(Edit.Bit) MOV(2000,S001CNV1.Pallet[11].BadPalletPresTmr.PRE) TON(S001CNV1.Pallet[11].BadPalletPresTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.12) XIC(Edit.Bit) MOV(500,S001CNV1.Pallet[11].PlletClearTmr.PRE) TON(S001CNV1.Pallet[11].PlletClearTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.9) XIC(Edit.Bit) MOV(500,S001CNV1.Pallet[11].LineFullTmr.PRE) TON(S001CNV1.Pallet[11].LineFullTmr,?,?) ];
				N: [XIC(S001CNV1.Pallet[11].PalletClear) OTU(S001CNV1.Pallet[11].PalletLivingMem) ,XIC(S001CNV1.M.RunningFwd) XIC(S001CNV1.Pallet[11].NoPalletPresTmr.DN) XIO(S001CNV1.Act[11].Work.Comp) OTL(S001CNV1.Pallet[11].PalletLivingMem) ];
				RC: "****************************************************************************************************$N"
				    "Actuator Advance Logic$N"
				    "****************************************************************************************************";
				N: [XIC(S001CNV1.Act[11].Home.AutoCmd) ,XIC(S001CNV1.Act[11].Home.ManualCmdPB) ]XIC(S001CNV1.Act[11].Home.Clr)OTE(S001CNV1.Act[11].Work.SealRst);
				N: [XIC(S001CNV1.Unld.AutoMode) XIC(S001CNV1.Act[11].Work.AutoCmd) ,XIC(S001CNV1.Unld.ManualMode) XIC(S001CNV1.Act[11].Work.ManualCmdPB) ,XIC(S001CNV1.Act[11].Work.Out) XIC(S001CNV1.Act[11].Work.Seal) ]XIC(S001CNV1.Act[11].Work.Clr)XIO(S001CNV1.Act[11].Work.SealRst)OTE(S001CNV1.Act[11].Work.Out);
				N: XIC(S001CNV1.Act[11].Work.Out)OTL(S001CNV1.Act[11].Work.Mem);
				N: XIC(S001CNV1.Act[11].Home.Out)OTU(S001CNV1.Act[11].Work.Mem);
				N: [XIC(S001CNV1.Act[11].Work.Pxs.0) XIO(S001CNV1.Act[11].Home.Pxs.0) ,XIO(S001CNV1.Act[11].Installed.0) ][XIC(S001CNV1.Act[11].Work.Pxs.1) XIO(S001CNV1.Act[11].Home.Pxs.1) ,XIO(S001CNV1.Act[11].Installed.1) ][XIC(S001CNV1.Act[11].Work.Pxs.2) XIO(S001CNV1.Act[11].Home.Pxs.2) ,XIO(S001CNV1.Act[11].Installed.2) ][XIC(S001CNV1.Act[11].Work.Pxs.3) XIO(S001CNV1.Act[11].Home.Pxs.3) ,XIO(S001CNV1.Act[11].Installed.3) ][XIC(S001CNV1.Act[11].Work.Pxs.4) XIO(S001CNV1.Act[11].Home.Pxs.4) ,XIO(S001CNV1.Act[11].Installed.4) ][XIC(S001CNV1.Act[11].Work.Pxs.5) XIO(S001CNV1.Act[11].Home.Pxs.5) ,XIO(S001CNV1.Act[11].Installed.5) ][XIC(S001CNV1.Act[11].Work.Pxs.6) XIO(S001CNV1.Act[11].Home.Pxs.6) ,XIO(S001CNV1.Act[11].Installed.6) ][XIC(S001CNV1.Act[11].Work.Pxs.7) XIO(S001CNV1.Act[11].Home.Pxs.7) ,XIO(S001CNV1.Act[11].Installed.7) ]OTE(S001CNV1.Act[11].Work.Comp);
				N: [XIC(S001CNV1.Act[11].Work.Out) [RTO(S001CNV1.Act[11].Work.FltTmr,?,?) ,XIC(S001CNV1.Act[11].Work.Comp) OTL(S001CNV1.Act[11].Work.FltTmr.DN) ] ,XIC(S001CNV1.Act[11].Home.Out) RES(S001CNV1.Act[11].Work.FltTmr) ,XIC(S001CNV1.Act[11].Work.FltTmr.DN) XIO(S001CNV1.Act[11].Work.Comp) XIC(S001CNV1.Int.PPActFltsEnbld) [OTE(S001CNV1.Act[11].Work.MtnFlt) ,XIC(S001CNV1.Act[11].Home.Comp) OTE(S001CNV1.Act[11].Work.VlvFlt) ] ];
				RC: "****************************************************************************************************$N"
				    "Actuator Open Logic$N"
				    "****************************************************************************************************";
				N: [XIC(S001CNV1.Act[11].Work.AutoCmd) ,XIC(S001CNV1.Act[11].Work.ManualCmdPB) ]XIC(S001CNV1.Act[11].Work.Clr)OTE(S001CNV1.Act[11].Home.SealRst);
				N: [XIC(S001CNV1.Unld.AutoMode) XIC(S001CNV1.Act[11].Home.AutoCmd) ,XIC(S001CNV1.Unld.ManualMode) XIC(S001CNV1.Act[11].Home.ManualCmdPB) ,XIC(S001CNV1.Act[11].Home.Out) XIC(S001CNV1.Act[11].Home.Seal) ]XIC(S001CNV1.Act[11].Home.Clr)XIO(S001CNV1.Act[11].Home.SealRst)OTE(S001CNV1.Act[11].Home.Out);
				N: XIC(S001CNV1.Act[11].Home.Out)OTL(S001CNV1.Act[11].Home.Mem);
				N: XIC(S001CNV1.Act[11].Work.Out)OTU(S001CNV1.Act[11].Home.Mem);
				N: [XIC(S001CNV1.Act[11].Home.Pxs.0) XIO(S001CNV1.Act[11].Work.Pxs.0) ,XIO(S001CNV1.Act[11].Installed.0) ][XIC(S001CNV1.Act[11].Home.Pxs.1) XIO(S001CNV1.Act[11].Work.Pxs.1) ,XIO(S001CNV1.Act[11].Installed.1) ][XIC(S001CNV1.Act[11].Home.Pxs.2) XIO(S001CNV1.Act[11].Work.Pxs.2) ,XIO(S001CNV1.Act[11].Installed.2) ][XIC(S001CNV1.Act[11].Home.Pxs.3) XIO(S001CNV1.Act[11].Work.Pxs.3) ,XIO(S001CNV1.Act[11].Installed.3) ][XIC(S001CNV1.Act[11].Home.Pxs.4) XIO(S001CNV1.Act[11].Work.Pxs.4) ,XIO(S001CNV1.Act[11].Installed.4) ][XIC(S001CNV1.Act[11].Home.Pxs.5) XIO(S001CNV1.Act[11].Work.Pxs.5) ,XIO(S001CNV1.Act[11].Installed.5) ][XIC(S001CNV1.Act[11].Home.Pxs.6) XIO(S001CNV1.Act[11].Work.Pxs.6) ,XIO(S001CNV1.Act[11].Installed.6) ][XIC(S001CNV1.Act[11].Home.Pxs.7) XIO(S001CNV1.Act[11].Work.Pxs.7) ,XIO(S001CNV1.Act[11].Installed.7) ]OTE(S001CNV1.Act[11].Home.Comp);
				N: [XIC(S001CNV1.Act[11].Home.Out) [RTO(S001CNV1.Act[11].Home.FltTmr,?,?) ,XIC(S001CNV1.Act[11].Home.Comp) OTL(S001CNV1.Act[11].Home.FltTmr.DN) ] ,XIC(S001CNV1.Act[11].Work.Out) RES(S001CNV1.Act[11].Home.FltTmr) ,XIC(S001CNV1.Act[11].Home.FltTmr.DN) XIO(S001CNV1.Act[11].Home.Comp) XIC(S001CNV1.Int.PPActFltsEnbld) [OTE(S001CNV1.Act[11].Home.MtnFlt) ,XIC(S001CNV1.Act[11].Work.Comp) OTE(S001CNV1.Act[11].Home.VlvFlt) ] ];
				N: [XIC(S001CNV1.Act[11].Home.MtnFlt) ,XIC(S001CNV1.Act[11].Home.VlvFlt) ,XIC(S001CNV1.Act[11].Work.MtnFlt) ,XIC(S001CNV1.Act[11].Work.VlvFlt) ]OTE(S001CNV1.Act[11].Faulted);
		END_ROUTINE

		ROUTINE D12_PreUnld_Stop 
				RC: "************************************************************$N"
				    "Stop Setup$N"
				    "************************************************************$N"
				    "*$N"
				    "* [ PalletPres ] will set this station$'s Pallet detect$N"
				    "* [ Good PalletPres ] Good Pallet Detected$N"
				    "* [ BadPalletPres ] Bad Pallet Detected$N"
				    "* [ LineClear ] will set line clear for this Stop. $N"
				    "* [ Line Full ] will set line full for this Stop.$N"
				    "If there$'s no switch for conditions above: should use $QAlways_Off$Q.$N"
				    "$N"
				    "Replace Edit.Bit or real Input signal, CNV01.sta.VM1.I1.XX  just is an example";
				N: NOP();
				N: XIC(S001CNV1.Int.CommOk)[XIC(S001CNV1.Pallet[12].PalletPresTmr.DN) OTE(S001CNV1.Pallet[12].PalletPres) ,XIC(S001CNV1.Pallet[12].NoPalletPresTmr.DN) OTE(S001CNV1.Pallet[12].NoPalletPres) ,XIC(S001CNV1.Pallet[12].GooPalletPresTmr.DN) OTE(S001CNV1.Pallet[12].GoodPalletPres) ,XIC(S001CNV1.Pallet[12].PalletPresHBTmr.DN) OTE(S001CNV1.Pallet[12].PalletPresHB) ,XIC(S001CNV1.Pallet[12].BadPalletPresTmr.DN) OTE(S001CNV1.Pallet[12].BadPalletPres) ,XIC(S001CNV1.Pallet[12].PlletClearTmr.DN) OTE(S001CNV1.Pallet[12].PalletClear) ,XIC(S001CNV1.Pallet[12].LineFullTmr.DN) OTE(S001CNV1.Pallet[12].LineFull) ];
				N: [XIC(S001CNV1.Int.VM1.I1.1) XIC(Edit.Bit) MOV(2000,S001CNV1.Pallet[12].PalletPresTmr.PRE) TON(S001CNV1.Pallet[12].PalletPresTmr,?,?) ,XIO(S001CNV1.Pallet[12].PalletPres) MOV(2000,S001CNV1.Pallet[12].NoPalletPresTmr.PRE) TON(S001CNV1.Pallet[12].NoPalletPresTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.2) XIC(Edit.Bit) MOV(0,S001CNV1.Pallet[12].GooPalletPresTmr.PRE) TON(S001CNV1.Pallet[12].GooPalletPresTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.10) XIC(Edit.Bit) MOV(500,S001CNV1.Pallet[12].PalletPresHBTmr.PRE) TON(S001CNV1.Pallet[12].PalletPresHBTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.3) XIC(Edit.Bit) MOV(2000,S001CNV1.Pallet[12].BadPalletPresTmr.PRE) TON(S001CNV1.Pallet[12].BadPalletPresTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.12) XIC(Edit.Bit) MOV(500,S001CNV1.Pallet[12].PlletClearTmr.PRE) TON(S001CNV1.Pallet[12].PlletClearTmr,?,?) ,XIC(S001CNV1.Int.VM1.I1.9) XIC(Edit.Bit) MOV(500,S001CNV1.Pallet[12].LineFullTmr.PRE) TON(S001CNV1.Pallet[12].LineFullTmr,?,?) ];
				N: [XIC(S001CNV1.Pallet[12].PalletClear) OTU(S001CNV1.Pallet[12].PalletLivingMem) ,XIC(S001CNV1.M.RunningFwd) XIC(S001CNV1.Pallet[12].NoPalletPresTmr.DN) XIO(S001CNV1.Act[12].Work.Comp) OTL(S001CNV1.Pallet[12].PalletLivingMem) ];
				RC: "****************************************************************************************************$N"
				    "Actuator Advance Logic$N"
				    "****************************************************************************************************";
				N: [XIC(S001CNV1.Act[12].Home.AutoCmd) ,XIC(S001CNV1.Act[12].Home.ManualCmdPB) ]XIC(S001CNV1.Act[12].Home.Clr)OTE(S001CNV1.Act[12].Work.SealRst);
				N: [XIC(S001CNV1.Unld.AutoMode) XIC(S001CNV1.Act[12].Work.AutoCmd) ,XIC(S001CNV1.Unld.ManualMode) XIC(S001CNV1.Act[12].Work.ManualCmdPB) ,XIC(S001CNV1.Act[12].Work.Out) XIC(S001CNV1.Act[12].Work.Seal) ]XIC(S001CNV1.Act[12].Work.Clr)XIO(S001CNV1.Act[12].Work.SealRst)OTE(S001CNV1.Act[12].Work.Out);
				N: XIC(S001CNV1.Act[12].Work.Out)OTL(S001CNV1.Act[12].Work.Mem);
				N: XIC(S001CNV1.Act[12].Home.Out)OTU(S001CNV1.Act[12].Work.Mem);
				N: [XIC(S001CNV1.Act[12].Work.Pxs.0) XIO(S001CNV1.Act[12].Home.Pxs.0) ,XIO(S001CNV1.Act[12].Installed.0) ][XIC(S001CNV1.Act[12].Work.Pxs.1) XIO(S001CNV1.Act[12].Home.Pxs.1) ,XIO(S001CNV1.Act[12].Installed.1) ][XIC(S001CNV1.Act[12].Work.Pxs.2) XIO(S001CNV1.Act[12].Home.Pxs.2) ,XIO(S001CNV1.Act[12].Installed.2) ][XIC(S001CNV1.Act[12].Work.Pxs.3) XIO(S001CNV1.Act[12].Home.Pxs.3) ,XIO(S001CNV1.Act[12].Installed.3) ][XIC(S001CNV1.Act[12].Work.Pxs.4) XIO(S001CNV1.Act[12].Home.Pxs.4) ,XIO(S001CNV1.Act[12].Installed.4) ][XIC(S001CNV1.Act[12].Work.Pxs.5) XIO(S001CNV1.Act[12].Home.Pxs.5) ,XIO(S001CNV1.Act[12].Installed.5) ][XIC(S001CNV1.Act[12].Work.Pxs.6) XIO(S001CNV1.Act[12].Home.Pxs.6) ,XIO(S001CNV1.Act[12].Installed.6) ][XIC(S001CNV1.Act[12].Work.Pxs.7) XIO(S001CNV1.Act[12].Home.Pxs.7) ,XIO(S001CNV1.Act[12].Installed.7) ]OTE(S001CNV1.Act[12].Work.Comp);
				N: [XIC(S001CNV1.Act[12].Work.Out) [RTO(S001CNV1.Act[12].Work.FltTmr,?,?) ,XIC(S001CNV1.Act[12].Work.Comp) OTL(S001CNV1.Act[12].Work.FltTmr.DN) ] ,XIC(S001CNV1.Act[12].Home.Out) RES(S001CNV1.Act[12].Work.FltTmr) ,XIC(S001CNV1.Act[12].Work.FltTmr.DN) XIO(S001CNV1.Act[12].Work.Comp) XIC(S001CNV1.Int.PPActFltsEnbld) [OTE(S001CNV1.Act[12].Work.MtnFlt) ,XIC(S001CNV1.Act[12].Home.Comp) OTE(S001CNV1.Act[12].Work.VlvFlt) ] ];
				RC: "****************************************************************************************************$N"
				    "Actuator Open Logic$N"
				    "****************************************************************************************************";
				N: [XIC(S001CNV1.Act[12].Work.AutoCmd) ,XIC(S001CNV1.Act[12].Work.ManualCmdPB) ]XIC(S001CNV1.Act[12].Work.Clr)OTE(S001CNV1.Act[12].Home.SealRst);
				N: [XIC(S001CNV1.Unld.AutoMode) XIC(S001CNV1.Act[12].Home.AutoCmd) ,XIC(S001CNV1.Unld.ManualMode) XIC(S001CNV1.Act[12].Home.ManualCmdPB) ,XIC(S001CNV1.Act[12].Home.Out) XIC(S001CNV1.Act[12].Home.Seal) ]XIC(S001CNV1.Act[12].Home.Clr)XIO(S001CNV1.Act[12].Home.SealRst)OTE(S001CNV1.Act[12].Home.Out);
				N: XIC(S001CNV1.Act[12].Home.Out)OTL(S001CNV1.Act[12].Home.Mem);
				N: XIC(S001CNV1.Act[12].Work.Out)OTU(S001CNV1.Act[12].Home.Mem);
				N: [XIC(S001CNV1.Act[12].Home.Pxs.0) XIO(S001CNV1.Act[12].Work.Pxs.0) ,XIO(S001CNV1.Act[12].Installed.0) ][XIC(S001CNV1.Act[12].Home.Pxs.1) XIO(S001CNV1.Act[12].Work.Pxs.1) ,XIO(S001CNV1.Act[12].Installed.1) ][XIC(S001CNV1.Act[12].Home.Pxs.2) XIO(S001CNV1.Act[12].Work.Pxs.2) ,XIO(S001CNV1.Act[12].Installed.2) ][XIC(S001CNV1.Act[12].Home.Pxs.3) XIO(S001CNV1.Act[12].Work.Pxs.3) ,XIO(S001CNV1.Act[12].Installed.3) ][XIC(S001CNV1.Act[12].Home.Pxs.4) XIO(S001CNV1.Act[12].Work.Pxs.4) ,XIO(S001CNV1.Act[12].Installed.4) ][XIC(S001CNV1.Act[12].Home.Pxs.5) XIO(S001CNV1.Act[12].Work.Pxs.5) ,XIO(S001CNV1.Act[12].Installed.5) ][XIC(S001CNV1.Act[12].Home.Pxs.6) XIO(S001CNV1.Act[12].Work.Pxs.6) ,XIO(S001CNV1.Act[12].Installed.6) ][XIC(S001CNV1.Act[12].Home.Pxs.7) XIO(S001CNV1.Act[12].Work.Pxs.7) ,XIO(S001CNV1.Act[12].Installed.7) ]OTE(S001CNV1.Act[12].Home.Comp);
				N: [XIC(S001CNV1.Act[12].Home.Out) [RTO(S001CNV1.Act[12].Home.FltTmr,?,?) ,XIC(S001CNV1.Act[12].Home.Comp) OTL(S001CNV1.Act[12].Home.FltTmr.DN) ] ,XIC(S001CNV1.Act[12].Work.Out) RES(S001CNV1.Act[12].Home.FltTmr) ,XIC(S001CNV1.Act[12].Home.FltTmr.DN) XIO(S001CNV1.Act[12].Home.Comp) XIC(S001CNV1.Int.PPActFltsEnbld) [OTE(S001CNV1.Act[12].Home.MtnFlt) ,XIC(S001CNV1.Act[12].Work.Comp) OTE(S001CNV1.Act[12].Home.VlvFlt) ] ];
				N: [XIC(S001CNV1.Act[12].Home.MtnFlt) ,XIC(S001CNV1.Act[12].Home.VlvFlt) ,XIC(S001CNV1.Act[12].Work.MtnFlt) ,XIC(S001CNV1.Act[12].Work.VlvFlt) ]OTE(S001CNV1.Act[12].Faulted);
		END_ROUTINE

		ROUTINE Main 
				N: JSR(B01_MapInputs,0);
				N: JSR(B00_NetworkDiag,0);
				N: JSR(C00_Conveyor_Motor,0);
				N: JSR(D00_Motion,0);
				N: JSR(D01_Part_Present,0);
				N: JSR(D02_Load_Stop,0);
				N: JSR(D03_Preload_Stop,0);
				N: JSR(D11_Unload_Stop,0);
				N: JSR(D12_PreUnld_Stop,0);
				N: JSR(P00_StationToSfty,0);
				N: JSR(P00_Station_Load,0);
				N: JSR(P01_Station_Unld,0);
				N: JSR(Y00_Alarms_L1,0);
				N: JSR(Y00_Alarms_L2,0);
				N: JSR(Y00_Alarms_L3,0);
				N: JSR(Z00_MapOutputs,0);
		END_ROUTINE

		ROUTINE P00_StationToSfty 
		END_ROUTINE

		ROUTINE P00_Station_Load 
				N: [XIC(S001CNV1.Int.VM1.ENet.Running) ,XIO(S001CNV1.Int.VM1Installed) ][XIC(S001CNV1.Int.VM2.ENet.Running) ,XIO(S001CNV1.Int.VM2Installed) ][XIC(S001CNV1.Int.VM3.ENet.Running) ,XIO(S001CNV1.Int.VM3Installed) ]OTE(S001CNV1.Load.CommPPOk)OTE(S001CNV1.Load.CommAirOk)OTE(S001CNV1.Load.CommFixOk);
				RC: "************************************************************$N"
				    "Conveyor$N"
				    "Setup model 1 OK Air at Load Side$N"
				    "-l l- Replace Edit.Bit for the feedback by design $N"
				    "************************************************************";
				N: XIC(Edit.Bit)MOV(2000,S001CNV1.Load.AirOnTmr.PRE)TON(S001CNV1.Load.AirOnTmr,?,?);
				N: XIC(S001CNV1.Load.AirOnTmr.DN)OTE(S001CNV1.Load.AirOn);
				N: XIC(S001CNV1.Load.PP[1].stsPPOff)XIC(S001CNV1.Load.PP[2].stsPPOff)XIC(S001CNV1.Load.PP[3].stsPPOff)XIC(S001CNV1.Load.PP[4].stsPPOff)XIC(S001CNV1.Load.PP[5].stsPPOff)XIC(S001CNV1.Load.PP[5].stsPPOff)XIC(S001CNV1.Load.PP[6].stsPPOff)XIC(S001CNV1.Load.PP[7].stsPPOff)XIC(S001CNV1.Load.PP[8].stsPPOff)XIC(S001CNV1.Load.PP[9].stsPPOff)OTE(S001CNV1.Load.PartsPresNo);
				RC: "************************************************************$N"
				    "Conveyor Load side Part Present Summary$N"
				    "************************************************************$N"
				    "$N"
				    "OTU Bit if not used or required";
				N: NOP();
				N: XIC(S001CNV1.Load.PartsPresNo)XIC(S001CNV1.Load.SR.Int.NoPart)OTE(S001CNV1.Load.Empty);
				N: [XIC(S001CNV1.Load.PP[1].stsPPOn) XIC(S001CNV1.Load.PP[2].stsPPOff) ,XIC(S001CNV1.Load.PP[3].stsPPOn) XIC(S001CNV1.Load.PP[4].stsPPOff) ]OTE(S001CNV1.Load.AllPartsPres1);
				N: [XIC(S001CNV1.Load.PP[1].PPAnySensor) ,XIC(S001CNV1.Load.PP[3].PPAnySensor) ]OTE(S001CNV1.Load.AnyPartPres1);
				N: [XIC(S001CNV1.Load.PP[1].stsPPOn) XIC(S001CNV1.Load.PP[2].stsPPOn) ,XIC(S001CNV1.Load.PP[3].stsPPOn) XIC(S001CNV1.Load.PP[4].stsPPOn) ]OTE(S001CNV1.Load.AllPartsPres2);
				N: [XIC(S001CNV1.Load.PP[2].PPAnySensor) ,XIC(S001CNV1.Load.PP[4].PPAnySensor) ]OTE(S001CNV1.Load.AnyPartPres2);
				N: OTU(S001CNV1.Load.AllPartsPres3);
				N: OTU(S001CNV1.Load.AnyPartPres3);
				N: [XIC(S001CNV1.Load.SR.Int.Model1) XIC(S001CNV1.Load.PP[1].stsPPOn) XIC(S001CNV1.Load.PP[2].stsPPOn) ,XIC(S001CNV1.Load.SR.Int.Model2) XIC(S001CNV1.Load.PP[3].stsPPOn) XIC(S001CNV1.Load.PP[4].stsPPOn) ]XIC(Edit.Bit)OTE(S001CNV1.Load.AllPPandSR);
				RC: "LOAD SIDE$N"
				    "$N"
				    "$N"
				    "************************************************************$N"
				    "Auto Mode Load Side$N"
				    "************************************************************$N"
				    "";
				N: [XIO(S001CNV1.Load.ManualModePB) XIO(S001CNV1.Load.NoModePB) XIO(Z005_040.NoModePB) ,XIC(S001CNV1.Load.AutoMode) ][XIC(S001CNV1.Load.NoMode) [XIC(S001CNV1.Load.AutoSelPB) ,XIC(Z005_040.GlobalAutoModeSelPB) ,XIC(S001CNV1.Load.AutoModePB) ,XIC(Z005_040.GlobalAutoModePB) ] ,XIC(S001CNV1.Load.AutoSel) ]OTE(S001CNV1.Load.AutoSel);
				RC: "************************************************************$N"
				    "Station Auto Mode Load Side$N"
				    "Interlocks$N"
				    "************************************************************";
				N: [XIC(S001CNV1.Load.PowerEnbld) OTE(S001CNV1.Load.AutoModeSetup.Inp_Intlk00) ,XIO(S001CNV1Sfty.AnyBypassSwitchOn) OTE(S001CNV1.Load.AutoModeSetup.Inp_Intlk01) ,XIC(S001CNV1.Load.AutoSel) OTE(S001CNV1.Load.AutoModeSetup.Inp_Intlk02) ,XIO(S001CNV1.Load.AutoModeStop) OTE(S001CNV1.Load.AutoModeSetup.Inp_Intlk03) ,XIO(S001CNV1.Load.ManualMode) OTE(S001CNV1.Load.AutoModeSetup.Inp_Intlk04) ,XIO(S001CNV1.Load.Fault) OTE(S001CNV1.Load.AutoModeSetup.Inp_Intlk05) ,XIO(S001CNV1.Load.ActuatorFault) OTE(S001CNV1.Load.AutoModeSetup.Inp_Intlk06) ,XIC(S001CNV1.Load.AirOn) OTE(S001CNV1.Load.AutoModeSetup.Inp_Intlk07) ,XIC(S001CNV1.Int.CommOk) OTE(S001CNV1.Load.AutoModeSetup.Inp_Intlk08) ,XIO(S001CNV1.Load.RbtInTeach) XIO(S001CNV1.Load.RbtTPEnale) OTE(S001CNV1.Load.AutoModeSetup.Inp_Intlk09) ,[XIC(Z005_040.DryCycle) XIO(S001CNV1.Load.AnySwitchOn) ,XIO(Z005_040.DryCycle) ] OTE(S001CNV1.Load.AutoModeSetup.Inp_Intlk10) ,P_Intlk(S001CNV1.Load.AutoModeSetup) ];
				RC: "************************************************************$N"
				    "Auto Running$N"
				    "************************************************************";
				N: XIC(S001CNV1.Load.AutoModeSetup.Sts_IntlkOK)[[XIC(S001CNV1.Load.AutoModePB) ,XIC(Z005_040.GlobalAutoModePB) ] TON(S001CNV1.Load.AutoDlyTmr,?,?) XIC(S001CNV1.Load.AutoDlyTmr.DN) ,XIC(S001CNV1.Load.AutoMode) ]OTE(S001CNV1.Load.AutoMode);
				RC: "************************************************************$N"
				    "Auto Cycle Stop Load Side$N"
				    "************************************************************$N"
				    "";
				N: XIC(S001CNV1.Load.AutoMode)[XIC(S001CNV1.Load.NoModePB) ,XIC(Z005_040.AutoModeStopReq) ,XIC(S001CNV1.Load.AutoModeStopReq) ]XIO(S001CNV1.Load.AutoModeStop)OTE(S001CNV1.Load.AutoModeStopReq);
				RC: "************************************************************$N"
				    "Load Auto Mode Stop Enable $N"
				    "-l l- Replace edit.bot for add robots $N"
				    "************************************************************$N"
				    "";
				N: XIC(S001CNV1.Load.KnownPos)[XIC(S005RB01.I1.Pg_Paused) ,XIC(S005RB01.I1.RbtHeld) ,XIC(S005RB01.I1.RbtFaulted) ][XIC(Edit.Bit) ,XIC(Edit.Bit) ,XIC(Edit.Bit) ]OTE(S001CNV1.Load.AutoModeStopEnable);
				N: XIC(S001CNV1.Load.AutoMode)XIC(S001CNV1.Load.AutoModeStopReq)XIC(S001CNV1.Load.AutoModeStopEnable)OTE(S001CNV1.Load.AutoModeStop);
				RC: "************************************************************$N"
				    "Load side Manual Mode$N"
				    "************************************************************$N"
				    "";
				N: XIO(S001CNV1.Load.NoModePB)XIO(Z005_040.NoModePB)XIO(S001CNV1.Load.AutoSelPB)XIO(S001CNV1.Load.AutoSel)[XIC(S001CNV1.Load.NoMode) [XIC(S001CNV1.Load.ManualModePB) ,XIC(Z005_040.ManualModePB) ] ,XIC(S001CNV1.Load.ManualMode) ]OTE(S001CNV1.Load.ManualMode);
				RC: "************************************************************$N"
				    "Dry Cycle$N"
				    "************************************************************$N"
				    "";
				N: XIC(Z005_040.DryCycle)OTE(S001CNV1.Int.DryCycle);
				RC: "************************************************************$N"
				    "Hold at End Of Cycle$N"
				    "************************************************************$N"
				    "";
				N: XIC(S001CNV1.Load.HoldEndOfCyclePB)ONS(S001CNV1.Int.ONS.10)[XIO(S001CNV1.Load.HoldEndOfCycle) ONS(S001CNV1.Int.ONS.11) OTL(S001CNV1.Load.HoldEndOfCycle) ,XIC(S001CNV1.Load.HoldEndOfCycle) XIO(S001CNV1.Int.ONS.11) OTU(S001CNV1.Load.HoldEndOfCycle) ];
				RC: "************************************************************$N"
				    "No Mode Load Side$N"
				    "************************************************************$N"
				    "";
				N: XIO(S001CNV1.Load.AutoSel)XIO(S001CNV1.Load.ManualMode)OTE(S001CNV1.Load.NoMode);
				RC: "************************************************************$N"
				    "Load Side Faulted$N"
				    "************************************************************";
				N: [XIC(S001CNV1.Load.PPFault) ,XIC(S001CNV1.Load.ActuatorFault) ]OTE(S001CNV1.Load.Fault);
				RC: "************************************************************$N"
				    "Robots interference with Station$'s$N"
				    "Tool/Fixture$N"
				    "Load side$N"
				    "************************************************************$N"
				    "";
				N: NOP();
				N: [XIC(S005RB01.Int.ClearOfTool1) XIC(S005RB01.Int.ClearOfTool2) XIC(Edit.Bit) OTE(S001CNV1.Load.RbtsClr.Inp_Perm00) ,XIC(S005RB01.Int.ClearOfDrop1) XIC(S005RB01.Int.ClearOfDrop2) XIC(Edit.Bit) OTE(S001CNV1.Load.RbtsClr.Inp_Perm01) ,XIC(S005RB02.Int.ClearOfTool1) XIC(S005RB02.Int.ClearOfTool2) XIC(Edit.Bit) OTE(S001CNV1.Load.RbtsClr.Inp_Perm02) ,XIC(S005RB02.Int.ClearOfPick1) XIC(S005RB02.Int.ClearOfPick2) XIC(Edit.Bit) OTE(S001CNV1.Load.RbtsClr.Inp_Perm03) ,P_Perm(S001CNV1.Load.RbtsClr) ];
				RC: "************************************************************$N"
				    "Process completes memories$N"
				    "SET$N"
				    "************************************************************";
				N: NOP();
				RC: "########################################$N"
				    "Load Setups$N"
				    "########################################";
				N: XIC(S001CNV1.Act[1].Work.Comp)OTE(S001CNV1.Load.Pos1);
				N: [XIC(Edit.Bit) OTE(S001CNV1.Load.Pos2) ,XIC(Edit.Bit) OTE(S001CNV1.Load.Pos3) ,OTU(S001CNV1.Load.Pos4) ];
				N: XIC(S001CNV1.Load.AutoSel)[XIC(S001CNV1.Load.Pos1) XIC(Edit.Bit) ,XIC(S001CNV1.Load.Pos2) XIC(Edit.Bit) ,XIC(S001CNV1.Load.Pos3) XIC(Edit.Bit) ,XIC(S001CNV1.Load.Pos4) XIC(Edit.Bit) ]XIC(S001CNV1.Pallet[1].PalletPres)XIC(S001CNV1.Pallet[1].GoodPalletPres)XIO(S001CNV1.Pallet[1].BadPalletPres)XIO(S001CNV1.Load.TaskComp)XIO(S001CNV1.Load.CycComp)XIC(S001CNV1.Load.RbtsClr.Sts_PermOK)OTE(S001CNV1.Load.Clear);
				N: [XIC(S005RB01.I1.AtDrop1) XIO(S005RB01.Int.ClearOfTool1) XIO(S005RB01.Int.ClearOfDrop1) XIC(Edit.Bit) ,XIC(S001CNV1.Load.Comp1) ]XIO(S001CNV1.Load.RstCycComp)OTE(S001CNV1.Load.Comp1);
				N: [XIC(S005RB01.I1.AtDrop2) XIO(S005RB01.Int.ClearOfTool2) XIO(S005RB01.Int.ClearOfDrop2) XIC(Edit.Bit) ,XIC(S001CNV1.Load.Comp2) ]XIO(S001CNV1.Load.RstCycComp)OTE(S001CNV1.Load.Comp2);
				N: XIC(Edit.Bit)OTE(S001CNV1.Load.Comp3);
				N: XIC(Edit.Bit)OTE(S001CNV1.Load.Comp4);
				N: XIC(S001CNV1.Load.Comp1)OTE(S001CNV1.Load.Comp);
				RC: "########################################$N"
				    "Station Tasks Complete$N"
				    "########################################";
				N: [XIC(S001CNV1.Load.Comp1) ,XIC(S001CNV1.Load.Comp2) ,XIC(S001CNV1.Load.Comp3) ,XIC(S001CNV1.Load.Comp4) ]XIC(Edit.Bit)OTL(S001CNV1.Load.TaskComp);
				RC: "######################################$N"
				    "Conveyor Cycle  Complete$N"
				    "Load side$N"
				    "########################################";
				N: XIC(S001CNV1.Load.TaskComp)XIC(S001CNV1.Act[1].Home.Comp)XIC(Edit.Bit)OTL(S001CNV1.Load.CycComp);
				N: XIC(S001CNV1.Load.RstCycComp)OTU(S001CNV1.Load.TaskComp)OTU(S001CNV1.Load.CycComp);
				N: XIC(S001CNV1.Pallet[1].PalletLivingMem)OTE(S001CNV1.Load.RstCycComp);
		END_ROUTINE

		ROUTINE P01_Station_Unld 
				N: [XIC(S001CNV1.Int.VM4.ENet.Running) ,XIO(S001CNV1.Int.VM4Installed) ][XIC(S001CNV1.Int.VM5.ENet.Running) ,XIO(S001CNV1.Int.VM5Installed) ][XIC(S001CNV1.Int.VM6.ENet.Running) ,XIO(S001CNV1.Int.VM6Installed) ]OTE(S001CNV1.Unld.CommPPOk)OTE(S001CNV1.Unld.CommAirOk)OTE(S001CNV1.Unld.CommFixOk);
				RC: "************************************************************$N"
				    "Conveyor$N"
				    "Setup Air OK Air at Unload Side$N"
				    "-l l- Replace Edit.Bit for the feedback by design $N"
				    "************************************************************";
				N: XIC(Edit.Bit)MOV(2000,S001CNV1.Unld.AirOnTmr.PRE)TON(S001CNV1.Unld.AirOnTmr,?,?);
				N: XIC(S001CNV1.Unld.AirOnTmr.DN)OTE(S001CNV1.Unld.AirOn);
				N: XIC(S001CNV1.Unld.PP[1].stsPPOff)XIC(S001CNV1.Unld.PP[2].stsPPOff)XIC(S001CNV1.Unld.PP[3].stsPPOff)XIC(S001CNV1.Unld.PP[4].stsPPOff)XIC(S001CNV1.Unld.PP[5].stsPPOff)XIC(S001CNV1.Unld.PP[5].stsPPOff)XIC(S001CNV1.Unld.PP[6].stsPPOff)XIC(S001CNV1.Unld.PP[7].stsPPOff)XIC(S001CNV1.Unld.PP[8].stsPPOff)XIC(S001CNV1.Unld.PP[9].stsPPOff)OTE(S001CNV1.Unld.PartsPresNo);
				RC: "************************************************************$N"
				    "Conveyor Unload side Part Present Summary$N"
				    "************************************************************$N"
				    "$N"
				    "OTU Bit if not used or required";
				N: NOP();
				N: XIC(S001CNV1.Unld.PartsPresNo)XIC(S001CNV1.Unld.SR.Int.NoPart)OTE(S001CNV1.Unld.Empty);
				N: [XIC(S001CNV1.Unld.PP[1].stsPPOn) XIC(S001CNV1.Unld.PP[2].stsPPOn) ,XIC(S001CNV1.Unld.PP[3].stsPPOn) XIC(S001CNV1.Unld.PP[4].stsPPOn) ]OTE(S001CNV1.Unld.AllPartsPres1);
				N: [XIC(S001CNV1.Unld.PP[1].PPAnySensor) ,XIC(S001CNV1.Unld.PP[2].PPAnySensor) ,XIC(S001CNV1.Unld.PP[3].PPAnySensor) ,XIC(S001CNV1.Unld.PP[1].PPAnySensor) ]OTE(S001CNV1.Unld.AnyPartPres1);
				N: OTU(S001CNV1.Unld.AllPartsPres2)OTU(S001CNV1.Unld.AllPartsPres3)OTU(S001CNV1.Unld.AllPartsPres4);
				N: [XIC(S001CNV1.Unld.SR.Int.Model1) XIC(S001CNV1.Unld.PP[1].stsPPOn) XIC(S001CNV1.Unld.PP[2].stsPPOn) ,XIC(S001CNV1.Unld.SR.Int.Model2) XIC(S001CNV1.Unld.PP[3].stsPPOn) XIC(S001CNV1.Unld.PP[4].stsPPOn) ]XIC(Edit.Bit)OTE(S001CNV1.Unld.AllPPandSR);
				RC: "UNLOAD SIDE$N"
				    "$N"
				    "************************************************************$N"
				    "Auto Mode Unload Side$N"
				    "************************************************************$N"
				    "";
				N: [XIO(S001CNV1.Unld.ManualModePB) XIO(S001CNV1.Unld.NoModePB) XIO(Z005_040.NoModePB) ,XIC(S001CNV1.Unld.AutoMode) ][XIC(S001CNV1.Unld.NoMode) [XIC(S001CNV1.Unld.AutoSelPB) ,XIC(Z005_040.GlobalAutoModeSelPB) ,XIC(S001CNV1.Unld.AutoModePB) ,XIC(Z005_040.GlobalAutoModePB) ] ,XIC(S001CNV1.Unld.AutoSel) ]OTE(S001CNV1.Unld.AutoSel);
				RC: "************************************************************$N"
				    "Station Auto Mode Load Side$N"
				    "Interlocks$N"
				    "************************************************************";
				N: [XIC(S001CNV1.Unld.PowerEnbld) OTE(S001CNV1.Unld.AutoModeSetup.Inp_Intlk00) ,XIO(S001CNV1Sfty.AnyBypassSwitchOn) OTE(S001CNV1.Unld.AutoModeSetup.Inp_Intlk01) ,XIC(S001CNV1.Unld.AutoMode) OTE(S001CNV1.Unld.AutoModeSetup.Inp_Intlk02) ,XIO(S001CNV1.Unld.AutoModeStop) OTE(S001CNV1.Unld.AutoModeSetup.Inp_Intlk03) ,XIO(S001CNV1.Unld.ManualMode) OTE(S001CNV1.Unld.AutoModeSetup.Inp_Intlk04) ,XIO(S001CNV1.Unld.Fault) OTE(S001CNV1.Unld.AutoModeSetup.Inp_Intlk05) ,XIO(S001CNV1.Unld.ActuatorFault) OTE(S001CNV1.Unld.AutoModeSetup.Inp_Intlk06) ,XIC(S001CNV1.Unld.AirOn) OTE(S001CNV1.Unld.AutoModeSetup.Inp_Intlk07) ,XIC(S001CNV1.Int.CommOk) OTE(S001CNV1.Unld.AutoModeSetup.Inp_Intlk08) ,XIO(S001CNV1.Unld.RbtInTeach) XIO(S001CNV1.Unld.RbtTPEnale) OTE(S001CNV1.Unld.AutoModeSetup.Inp_Intlk09) ,[XIC(Z005_040.DryCycle) XIO(S001CNV1.Unld.AnySwitchOn) ,XIO(Z005_040.DryCycle) ] OTE(S001CNV1.Unld.AutoModeSetup.Inp_Intlk10) ,P_Intlk(S001CNV1.Unld.AutoModeSetup) ];
				RC: "************************************************************$N"
				    "Auto Running$N"
				    "************************************************************";
				N: XIC(S001CNV1.Unld.AutoModeSetup.Sts_IntlkOK)[[XIC(S001CNV1.Unld.AutoModePB) ,XIC(Z005_040.GlobalAutoModePB) ] TON(S001CNV1.Unld.AutoDlyTmr,?,?) XIC(S001CNV1.Unld.AutoDlyTmr.DN) ,XIC(S001CNV1.Unld.AutoMode) ]OTE(S001CNV1.Unld.AutoMode);
				RC: "************************************************************$N"
				    "Auto Cycle Stop Unload Side$N"
				    "************************************************************$N"
				    "";
				N: XIC(S001CNV1.Unld.AutoMode)[XIC(S001CNV1.Unld.NoModePB) ,XIC(Z005_040.AutoModeStopReq) ,XIC(S001CNV1.Unld.AutoModeStopReq) ]XIO(S001CNV1.Unld.AutoModeStop)OTE(S001CNV1.Unld.AutoModeStopReq);
				RC: "************************************************************$N"
				    "Unload Auto Mode Stop Enable $N"
				    "-l l- Replace edit.bot for add robots $N"
				    "************************************************************$N"
				    "";
				N: XIC(S001CNV1.Unld.KnownPos)[XIC(S005RB01.I1.Pg_Paused) ,XIC(S005RB01.I1.RbtHeld) ,XIC(S005RB01.I1.RbtFaulted) ][XIC(Edit.Bit) ,XIC(Edit.Bit) ,XIC(Edit.Bit) ]OTE(S001CNV1.Unld.AutoModeStopEnable);
				N: XIC(S001CNV1.Unld.AutoMode)XIC(S001CNV1.Unld.AutoModeStopReq)XIC(S001CNV1.Unld.AutoModeStopEnable)OTE(S001CNV1.Unld.AutoModeStop);
				RC: "************************************************************$N"
				    "Unld Side Manual Mode$N"
				    "************************************************************$N"
				    "";
				N: XIO(S001CNV1.Unld.NoModePB)XIO(Z005_040.NoModePB)XIO(S001CNV1.Unld.AutoModePB)XIO(S001CNV1.Unld.AutoSel)[XIC(S001CNV1.Unld.NoMode) [XIC(S001CNV1.Unld.ManualModePB) ,XIC(Z005_040.ManualModePB) ] ,XIC(S001CNV1.Unld.ManualMode) ]OTE(S001CNV1.Unld.ManualMode);
				RC: "************************************************************$N"
				    "Hold at End Of Cycle$N"
				    "************************************************************$N"
				    "";
				N: XIC(S001CNV1.Unld.HoldEndOfCyclePB)ONS(S001CNV1.Int.ONS.12)[XIO(S001CNV1.Unld.HoldEndOfCycle) ONS(S001CNV1.Int.ONS.13) OTL(S001CNV1.Unld.HoldEndOfCycle) ,XIC(S001CNV1.Unld.HoldEndOfCycle) XIO(S001CNV1.Int.ONS.13) OTU(S001CNV1.Unld.HoldEndOfCycle) ];
				RC: "************************************************************$N"
				    "No Mode Unload Side$N"
				    "************************************************************$N"
				    "";
				N: XIO(S001CNV1.Unld.AutoSel)XIO(S001CNV1.Unld.ManualMode)OTE(S001CNV1.Unld.NoMode);
				RC: "************************************************************$N"
				    "Unload Side Faulted$N"
				    "************************************************************$N"
				    "";
				N: [XIC(S001CNV1.Unld.PPFault) ,XIC(S001CNV1.Unld.ActuatorFault) ]OTE(S001CNV1.Unld.Fault);
				N: [XIC(S001CNV1.Act[10].Faulted) ,XIC(S001CNV1.Act[11].Faulted) ,XIC(S001CNV1.Act[12].Faulted) ,XIC(S001CNV1.Act[13].Faulted) ,XIC(S001CNV1.Act[14].Faulted) ,XIC(S001CNV1.Act[15].Faulted) ,XIC(S001CNV1.Act[16].Faulted) ,XIC(S001CNV1.Act[17].Faulted) ,XIC(S001CNV1.Act[18].Faulted) ,XIC(S001CNV1.Act[19].Faulted) ]OTE(S001CNV1.Unld.ActuatorFault);
				RC: "************************************************************$N"
				    "Robots interference with Station$'s$N"
				    "Tool/Fixture$N"
				    "Unload side$N"
				    "************************************************************$N"
				    "";
				N: NOP();
				N: [XIC(S005RB01.Int.ClearOfTool1) XIC(S005RB01.Int.ClearOfTool2) XIC(Edit.Bit) OTE(S001CNV1.Unld.RbtsClr.Inp_Perm00) ,XIC(S005RB01.Int.ClearOfDrop1) XIC(S005RB01.Int.ClearOfDrop2) XIC(Edit.Bit) OTE(S001CNV1.Unld.RbtsClr.Inp_Perm01) ,XIC(S005RB02.Int.ClearOfTool1) XIC(S005RB02.Int.ClearOfTool2) XIC(Edit.Bit) OTE(S001CNV1.Unld.RbtsClr.Inp_Perm02) ,XIC(S005RB02.Int.ClearOfPick1) XIC(S005RB02.Int.ClearOfPick2) XIC(Edit.Bit) OTE(S001CNV1.Unld.RbtsClr.Inp_Perm03) ,P_Perm(S001CNV1.Unld.RbtsClr) ];
				RC: "************************************************************$N"
				    "Process completes memories$N"
				    "SET$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Process completes memories$N"
				    "SET$N"
				    "************************************************************";
				N: NOP();
				RC: "########################################$N"
				    "Unload Setups$N"
				    "########################################";
				N: XIC(S001CNV1.Act[11].Work.Comp)OTE(S001CNV1.Unld.Pos1);
				N: [XIC(Edit.Bit) OTE(S001CNV1.Unld.Pos2) ,XIC(Edit.Bit) OTE(S001CNV1.Unld.Pos3) ];
				N: XIC(S001CNV1.Unld.AutoMode)[XIC(S001CNV1.Unld.Pos1) XIC(Edit.Bit) ,XIC(S001CNV1.Unld.Pos2) XIC(Edit.Bit) ,XIC(S001CNV1.Unld.Pos3) XIC(Edit.Bit) ]XIC(S001CNV1.Unld.AllPPandSR)XIC(S001CNV1.Pallet[11].PalletPres)XIC(S001CNV1.Pallet[11].GoodPalletPres)XIO(S001CNV1.Pallet[11].BadPalletPres)XIO(S001CNV1.Unld.TaskComp)XIO(S001CNV1.Unld.CycComp)XIC(S001CNV1.Load.RbtsClr.Sts_PermOK)OTE(S001CNV1.Unld.Clear);
				N: [XIC(S005RB02.I1.AtPick1) XIO(S005RB02.Int.ClearOfTool1) XIO(S005RB02.Int.ClearOfPick1) XIC(Edit.Bit) ,XIC(S001CNV1.Unld.Comp1) ]XIO(S001CNV1.Unld.RstCycComp)OTE(S001CNV1.Unld.Comp1);
				N: [XIC(S005RB02.I1.AtPick2) XIO(S005RB02.Int.ClearOfTool2) XIO(S005RB02.Int.ClearOfPick2) XIC(Edit.Bit) ,XIC(S001CNV1.Unld.Comp2) ]XIO(S001CNV1.Unld.RstCycComp)OTE(S001CNV1.Unld.Comp2);
				N: XIC(Edit.Bit)OTE(S001CNV1.Unld.Comp3);
				RC: "########################################$N"
				    "Station Tasks Complete$N"
				    "########################################";
				N: [XIC(S001CNV1.Unld.Comp1) ,XIC(S001CNV1.Unld.Comp2) ,XIC(S001CNV1.Unld.Comp3) ]XIC(Edit.Bit)OTL(S001CNV1.Unld.TaskComp);
				RC: "######################################$N"
				    "Conveyor Cycle  Complete$N"
				    "Unload side$N"
				    "########################################";
				N: XIC(S001CNV1.Unld.TaskComp)XIC(S001CNV1.Act[11].Home.Comp)XIC(Edit.Bit)OTL(S001CNV1.Unld.CycComp);
				N: XIC(S001CNV1.Unld.RstCycComp)OTU(S001CNV1.Unld.TaskComp)OTU(S001CNV1.Unld.CycComp);
				N: XIC(S001CNV1.Pallet[11].PalletLivingMem)OTE(S001CNV1.Unld.RstCycComp);
		END_ROUTINE

		ROUTINE Y00_Alarms_L1 
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L1$N"
				    "Machine Faults$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "Module Communication Faults$N"
				    "#######################$N"
				    "$N"
				    "Add the ENet.CommOK signal of the First upstream Ethernet Device If Daisy Chain.$N"
				    "If the First Upstream Ethernet Device is a Switch, TBD.$N"
				    "$N"
				    "-------------------------------------------$N"
				    "Sx.L1[1].0 - SxL1[1].31$N"
				    "Up to 32 Alarms$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(S001CNV1.Int.VM1.ENet.Fault) XIO(S001CNV1.Int.VM1.ENet.Running) XIO(S001CNV1.Int.VM1.ENet.Inhibited) OTE(S6.L1[1].0) ,XIC(S001CNV1.Int.VM2.ENet.Fault) XIO(S001CNV1.Int.VM2.ENet.Running) XIO(S001CNV1.Int.VM2.ENet.Inhibited) OTE(S6.L1[1].1) ,XIC(S001CNV1.Int.VM3.ENet.Fault) XIO(S001CNV1.Int.VM3.ENet.Running) XIO(S001CNV1.Int.VM3.ENet.Inhibited) OTE(S6.L1[1].2) ,XIC(S001CNV1.Int.VM4.ENet.Fault) XIO(S001CNV1.Int.VM4.ENet.Running) XIO(S001CNV1.Int.VM4.ENet.Inhibited) OTE(S6.L1[1].3) ,XIC(S001CNV1.Int.VM5.ENet.Fault) XIO(S001CNV1.Int.VM5.ENet.Running) XIO(S001CNV1.Int.VM5.ENet.Inhibited) OTE(S6.L1[1].4) ,XIC(S001CNV1.Int.VM6.ENet.Fault) XIO(S001CNV1.Int.VM6.ENet.Running) XIO(S001CNV1.Int.VM6.ENet.Inhibited) OTE(S6.L1[1].5) ];
				N: XIC(S001CNV1SIO1:I.ConnectionFaulted)OTE(S6.L1[1].7);
				RC: "#######################$N"
				    "Safety Instruction Faults$N"
				    "$N"
				    "E-Stop$N"
				    "Oper Light Screens And Scanners$N"
				    "Safety Position Devices$N"
				    "InterCell Safety Devices$N"
				    "#######################$N"
				    "$N"
				    "-------------------------------------------$N"
				    "Sx.L1[2].0 - SxL1[3].31$N"
				    "Up to 64 Alarms$N"
				    "$N"
				    "";
				N: NOP();
				N: XIO(S001CNV1SIO1:I.ConnectionFaulted)XIO(S001CNV1SIO1:I.RunMode)OTE(S6.L1[1].23);
				N: XIC(S001CNV1VFD1:SI.SafetyFault)OTE(S6.L1[1].24);
				N: XIC(S001CNV1VFD1:SI.RestartRequired)OTE(S6.L1[1].25);
				N: XIC(S001CNV1VFD1:SI.TorqueDisabled)OTE(S6.L1[1].26);
				N: [XIC(S001CNV1Sfty.PCnvLC.LC1.FP) OTE(S6.L1[2].10) ,XIC(S001CNV1Sfty.PCnvLC.LC2.FP) OTE(S6.L1[2].11) ,XIC(S001CNV1Sfty.PCnvLC.LC3.FP) OTE(S6.L1[2].12) ];
				N: [XIC(S001CNV1Sfty.MCnvLC.LC1.FP) OTE(S6.L1[2].13) ,XIC(S001CNV1Sfty.MCnvLC.LC2.FP) OTE(S6.L1[2].14) ,XIC(S001CNV1Sfty.MCnvLC.LC3.FP) OTE(S6.L1[2].15) ];
				RC: "#######################$N"
				    "Part Present Faults$N"
				    "#######################$N"
				    "$N"
				    "-------------------------------------------$N"
				    "Sx.L1[10].0 - SxL1[12].31$N"
				    "Up to 96 Alarms$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(S001CNV1.Int.PPActFltsEnbld)[XIC(S001CNV1.Load.PP[1].stsNotONFault) [XIO(S001CNV1.Load.PP[1].inpPPSensor.0) OTE(S6.L1[10].0) ,XIO(S001CNV1.Load.PP[1].inpPPSensor.1) OTE(S6.L1[10].2) ] ,XIC(S001CNV1.Load.PP[1].stsStillONFault) [XIC(S001CNV1.Load.PP[1].inpPPSensor.0) OTE(S6.L1[10].1) ,XIC(S001CNV1.Load.PP[1].inpPPSensor.1) OTE(S6.L1[10].3) ] ];
				N: XIC(S001CNV1.Int.PPActFltsEnbld)[XIC(S001CNV1.Load.PP[2].stsNotONFault) [XIO(S001CNV1.Load.PP[2].inpPPSensor.0) OTE(S6.L1[10].4) ,XIO(S001CNV1.Load.PP[2].inpPPSensor.1) OTE(S6.L1[10].6) ,XIO(S001CNV1.Load.PP[2].inpPPSensor.2) OTE(S6.L1[10].8) ] ,XIC(S001CNV1.Load.PP[2].stsStillONFault) [XIC(S001CNV1.Load.PP[2].inpPPSensor.0) OTE(S6.L1[10].5) ,XIC(S001CNV1.Load.PP[2].inpPPSensor.1) OTE(S6.L1[10].7) ,XIC(S001CNV1.Load.PP[2].inpPPSensor.2) OTE(S6.L1[10].9) ] ];
				N: XIC(S001CNV1.Int.PPActFltsEnbld)[XIC(S001CNV1.Unld.PP[1].stsNotONFault) [XIO(S001CNV1.Unld.PP[1].inpPPSensor.0) OTE(S6.L1[10].10) ,XIO(S001CNV1.Unld.PP[1].inpPPSensor.1) OTE(S6.L1[10].12) ] ,XIC(S001CNV1.Unld.PP[1].stsStillONFault) [XIC(S001CNV1.Unld.PP[1].inpPPSensor.0) OTE(S6.L1[10].11) ,XIC(S001CNV1.Unld.PP[1].inpPPSensor.1) OTE(S6.L1[10].13) ] ];
				N: XIC(S001CNV1.Int.PPActFltsEnbld)[XIC(S001CNV1.Unld.PP[2].stsNotONFault) [XIO(S001CNV1.Unld.PP[2].inpPPSensor.0) OTE(S6.L1[10].14) ,XIO(S001CNV1.Unld.PP[2].inpPPSensor.1) OTE(S6.L1[10].16) ,XIO(S001CNV1.Unld.PP[2].inpPPSensor.2) OTE(S6.L1[10].18) ] ,XIC(S001CNV1.Unld.PP[2].stsStillONFault) [XIC(S001CNV1.Unld.PP[2].inpPPSensor.0) OTE(S6.L1[10].15) ,XIC(S001CNV1.Unld.PP[2].inpPPSensor.1) OTE(S6.L1[10].17) ,XIC(S001CNV1.Unld.PP[2].inpPPSensor.2) OTE(S6.L1[10].19) ] ];
				RC: "#######################$N"
				    "Actuator Faults$N"
				    "#######################$N"
				    "$N"
				    "-------------------------------------------$N"
				    "Sx.L1[14].0 - SxL1[21].31$N"
				    "Up to 256 Alarms$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(S001CNV1.Act[1].Work.VlvFlt) OTE(S6.L1[15].0) ,XIC(S001CNV1.Act[1].Home.VlvFlt) OTE(S6.L1[15].1) ];
				N: XIC(S001CNV1.Act[1].Work.MtnFlt)XIO(S001CNV1.Act[1].Work.VlvFlt)[[XIC(S001CNV1.Act[1].Installed.0) XIO(S001CNV1.Act[1].Work.Pxs.0) OTE(S6.L1[15].2) ,XIC(S001CNV1.Act[1].Work.Pxs.0) XIC(S001CNV1.Act[1].Home.Pxs.0) OTE(S6.L1[15].4) ] ,[XIC(S001CNV1.Act[1].Installed.1) XIO(S001CNV1.Act[1].Work.Pxs.1) OTE(S6.L1[15].6) ,XIC(S001CNV1.Act[1].Work.Pxs.1) XIC(S001CNV1.Act[1].Home.Pxs.1) OTE(S6.L1[15].8) ] ,[XIC(S001CNV1.Act[1].Installed.2) XIO(S001CNV1.Act[1].Work.Pxs.2) OTE(S6.L1[15].10) ,XIC(S001CNV1.Act[1].Work.Pxs.2) XIC(S001CNV1.Act[1].Home.Pxs.2) OTE(S6.L1[15].12) ] ];
				N: XIC(S001CNV1.Act[1].Home.MtnFlt)XIO(S001CNV1.Act[1].Home.VlvFlt)[[XIC(S001CNV1.Act[1].Installed.0) XIO(S001CNV1.Act[1].Home.Pxs.0) OTE(S6.L1[15].3) ,XIC(S001CNV1.Act[1].Home.Pxs.0) XIC(S001CNV1.Act[1].Work.Pxs.0) OTE(S6.L1[15].5) ] ,[XIC(S001CNV1.Act[1].Installed.1) XIO(S001CNV1.Act[1].Home.Pxs.1) OTE(S6.L1[15].7) ,XIC(S001CNV1.Act[1].Home.Pxs.1) XIC(S001CNV1.Act[1].Work.Pxs.1) OTE(S6.L1[15].9) ] ,[XIC(S001CNV1.Act[1].Installed.2) XIO(S001CNV1.Act[1].Home.Pxs.2) OTE(S6.L1[15].11) ,XIC(S001CNV1.Act[1].Home.Pxs.2) XIC(S001CNV1.Act[1].Work.Pxs.2) OTE(S6.L1[15].13) ] ];
				N: [XIC(S001CNV1.Act[2].Work.VlvFlt) OTE(S6.L1[15].16) ,XIC(S001CNV1.Act[2].Home.VlvFlt) OTE(S6.L1[15].17) ];
				N: XIC(S001CNV1.Act[2].Work.MtnFlt)XIO(S001CNV1.Act[2].Work.VlvFlt)[[XIC(S001CNV1.Act[2].Installed.0) XIO(S001CNV1.Act[2].Work.Pxs.0) OTE(S6.L1[15].18) ,XIC(S001CNV1.Act[2].Work.Pxs.0) XIC(S001CNV1.Act[2].Home.Pxs.0) OTE(S6.L1[15].20) ] ,[XIC(S001CNV1.Act[2].Installed.1) XIO(S001CNV1.Act[2].Work.Pxs.1) OTE(S6.L1[15].22) ,XIC(S001CNV1.Act[2].Work.Pxs.1) XIC(S001CNV1.Act[2].Home.Pxs.1) OTE(S6.L1[15].24) ] ,[XIC(S001CNV1.Act[2].Installed.2) XIO(S001CNV1.Act[2].Work.Pxs.2) OTE(S6.L1[15].26) ,XIC(S001CNV1.Act[2].Work.Pxs.2) XIC(S001CNV1.Act[2].Home.Pxs.2) OTE(S6.L1[15].28) ] ];
				N: XIC(S001CNV1.Act[2].Home.MtnFlt)XIO(S001CNV1.Act[2].Home.VlvFlt)[[XIC(S001CNV1.Act[2].Installed.0) XIO(S001CNV1.Act[2].Home.Pxs.0) OTE(S6.L1[15].19) ,XIC(S001CNV1.Act[2].Home.Pxs.0) XIC(S001CNV1.Act[2].Work.Pxs.0) OTE(S6.L1[15].21) ] ,[XIC(S001CNV1.Act[2].Installed.1) XIO(S001CNV1.Act[2].Home.Pxs.1) OTE(S6.L1[15].23) ,XIC(S001CNV1.Act[2].Home.Pxs.1) XIC(S001CNV1.Act[2].Work.Pxs.1) OTE(S6.L1[15].25) ] ,[XIC(S001CNV1.Act[2].Installed.2) XIO(S001CNV1.Act[2].Home.Pxs.2) OTE(S6.L1[15].27) ,XIC(S001CNV1.Act[2].Home.Pxs.2) XIC(S001CNV1.Act[2].Work.Pxs.2) OTE(S6.L1[15].29) ] ];
				N: [XIC(S001CNV1.Act[11].Work.VlvFlt) OTE(S6.L1[16].0) ,XIC(S001CNV1.Act[11].Home.VlvFlt) OTE(S6.L1[16].1) ];
				N: XIC(S001CNV1.Act[11].Work.MtnFlt)XIO(S001CNV1.Act[11].Work.VlvFlt)[[XIC(S001CNV1.Act[11].Installed.0) XIO(S001CNV1.Act[11].Work.Pxs.0) OTE(S6.L1[16].2) ,XIC(S001CNV1.Act[11].Work.Pxs.0) XIC(S001CNV1.Act[11].Home.Pxs.0) OTE(S6.L1[16].4) ] ,[XIC(S001CNV1.Act[11].Installed.1) XIO(S001CNV1.Act[11].Work.Pxs.1) OTE(S6.L1[16].6) ,XIC(S001CNV1.Act[11].Work.Pxs.1) XIC(S001CNV1.Act[11].Home.Pxs.1) OTE(S6.L1[16].8) ] ];
				N: XIC(S001CNV1.Act[11].Home.MtnFlt)XIO(S001CNV1.Act[11].Home.VlvFlt)[[XIC(S001CNV1.Act[11].Installed.0) XIO(S001CNV1.Act[11].Home.Pxs.0) OTE(S6.L1[16].3) ,XIC(S001CNV1.Act[11].Home.Pxs.0) XIC(S001CNV1.Act[11].Work.Pxs.0) OTE(S6.L1[16].5) ] ,[XIC(S001CNV1.Act[11].Installed.1) XIO(S001CNV1.Act[11].Home.Pxs.1) OTE(S6.L1[16].7) ,XIC(S001CNV1.Act[11].Home.Pxs.1) XIC(S001CNV1.Act[11].Work.Pxs.1) OTE(S6.L1[16].9) ] ];
				N: [XIC(S001CNV1.Act[12].Work.VlvFlt) OTE(S6.L1[16].12) ,XIC(S001CNV1.Act[12].Home.VlvFlt) OTE(S6.L1[16].13) ];
				N: XIC(S001CNV1.Act[12].Work.MtnFlt)XIO(S001CNV1.Act[12].Work.VlvFlt)[[XIC(S001CNV1.Act[12].Installed.0) XIO(S001CNV1.Act[12].Work.Pxs.0) OTE(S6.L1[16].14) ,XIC(S001CNV1.Act[12].Work.Pxs.0) XIC(S001CNV1.Act[12].Home.Pxs.0) OTE(S6.L1[16].16) ] ,[XIC(S001CNV1.Act[12].Installed.1) XIO(S001CNV1.Act[12].Work.Pxs.1) OTE(S6.L1[16].18) ,XIC(S001CNV1.Act[12].Work.Pxs.1) XIC(S001CNV1.Act[12].Home.Pxs.1) OTE(S6.L1[16].20) ] ];
				N: XIC(S001CNV1.Act[12].Home.MtnFlt)XIO(S001CNV1.Act[12].Home.VlvFlt)[[XIC(S001CNV1.Act[12].Installed.0) XIO(S001CNV1.Act[12].Home.Pxs.0) OTE(S6.L1[16].15) ,XIC(S001CNV1.Act[12].Home.Pxs.0) XIC(S001CNV1.Act[12].Work.Pxs.0) OTE(S6.L1[16].17) ] ,[XIC(S001CNV1.Act[12].Installed.1) XIO(S001CNV1.Act[12].Home.Pxs.1) OTE(S6.L1[16].19) ,XIC(S001CNV1.Act[12].Home.Pxs.1) XIC(S001CNV1.Act[12].Work.Pxs.1) OTE(S6.L1[16].21) ] ];
				RC: "#######################$N"
				    "Shift Register Data Mismatch Fault$N"
				    "#######################$N"
				    "$N"
				    "-------------------------------------------$N"
				    "Sx.L1[65].0 - SxL1[65].31$N"
				    "Up to 32 Alarms$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Load Side";
				N: XIC(S001CNV1.Load.AutoModeStop)XIO(S001CNV1.Int.DryCycle)[XIC(S001CNV1.Load.AllPartsPres6) XIC(S001CNV1.Load.SR.Int.NoPart) ,XIC(S001CNV1.Load.PartsPresNo) XIO(S001CNV1.Load.SR.Int.NoPart) ][MOV(5000,S001CNV1.Int.FltDelayTmr[0].PRE) TON(S001CNV1.Int.FltDelayTmr[0],?,?) ,XIC(S001CNV1.Int.FltDelayTmr[0].DN) OTE(S6.L1[65].0) ];
				RC: "Unload Side";
				N: XIC(S001CNV1.Unld.AutoModeStop)XIO(S001CNV1.Int.DryCycle)[XIC(S001CNV1.Unld.AllPartsPres6) XIC(S001CNV1.Unld.SR.Int.NoPart) ,XIC(S001CNV1.Unld.PartsPresNo) XIO(S001CNV1.Unld.SR.Int.NoPart) ][MOV(5000,S001CNV1.Int.FltDelayTmr[1].PRE) TON(S001CNV1.Int.FltDelayTmr[1],?,?) ,XIC(S001CNV1.Int.FltDelayTmr[1].DN) OTE(S6.L1[65].1) ];
		END_ROUTINE

		ROUTINE Y00_Alarms_L2 
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L2$N"
				    "Manual Interventions$N"
				    "************************************************************";
				N: NOP();
		END_ROUTINE

		ROUTINE Y00_Alarms_L3 
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L3$N"
				    "Warnings$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "RESERVED$N"
				    "#######################";
				N: NOP();
		END_ROUTINE

		ROUTINE Z00_MapOutputs 
				RC: "****************************************************************************************************$N"
				    "Accumulating Conveyor$N"
				    "Mapping Outputs Editable Routine$N"
				    "Output is a referance, replace it by the real$N"
				    "****************************************************************************************************";
				N: NOP();
				RC: "Load Stop$N"
				    "****************************************************************************************************";
				N: [XIC(S001CNV1.Act[1].Work.Out) XIO(S001CNV1.Act[1].Home.Out) OTE(S001CNV1.Int.VM1.O.0) ,XIC(S001CNV1.Act[1].Home.Out) XIO(S001CNV1.Act[1].Work.Out) OTE(S001CNV1.Int.VM1.O.1) ];
				RC: "Preload Stop 1$N"
				    "****************************************************************************************************$N"
				    "";
				N: [XIC(S001CNV1.Act[2].Work.Out) XIO(S001CNV1.Act[2].Home.Out) OTE(S001CNV1.Int.VM3.O.2) ,XIC(S001CNV1.Act[2].Home.Out) XIO(S001CNV1.Act[2].Work.Out) OTE(S001CNV1.Int.VM1.O.3) ];
				RC: "Unload Stop$N"
				    "****************************************************************************************************";
				N: [XIC(S001CNV1.Act[11].Work.Out) XIO(S001CNV1.Act[11].Home.Out) OTE(S001CNV1.Int.VM2.O.0) ,XIC(S001CNV1.Act[11].Home.Out) XIO(S001CNV1.Act[11].Work.Out) OTE(S001CNV1.Int.VM2.O.1) ];
				RC: "PreUnload Stop$N"
				    "****************************************************************************************************";
				N: [XIC(S001CNV1.Act[12].Work.Out) XIO(S001CNV1.Act[12].Home.Out) OTE(S001CNV1.Int.VM4.O.2) ,XIC(S001CNV1.Act[12].Home.Out) XIO(S001CNV1.Act[12].Work.Out) OTE(S001CNV1.Int.VM4.O.3) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S001CNV1Sfty (Class := Safety,
	                      MAIN := "s_A00_Main",
	                      MODE := 0,
	                      DisableFlag := 0,
	                      UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE s_A00_Main (Description := "Safety Main Routine")
				N: JSR(s_B00_Gates,0);
				N: JSR(s_B00_ModStatus,0);
				N: JSR(s_C00_ConvSftyIn,0);
				N: JSR(s_C01_ConvSftySum,0);
				N: JSR(s_C02_ConvSftyOut,0);
		END_ROUTINE

		ROUTINE s_B00_Gates 
				RC: "************************************************************$N"
				    "Safety Gates Inputs$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S001CNV1Sfty.AutoCycleReady)[OTE(S001CNV1_GS1.GateAOI.inpSysAutoCycleReady) ,OTE(S001CNV1_GS2.GateAOI.inpSysAutoCycleReady) ];
				N: XIC(S001CNV1Sfty.AutoCycleOn)[OTE(S001CNV1_GS1.GateAOI.inpSysAutoCycleOn) ,OTE(S001CNV1_GS2.GateAOI.inpSysAutoCycleOn) ];
				N: XIC(S001CNV1Sfty.VFD1_Faulted)[OTE(S001CNV1_GS1.GateAOI.inpSysFaulted) ,OTE(S001CNV1_GS2.GateAOI.inpSysFaulted) ];
				N: XIC(S001CNV1Sfty.ClearToUnlock)[OTE(S001CNV1_GS1.GateAOI.inpClearToUnlock) ,OTE(S001CNV1_GS2.GateAOI.inpClearToUnlock) ];
				RC: "************************************************************$N"
				    "Safety Gates$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Always OTU unless specified and approved by Lucid Motors Controls $N"
				    "************************************************************";
				N: OTU(S001CNV1_GS1.DCSTL_TestReq);
				RC: "************************************************************$N"
				    "Safety Gate AOI$N"
				    "************************************************************";
				N: XIC(S001CNV1GS1:I.RunMode)Gate(S001CNV1_GS1.GateAOI,S001CNV1GS1:I,S001CNV1GS1:O,S001CNV1_GS1.DCSTL_TestReq,S001CNV1Sfty.PowerEnblSetup,S001CNV1Sfty.PowerEnbld,S001CNV1_GS1.GateAOI.inpSysAutoCycleReady,S001CNV1_GS1.GateAOI.inpSysAutoCycleOn,S001CNV1_GS1.GateAOI.inpSysFaulted,S001CNV1_GS1.GateAOI.inpClearToUnlock,sSftyFromStd.FlasherHi,sSftyFromStd.FlasherMid,sSftyFromStd.FlasherLow);
				N: XIC(S001CNV1GS2:I.RunMode)COP(S001CNV1GS2:I,S001CNV1_GS2.I,1);
				RC: "************************************************************$N"
				    "Always OTU unless specified and approved by Lucid Motors Controls $N"
				    "************************************************************";
				N: OTU(S001CNV1_GS2.DCSTL_TestReq);
				RC: "************************************************************$N"
				    "Safety Gate AOI$N"
				    "************************************************************";
				N: Gate(S001CNV1_GS2.GateAOI,S001CNV1GS2:I,S001CNV1GS2:O,S001CNV1_GS2.DCSTL_TestReq,S001CNV1Sfty.PowerEnblSetup,S001CNV1Sfty.PowerEnbld,S001CNV1_GS2.GateAOI.inpSysAutoCycleReady,S001CNV1_GS2.GateAOI.inpSysAutoCycleOn,S001CNV1_GS2.GateAOI.inpSysFaulted,S001CNV1_GS2.GateAOI.inpClearToUnlock,sSftyFromStd.FlasherHi,sSftyFromStd.FlasherMid,sSftyFromStd.FlasherLow);
		END_ROUTINE

		ROUTINE s_B00_ModStatus (Description := "Safety Module IO Status")
				RC: "************************************************************$N"
				    "S001CNV1Module Status$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Module 1 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: XIC(S001CNV1SIO1:I.RunMode)OTE(S001CNV1Sfty.Mod1.RunMode);
				N: XIC(S001CNV1SIO1:I.Pt00InputStatus)XIC(S001CNV1SIO1:I.Pt01InputStatus)XIC(S001CNV1SIO1:I.Pt02InputStatus)XIC(S001CNV1SIO1:I.Pt03InputStatus)XIC(S001CNV1SIO1:I.Pt04InputStatus)XIC(S001CNV1SIO1:I.Pt05InputStatus)XIC(S001CNV1SIO1:I.Pt06InputStatus)XIC(S001CNV1SIO1:I.Pt07InputStatus)OTE(S001CNV1Sfty.Mod1.InputStatus);
				N: XIC(S001CNV1SIO1:I.Pt00OutputStatus)XIC(S001CNV1SIO1:I.Pt01OutputStatus)XIC(S001CNV1SIO1:I.Pt02OutputStatus)XIC(S001CNV1SIO1:I.Pt03OutputStatus)OTE(S001CNV1Sfty.Mod1.OutputStatus);
				RC: "************************************************************$N"
				    "Module Summary$N"
				    "************************************************************";
				N: XIC(S001CNV1Sfty.Mod1.RunMode)OTE(S001CNV1Sfty.AllModRunMode);
				N: XIC(S001CNV1Sfty.Mod1.InputStatus)OTE(S001CNV1Sfty.AllModInStatusOk);
				N: XIC(S001CNV1Sfty.Mod1.OutputStatus)OTE(S001CNV1Sfty.AllModOutStatusOk);
		END_ROUTINE

		ROUTINE s_C00_ConvSftyIn 
				RC: "***********************************************************$N"
				    "VFD Setup$N"
				    "VFD Faulted$N"
				    "Setup for diferet VFDs using in the conveyor$N"
				    "***********************************************************$N"
				    "";
				N: [XIC(S001CNV1VFD1:SI.SafetyFault) ,XIC(S001CNV1VFD1:SI.ConnectionFaulted) ]OTE(S001CNV1Sfty.VFD1_Faulted);
				RC: "***********************************************************$N"
				    "VFD Enable safety ok$N"
				    "***********************************************************$N"
				    "";
				N: XIC(S001CNV1Sfty.PowerEnbld)XIO(S001CNV1Sfty.AnyBypassSwitchOn)OTE(S001CNV1Sfty.Enable);
				RC: "***********************************************************$N"
				    "VFD Enable with Bypass Switch selected$N"
				    "***********************************************************$N"
				    "";
				N: XIC(S001CNV1Sfty.All_Estop_OK)XIC(S001CNV1Sfty.AnyBypassSwitchOn)OTE(S001CNV1Sfty.EnblBypassSwitch);
				RC: "***********************************************************$N"
				    "VFD Ready to Run Safe$N"
				    "***********************************************************$N"
				    "";
				N: XIC(S001CNV1Sfty.Enable)XIC(S001CNV1VFD1:SI.RunMode)XIO(S001CNV1VFD1:SI.RestartRequired)XIO(S001CNV1VFD1:SI.TorqueDisabled)XIO(S001CNV1VFD1:SI.STOActive)XIO(S001CNV1Sfty.VFD1_Faulted)OTE(S001CNV1Sfty.VFD1_RdytoRun);
				RC: "***********************************************************$N"
				    "VFD  safe torque OK$N"
				    "***********************************************************$N"
				    "";
				N: [XIC(S001CNV1Sfty.Enable) ,XIC(S001CNV1Sfty.EnblBypassSwitch) ]XIO(S001CNV1VFD1:SI.TorqueDisabled)XIO(S001CNV1VFD1:SI.STOActive)OTE(S001CNV1Sfty.VFD1_SafeTorqueOff);
				N: XIC(S001CNV1Sfty.VFD1_SafeTorqueOff)XIC(S001CNV1Sfty.VFD1_Faulted)OTE(S001CNV1Sfty.VFD1_ResetReq);
				RC: "***********************************************************$N"
				    "PB Status$N"
				    "Add or remove devices  to use in the Llgic$N"
				    "***********************************************************$N"
				    "";
				N: [XIC(S001CNV1_GS1.GateAOI.stsPowerOnPushed) ,XIC(S001CNV1_GS2.GateAOI.stsPowerOnPushed) ]OTE(S001CNV1Sfty.AnyPowerOnPB);
				N: [XIC(S001CNV1_GS1.GateAOI.stsStartPushed) ,XIC(S001CNV1_GS2.GateAOI.stsStartPushed) ]OTE(S001CNV1Sfty.AnyStartPB);
				N: [XIC(S001CNV1_GS1.GateAOI.stsResetPushed) ,XIC(S001CNV1_GS2.GateAOI.stsResetPushed) ]OTE(S001CNV1Sfty.AnyResetPB);
				N: [XIC(S001CNV1_GS1.GateAOI.stsBypassSwitchOn) ,XIC(S001CNV1_GS2.GateAOI.stsBypassSwitchOn) ]OTE(S001CNV1Sfty.AnyBypassSwitchOn);
				N: [XIC(S001CNV1_GS1.GateAOI.stsOpenGateRequested) ,XIC(S001CNV1_GS2.GateAOI.stsOpenGateRequested) ]OTE(S001CNV1Sfty.AnyOpenGateReqPB);
				RC: "***********************************************************$N"
				    "VFD Input and Output$N"
				    " Safety Status$N"
				    "***********************************************************$N"
				    "";
				N: XIO(S001CNV1SIO1:I.InputPowerStatus)XIC(S001CNV1SIO1:I.Pt00InputStatus)XIC(S001CNV1SIO1:I.Pt01InputStatus)XIC(S001CNV1SIO1:I.Pt02InputStatus)XIC(S001CNV1SIO1:I.Pt03InputStatus)XIC(S001CNV1SIO1:I.Pt04InputStatus)XIC(S001CNV1SIO1:I.Pt05InputStatus)XIC(S001CNV1SIO1:I.Pt06InputStatus)XIC(S001CNV1SIO1:I.Pt07InputStatus)OTE(S001CNV1Sfty.Mod1InStatus);
				N: XIC(S001CNV1SIO1:I.Pt00OutputStatus)XIC(S001CNV1SIO1:I.Pt01OutputStatus)XIC(S001CNV1SIO1:I.Pt02OutputStatus)XIC(S001CNV1SIO1:I.Pt03OutputStatus)XIC(S001CNV1SIO1:I.Pt04OutputStatus)XIC(S001CNV1SIO1:I.Pt05OutputStatus)XIC(S001CNV1SIO1:I.Pt06OutputStatus)XIC(S001CNV1SIO1:I.Pt07OutputStatus)OTE(S001CNV1Sfty.Mod1OutStatus);
		END_ROUTINE

		ROUTINE s_C01_ConvSftySum 
				RC: "***********************************************************$N"
				    "Conveyor Hardware Setup$N"
				    "OTL Equipment Installed$N"
				    "OTU Equipment no installed$N"
				    "***********************************************************$N"
				    "";
				N: [OTU(S001CNV1Sfty.GatesInstalled) OTU(S001CNV1Sfty.DiscInstalled) ,OTL(S001CNV1Sfty.MCnvLC.LC1Installed) OTU(S001CNV1Sfty.MCnvLC.LC2Installed) OTU(S001CNV1Sfty.MCnvLC.LC3Installed) ,OTL(S001CNV1Sfty.PCnvLC.LC1Installed) OTU(S001CNV1Sfty.PCnvLC.LC2Installed) OTU(S001CNV1Sfty.PCnvLC.LC3Installed) ];
				RC: "***********************************************************$N"
				    "Conveyor status$N"
				    "Add or remove gates to use in the Llgic$N"
				    "***********************************************************$N"
				    "";
				N: XIC(S001CNV1_GS1.GateAOI.stsEstopNormal)XIC(S001CNV1_GS2.GateAOI.stsEstopNormal)OTE(S001CNV1Sfty.All_Estop_OK);
				RC: "***********************************************************$N"
				    "Gates Logic$N"
				    "add or remove gates in the system$N"
				    "***********************************************************$N"
				    "";
				N: [XIC(S001CNV1_GS1.GateAOI.stsGateLocked) XIC(S001CNV1_GS2.GateAOI.stsGateLocked) ,XIO(S001CNV1Sfty.GatesInstalled) ]OTE(S001CNV1Sfty.All_Gates_OK);
				RC: "***********************************************************$N"
				    "Perimeter LC$N"
				    "***********************************************************$N"
				    "";
				N: [XIC(S001CNV1Sfty.PCnvLC.LC1.O1) ,XIO(S001CNV1Sfty.PCnvLC.LC1Installed) ][XIC(S001CNV1Sfty.PCnvLC.LC2.O1) ,XIO(S001CNV1Sfty.PCnvLC.LC2Installed) ][XIC(S001CNV1Sfty.PCnvLC.LC3.O1) ,XIO(S001CNV1Sfty.PCnvLC.LC3Installed) ]OTE(S001CNV1Sfty.All_LC_OK);
				RC: "***********************************************************$N"
				    "Migration LC$N"
				    "***********************************************************$N"
				    "";
				N: [XIC(S001CNV1Sfty.MCnvLC.LC1.O1) ,XIO(S001CNV1Sfty.MCnvLC.LC1Installed) ][XIC(S001CNV1Sfty.MCnvLC.LC2.O1) ,XIO(S001CNV1Sfty.MCnvLC.LC2Installed) ][XIC(S001CNV1Sfty.MCnvLC.LC3.O1) ,XIO(S001CNV1Sfty.MCnvLC.LC3Installed) ]OTE(S001CNV1Sfty.All_Zone_LC_OK);
				N: [XIC(S001CNV1Sfty.PCnvLC.LC1.LCB) ,XIO(S001CNV1Sfty.PCnvLC.LC1Installed) ][XIC(S001CNV1Sfty.PCnvLC.LC2.LCB) ,XIO(S001CNV1Sfty.PCnvLC.LC2Installed) ][XIC(S001CNV1Sfty.PCnvLC.LC3.LCB) ,XIO(S001CNV1Sfty.PCnvLC.LC3Installed) ]OTE(S001CNV1Sfty.All_LC_NotBlocked);
				RC: "*****************************************************$N"
				    "sEdit.bit Replace for the Disconector Feedback$N"
				    "******************************************************";
				N: [XIC(sEdit.Bit) ,XIO(S001CNV1Sfty.DiscInstalled) ]OTE(S001CNV1Sfty.All_DiscSwitch_OK);
				N: XIC(sSftyFromStd.AutoCycleReady)OTE(S001CNV1Sfty.AutoCycleReady);
				N: XIC(sSftyFromStd.AutoCycleOn)OTE(S001CNV1Sfty.AutoCycleOn);
				RC: "*****************************************************$N"
				    "If Light Curtain for migration or perimeter are installed in the system$N"
				    " first sEdit.bit for Migration Light Curtains is the POwer On of Adj system$N"
				    "Second  sEdit.bit is perimeter bypass, like rack presente or work zone LC$N"
				    "******************************************";
				N: XIC(S001CNV1Sfty.All_Estop_OK)XIC(S001CNV1Sfty.All_Gates_OK)[XIC(S001CNV1Sfty.All_Zone_LC_OK) ,XIC(sEdit.Bit) ][XIC(S001CNV1Sfty.All_LC_OK) ,XIC(sEdit.Bit) ]OTE(S001CNV1Sfty.PowerEnblSetup);
				N: [XIC(S001CNV1Sfty.AnyPowerOnPB) ,XIC(sZ005_040.AnyPowerEnblPB) ,XIC(S001CNV1Sfty.PowerEnbld) ]XIC(S001CNV1Sfty.PowerEnblSetup)OTE(S001CNV1Sfty.PowerEnbld);
				N: XIC(sSftyFromStd.ClearToUnlock.7)OTE(S001CNV1Sfty.ClearToUnlock);
		END_ROUTINE

		ROUTINE s_C02_ConvSftyOut 
				RC: "************************************************************$N"
				    "Armor Start$N"
				    "************************************************************";
				N: XIC(S001CNV1Sfty.VFD1_ResetReq)XIC(S001CNV1Sfty.AnyResetPB)OTE(S001CNV1VFD1:SO.ResetRequest);
				N: XIC(S001CNV1Sfty.VFD1_SafeTorqueOff)OTE(S001CNV1VFD1:SO.SafeTorqueOff);
				RC: "************************************************************$N"
				    "CNV1$N"
				    "Soft Start Valve$N"
				    "************************************************************$N"
				    "";
				N: XIC(S001CNV1Sfty.All_Estop_OK)[XIC(S001CNV1Sfty.All_Zone_LC_OK) XIC(S001CNV1Sfty.All_LC_OK) ,XIC(S001CNV1Sfty.EnblBypassSwitch) ][XIC(S001CNV1Sfty.MotionEnbl) ,XIC(S001CNV1Sfty.SoftStartPwrOn) ]OTE(S001CNV1Sfty.SoftStartPwrOn);
				N: XIC(S001CNV1Sfty.Enable)XIC(S001CNV1SIO1:O.Pt02Data)XIC(S001CNV1SIO1:O.Pt03Data)XIC(S001CNV1SIO1:O.Pt04Data)XIC(S001CNV1SIO1:O.Pt05Data)XIC(S001CNV1SIO1:O.Pt06Data)XIC(S001CNV1SIO1:O.Pt07Data)XIC(S001CNV1Sfty.Mod1OutStatus)OTE(S001CNV1Sfty.MotionEnbl);
				N: XIC(S001CNV1Sfty.SoftStartPwrOn)XIC(S001CNV1Sfty.Mod1OutStatus)[OTE(S001CNV1SIO1:O.Pt00Data) ,OTE(S001CNV1SIO1:O.Pt01Data) ];
				RC: "Valve Manifold DC$N"
				    "************************************************************";
				N: XIC(S001CNV1Sfty.MotionEnbl)[OTE(S001CNV1SIO1:O.Pt02Data) ,OTE(S001CNV1SIO1:O.Pt03Data) ,OTE(S001CNV1SIO1:O.Pt04Data) ,OTE(S001CNV1SIO1:O.Pt05Data) ,OTE(S001CNV1SIO1:O.Pt06Data) ,OTE(S001CNV1SIO1:O.Pt07Data) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S001PRB_UnderDev (Description := "Power Roll Bed System",
	                          Class := Standard,
	                          MAIN := "A00_Main",
	                          MODE := 0,
	                          DisableFlag := 0,
	                          UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE A00_Main (Description := "Main Routine")
				N: JSR(B00_NetworkDiag,0);
				N: JSR(B01_MapInputs,0);
				N: JSR(D00_PRB_Edit,0);
				N: JSR(D01_PRB,0);
				N: JSR(Z00_MapOutputs,0);
		END_ROUTINE

		ROUTINE B00_NetworkDiag 
				RC: "************************************************************$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "S001PRB Ethernet Devices Diagnostic$N"
				    "************************************************************";
				N: NOP();
				N: GSV(Module,S001PRBDV,EntryStatus,S001PRB.VFD.ENet.ObjectStatus)[MEQ(S005RB01.ENet.ObjectStatus,61440,24576) OTE(S001PRB.VFD.ENet.Inhibited) ,MEQ(S005RB01.ENet.ObjectStatus,61440,16384) OTE(S001PRB.VFD.ENet.CommOK) ];
				N: XIC(S001PRB.VFD.ENet.CommOK)OTE(S001PRB.Int.AllModCommOk);
		END_ROUTINE

		ROUTINE B01_MapInputs 
				RC: "************************************************************$N"
				    "Map Devices Inputs$N"
				    "************************************************************";
				N: NOP();
				N: XIO(S001PRB.VFD.ENet.CommOK)FLL(0,S001PRBDV:I,1);
				RC: "#########################$N"
				    "Parameter Mapping$N"
				    "Required$N"
				    "$N"
				    "Will be updated depending on the type$N"
				    "of drive, motor and components$N"
				    "are used.$N"
				    "########################";
				N: MOV(Edit.Dint,S001PRB.VFD.MotorEncPos)MOV(Edit.Dint,S001PRB.VFD.PallEncPos)MOV(Edit.Dint,S001PRB.VFD.FaultCode)MOV(Edit.Dint,S001PRB.VFD.DriveTemp)MOV(Edit.Dint,S001PRB.VFD.MotorCurrent)MOV(Edit.Dint,S001PRB.VFD.RPM)MOV(Edit.Dint,S001PRB.VFD.Torque);
				N: MOV(Edit.Dint,S001PRB.VFD.FLA);
				N: OTE(S001PRB.VFD.DriveRdy);
				N: OTE(S001PRB.VFD.Running);
				N: OTE(S001PRB.VFD.DriveFlt);
				N: OTE(S001PRB.VFD.ZeroSpd);
		END_ROUTINE

		ROUTINE D00_PRB_Edit 
				RC: "##########################$N"
				    "Power Roll Bed$N"
				    "Editable Routine$N"
				    "##########################";
				N: NOP();
				N: XIC(S001PRB.Int.RbtsClr.Sts_PermOK)XIC(S001PRB.Int.AllLtScrnOk)XIC(Edit.Bit)OTE(S001PRB.Int.ToolClrToTransfer);
				N: XIC(S001PRB.Int.ToolClrToTransfer)XIO(S001PRB.Int.PalletInPRB)[XIO(S001PRB.Int.RunOutMode) ,XIC(S001PRB.Int.RunOutMode) XIC(S001PRB.Int.PalletEntering) ]OTE(S001PRB.Int.PallClrToEnt);
				N: XIC(S001PRB.Int.ToolClrToTransfer)OTE(S001PRB.Int.PallClrToExt);
				RC: "#################################$N"
				    "Edit Bits$N"
				    "1. Cycle Time higher than 2 seconds at least or other logic$N"
				    "2. PRB in Raise Position$N"
				    "$N"
				    "Edit Debug$N"
				    "1. Damaged pallet In Station Timer$N"
				    "2. RFID Process$N"
				    "3. Set Cycle Complete Function and release pallet$N"
				    "#################################";
				N: [XIC(S001PRB.Int.AutoMode) [XIC(S001PRB.SR.Int.Part) XIC(Edit.Bit) XIC(S001PRB.Int.PalletInPos) ,XIC(Edit.Debug) ] XIC(Edit.Debug) XIO(S001PRB.VFD.Running) ,XIC(Edit.ManFunct) XIC(Edit.Debug) ]XIO(S001PRB.Int.RunCmd)[XIC(Edit.Bit) ,XIO(S001PRB.Int.LifterInstalled) ]OTL(S001PRB.Int.CycComp);
				N: XIC(S001PRB.Int.RstCycComp)OTU(S001PRB.Int.CycComp);
				N: XIC(S001PRB.Int.PalletExitingMem)XIC(S001PRB.VFD.Running)[XIC(S001PRB.Int.NoPallet) [XIC(S001PRB.VFD.RunCmdStart) ,XIC(S001PRB.VFD.JogActive) ] ,XIC(S001PRB.VFD.JogRev) ]OTU(S001PRB.Int.PalletExitingMem);
				N: XIC(Edit.Bit)OTE(S001PRB.Int.FaultResetPB);
				N: XIC(S001PRB.Int.ManualMode)[XIC(Edit.ManFunct) ,XIC(S001PRB.Int.PrevManualMode) XIC(S001PRB.Int.PrevIndexInPB) ]XIC(S001PRB.Int.PallClrToExt)OTE(S001PRB.Int.IndexInPB);
				N: XIC(S001PRB.Int.ManualMode)[XIC(Edit.ManFunct) ,XIC(S001PRB.Int.PrevManualMode) XIC(S001PRB.Int.PrevIndexOutPB) ]XIC(S001PRB.Int.PallClrToExt)OTE(S001PRB.Int.IndexOutPB);
				N: XIC(S001PRB.Int.ManualMode)[XIC(Edit.ManFunct) [XIC(S001PRB.Int.NxtPallClrToEnt) ,XIC(S001PRB.Int.NoPartNoPallet) ,XIC(Edit.Debug) ] ,XIC(S001PRB.Int.PrevManualMode) XIC(S001PRB.Int.PrevJogFwdPB) XIC(S001PRB.Int.ReceivePallet) XIO(S001PRB.Int.PalletInPRB) XIO(S001PRB.Int.TransferStarted) ]XIC(S001PRB.Int.PallClrToExt)OTE(S001PRB.VFD.JogFwd);
				N: XIC(S001PRB.Int.ManualMode)[XIC(Edit.ManFunct) [XIC(S001PRB.Int.PrevClrToReturn) ,XIC(S001PRB.Int.NoPartNoPallet) ,XIC(Edit.Debug) ] ,XIC(S001PRB.Int.NxtManualMode) XIC(S001PRB.Int.NxtJogRevPB) XIC(S001PRB.Int.ClrToReturn) ]XIC(S001PRB.Int.PallClrToExt)OTE(S001PRB.VFD.JogRev);
				N: [XIC(S001PRB.Int.AutoMode) ,XIC(S001PRB.Int.ManualMode) ]XIC(S001PRB.VFD.RunCmdStart)XIC(S001PRB.VFD.DriveRdy)MOV(500,S001PRB.Int.RunCmdDwell.PRE)TON(S001PRB.Int.RunCmdDwell,?,?);
				N: [XIC(S001PRB.VFD.RunCmdStart) XIC(S001PRB.VFD.DriveRdy) ,XIC(S001PRB.Int.RunCmdDwell.DN) XIC(S001PRBDV:O.LogicCommand_Run) ]XIO(S001PRBDV:O.LogicCommand_Stop)OTE(S001PRB.Int.RunCmd);
				N: [XIC(Edit.Debug) ,XIO(S001PRB.Int.DryCycle) XIC(S001PRB.Int.PalletEntering) XIO(S001PRB.VFD.JogRevCmd) ]XIO(S001PRB.Int.PalletInPRB)OTE(S001PRB.Int.PalletEntering);
				N: XIC(Edit.Debug)[MOV(200,S001PRB.Int.InPositionDwell.PRE) TON(S001PRB.Int.InPositionDwell,?,?) ,XIC(S001PRB.Int.InPositionDwell.DN) OTE(S001PRB.Int.PalletInPos) ];
				N: XIC(Edit.Debug)OTE(S001PRB.Int.RdyToTransfer);
				N: XIC(Edit.Debug)OTE(S001PRB.Int.PalletExiting);
				N: XIC(Edit.Debug)OTE(S001PRB.Int.PalletInPRB);
				N: XIC(Edit.Debug)OTE(S001PRB.Int.NoPartNoPallet);
				N: XIC(Edit.Debug)OTE(S001PRB.Int.RstCycComp);
				N: XIC(S001PRB.Int.ManualMode)XIC(S001PRB.Int.PallClrToExt)[XIO(S001PRB.Int.PalletExitingMem) ,XIC(S001PRB.Int.TransferStarted) XIO(S001PRB.Int.PrevPalletExiting) ]XIO(S001PRB.Int.PalletInPRB)[XIC(S001PRB.Int.NxtPalletInPRB) ,XIC(S001PRB.Int.NxtPalletExitingRevMem) ]OTE(S001PRB.Int.ClrToReturn);
				N: [XIC(S001PRB.Int.PalletInPos) ,XIC(S001PRB.Int.FaultResetPB) ,XIC(S001PRB.Int.ManualMode) XIC(S001PRB.VFD.JogRev) ]OTU(S001PRB.Int.PalletNotInPos);
				N: XIC(S001PRB.Int.AutoMode)XIO(S001PRB.Int.DryCycle)XIC(S001PRB.Int.PalletInPRB)XIO(S001PRB.Int.PalletInPos)XIC(S001PRB.VFD.DriveRdy)XIO(S001PRB.Int.CycComp)[MOV(15000,S001PRB.Int.SkdNotInPosTmr.PRE) TON(S001PRB.Int.SkdNotInPosTmr,?,?) ,XIC(S001PRB.Int.SkdNotInPosTmr.DN) OTL(S001PRB.Int.PalletNotInPos) ];
				N: [XIO(S001PRB.Int.DryCycle) XIC(S001PRB.Int.PalletInPos) OTL(S001PRB.Int.PalletInPosMem) ,XIO(S001PRB.VFD.DriveFlt) [XIC(S001PRB.Int.NoPallet) ,XIC(Edit.Debug) ] OTU(S001PRB.Int.PalletInPosMem) ];
				RC: "#######################$N"
				    "Power Roll Bed$N"
				    "Cycle Times$N"
				    "#######################";
				N: XIC(S001PRB.Int.RunCmd)[XIC(S001PRB.Int.ReceivePallet) ,XIO(S001PRB.Int.CycComp) XIC(S001PRB.Int.PalletInPRB) XIO(S001PRB.Int.PalletInPos) ,XIC(S001PRB.Int.TransferPallet) XIO(S001PRB.Int.NoPartNoPallet) ,XIC(S001PRB.Int.DryCycle) ]MOV(3200000,S001PRB.Int.IndexTMR.PRE)RTO(S001PRB.Int.IndexTMR,?,?);
				N: XIC(S001PRB.Int.AutoMode)XIC(S001PRB.Int.PalletInPos)XIO(S001PRB.Int.CycComp)XIO(S001PRB.Int.IndexTMR.EN)MOV(3200000,S001PRB.Int.CycTMR.PRE)RTO(S001PRB.Int.CycTMR,?,?);
				N: [XIC(S001PRB.Int.IndexTMR.EN) ,XIC(S001PRB.Int.CycTMR.EN) ]MOV(3200000,S001PRB.Int.ProcTMR.PRE)RTO(S001PRB.Int.ProcTMR,?,?);
				N: MOV(3200000,S001PRB.Int.TackTMR.PRE)RTO(S001PRB.Int.TackTMR,?,?);
				N: XIC(S001PRB.Int.CycCompONS.0)XIC(S001PRB.Int.TransferPallet)XIC(S001PRB.Int.NoPartNoPallet)XIC(S001PRB.Int.PallClrToEnt)[XIO(S001PRB.Int.CycCompONS.1) [MOV(S001PRB.Int.IndexTMR.ACC,S001PRB.Int.IndexTimeStore) ,RES(S001PRB.Int.IndexTMR) ,MOV(S001PRB.Int.ProcTMR.ACC,S001PRB.Int.ProcTimeStore) ,RES(S001PRB.Int.ProcTMR) ,MOV(S001PRB.Int.TackTMR.ACC,S001PRB.Int.TackTimeStore) ,RES(S001PRB.Int.TackTMR) ] ,OTL(S001PRB.Int.CycCompONS.1) ];
				N: XIC(S001PRB.Int.CycComp)[XIO(S001PRB.Int.CycCompONS.0) [MOV(S001PRB.Int.CycTMR.ACC,S001PRB.Int.CycTimeStore) ,RES(S001PRB.Int.CycTMR) ] ,OTL(S001PRB.Int.CycCompONS.0) ];
				N: XIC(S001PRB.Int.RstCycComp)[OTU(S001PRB.Int.CycCompONS.0) ,OTU(S001PRB.Int.CycCompONS.1) ];
		END_ROUTINE

		ROUTINE D01_PRB 
				RC: "##########################$N"
				    "Power Roll Bed$N"
				    "Do Not Edit Routine$N"
				    "##########################";
				N: NOP();
				N: XIC(Edit.Debug)OTE(S001PRB.Int.NoPallet);
				N: XIC(S001PRB.Int.TransferStarted)XIC(S001PRB.Int.PalletExiting)XIC(Edit.Debug)OTL(S001PRB.Int.PalletExitingMem);
				N: [XIC(S001PRB.Int.AutoMode) ,XIC(S001PRB.Int.ManualMode) [XIC(S001PRB.Int.IndexInPB) ,XIC(S001PRB.Int.IndexOutPB) ] ]XIC(S001PRB.Int.NotFaulted)XIO(S001PRB.VFD.JogActive)[[XIC(S001PRB.Int.PrevAutoMode) ,XIC(S001PRB.Int.ManualMode) XIC(S001PRB.Int.IndexInPB) ] XIC(S001PRB.Int.ReceivePallet) ,XIC(S001PRB.Int.TransferPallet) ,XIC(S001PRB.Int.PalletEntering) ,XIC(S001PRB.Int.PalletInPRB) XIO(S001PRB.Int.PalletInPos) [XIO(S001PRB.Int.CycComp) ,XIC(S001PRB.Int.IndexInPB) ] ][XIC(S001PRB.Int.PallClrToEnt) ,XIC(S001PRB.Int.PallClrToExt) ]XIC(S001PRB.VFD.ReleaseBrakeInst)OTE(S001PRB.VFD.RunCmdStart);
				N: [XIC(S001PRB.Int.AutoMode) XIC(S001PRB.Int.PrevAutoMode) ,XIC(S001PRB.Int.ManualMode) XIC(S001PRB.Int.PrevManualMode) ]XIC(S001PRB.Int.NotFaulted)XIC(S001PRB.Int.PallClrToEnt)XIC(Edit.Debug)[XIC(S001PRB.Int.PrevRdyToTransfer) [XIC(S001PRB.Int.AutoMode) [XIC(S001PRB.Int.NoPartNoPallet) ,XIC(S001PRB.Int.PrevTransferStarted) ] ,XIC(S001PRB.Int.ManualMode) [XIC(S001PRB.Int.PrevJogFwdPB) ,XIC(S001PRB.Int.PrevIndexOutPB) ] ] [XIC(S001PRB.Int.CycComp) ,XIC(S001PRB.Int.PalletEntering) ] ,XIC(S001PRB.Int.PrevTransferPallet) ,XIC(S001PRB.Int.PrevTransferStarted) XIC(S001PRB.Int.PrevRunning) ]OTE(S001PRB.Int.ReceivePallet);
				N: [XIC(S001PRB.Int.AutoMode) ,XIC(S001PRB.Int.ManualMode) ]XIC(S001PRB.Int.ReceivePallet)XIC(S001PRB.VFD.Running)XIO(S001PRB.Int.PalletInPRB)OTE(S001PRB.Int.RdyToReceive);
				N: [XIC(S001PRB.Int.AutoMode) ,XIC(S001PRB.Int.ManualMode) [XIC(S001PRB.Int.IndexOutPB) ,XIC(S001PRB.Int.JogFwdPB) ] ][XIC(S001PRB.Int.CycComp) ,XIC(S001PRB.Int.TransferStarted) XIO(S001PRB.Int.PalletInPos) ][XIC(S001PRB.Int.PalletInPos) [XIC(S001PRB.Int.NxtNoPartNoPallet) ,XIC(S001PRB.Int.ManualMode) XIC(S001PRB.Int.JogFwdPB) ] ,XIC(S001PRB.Int.TransferStarted) ]XIC(S001PRB.Int.PallClrToExt)XIC(S001PRB.Int.NotFaulted)XIC(S001PRB.Int.NxtNotFaulted)XIC(S001PRB.Int.NxtRdyToReceive)[XIO(S001PRB.Int.PalletHold.Seld) ,XIC(S001PRB.Int.TransferPallet) ]OTE(S001PRB.Int.TransferPallet);
				N: [XIC(S001PRB.Int.NxtPalletInPRB) ,XIC(S001PRB.VFD.Running) XIC(S001PRB.VFD.JogRev) XIC(S001PRB.Int.PalletInPRB) ]OTU(S001PRB.Int.TransferStarted);
				N: [XIC(S001PRB.Int.AutoMode) ,XIC(S001PRB.Int.ManualMode) ]XIC(S001PRB.Int.TransferPallet)OTL(S001PRB.Int.TransferStarted);
				N: XIC(S001PRB.Int.ManualMode)[XIC(S001PRB.VFD.JogFwd) XIO(S001PRB.VFD.JogRev) OTE(S001PRB.VFD.JogFwdCmd) ,XIO(S001PRB.VFD.JogFwd) XIC(S001PRB.VFD.JogRev) OTE(S001PRB.VFD.JogRevCmd) ]OTE(S001PRB.VFD.JogActive);
				N: XIC(S001PRB.Int.ManualMode)[XIC(S001PRB.VFD.JogActive) ,XIC(S001PRB.Int.IndexInPB) ,XIC(S001PRB.Int.IndexOutPB) ]MOV(1000,S001PRB.Int.BrakeRelTmr.PRE)TON(S001PRB.Int.BrakeRelTmr,?,?);
				N: [XIO(S001PRB.Int.ManualMode) [[XIO(S001PRB.Int.PalletInPos) ,XIC(S001PRB.Int.CycComp) ] [XIC(S001PRB.Int.ToolClrToTransfer) ,XIC(S001PRB.VFD.ReleaseBrakeCmd) ] ,XIC(S001PRB.VFD.Running) XIO(S001PRB.VFD.ZeroSpd) ] ,XIC(S001PRB.Int.BrakeRelTmr.DN) ]XIO(S001PRB.VFD.DriveFlt)OTE(S001PRB.VFD.ReleaseBrakeCmd);
		END_ROUTINE

		ROUTINE Z00_MapOutputs 
				RC: "##########################$N"
				    "Power Roll Bed$N"
				    "Output Mapping$N"
				    "##########################";
				N: NOP();
				N: MOV(Edit.Dint,S001PRBDV:O.PTPFwdVelLmt)MOV(S001PRBDV:O.PTPFwdVelLmt,S001PRBDV:O.Reference)MUL(S001PRBDV:O.PTPFwdVelLmt,-1,S001PRBDV:O.PTPRevVelLmt);
				N: XIC(S001PRB.Int.RunCmd)OTE(S001PRBDV:O.LogicCommand_Run);
				N: XIC(S001PRB.VFD.JogActive)OTE(S001PRBDV:O.LogicCommand_Jog1);
				N: XIO(S001PRB.VFD.JogRevCmd)XIO(S001PRBDV:I.DriveStatus_Running)OTE(S001PRBDV:O.LogicCommand_Forward);
				N: XIC(S001PRB.VFD.JogRevCmd)XIO(S001PRBDV:I.DriveStatus_Running)OTE(S001PRBDV:O.LogicCommand_Reverse);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S005RB01 (Description := "Material Handler and Tool Changer Standard Robot",
	                  Class := Standard,
	                  MAIN := "A00_Main",
	                  MODE := 0,
	                  DisableFlag := 0,
	                  UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE A00_Main 
				N: JSR(D00_RB_MapInputs,0);
				N: JSR(B00_ToolChange,0);
				N: JSR(D01_RB_Zones,0);
				N: JSR(D02_RB,0);
				N: JSR(D02_RB_Edit,0);
				N: JSR(D03_RB_PNs,0);
				N: JSR(D04_RB_MapOutpus,0);
				N: JSR(Y00_Alarms_L1,0);
				N: JSR(Y01_Alarms_L2,0);
				N: JSR(Y02_Alarms_L3,0);
		END_ROUTINE

		ROUTINE B00_ToolChange 
				RC: "############################$N"
				    "$N"
				    "Robot Tool Change Application$N"
				    "$N"
				    "############################";
				N: NOP();
				N: [XIC(S005RB01.I1.ToolID1) OTE(S005RB01TC.CoupledToolID.0) ,XIC(S005RB01.I1.ToolID2) OTE(S005RB01TC.CoupledToolID.1) ,XIC(S005RB01.I1.ToolID3) OTE(S005RB01TC.CoupledToolID.2) ,XIC(S005RB01.I1.ToolID4) OTE(S005RB01TC.CoupledToolID.3) ];
				N: XIC(S005RB01TC.ENet.CommOK)XIO(S005RB01.I1.TCPwrOn)EQU(S005RB01TC.CoupledToolID,15)OTE(S005RB01TC.NoTool);
				N: XIC(S005RB01TC.ENet.CommOK)XIC(S005RB01.I1.TCPwrOn)[NEQ(S005RB01TC.CoupledToolID,15) MOV(1500,S005RB01TC.CoupledToolTmr.PRE) TON(S005RB01TC.CoupledToolTmr,?,?) ,[EQU(S005RB01TC.CoupledToolID,1) OTE(S005RB01TC.Tool1) ,EQU(S005RB01TC.CoupledToolID,2) OTE(S005RB01TC.Tool2) ,EQU(S005RB01TC.CoupledToolID,4) OTE(S005RB01TC.Tool3) ,EQU(S005RB01TC.CoupledToolID,8) OTE(S005RB01TC.Tool4) ] ];
				N: XIC(S005RB01.I1.ToolChangeActive)[[EQU(S005RB01TC.CoupledToolID,15) ,XIC(S005RB01TC.InhibitTCComp) ] OTE(S005RB01TC.InhibitTCComp) ,XIO(S005RB01TC.InhibitTCComp) OTE(S005RB01TC.InhibitTC) ];
		END_ROUTINE

		ROUTINE D00_RB_MapInputs 
				RC: "############################$N"
				    "Material Handler Application$N"
				    "Input Mapping$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Material Handler Robot$N"
				    "Input Mapping$N"
				    "############################";
				N: [XIO(S005RB01.ENet.CommOK) FLL(0,S005RB01.I1,1) ,XIC(S005RB01.ENet.CommOK) COP(S005RB01:I1.Input[0],S005RB01.I1,1) ];
				N: [XIC(S005TL1.Int.AutoMode) OTE(S005RB01.Int.AutoMode) ,XIC(S005TL1.Int.ManualMode) OTE(S005RB01.Int.ManualMode) ];
				N: XIC(S005TL1.Int.DryCycle)OTE(S005RB01.Int.DryCycle);
				N: [XIC(S005TL1.Int.AutoModeStopReq) ,XIC(Z005_040.AutoModeStopReq) ]OTE(S005RB01.Int.AutoModeStopReq);
				N: [XIC(Edit.Bit) MOV(1500,S005RB01.Int.AirOnDelayTmr.PRE) TOF(S005RB01.Int.AirOnDelayTmr,?,?) ,XIC(S005RB01.Int.AirOnDelayTmr.DN) OTE(S005RB01.Int.AirOn) ];
				N: XIC(Edit.Bit)OTU(S005RB01.Int.DisableDrives);
				N: [XIC(S005TL1.Int.FaultResetPB) ,XIC(sZ005_040.StaPowerEnblPB) ,XIC(S005RB01.Int.ExtMotorOn) ]OTE(S005RB01.Int.FltReset);
				N: XIC(S005TL1.Int.RstCycComp)OTE(S005RB01.Int.ToolRst);
				N: XIC(S005RB01.Int.SetCycleCompPB.PB)OTE(S005RB01.Int.SetCycleComp);
		END_ROUTINE

		ROUTINE D01_RB_Zones 
				RC: "******************************************************************$N"
				    "Robot Standard$N"
				    "Zones$N"
				    "$N"
				    "Zn1 = Pick$N"
				    "Zn2 = Drop$N"
				    "Zn3 = Maintenance Position$N"
				    "$N"
				    "Zn4-10 TBD$N"
				    "******************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "RobotStdZone AOI Setup$N"
				    "$N"
				    "1. OTE Zn#Used to Enable. If Zone not used OTU$N"
				    "$N"
				    "2. Add All Adjacent Zone.outRbtZnClrMem -]/[- $N"
				    "$N"
				    "3. Add all required tool Pick/Drop Setup Conditions$N"
				    "******************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Zone 1$N"
				    "$N"
				    "S005RB01 Zone 1 with S005RB02 Zone 3$N"
				    "S005RB01 Pick$N"
				    "******************************************************************";
				N: [OTE(S005RB01.Int.Zn1Used) ,XIO(S005RB02.AOIs.Zone[3].outRbtZnClrMem) OTE(S005RB01.Int.Zn1ClrMem) ,XIC(S005RB01.Int.AutoMode) XIC(S005RB01.Int.Pick1Setup) OTE(S005RB01.Int.Zn1ToolCond) ,RobotStdZone(S005RB01.AOIs.Zone[1],S005RB01.Int.Zn1Used,S005RB01.Int.Zn1ClrMem,S005RB01.Int.Zn1ToolCond,S005RB01.I1.ClrIntfZn1,S005RB01.O1.ZnClear1) ];
				RC: "******************************************************************$N"
				    "Zone 2$N"
				    "******************************************************************";
				N: [OTE(S005RB01.Int.Zn2Used) ,XIO(S010RB01.AOIs.Zone[1].outRbtZnClrMem) XIO(S010RB02.AOIs.Zone[1].outRbtZnClrMem) XIO(S020RB01.AOIs.Zone[1].outRbtZnClrMem) OTE(S005RB01.Int.Zn2ClrMem) ,XIC(S005RB01.Int.AutoMode) XIC(S005RB01.Int.Drop1Setup) OTE(S005RB01.Int.Zn2ToolCond) ,RobotStdZone(S005RB01.AOIs.Zone[2],S005RB01.Int.Zn2Used,S005RB01.Int.Zn2ClrMem,S005RB01.Int.Zn2ToolCond,S005RB01.I1.ClrIntfZn2,S005RB01.O1.ZnClear2) ];
				RC: "******************************************************************$N"
				    "Zone 3$N"
				    "******************************************************************";
				N: [OTU(S005RB01.Int.Zn3Used) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn3ClrMem) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn3ToolCond) ,RobotStdZone(S005RB01.AOIs.Zone[3],S005RB01.Int.Zn3Used,S005RB01.Int.Zn3ClrMem,S005RB01.Int.Zn3ToolCond,S005RB01.I1.ClrIntfZn3,S005RB01.O1.ZnClear3) ];
				RC: "******************************************************************$N"
				    "Zone 4$N"
				    "******************************************************************";
				N: [OTU(S005RB01.Int.Zn4Used) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn4ClrMem) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn4ToolCond) ,RobotStdZone(S005RB01.AOIs.Zone[4],S005RB01.Int.Zn4Used,S005RB01.Int.Zn4ClrMem,S005RB01.Int.Zn4ToolCond,S005RB01.I1.ClrIntfZn4,S005RB01.O1.ZnClear4) ];
				RC: "******************************************************************$N"
				    "Zone 5$N"
				    "******************************************************************";
				N: [OTU(S005RB01.Int.Zn5Used) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn5ClrMem) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn5ToolCond) ,RobotStdZone(S005RB01.AOIs.Zone[5],S005RB01.Int.Zn5Used,S005RB01.Int.Zn5ClrMem,S005RB01.Int.Zn5ToolCond,S005RB01.I1.ClrIntfZn5,S005RB01.O1.ZnClear5) ];
				RC: "******************************************************************$N"
				    "Zone 6$N"
				    "******************************************************************";
				N: [OTU(S005RB01.Int.Zn6Used) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn6ClrMem) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn6ToolCond) ,RobotStdZone(S005RB01.AOIs.Zone[6],S005RB01.Int.Zn6Used,S005RB01.Int.Zn6ClrMem,S005RB01.Int.Zn6ToolCond,S005RB01.I1.ClrIntfZn6,S005RB01.O1.ZnClear6) ];
				RC: "******************************************************************$N"
				    "Zone 7$N"
				    "******************************************************************";
				N: [OTU(S005RB01.Int.Zn7Used) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn7ClrMem) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn7ToolCond) ,RobotStdZone(S005RB01.AOIs.Zone[7],S005RB01.Int.Zn7Used,S005RB01.Int.Zn7ClrMem,S005RB01.Int.Zn7ToolCond,S005RB01.I1.ClrIntfZn7,S005RB01.O1.ZnClear7) ];
				RC: "******************************************************************$N"
				    "Zone 8$N"
				    "******************************************************************";
				N: [OTU(S005RB01.Int.Zn8Used) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn8ClrMem) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn8ToolCond) ,RobotStdZone(S005RB01.AOIs.Zone[8],S005RB01.Int.Zn8Used,S005RB01.Int.Zn8ClrMem,S005RB01.Int.Zn8ToolCond,S005RB01.I1.ClrIntfZn8,S005RB01.O1.ZnClear8) ];
				RC: "******************************************************************$N"
				    "Zone 9$N"
				    "******************************************************************";
				N: [OTU(S005RB01.Int.Zn9Used) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn9ClrMem) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn9ToolCond) ,RobotStdZone(S005RB01.AOIs.Zone[9],S005RB01.Int.Zn9Used,S005RB01.Int.Zn9ClrMem,S005RB01.Int.Zn9ToolCond,S005RB01.I1.ClrIntfZn9,S005RB01.O1.ZnClear9) ];
				RC: "******************************************************************$N"
				    "Zone 10$N"
				    "******************************************************************";
				N: [OTU(S005RB01.Int.Zn10Used) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn10ClrMem) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn10ToolCond) ,RobotStdZone(S005RB01.AOIs.Zone[10],S005RB01.Int.Zn10Used,S005RB01.Int.Zn10ClrMem,S005RB01.Int.Zn10ToolCond,S005RB01.I1.ClrIntfZn10,S005RB01.O1.ZnClear10) ];
				RC: "******************************************************************$N"
				    "Zone 11$N"
				    "******************************************************************";
				N: [OTU(S005RB01.Int.Zn11Used) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn11ClrMem) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn11ToolCond) ,RobotStdZone(S005RB01.AOIs.Zone[11],S005RB01.Int.Zn11Used,S005RB01.Int.Zn11ClrMem,S005RB01.Int.Zn11ToolCond,S005RB01.I1.ClrIntfZn11,S005RB01.O1.ZnClear11) ];
				RC: "******************************************************************$N"
				    "Zone 12$N"
				    "******************************************************************";
				N: [OTU(S005RB01.Int.Zn12Used) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn12ClrMem) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn12ToolCond) ,RobotStdZone(S005RB01.AOIs.Zone[12],S005RB01.Int.Zn12Used,S005RB01.Int.Zn12ClrMem,S005RB01.Int.Zn12ToolCond,S005RB01.I1.ClrIntfZn12,S005RB01.O1.ZnClear12) ];
				RC: "******************************************************************$N"
				    "Zone 13$N"
				    "******************************************************************";
				N: [OTU(S005RB01.Int.Zn13Used) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn13ClrMem) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn13ToolCond) ,RobotStdZone(S005RB01.AOIs.Zone[13],S005RB01.Int.Zn13Used,S005RB01.Int.Zn13ClrMem,S005RB01.Int.Zn13ToolCond,S005RB01.I1.ClrIntfZn13,S005RB01.O1.ZnClear13) ];
				RC: "******************************************************************$N"
				    "Zone 14$N"
				    "******************************************************************";
				N: [OTU(S005RB01.Int.Zn14Used) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn14ClrMem) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn14ToolCond) ,RobotStdZone(S005RB01.AOIs.Zone[14],S005RB01.Int.Zn14Used,S005RB01.Int.Zn14ClrMem,S005RB01.Int.Zn14ToolCond,S005RB01.I1.ClrIntfZn14,S005RB01.O1.ZnClear14) ];
				RC: "******************************************************************$N"
				    "Zone 15$N"
				    "******************************************************************";
				N: [OTU(S005RB01.Int.Zn15Used) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn15ClrMem) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn15ToolCond) ,RobotStdZone(S005RB01.AOIs.Zone[15],S005RB01.Int.Zn15Used,S005RB01.Int.Zn15ClrMem,S005RB01.Int.Zn15ToolCond,S005RB01.I1.ClrIntfZn15,S005RB01.O1.ZnClear15) ];
				RC: "******************************************************************$N"
				    "Zone 16$N"
				    "******************************************************************";
				N: [OTU(S005RB01.Int.Zn16Used) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn16ClrMem) ,XIC(Edit.Bit) OTE(S005RB01.Int.Zn16ToolCond) ,RobotStdZone(S005RB01.AOIs.Zone[16],S005RB01.Int.Zn16Used,S005RB01.Int.Zn16ClrMem,S005RB01.Int.Zn16ToolCond,S005RB01.I1.ClrIntfZn16,S005RB01.O1.ZnClear16) ];
				N: [XIO(S005RB01.AOIs.Zone[1].outRbtZnClrMem) ,XIC(S005RB01.I1.AtHome) ]OTE(S005RB01.Int.ClearOfTool1);
				N: [XIC(Edit.Bit) ,XIC(S005RB01.I1.AtHome) ]OTE(S005RB01.Int.ClearOfTool2);
				N: [XIC(Edit.Bit) ,XIC(S005RB01.I1.AtHome) ]OTE(S005RB01.Int.ClearOfTool3);
				N: [XIC(Edit.Bit) ,XIC(S005RB01.I1.AtHome) ]OTE(S005RB01.Int.ClearOfTool4);
				N: [XIC(Edit.Bit) ,XIC(S005RB01.I1.AtHome) ]OTE(S005RB01.Int.ClearOfTool5);
				N: [XIO(S005RB01.AOIs.Zone[1].outRbtZnClrMem) ,XIC(S005RB01.I1.AtHome) ]OTE(S005RB01.Int.ClearOfPick1);
				N: [XIC(Edit.Bit) ,XIC(S005RB01.I1.AtHome) ]OTE(S005RB01.Int.ClearOfPick2);
				N: [XIO(S005RB01.AOIs.Zone[2].outRbtZnClrMem) ,XIC(S005RB01.I1.AtHome) ]OTE(S005RB01.Int.ClearOfDrop1);
				N: [XIC(Edit.Bit) ,XIC(S005RB01.I1.AtHome) ]OTE(S005RB01.Int.ClearOfDrop2);
				N: XIC(S005RB01.Int.ClearOfPick1)XIC(S005RB01.Int.ClearOfPick2)XIC(S005RB01.Int.ClearOfPick3)XIC(S005RB01.Int.ClearOfPick4)XIC(S005RB01.Int.ClearOfPick5)OTE(S005RB01.Int.ClearOfAllPicks);
				N: XIC(S005RB01.Int.ClearOfDrop1)XIC(S005RB01.Int.ClearOfDrop2)XIC(S005RB01.Int.ClearOfDrop3)OTE(S005RB01.Int.ClearOfAllDrops);
		END_ROUTINE

		ROUTINE D02_RB 
				RC: "############################$N"
				    "Fanuc Robot Material Handler Application$N"
				    "**Routine Not Editable**$N"
				    "--------------------------------------$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Rung to see which PN is Active$N"
				    "############################";
				N: NEQ(S005RB01.AOIs.PN.stsPN,0)NOP();
				N: [XIO(S005RB01.I1.PendEnbld) XIC(S005RB01Sfty.Int.TeachOff) OTE(S005RB01.Int.TeachSSOff) ,XIC(S005RB01.I1.PendEnbld) XIC(S005RB01Sfty.Int.TeachSeld) OTE(S005RB01.Int.InTeach) ];
				N: XIC(sZ005_040.PowerEnbld)XIC(sZ005_040.PerimeterSafe)XIC(S005RB01Sfty.Int.EnblRbt)XIC(S005RB01Sfty.Int.TeachOff)XIC(S005RB01Sfty.Int.AdjRbtsTeachOff)XIO(S005RB01Sfty.Int.DisableDrives)XIO(S005RB01.I1.Auto)[XIC(Z005_040.GlobalAutoModePB) ,XIC(S005RB01.Int.SrvoOnDwlTmr.TT) ]XIC(Z005_040.AirOn)XIC(Z005_040.AllModCommOk)[MOV(3000,S005RB01.Int.SrvoOnDwlTmr.PRE) TON(S005RB01.Int.SrvoOnDwlTmr,?,?) ,XIC(S005RB01.Int.SrvoOnDwlTmr.EN) XIO(S005RB01.Int.SrvoOnDwlTmr.DN) OTE(S005RB01.Int.ExtMotorOn) ];
				RC: "############################$N"
				    "External Run Enable$N"
				    "############################";
				N: [XIO(S005RB01.Int.DisableDrives) [XIC(S005RB01.Int.AutoMode) XIC(S005RB01.I1.Auto) ,XIC(S005RB01.Int.ManualMode) ] ,XIC(S005RB01.Int.InTeach) ]MOV(1000,S005RB01.Int.RunEnableDelayTmr.PRE)TON(S005RB01.Int.RunEnableDelayTmr,?,?);
				N: XIC(S005RB01.Int.RunEnableDelayTmr.DN)[XIC(S005RB01.Int.AutoMode) XIC(S005RB01.I1.Auto) ,XIC(S005RB01.Int.InTeach) XIO(S005RB01.I1.Auto) ]OTE(S005RB01.Int.ExtRunEnable);
				RC: "############################$N"
				    "Robot Ready Status$N"
				    "############################";
				N: XIC(S005RB01.I1.Cmd_Enbl)XIC(S005RB01.I1.Sys_Rdy)XIO(S005RB01.I1.RbtFaulted)XIO(S005RB01.I1.PendEnbld)XIC(S005RB01.I1.Auto)OTE(S005RB01.Int.RbtRdySU);
				N: XIC(S005RB01.Int.RbtRdySU)XIC(S005RB01.I1.AtHome)XIO(S005RB01.I1.Pg_Running)XIO(S005RB01.I1.Pg_Paused)XIO(S005RB01.I1.RbtHeld)OTE(S005RB01.Int.RbtRdy);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S005RB01.Int.RetFromMaintSeld) ,XIC(S005RB01.Int.MaintPosNoToolSeld) ,XIC(S005RB01.Int.MaintPosTool2Seld) ,XIC(S005RB01.Int.MaintPosTool3Seld) ,XIC(S005RB01.Int.MaintPosTool4Seld) ]OTU(S005RB01.Int.MaintPosTool1Seld);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S005RB01.Int.RetFromMaintSeld) ,XIC(S005RB01.Int.MaintPosNoToolSeld) ,XIC(S005RB01.Int.MaintPosTool1Seld) ,XIC(S005RB01.Int.MaintPosTool3Seld) ,XIC(S005RB01.Int.MaintPosTool4Seld) ]OTU(S005RB01.Int.MaintPosTool2Seld);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S005RB01.Int.RetFromMaintSeld) ,XIC(S005RB01.Int.MaintPosNoToolSeld) ,XIC(S005RB01.Int.MaintPosTool1Seld) ,XIC(S005RB01.Int.MaintPosTool2Seld) ,XIC(S005RB01.Int.MaintPosTool4Seld) ]OTU(S005RB01.Int.MaintPosTool3Seld);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S005RB01.Int.RetFromMaintSeld) ,XIC(S005RB01.Int.MaintPosNoToolSeld) ,XIC(S005RB01.Int.MaintPosTool1Seld) ,XIC(S005RB01.Int.MaintPosTool2Seld) ,XIC(S005RB01.Int.MaintPosTool3Seld) ]OTU(S005RB01.Int.MaintPosTool4Seld);
				N: [XIC(S005RB01.Int.RetFromMaintSeld) ,XIC(S005RB01.Int.MaintPosTool1Seld) ,XIC(S005RB01.Int.MaintPosTool2Seld) ,XIC(S005RB01.Int.MaintPosTool3Seld) ,XIC(S005RB01.Int.MaintPosTool4Seld) ]OTU(S005RB01.Int.MaintPosNoToolSeld);
				N: XIC(S005RB01.Int.AutoMode)[XIC(S005RB01.Int.GoToMaintPosTool1PB.PB) OTL(S005RB01.Int.MaintPosTool1Seld) ,XIC(S005RB01.Int.GoToMaintPosTool2PB.PB) OTL(S005RB01.Int.MaintPosTool2Seld) ,XIC(S005RB01.Int.GoToMaintPosTool3PB.PB) OTL(S005RB01.Int.MaintPosTool3Seld) ,XIC(S005RB01.Int.GoToMaintPosTool4PB.PB) OTL(S005RB01.Int.MaintPosTool4Seld) ];
				N: XIC(S005RB01.Int.AutoMode)XIC(S005RB01.Int.GoToMaintPosNoToolPB.PB)OTL(S005RB01.Int.MaintPosNoToolSeld);
				N: [XIC(S005RB01.Int.MaintPosTool1Seld) ,XIC(S005RB01.Int.MaintPosTool2Seld) ,XIC(S005RB01.Int.MaintPosTool3Seld) ,XIC(S005RB01.Int.MaintPosTool4Seld) ,XIC(S005RB01.Int.MaintPosNoToolSeld) ][XIC(S005RB01.I1.Clrtransfer) OTE(S005RB01.Int.Maintenance) ,OTE(S005RB01.Int.MaintenanceSetup) ];
				RC: "############################$N"
				    "Robot Initiate Permissives$N"
				    "$N"
				    "Do not Edit Permissives$N"
				    "BIW Lucid Motors Controls Dpt.$N"
				    "############################";
				N: [XIC(S005RB01.Int.AirOn) OTE(S005RB01.Int.InitPerm1.Inp_Perm00) ,XIO(S005RB01.Int.CycleComp) OTE(S005RB01.Int.InitPerm1.Inp_Perm01) ,XIO(S005RB01.Int.RetHome) OTE(S005RB01.Int.InitPerm1.Inp_Perm02) ,XIO(S005RB01.Int.AbortPickSeld) OTE(S005RB01.Int.InitPerm1.Inp_Perm03) ,P_Perm(S005RB01.Int.InitPerm1) ];
				N: [XIC(S005RB01.I1.Auto) OTE(S005RB01.Int.InitPerm2.Inp_Perm00) ,XIC(S005RB01.Int.TeachSSOff) OTE(S005RB01.Int.InitPerm2.Inp_Perm01) ,XIO(S005RB01.Int.CycEndSeld) OTE(S005RB01.Int.InitPerm2.Inp_Perm02) ,XIO(S005RB01.Int.RetFromPounceSeld) OTE(S005RB01.Int.InitPerm2.Inp_Perm03) ,XIO(S005RB01.Int.AutoModeStopReq) OTE(S005RB01.Int.InitPerm2.Inp_Perm04) ,P_Perm(S005RB01.Int.InitPerm2) ];
				N: XIC(S005RB01.Int.AutoMode)[XIC(S005RB01.Int.PickUpSetup.Sts_PermOK) XIC(S005RB01.Int.InitPerm1.Sts_PermOK) ,XIC(S005RB01.Int.Maintenance) ]XIC(S005RB01.Int.InitPerm2.Sts_PermOK)OTE(S005RB01.Int.InitRdy);
				RC: "############################$N"
				    "Robot Style Selection Outputs$N"
				    "############################";
				N: XIC(S005RB01.Int.InitRdy)[XIC(S005RB01.Int.PgmReq.0) OTE(S005RB01.O1.Style1) ,XIC(S005RB01.Int.PgmReq.1) OTE(S005RB01.O1.Style2) ,XIC(S005RB01.Int.PgmReq.2) OTE(S005RB01.O1.Style3) ,XIC(S005RB01.Int.PgmReq.3) OTE(S005RB01.O1.Style4) ,XIC(S005RB01.Int.PgmReq.4) OTE(S005RB01.O1.Style5) ,XIC(S005RB01.Int.PgmReq.5) OTE(S005RB01.O1.Style6) ,XIC(S005RB01.Int.PgmReq.6) OTE(S005RB01.O1.Style7) ,XIC(S005RB01.Int.PgmReq.7) OTE(S005RB01.O1.Style8) ];
				N: [XIC(S005RB01.Int.RetFromPounceSeld) ,XIC(S005RB01.Int.AbortPickSeld) ,XIC(S005RB01.Int.MaintPosTool1Seld) ,XIC(S005RB01.Int.MaintPosTool2Seld) ,XIC(S005RB01.Int.MaintPosTool3Seld) ,XIC(S005RB01.Int.MaintPosTool4Seld) ,XIC(S005RB01.Int.MaintPosNoToolSeld) ]OTE(S005RB01.Int.RetHome);
				N: XIC(S005RB01.Int.AutoMode)XIC(S005RB01.Int.InitRdy)XIC(S005RB01.Int.StartCycleSU)OTE(S005RB01.Int.StartCycle);
				N: [XIC(S005RB01.Int.TaskComp) XIC(S005RB01.Int.LastDropComp) ,XIC(S005RB01.Int.SetCycleComp) [XIC(S005RB01.I1.AtHome) ,XIC(S005RB01.I1.ClrUnclamp) XIC(S005RB01.I1.Clrtransfer) ] ]XIC(S005RB01.Int.EOATHome)XIC(S005RB01.Int.NoPartPres)OTL(S005RB01.Int.CycleComp);
				N: [XIC(S005RB01.Int.RstCycleComp) ,XIC(S005RB01.Int.ManualMode) XIC(S005RB01.Int.ToolRst) ]OTU(S005RB01.Int.CycleComp);
				RC: "############################$N"
				    "Outputs$N"
				    "############################";
				N: OTE(S005RB01.O1.Stop)OTE(S005RB01.O1.SafeSpeed)OTE(S005RB01.O1.MtnEnable);
				N: XIC(S005RB01.Int.ExtRunEnable)OTE(S005RB01.O1.Hold);
				N: XIC(S005RB01.Int.FltReset)OTE(S005RB01.O1.FaultRst);
				N: XIC(S005RB01.Int.DryCycle)OTE(S005RB01.O1.DryCycle);
				N: XIC(S005RB01Sfty.Int.EnblRbt)XIC(S005RB01.Int.AutoMode)[XIC(S005RB01.Int.RbtRdySU) XIC(S005RB01.O1.PdnStart) XIC(S005RB01.I1.Auto) XIO(S005RB01.I1.Pg_Running) XIO(S005RB01.I1.Pg_Paused) XIC(S005RB01.I1.AtHome) ,XIC(S005RB01.I1.Auto) XIC(S005RB01.I1.Pg_Paused) XIO(S005RB01.I1.Pg_Running) ]XIO(S005RB01.I1.RbtHeld)OTE(S005RB01.O1.UOPStart);
				N: GRT(S005RB01.Int.PgmReq,0)XIO(S005RB01.Int.Maintenance)XIC(S005RB01.Int.InitRdy)OTE(S005RB01.O1.PdnStart);
				N: XIC(S005RB01.Int.RetHome)OTE(S005RB01.O1.RetHome);
				RC: "############################$N"
				    "Robot AOIs$N"
				    "$N"
				    "RobotStdPNSelect$N"
				    "RobotStdSpeedSelect$N"
				    "############################";
				N: RobotStdPNSelect(S005RB01.AOIs.PN,S005RB01.Int.PNPerm1,S005RB01.Int.PNPerm2,S005RB01.I1,S005RB01.O1,S005RB01.Int.DecisionPermHMI)RobotStdSpeedSelect(S005RB01.AOIs.Speed,S005RB01.I1,S005RB01.O1);
				RC: "############################$N"
				    "Robot Standard$N"
				    "Cycle Time$N"
				    "############################";
				N: NOP();
				RC: "Change Value To Design Cycle Time";
				N: MOV(360000,S005RB01.Int.CycleTime);
				N: XIC(S005RB01.Int.AutoMode)XIO(S005RB01.I1.RbtHeld)XIO(S005RB01.I1.Pg_Paused)XIO(S005RB01.I1.AtHome)XIO(S005RB01.I1.WaitingOnInput)XIO(S005RB01.Int.Maintenance)MOV(3600000,S005RB01.Int.CycleTimeTmr.PRE)RTO(S005RB01.Int.CycleTimeTmr,?,?);
				N: MOV(3600000,S005RB01.Int.TackTimeTmr.PRE)RTO(S005RB01.Int.TackTimeTmr,?,?);
				N: GRT(S005RB01.Int.CycleTimeTmr.ACC,S005RB01.Int.CycleTime)OTE(S005RB01.Int.Overtime);
				N: XIC(S005RB01.I1.AtHome)XIO(S005RB01.I1.Pg_Running)[XIO(S005RB01.Int.CycleTimeOns) [MOV(S005RB01.Int.CycleTimeTmr.ACC,S005RB01.Int.CycleTimeStore) ,RES(S005RB01.Int.CycleTimeTmr) ,MOV(S005RB01.Int.TackTimeTmr.ACC,S005RB01.Int.TackTimeStore) ,RES(S005RB01.Int.TackTimeTmr) ] ,OTL(S005RB01.Int.CycleTimeOns) ];
				N: XIC(S005RB01.Int.TaskComp)OTU(S005RB01.Int.CycleTimeOns);
		END_ROUTINE

		ROUTINE D02_RB_Edit 
				RC: "############################$N"
				    "Robot Motion and Part Present Logic$N"
				    "Editable Routine$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Robot Motion and Part Present Logic$N"
				    "############################";
				N: NOP();
				N: XIO(S005RB01.I1.MH1_PP1)XIO(S005RB01.I1.MH1_PP2)XIO(S005RB01.I1.MH1_PP3)XIO(S005RB01.I1.MH1_PP4)OTE(S005RB01.Int.NoPartPres);
				N: XIC(S005RB01.Int.NoPartPres)XIC(S005RB01.SR.Int.NoPart)OTE(S005RB01.Int.Empty);
				N: XIC(S005RB01.I1.MH1_PP1)XIC(S005RB01.I1.MH1_PP2)OTE(S005RB01.Int.PartPres1);
				N: XIC(S005RB01.I1.MH1_PP3)XIC(S005RB01.I1.MH1_PP4)OTE(S005RB01.Int.PartPres2);
				N: [XIC(S005RB01.Int.PartPres1) XIC(S005RB01.SR.Int.Model1) ,XIC(S005RB01.Int.PartPres2) XIC(S005RB01.SR.Int.Model2) ]OTE(S005RB01.Int.AllPPAndSR);
				RC: "############################$N"
				    "All Tasks Complete$N"
				    "############################";
				N: XIC(S005RB01.Int.Pick1Comp)OTE(S005RB01.Int.TaskComp);
				RC: "############################$N"
				    "Reset Cycle Complete$N"
				    "############################";
				N: [XIC(S005RB01.I1.AtHome) XIC(S005RB01.Int.CycleComp) XIC(S005RB01.Int.Empty) XIC(S005RB01.Int.ClearOfAllPicks) XIC(S005RB01.Int.ClearOfAllDrops) XIC(S005RB01.Int.EOATHome) ,XIC(S005RB01.Int.RstCycleCompPB.PB) ]OTE(S005RB01.Int.RstCycleComp);
				RC: "############################$N"
				    "Robot Style Selection$N"
				    "$N"
				    "31 - Air GT Glass Roof$N"
				    "41 - Air Pure Metal Roof$N"
				    "############################";
				N: MOV(0,S005RB01.Int.PgmReq);
				N: XIO(S005RB01.Int.Maintenance)XIC(S005TL1.SR.Int.Part)[XIC(S005RB01.Int.EOATHome) ,XIC(S005RB01.Int.NoTool) ]XIO(S005RB01.SR.Int.NoPart)[XIC(Edit.Bit) XIC(S005TL1.SR.Int.Model1) XIC(S005TL1.SR.Data.Options.CarModel.0) XIC(S005TL1.SR.Data.Options.CanRoofPack.0) MOV(31,S005RB01.Int.PgmReq) ,XIC(Edit.Bit) XIC(S005TL1.SR.Int.Model2) XIC(S005TL1.SR.Data.Options.CarModel.0) XIC(S005TL1.SR.Data.Options.CanRoofPack.1) MOV(41,S005RB01.Int.PgmReq) ];
				N: XIC(S005RB01.Int.Maintenance)MOV(6,S005RB01.Int.PgmReq);
				RC: "############################$N"
				    "Material Handler Pick Process Setup$N"
				    "$N"
				    "Editable Setup$N"
				    "############################";
				N: XIC(Edit.Bit)[XIC(S005RB01.Int.Empty) OTE(S005RB01.Int.PickUpSetup.Inp_Perm00) ,[XIC(S005RB01.Int.Pick1Setup) ,XIC(S005RB01.Int.Pick2Setup) ,XIC(S005RB01.Int.Pick3Setup) ,XIC(S005RB01.Int.Pick4Setup) ] OTE(S005RB01.Int.PickUpSetup.Inp_Perm01) ,[XIC(S005RB01.Int.EOATHome) ,XIC(S005RB01.Int.NoTool) ] OTE(S005RB01.Int.PickUpSetup.Inp_Perm02) ,P_Perm(S005RB01.Int.PickUpSetup) ];
				RC: "############################$N"
				    "Pick Process Setup$N"
				    "$N"
				    "Add Required Conditions to Enable Robot Pick$N"
				    "############################";
				N: NOP();
				N: XIC(S005RB01.Int.AutoMode)XIC(S005RB01.Int.Empty)XIC(S005RB01.Int.EOATHome)XIC(S005TL1.Int.ClrToUnld)XIO(S005RB01.Int.AbortPickSeld)OTE(S005RB01.Int.Pick1Setup);
				N: XIC(S005RB01.Int.AutoMode)XIC(S015RT1_LwrRck.Int.RackRdy)XIC(Edit.Bit)XIO(S005RB01.Int.AbortPickSeld)OTE(S005RB01.Int.Pick2Setup);
				N: XIC(S005RB01.Int.AutoMode)XIC(Edit.Bit)XIO(S005RB01.Int.AbortPickSeld)OTE(S005RB01.Int.Pick3Setup);
				RC: "############################$N"
				    "Drop Process Setup$N"
				    "$N"
				    "Add Required Conditions to Enable Robot Drop$N"
				    "############################";
				N: NOP();
				N: XIC(S010TL1.Int.LoadPos1)XIC(S010TL1.Int.ClrToLoad)XIC(Edit.Bit)OTE(S005RB01.Int.Drop1Setup);
				N: XIC(S010TL1.Int.LoadPos1)XIC(Edit.Bit)OTE(S005RB01.Int.Drop2Setup);
				N: XIC(S010TL1.Int.LoadPos2)XIC(Edit.Bit)OTE(S005RB01.Int.Drop3Setup);
				RC: "############################$N"
				    "Robot Functions Control Mapping$N"
				    "############################";
				N: XIC(S005RB01.Int.AutoMode)XIC(S005RB01.Int.RetFromPouncePB.PB)OTL(S005RB01.Int.RetFromPounceSeld);
				N: XIC(S005RB01.Int.RetFromPounceCancelPB.PB)OTU(S005RB01.Int.RetFromPounceSeld);
				N: [XIC(S005RB01.Int.RetFromMaintPosPB.PB) ,XIC(S005RB01.Int.MaintCompPB.PB) ]OTE(S005RB01.Int.RetFromMaintSeld);
				N: XIC(S005RB01.Int.AutoMode)XIO(S005RB01.Int.DryCycle)XIO(S005RB01.Int.Pick1Comp)XIO(S005RB01.Int.Pick2Comp)XIO(S005RB01.Int.Pick3Comp)XIO(S005RB01.Int.Pick4Comp)XIO(S005RB01.Int.Pick5Comp)XIC(S005RB01.Int.AbortPickPB.PB)OTL(S005RB01.Int.AbortPickSeld);
				N: [XIC(S005RB01.Int.AutoMode) ,XIC(S005RB01.Int.ManualMode) ]XIC(S005RB01.I1.AtHome)XIC(S005RB01.Int.AbortPickCancelPB.PB)OTU(S005RB01.Int.AbortPickSeld);
				RC: "############################$N"
				    "Pick Up Process Completes Logic$N"
				    "$N"
				    "Add the required Part Present, EOAT Work Position, Tool Zone, and PN$N"
				    "############################";
				N: NOP();
				N: [XIC(S005RB01.I1.Auto) ,XIC(S005RB01.Int.InTeach) ,XIC(S005RB01.Int.ManualMode) XIC(S005RB01.Int.SetPick1CompPB.PB) ][XIC(S005RB01.Int.PartPres1) ,XIC(S005RB01.Int.DryCycle) ]XIC(S005RB01.Int.EOATWorkPos1)XIO(S005RB01.Int.ClearOfPick1)XIC(S005RB01.Int.ClearOfAllDrops)XIO(S005RB01.Int.AbortPickSeld)[XIC(S005RB01.AOIs.PN.stsPN51) ,XIC(Edit.Debug) ]OTL(S005RB01.Int.Pick1Comp);
				N: [XIC(S005RB01.Int.CycleComp) XIC(S005RB01.Int.ClearOfPick1) ,XIC(S005RB01.Int.InTeach) XIO(S005RB01.Int.AnyPartPres1) XIC(S005RB01.Int.EOATHome) XIC(Edit.Bit) ,XIC(S005RB01.Int.ManualMode) XIC(S005RB01.Int.RstPick1CompPB.PB) ]OTU(S005RB01.Int.Pick1Comp);
				N: [XIC(S005RB01.I1.Auto) ,XIC(S005RB01.Int.InTeach) ,XIC(S005RB01.Int.ManualMode) XIC(S005RB01.Int.SetPick2CompPB.PB) ][XIC(S005RB01.Int.PartPres2) ,XIC(S005RB01.Int.DryCycle) ]XIC(S005RB01.Int.EOATWorkPos2)XIO(S005RB01.Int.ClearOfPick2)XIC(S005RB01.Int.ClearOfAllDrops)XIO(S005RB01.Int.AbortPickSeld)[XIC(S005RB01.AOIs.PN.stsPN52) ,XIC(Edit.Debug) ]XIC(Edit.Bit)OTL(S005RB01.Int.Pick2Comp);
				N: [XIC(S005RB01.Int.CycleComp) XIC(S005RB01.Int.ClearOfPick2) ,XIC(S005RB01.Int.InTeach) XIO(S005RB01.Int.AnyPartPres2) XIC(S005RB01.Int.EOATHome) XIC(Edit.Bit) ,XIC(S005RB01.Int.ManualMode) XIC(S005RB01.Int.RstPick2CompPB.PB) ]OTU(S005RB01.Int.Pick2Comp);
				N: [XIC(S005RB01.I1.Auto) ,XIC(S005RB01.Int.InTeach) ,XIC(S005RB01.Int.ManualMode) XIC(S005RB01.Int.SetPick3CompPB.PB) ][XIC(S005RB01.Int.PartPres3) ,XIC(S005RB01.Int.DryCycle) ]XIC(S005RB01.Int.EOATWorkPos3)XIO(S005RB01.Int.ClearOfPick3)XIC(S005RB01.Int.ClearOfAllDrops)XIO(S005RB01.Int.AbortPickSeld)[XIC(S005RB01.AOIs.PN.stsPN53) ,XIC(Edit.Debug) ]XIC(Edit.Bit)OTL(S005RB01.Int.Pick3Comp);
				N: [XIC(S005RB01.Int.CycleComp) XIC(S005RB01.Int.ClearOfPick3) ,XIC(S005RB01.Int.InTeach) XIO(S005RB01.Int.AnyPartPres3) XIC(S005RB01.Int.EOATHome) XIC(Edit.Bit) ,XIC(S005RB01.Int.ManualMode) XIC(S005RB01.Int.RstPick3CompPB.PB) ]OTU(S005RB01.Int.Pick3Comp);
				RC: "############################$N"
				    "Drop Off Process Completes Logic$N"
				    "$N"
				    "Add the required Part Present, EOAT Work Position, Tool Zone, and PN$N"
				    "############################";
				N: NOP();
				N: XIC(S005RB01.I1.AtDrop1)[XIC(S010TL1.Int.AllPartsPres1) ,XIC(S005RB01.Int.ManualMode) XIC(S005RB01.Int.SetDrop1CompPB.PB) ]XIC(S005RB01.Int.EOATHome)XIO(S005RB01.Int.ClearOfDrop1)OTL(S005RB01.Int.Drop1Comp);
				N: XIC(S005RB01.I1.AtDrop2)[XIC(S010TL1.Int.AllPartsPres1) ,XIC(S005RB01.Int.ManualMode) XIC(S005RB01.Int.SetDrop2CompPB.PB) ]XIC(S005RB01.Int.EOATHome)XIO(S005RB01.Int.ClearOfDrop2)XIC(Edit.Bit)OTL(S005RB01.Int.Drop2Comp);
				N: XIC(S005RB01.I1.AtDrop3)[XIC(S010TL1.Int.AllPartsPres2) ,XIC(S005RB01.Int.ManualMode) XIC(S005RB01.Int.SetDrop3CompPB.PB) ]XIC(S005RB01.Int.EOATHome)XIO(S005RB01.Int.ClearOfDrop3)XIC(Edit.Bit)OTL(S005RB01.Int.Drop3Comp);
				N: XIC(S005RB01.Int.Drop1Comp)OTE(S005RB01.Int.LastDropComp);
				N: [XIC(S005RB01.Int.CycleComp) XIC(S005RB01.Int.ClearOfAllDrops) ,XIC(S005RB01.Int.RstCycleComp) ,XIC(S005RB01.Int.ManualMode) XIC(S005RB01.Int.SetDrop1CompPB.PB) ][OTU(S005RB01.Int.Drop1Comp) ,OTU(S005RB01.Int.Drop2Comp) ,OTU(S005RB01.Int.Drop3Comp) ,OTU(S005RB01.Int.Drop4Comp) ,OTU(S005RB01.Int.Drop5Comp) ];
				RC: "############################$N"
				    "$N"
				    "ROBOT FUNCTIONS PB Visibility$N"
				    "$N"
				    "############################$N"
				    "$N"
				    "Change OTU to OTE for every required Robot Function PB.Vis";
				N: NOP();
				RC: "############################$N"
				    "Robot Cycle Complete$N"
				    "############################";
				N: OTU(S005RB01.Int.SetCycleCompPB.Vis)OTU(S005RB01.Int.RstCycleCompPB.Vis);
				RC: "############################$N"
				    "Maintenance Functions$N"
				    "############################";
				N: OTU(S005RB01.Int.GlobalMaintPosPB.Vis)OTU(S005RB01.Int.GoToMaintPosTool1PB.Vis)OTU(S005RB01.Int.GoToMaintPosTool2PB.Vis)OTU(S005RB01.Int.GoToMaintPosTool3PB.Vis)OTU(S005RB01.Int.GoToMaintPosTool4PB.Vis)OTU(S005RB01.Int.GoToMaintPosNoToolPB.Vis)OTU(S005RB01.Int.RetFromMaintPosPB.Vis)OTU(S005RB01.Int.MaintCompPB.Vis);
				RC: "############################$N"
				    "Material Handling Functions$N"
				    "############################";
				N: [OTU(S005RB01.Int.RetFromPouncePB.Vis) ,OTU(S005RB01.Int.RetFromPounceCancelPB.Vis) ][OTU(S005RB01.Int.AbortPickPB.Vis) ,OTU(S005RB01.Int.AbortPickCancelPB.Vis) ][OTU(S005RB01.Int.SetPick1CompPB.Vis) OTU(S005RB01.Int.SetPick2CompPB.Vis) OTU(S005RB01.Int.SetPick3CompPB.Vis) OTU(S005RB01.Int.SetPick4CompPB.Vis) OTU(S005RB01.Int.SetPick5CompPB.Vis) ,OTU(S005RB01.Int.RstPick1CompPB.Vis) OTU(S005RB01.Int.RstPick2CompPB.Vis) OTU(S005RB01.Int.RstPick3CompPB.Vis) OTU(S005RB01.Int.RstPick4CompPB.Vis) OTU(S005RB01.Int.RstPick5CompPB.Vis) ][OTU(S005RB01.Int.SetDrop1CompPB.Vis) OTU(S005RB01.Int.SetDrop2CompPB.Vis) OTU(S005RB01.Int.SetDrop3CompPB.Vis) OTU(S005RB01.Int.SetDrop4CompPB.Vis) OTU(S005RB01.Int.SetDrop5CompPB.Vis) ,OTU(S005RB01.Int.RstDrop1CompPB.Vis) OTU(S005RB01.Int.RstDrop2CompPB.Vis) OTU(S005RB01.Int.RstDrop3CompPB.Vis) OTU(S005RB01.Int.RstDrop4CompPB.Vis) OTU(S005RB01.Int.RstDrop5CompPB.Vis) ];
		END_ROUTINE

		ROUTINE D03_RB_PNs 
				RC: "############################$N"
				    "Process Numbers Logic$N"
				    "$N"
				    "PN Control$N"
				    "$N"
				    "Editable Routine$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Maintenance Position$N"
				    "############################";
				N: XIC(S005RB01.AOIs.PN.stsPN3)OTE(S005RB01.Int.AtMaint);
				RC: "############################$N"
				    "Pounce Position$N"
				    "PN9$N"
				    "$N"
				    "Waiting For Start Cycle Command To Continue$N"
				    "############################";
				N: XIC(S005RB01.AOIs.PN.stsPN9)[XIC(S005RB01.Int.StartCycle) OTE(S005RB01.PNPerm.PN9Perm1.Inp_Perm00) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN9Perm1.Inp_Perm01) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN9Perm1.Inp_Perm02) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN9Perm1.Inp_Perm03) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN9Perm1.Inp_Perm04) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN9Perm1.Inp_Perm05) ,P_Perm(S005RB01.PNPerm.PN9Perm1) ]COP(S005RB01.PNPerm.PN9Perm1,S005RB01.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S005RB01.Int.PNPerm2,1);
				RC: "############################$N"
				    "Maintenance Position Clear$N"
				    "############################";
				N: XIC(S005RB01.AOIs.PN.stsPN3)[XIC(S005RB01.Int.AutoMode) OTE(S005RB01.PNPerm.PN3Perm1.Inp_Perm00) ,XIO(S005RB01.Int.MaintPosTool1Seld) XIO(S005RB01.Int.MaintPosTool2Seld) XIO(S005RB01.Int.MaintPosTool3Seld) XIO(S005RB01.Int.MaintPosTool4Seld) XIO(S005RB01.Int.MaintPosNoToolSeld) OTE(S005RB01.PNPerm.PN3Perm1.Inp_Perm01) ,XIC(S005RB01.Int.RetFromMaintSeld) OTE(S005RB01.PNPerm.PN3Perm1.Inp_Perm02) ,XIC(S005RB01.I1.AtMaintPos) OTE(S005RB01.PNPerm.PN3Perm1.Inp_Perm03) ,P_Perm(S005RB01.PNPerm.PN3Perm1) ]COP(S005RB01.PNPerm.PN3Perm1,S005RB01.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S005RB01.Int.PNPerm2,1);
				RC: "ProcessNumber 11 - OK to Enter S005TL1";
				N: XIC(S005RB01.AOIs.PN.stsPN11)[XIC(S005TL1.Int.TaskComp) OTE(S005RB01.PNPerm.PN11Perm1.Inp_Perm00) ,XIC(S005TL1.Int.ClrToUnld) OTE(S005RB01.PNPerm.PN11Perm1.Inp_Perm01) ,XIC(S005RB01.Int.Pick1Setup) OTE(S005RB01.PNPerm.PN11Perm1.Inp_Perm02) ,XIO(S005RB01.Int.AbortPickSeld) OTE(S005RB01.PNPerm.PN11Perm1.Inp_Perm03) ,P_Perm(S005RB01.PNPerm.PN11Perm1) ]COP(S005RB01.PNPerm.PN11Perm1,S005RB01.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S005RB01.Int.PNPerm2,1);
				RC: "ProcessNumber 12 - Pick From S005TL1";
				N: XIC(S005RB01.AOIs.PN.stsPN12)[XIO(S005TL1.Int.TaskComp) OTE(S005RB01.PNPerm.PN12Perm1.Inp_Perm00) ,XIO(S005RB01.Int.ClearOfPick1) OTE(S005RB01.PNPerm.PN12Perm1.Inp_Perm01) ,XIC(S005TL1.Int.ClrToUnld) OTE(S005RB01.PNPerm.PN12Perm1.Inp_Perm02) ,XIC(S005RB01.I1.AtPick1) OTE(S005RB01.PNPerm.PN12Perm1.Inp_Perm03) ,XIO(S005RB01.Int.AbortPickSeld) OTE(S005RB01.PNPerm.PN12Perm1.Inp_Perm04) ,P_Perm(S005RB01.PNPerm.PN12Perm1) ]COP(S005RB01.PNPerm.PN12Perm1,S005RB01.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S005RB01.Int.PNPerm2,1);
				RC: "ProcessNumber 51 - Pick up from S005TL1 Complete";
				N: XIC(S005RB01.AOIs.PN.stsPN51)[XIC(S005RB01.Int.Pick1Comp) OTE(S005RB01.PNPerm.PN51Perm1.Inp_Perm00) ,XIC(S005RB01.SR.Int.Part) OTE(S005RB01.PNPerm.PN51Perm1.Inp_Perm01) ,XIC(S005TL1.Int.Empty) OTE(S005RB01.PNPerm.PN51Perm1.Inp_Perm02) ,XIO(S005RB01.Int.ClearOfPick1) OTE(S005RB01.PNPerm.PN51Perm1.Inp_Perm03) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN51Perm1.Inp_Perm04) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN51Perm1.Inp_Perm05) ,P_Perm(S005RB01.PNPerm.PN51Perm1) ]COP(S005RB01.PNPerm.PN51Perm1,S005RB01.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S005RB01.Int.PNPerm2,1);
				RC: "ProcessNumber 13 - OK To Enter FRM010 TL1$N"
				    "DROP PART";
				N: XIC(S005RB01.AOIs.PN.stsPN13)[XIC(S005RB01.Int.Pick1Comp) OTE(S005RB01.PNPerm.PN13Perm1.Inp_Perm00) ,XIC(S005RB01.SR.Int.Part) OTE(S005RB01.PNPerm.PN13Perm1.Inp_Perm01) ,XIC(S005RB01.Int.PartPres1) OTE(S005RB01.PNPerm.PN13Perm1.Inp_Perm02) ,XIC(S005RB01.Int.EOATWorkPos1) OTE(S005RB01.PNPerm.PN13Perm1.Inp_Perm03) ,XIC(S005RB01.Int.Drop1Setup) OTE(S005RB01.PNPerm.PN13Perm1.Inp_Perm04) ,XIC(S010TL1.Int.ClrToLoad) OTE(S005RB01.PNPerm.PN13Perm1.Inp_Perm05) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN13Perm1.Inp_Perm06) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN13Perm1.Inp_Perm07) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN13Perm1.Inp_Perm08) ,P_Perm(S005RB01.PNPerm.PN13Perm1) ]COP(S005RB01.PNPerm.PN13Perm1,S005RB01.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S005RB01.Int.PNPerm2,1);
				RC: "ProcessNumber 14 - OK To Drop at FRM010 TL1$N"
				    "DROP PART";
				N: XIC(S005RB01.AOIs.PN.stsPN14)[XIC(S005RB01.Int.Drop1Setup) OTE(S005RB01.PNPerm.PN14Perm1.Inp_Perm00) ,XIC(S010TL1.Int.ClrToLoad) OTE(S005RB01.PNPerm.PN14Perm1.Inp_Perm01) ,XIO(S005RB01.Int.ClearOfDrop1) OTE(S005RB01.PNPerm.PN14Perm1.Inp_Perm02) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN14Perm1.Inp_Perm03) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN14Perm1.Inp_Perm04) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN14Perm1.Inp_Perm05) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN14Perm1.Inp_Perm06) ,P_Perm(S005RB01.PNPerm.PN14Perm1) ]COP(S005RB01.PNPerm.PN14Perm1,S005RB01.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S005RB01.Int.PNPerm2,1);
				RC: "ProcessNumber 52 - Drop Complete at FRM010 TL1$N"
				    "DROP PART";
				N: XIC(S005RB01.AOIs.PN.stsPN52)[XIC(S005RB01.Int.Drop1Comp) OTE(S005RB01.PNPerm.PN52Perm1.Inp_Perm00) ,XIO(S005RB01.Int.ClearOfDrop1) OTE(S005RB01.PNPerm.PN52Perm1.Inp_Perm01) ,XIC(S010TL1.Int.AllPartsPres1) OTE(S005RB01.PNPerm.PN52Perm1.Inp_Perm02) ,[XIC(S005RB01.Int.EOATHome) ,XIC(S005RB01.Int.EOATWorkPos2) ] OTE(S005RB01.PNPerm.PN52Perm1.Inp_Perm03) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN52Perm1.Inp_Perm04) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN52Perm1.Inp_Perm05) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN52Perm1.Inp_Perm06) ,P_Perm(S005RB01.PNPerm.PN52Perm1) ]COP(S005RB01.PNPerm.PN52Perm1,S005RB01.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S005RB01.Int.PNPerm2,1);
				RC: "ProcessNumber 53 - Part Released at FRM010 TL1$N"
				    "DROP PART";
				N: XIC(S005RB01.AOIs.PN.stsPN53)[XIC(S005RB01.Int.Drop1Comp) OTE(S005RB01.PNPerm.PN53Perm1.Inp_Perm00) ,XIC(S005RB01.I1.AtDrop1) OTE(S005RB01.PNPerm.PN53Perm1.Inp_Perm01) ,XIC(S005RB01.Int.Empty) OTE(S005RB01.PNPerm.PN53Perm1.Inp_Perm02) ,XIC(S010TL1.Int.Load1Comp) OTE(S005RB01.PNPerm.PN53Perm1.Inp_Perm03) ,XIC(S010TL1.SR.Int.Part) OTE(S005RB01.PNPerm.PN53Perm1.Inp_Perm04) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN53Perm1.Inp_Perm05) ,XIC(Edit.Bit) OTE(S005RB01.PNPerm.PN53Perm1.Inp_Perm06) ,P_Perm(S005RB01.PNPerm.PN53Perm1) ]COP(S005RB01.PNPerm.PN53Perm1,S005RB01.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S005RB01.Int.PNPerm2,1);
		END_ROUTINE

		ROUTINE D04_RB_MapOutpus 
				RC: "############################$N"
				    "Robot Standard Output Mapping$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Material Handler Robot$N"
				    "Output Mapping$N"
				    "############################";
				N: [XIO(S005RB01.ENet.CommOK) FLL(0,S005RB01.O1,1) ,XIC(S005RB01.ENet.CommOK) COP(S005RB01.O1,S005RB01:O1,1) ];
		END_ROUTINE

		ROUTINE Y00_Alarms_L1 
				RC: "******************************************************************$N"
				    "Robot Alarms$N"
				    "****************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Machine Faults$N"
				    "******************************************************************";
				N: NOP();
				N: EQU(FRM_P1_ESW1:I.Fault,0)EQU(FRM_P1_ESW2:I.Fault,0)XIO(S005RB01.ENet.CommOK)OTE(S1.L1[24].0);
				N: XIC(S005RB01.ENet.CommOK)XIO(S005RB01Sfty.Int.ModRunMode)OTE(S1.L1[24].1);
				N: XIC(S005RB01.Int.AutoMode)[XIC(S005RB01.Int.PartPres1) XIC(S005RB01.SR.Int.NoPart) XIC(Edit.Bit) ,XIC(S005RB01.Int.NoPartPres) XIC(S005RB01.SR.Int.Part) ]XIC(S005RB01.I1.Auto)XIO(S005RB01.Int.DryCycle)[MOV(5000,S005RB01.Int.FltDelayTmr[1].PRE) TON(S005RB01.Int.FltDelayTmr[1],?,?) ,XIC(S005RB01.Int.FltDelayTmr[1].DN) OTE(S1.L1[24].2) ];
		END_ROUTINE

		ROUTINE Y01_Alarms_L2 
				RC: "******************************************************************$N"
				    "Robot Alarms$N"
				    "****************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Manual Interventions$N"
				    "******************************************************************";
				N: NOP();
				N: XIC(S005RB01Sfty.Int.ModRunMode)XIO(S005RB01Sfty.Int.EStopIns.O1)OTE(S1.L2[24].0);
				N: XIC(S005RB01Sfty.Int.ModRunMode)XIO(S005RB01Sfty.Int.SftyIntEnbld)OTE(S1.L2[24].1);
				N: XIC(S005RB01Sfty.Int.ModRunMode)XIC(S005RB01Sfty.Int.SftyChanged)OTE(S1.L2[24].2);
				N: XIC(S005RB01.Int.AutoMode)XIC(S005RB01.I1.Auto)XIC(S005RB01.I1.AtHome)XIC(S005RB01.Int.Empty)XIO(S005RB01.Int.EOATHome)[MOV(5000,S005RB01.Int.FltDelayTmr[0].PRE) TON(S005RB01.Int.FltDelayTmr[0],?,?) ,XIC(S005RB01.Int.FltDelayTmr[0].DN) OTE(S1.L2[24].3) ];
				N: XIC(sZ005_040.PowerEnbld)XIO(S005RB01.I1.Auto)OTE(S1.L2[24].4);
				N: XIC(sZ005_040.PowerEnbld)XIC(S005RB01.I1.PendEnbld)OTE(S1.L2[24].5);
				N: XIC(S005RB01.Int.AutoMode)XIC(S005RB01.Int.ExtRunEnable)XIC(S005RB01.I1.RbtHeld)OTE(S1.L2[24].6);
				N: XIC(sZ005_040.PowerEnbld)XIC(S005RB01.Int.AbortPickSeld)OTE(S1.L2[24].7);
				N: XIC(sZ005_040.PowerEnbld)XIC(S005RB01.Int.RetFromPounceSeld)OTE(S1.L2[24].8);
		END_ROUTINE

		ROUTINE Y02_Alarms_L3 
				RC: "******************************************************************$N"
				    "Robot Alarms$N"
				    "****************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Warnings$N"
				    "******************************************************************";
				N: NOP();
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S005RB02 (Description := "Material Handler with Pedestal Sealer$NStandard Robot",
	                  Class := Standard,
	                  MAIN := "A00_Main",
	                  MODE := 0,
	                  DisableFlag := 0,
	                  UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE A00_Main 
				N: JSR(D00_RB_MapInputs,0);
				N: JSR(D01_RB_Zones,0);
				N: JSR(D02_RB,0);
				N: JSR(D02_RB_Edit,0);
				N: JSR(D03_RB_PNs,0);
				N: JSR(D04_RB_MapOutpus,0);
				N: JSR(Y00_Alarms_L1,0);
				N: JSR(Y01_Alarms_L2,0);
				N: JSR(Y02_Alarms_L3,0);
		END_ROUTINE

		ROUTINE D00_RB_MapInputs 
				RC: "############################$N"
				    "Material Handler Application$N"
				    "Input Mapping$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Material Handler Robot$N"
				    "Input Mapping$N"
				    "############################";
				N: [XIO(S005RB02.ENet.CommOK) FLL(0,S005RB02.I1,1) ,XIC(S005RB02.ENet.CommOK) COP(S005RB02:I1.Input[0],S005RB02.I1,1) ];
				N: [XIC(S005TL1.Int.AutoMode) OTE(S005RB02.Int.AutoMode) ,XIC(S005TL1.Int.ManualMode) OTE(S005RB02.Int.ManualMode) ];
				N: XIC(S005TL1.Int.DryCycle)XIO(S005RB02.I1.Seal1InCycle)OTE(S005RB02.Int.DryCycle);
				N: [XIC(S005TL1.Int.AutoModeStopReq) ,XIC(Z005_040.AutoModeStopReq) ]OTE(S005RB02.Int.AutoModeStopReq);
				N: [XIC(Edit.Bit) MOV(1500,S005RB02.Int.AirOnDelayTmr.PRE) TOF(S005RB02.Int.AirOnDelayTmr,?,?) ,XIC(S005RB02.Int.AirOnDelayTmr.DN) OTE(S005RB02.Int.AirOn) ];
				N: XIC(Edit.Bit)OTU(S005RB02.Int.DisableDrives);
				N: [XIC(S005TL1.Int.FaultResetPB) XIC(sZ005_040.AllGatesOk) ,XIC(sZ005_040.StaPowerEnblPB) ,XIC(S005RB02.Int.ExtMotorOn) ]OTE(S005RB02.Int.FltReset);
				N: XIC(S005RB02.Int.SetCycleCompPB.PB)OTE(S005RB02.Int.SetCycleComp);
		END_ROUTINE

		ROUTINE D01_RB_Zones 
				RC: "******************************************************************$N"
				    "Robot Standard$N"
				    "Zones$N"
				    "$N"
				    "Zn1 = Pick$N"
				    "Zn2 = Drop$N"
				    "Zn3 = Maintenance Position$N"
				    "$N"
				    "Zn4-10 TBD$N"
				    "******************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "RobotStdZone AOI Setup$N"
				    "$N"
				    "1. OTE Zn#Used to Enable. If Zone not used OTU$N"
				    "$N"
				    "2. Add All Adjacent Zone.outRbtZnClrMem -]/[- $N"
				    "$N"
				    "3. Add all required tool Pick/Drop Setup Conditions$N"
				    "******************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Zone 1$N"
				    "$N"
				    "S005RB02 Zone 1 with S005RB02 Zone 3$N"
				    "S005RB02 Pick$N"
				    "******************************************************************";
				N: [OTE(S005RB02.Int.Zn1Used) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn1ClrMem) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn1ToolCond) ,RobotStdZone(S005RB02.AOIs.Zone[1],S005RB02.Int.Zn1Used,S005RB02.Int.Zn1ClrMem,S005RB02.Int.Zn1ToolCond,S005RB02.I1.ClrIntfZn1,S005RB02.O1.ZnClear1) ];
				RC: "******************************************************************$N"
				    "Zone 2$N"
				    "******************************************************************";
				N: [OTE(S005RB02.Int.Zn2Used) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn2ClrMem) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn2ToolCond) ,RobotStdZone(S005RB02.AOIs.Zone[2],S005RB02.Int.Zn2Used,S005RB02.Int.Zn2ClrMem,S005RB02.Int.Zn2ToolCond,S005RB02.I1.ClrIntfZn2,S005RB02.O1.ZnClear2) ];
				RC: "******************************************************************$N"
				    "Zone 3$N"
				    "******************************************************************";
				N: [OTU(S005RB02.Int.Zn3Used) ,XIO(S005RB01.AOIs.Zone[1].outRbtZnClrMem) OTE(S005RB02.Int.Zn3ClrMem) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn3ToolCond) ,RobotStdZone(S005RB02.AOIs.Zone[3],S005RB02.Int.Zn3Used,S005RB02.Int.Zn3ClrMem,S005RB02.Int.Zn3ToolCond,S005RB02.I1.ClrIntfZn3,S005RB02.O1.ZnClear3) ];
				RC: "******************************************************************$N"
				    "Zone 4$N"
				    "******************************************************************";
				N: [OTU(S005RB02.Int.Zn4Used) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn4ClrMem) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn4ToolCond) ,RobotStdZone(S005RB02.AOIs.Zone[4],S005RB02.Int.Zn4Used,S005RB02.Int.Zn4ClrMem,S005RB02.Int.Zn4ToolCond,S005RB02.I1.ClrIntfZn4,S005RB02.O1.ZnClear4) ];
				RC: "******************************************************************$N"
				    "Zone 5$N"
				    "******************************************************************";
				N: [OTU(S005RB02.Int.Zn5Used) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn5ClrMem) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn5ToolCond) ,RobotStdZone(S005RB02.AOIs.Zone[5],S005RB02.Int.Zn5Used,S005RB02.Int.Zn5ClrMem,S005RB02.Int.Zn5ToolCond,S005RB02.I1.ClrIntfZn5,S005RB02.O1.ZnClear5) ];
				RC: "******************************************************************$N"
				    "Zone 6$N"
				    "******************************************************************";
				N: [OTU(S005RB02.Int.Zn6Used) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn6ClrMem) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn6ToolCond) ,RobotStdZone(S005RB02.AOIs.Zone[6],S005RB02.Int.Zn6Used,S005RB02.Int.Zn6ClrMem,S005RB02.Int.Zn6ToolCond,S005RB02.I1.ClrIntfZn6,S005RB02.O1.ZnClear6) ];
				RC: "******************************************************************$N"
				    "Zone 7$N"
				    "******************************************************************";
				N: [OTU(S005RB02.Int.Zn7Used) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn7ClrMem) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn7ToolCond) ,RobotStdZone(S005RB02.AOIs.Zone[7],S005RB02.Int.Zn7Used,S005RB02.Int.Zn7ClrMem,S005RB02.Int.Zn7ToolCond,S005RB02.I1.ClrIntfZn7,S005RB02.O1.ZnClear7) ];
				RC: "******************************************************************$N"
				    "Zone 8$N"
				    "******************************************************************";
				N: [OTU(S005RB02.Int.Zn8Used) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn8ClrMem) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn8ToolCond) ,RobotStdZone(S005RB02.AOIs.Zone[8],S005RB02.Int.Zn8Used,S005RB02.Int.Zn8ClrMem,S005RB02.Int.Zn8ToolCond,S005RB02.I1.ClrIntfZn8,S005RB02.O1.ZnClear8) ];
				RC: "******************************************************************$N"
				    "Zone 9$N"
				    "******************************************************************";
				N: [OTU(S005RB02.Int.Zn9Used) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn9ClrMem) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn9ToolCond) ,RobotStdZone(S005RB02.AOIs.Zone[9],S005RB02.Int.Zn9Used,S005RB02.Int.Zn9ClrMem,S005RB02.Int.Zn9ToolCond,S005RB02.I1.ClrIntfZn9,S005RB02.O1.ZnClear9) ];
				RC: "******************************************************************$N"
				    "Zone 10$N"
				    "******************************************************************";
				N: [OTU(S005RB02.Int.Zn10Used) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn10ClrMem) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn10ToolCond) ,RobotStdZone(S005RB02.AOIs.Zone[10],S005RB02.Int.Zn10Used,S005RB02.Int.Zn10ClrMem,S005RB02.Int.Zn10ToolCond,S005RB02.I1.ClrIntfZn10,S005RB02.O1.ZnClear10) ];
				RC: "******************************************************************$N"
				    "Zone 11$N"
				    "******************************************************************";
				N: [OTU(S005RB02.Int.Zn11Used) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn11ClrMem) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn11ToolCond) ,RobotStdZone(S005RB02.AOIs.Zone[11],S005RB02.Int.Zn11Used,S005RB02.Int.Zn11ClrMem,S005RB02.Int.Zn11ToolCond,S005RB02.I1.ClrIntfZn11,S005RB02.O1.ZnClear11) ];
				RC: "******************************************************************$N"
				    "Zone 12$N"
				    "******************************************************************";
				N: [OTU(S005RB02.Int.Zn12Used) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn12ClrMem) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn12ToolCond) ,RobotStdZone(S005RB02.AOIs.Zone[12],S005RB02.Int.Zn12Used,S005RB02.Int.Zn12ClrMem,S005RB02.Int.Zn12ToolCond,S005RB02.I1.ClrIntfZn12,S005RB02.O1.ZnClear12) ];
				RC: "******************************************************************$N"
				    "Zone 13$N"
				    "******************************************************************";
				N: [OTU(S005RB02.Int.Zn13Used) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn13ClrMem) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn13ToolCond) ,RobotStdZone(S005RB02.AOIs.Zone[13],S005RB02.Int.Zn13Used,S005RB02.Int.Zn13ClrMem,S005RB02.Int.Zn13ToolCond,S005RB02.I1.ClrIntfZn13,S005RB02.O1.ZnClear13) ];
				RC: "******************************************************************$N"
				    "Zone 14$N"
				    "******************************************************************";
				N: [OTU(S005RB02.Int.Zn14Used) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn14ClrMem) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn14ToolCond) ,RobotStdZone(S005RB02.AOIs.Zone[14],S005RB02.Int.Zn14Used,S005RB02.Int.Zn14ClrMem,S005RB02.Int.Zn14ToolCond,S005RB02.I1.ClrIntfZn14,S005RB02.O1.ZnClear14) ];
				RC: "******************************************************************$N"
				    "Zone 15$N"
				    "******************************************************************";
				N: [OTU(S005RB02.Int.Zn15Used) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn15ClrMem) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn15ToolCond) ,RobotStdZone(S005RB02.AOIs.Zone[15],S005RB02.Int.Zn15Used,S005RB02.Int.Zn15ClrMem,S005RB02.Int.Zn15ToolCond,S005RB02.I1.ClrIntfZn15,S005RB02.O1.ZnClear15) ];
				RC: "******************************************************************$N"
				    "Zone 16$N"
				    "******************************************************************";
				N: [OTU(S005RB02.Int.Zn16Used) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn16ClrMem) ,XIC(Edit.Bit) OTE(S005RB02.Int.Zn16ToolCond) ,RobotStdZone(S005RB02.AOIs.Zone[16],S005RB02.Int.Zn16Used,S005RB02.Int.Zn16ClrMem,S005RB02.Int.Zn16ToolCond,S005RB02.I1.ClrIntfZn16,S005RB02.O1.ZnClear16) ];
				N: [XIO(S005RB02.AOIs.Zone[1].outRbtZnClrMem) ,XIC(S005RB02.I1.AtHome) ]OTE(S005RB02.Int.ClearOfTool1);
				N: [XIC(Edit.Bit) ,XIC(S005RB02.I1.AtHome) ]OTE(S005RB02.Int.ClearOfTool2);
				N: [XIC(Edit.Bit) ,XIC(S005RB02.I1.AtHome) ]OTE(S005RB02.Int.ClearOfTool3);
				N: [XIC(Edit.Bit) ,XIC(S005RB02.I1.AtHome) ]OTE(S005RB02.Int.ClearOfTool4);
				N: [XIC(Edit.Bit) ,XIC(S005RB02.I1.AtHome) ]OTE(S005RB02.Int.ClearOfTool5);
				N: [XIC(Edit.Bit) ,XIC(S005RB02.I1.AtHome) ]OTE(S005RB02.Int.ClearOfPick1);
				N: [XIC(Edit.Bit) ,XIC(S005RB02.I1.AtHome) ]OTE(S005RB02.Int.ClearOfPick2);
				N: [XIO(S005RB02.AOIs.Zone[2].outRbtZnClrMem) ,XIC(S005RB02.I1.AtHome) ]OTE(S005RB02.Int.ClearOfDrop1);
				N: [XIC(Edit.Bit) ,XIC(S005RB02.I1.AtHome) ]OTE(S005RB02.Int.ClearOfDrop2);
		END_ROUTINE

		ROUTINE D02_RB 
				RC: "############################$N"
				    "FRM005 RB02$N"
				    "Fanuc Robot Material Handler Application$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Rung to see which PN is Active$N"
				    "############################";
				N: NEQ(S005RB02.AOIs.PN.stsPN,0)NOP();
				N: [XIO(S005RB02.I1.PendEnbld) XIC(S005RB02Sfty.Int.TeachOff) OTE(S005RB02.Int.TeachSSOff) ,XIC(S005RB02.I1.PendEnbld) XIC(S005RB02Sfty.Int.TeachSeld) OTE(S005RB02.Int.InTeach) ];
				N: XIC(sZ005_040.PowerEnbld)XIC(sZ005_040.PerimeterSafe)XIC(S005RB02Sfty.Int.EnblRbt)XIC(S005RB02Sfty.Int.TeachOff)XIC(S005RB02Sfty.Int.AdjRbtsTeachOff)XIO(S005RB02Sfty.Int.DisableDrives)XIO(S005RB02.I1.Auto)[XIC(Z005_040.GlobalAutoModePB) ,XIC(S005RB02.Int.SrvoOnDwlTmr.TT) ]XIC(Z005_040.AirOn)XIC(Z005_040.AllModCommOk)[MOV(3000,S005RB02.Int.SrvoOnDwlTmr.PRE) TON(S005RB02.Int.SrvoOnDwlTmr,?,?) ,XIC(S005RB02.Int.SrvoOnDwlTmr.EN) XIO(S005RB02.Int.SrvoOnDwlTmr.DN) OTE(S005RB02.Int.ExtMotorOn) ];
				RC: "############################$N"
				    "External Run Enable$N"
				    "############################";
				N: [XIO(S005RB02.Int.DisableDrives) [XIC(S005RB02.Int.AutoMode) XIC(S005RB02.I1.Auto) ,XIC(S005RB02.Int.ManualMode) ] ,XIC(S005RB02.Int.InTeach) ]MOV(1000,S005RB02.Int.RunEnableDelayTmr.PRE)TON(S005RB02.Int.RunEnableDelayTmr,?,?);
				N: XIC(S005RB02.Int.RunEnableDelayTmr.DN)[XIC(S005RB02.Int.AutoMode) XIC(S005RB02.I1.Auto) ,XIC(S005RB02.Int.InTeach) XIO(S005RB02.I1.Auto) ]OTE(S005RB02.Int.ExtRunEnable);
				RC: "############################$N"
				    "Robot Ready Status$N"
				    "############################";
				N: XIC(S005RB02.I1.Cmd_Enbl)XIC(S005RB02.I1.Sys_Rdy)XIO(S005RB02.I1.RbtFaulted)XIO(S005RB02.I1.PendEnbld)XIC(S005RB02.I1.Auto)OTE(S005RB02.Int.RbtRdySU);
				N: XIC(S005RB02.Int.RbtRdySU)XIC(S005RB02.I1.AtHome)XIO(S005RB02.I1.Pg_Running)XIO(S005RB02.I1.Pg_Paused)XIO(S005RB02.I1.RbtHeld)OTE(S005RB02.Int.RbtRdy);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S005RB02.Int.RetFromMaintSeld) ,XIC(S005RB02.Int.MaintPosNoToolSeld) ,XIC(S005RB02.Int.MaintPosTool2Seld) ,XIC(S005RB02.Int.MaintPosTool3Seld) ,XIC(S005RB02.Int.MaintPosTool4Seld) ]OTU(S005RB02.Int.MaintPosTool1Seld);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S005RB02.Int.RetFromMaintSeld) ,XIC(S005RB02.Int.MaintPosNoToolSeld) ,XIC(S005RB02.Int.MaintPosTool1Seld) ,XIC(S005RB02.Int.MaintPosTool3Seld) ,XIC(S005RB02.Int.MaintPosTool4Seld) ]OTU(S005RB02.Int.MaintPosTool2Seld);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S005RB02.Int.RetFromMaintSeld) ,XIC(S005RB02.Int.MaintPosNoToolSeld) ,XIC(S005RB02.Int.MaintPosTool1Seld) ,XIC(S005RB02.Int.MaintPosTool2Seld) ,XIC(S005RB02.Int.MaintPosTool4Seld) ]OTU(S005RB02.Int.MaintPosTool3Seld);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S005RB02.Int.RetFromMaintSeld) ,XIC(S005RB02.Int.MaintPosNoToolSeld) ,XIC(S005RB02.Int.MaintPosTool1Seld) ,XIC(S005RB02.Int.MaintPosTool2Seld) ,XIC(S005RB02.Int.MaintPosTool3Seld) ]OTU(S005RB02.Int.MaintPosTool4Seld);
				N: [XIC(S005RB02.Int.RetFromMaintSeld) ,XIC(S005RB02.Int.MaintPosTool1Seld) ,XIC(S005RB02.Int.MaintPosTool2Seld) ,XIC(S005RB02.Int.MaintPosTool3Seld) ,XIC(S005RB02.Int.MaintPosTool4Seld) ]OTU(S005RB02.Int.MaintPosNoToolSeld);
				N: XIC(S005RB02.Int.AutoMode)[XIC(S005RB02.Int.GoToMaintPosTool1PB.PB) OTL(S005RB02.Int.MaintPosTool1Seld) ,XIC(S005RB02.Int.GoToMaintPosTool2PB.PB) OTL(S005RB02.Int.MaintPosTool2Seld) ,XIC(S005RB02.Int.GoToMaintPosTool3PB.PB) OTL(S005RB02.Int.MaintPosTool3Seld) ,XIC(S005RB02.Int.GoToMaintPosTool4PB.PB) OTL(S005RB02.Int.MaintPosTool4Seld) ];
				N: XIC(S005RB02.Int.AutoMode)XIC(S005RB02.Int.GoToMaintPosNoToolPB.PB)OTL(S005RB02.Int.MaintPosNoToolSeld);
				N: [XIC(S005RB02.Int.MaintPosTool1Seld) ,XIC(S005RB02.Int.MaintPosTool2Seld) ,XIC(S005RB02.Int.MaintPosTool3Seld) ,XIC(S005RB02.Int.MaintPosTool4Seld) ,XIC(S005RB02.Int.MaintPosNoToolSeld) ,XIC(S005RB02.Int.AutoPurgeDisp1Strtd) ,XIC(S005RB02.Int.AutoPurgeDisp2Strtd) ,XIC(S005RB02.Int.Nozzle1NOK) ,XIC(S005RB02.Int.Nozzle2NOK) ,XIC(S005RB02.Int.Nozzle1ChkStrtd) ,XIC(S005RB02.Int.Nozzle2ChkStrtd) ,XIC(S005RB02.Int.SealInspectReq) ][XIC(S005RB02.I1.Clrtransfer) OTE(S005RB02.Int.Maintenance) ,OTE(S005RB02.Int.MaintenanceSetup) ];
				RC: "############################$N"
				    "Robot Initiate Permissives$N"
				    "$N"
				    "Do not Edit Permissives$N"
				    "BIW Lucid Motors Controls Dpt.$N"
				    "############################";
				N: [XIC(S005RB02.Int.AirOn) OTE(S005RB02.Int.InitPerm1.Inp_Perm00) ,XIO(S005RB02.Int.CycleComp) OTE(S005RB02.Int.InitPerm1.Inp_Perm01) ,XIO(S005RB02.Int.RetHome) OTE(S005RB02.Int.InitPerm1.Inp_Perm02) ,XIO(S005RB02.Int.AbortPickSeld) OTE(S005RB02.Int.InitPerm1.Inp_Perm03) ,XIO(S005RB02.Int.SealProc1Started) OTE(S005RB02.Int.InitPerm1.Inp_Perm04) ,P_Perm(S005RB02.Int.InitPerm1) ];
				N: [XIC(S005RB02.I1.Auto) OTE(S005RB02.Int.InitPerm2.Inp_Perm00) ,XIC(S005RB02.Int.TeachSSOff) OTE(S005RB02.Int.InitPerm2.Inp_Perm01) ,XIO(S005RB02.Int.CycEndSeld) OTE(S005RB02.Int.InitPerm2.Inp_Perm02) ,XIO(S005RB02.Int.RetFromPounceSeld) OTE(S005RB02.Int.InitPerm2.Inp_Perm03) ,XIO(S005RB02.Int.AutoModeStopReq) OTE(S005RB02.Int.InitPerm2.Inp_Perm04) ,[XIO(S005RB02.I1.Seal1InCycle) ,XIC(S005RB02.Int.InitRdy) ] OTE(S005RB02.Int.InitPerm2.Inp_Perm05) ,P_Perm(S005RB02.Int.InitPerm2) ];
				N: XIC(S005RB02.Int.AutoMode)[XIC(S005RB02.Int.SealSetup.Sts_PermOK) XIC(S005RB02.Int.PickUpSetup.Sts_PermOK) XIC(S005RB02.Int.InitPerm1.Sts_PermOK) ,XIC(S005RB02.Int.Maintenance) ]XIC(S005RB02.Int.InitPerm2.Sts_PermOK)OTE(S005RB02.Int.InitRdy);
				RC: "############################$N"
				    "Robot Style Selection Outputs$N"
				    "############################";
				N: XIC(S005RB02.Int.InitRdy)[XIC(S005RB02.Int.PgmReq.0) OTE(S005RB02.O1.Style1) ,XIC(S005RB02.Int.PgmReq.1) OTE(S005RB02.O1.Style2) ,XIC(S005RB02.Int.PgmReq.2) OTE(S005RB02.O1.Style3) ,XIC(S005RB02.Int.PgmReq.3) OTE(S005RB02.O1.Style4) ,XIC(S005RB02.Int.PgmReq.4) OTE(S005RB02.O1.Style5) ,XIC(S005RB02.Int.PgmReq.5) OTE(S005RB02.O1.Style6) ,XIC(S005RB02.Int.PgmReq.6) OTE(S005RB02.O1.Style7) ,XIC(S005RB02.Int.PgmReq.7) OTE(S005RB02.O1.Style8) ];
				N: [XIC(S005RB02.Int.RetFromMaintSeld) ,XIC(S005RB02.Int.MaintPosTool1Seld) ,XIC(S005RB02.Int.MaintPosTool2Seld) ,XIC(S005RB02.Int.MaintPosTool3Seld) ,XIC(S005RB02.Int.MaintPosTool4Seld) ,XIC(S005RB02.Int.MaintPosNoToolSeld) ,XIC(S005RB02.Int.AbortPickSeld) ,XIC(S005RB02.Int.SealProc1Interrupted) ,XIC(S005RB02.Int.Nozzle1NOK) ,XIC(S005RB02.Int.Nozzle2NOK) ,XIC(S005RB02.Int.AutoPurgeDisp1Strtd) ,XIC(S005RB02.Int.AutoPurgeDisp2Strtd) ]OTE(S005RB02.Int.RetHome);
				N: XIC(S005RB02.Int.AutoMode)XIC(S005RB02.Int.InitRdy)XIC(S005RB02.Int.StartCycleSU)OTE(S005RB02.Int.StartCycle);
				N: [XIC(S005RB02.Int.TaskComp) XIC(S005RB02.Int.LastDropComp) ,XIC(S005RB02.Int.SetCycleComp) [XIC(S005RB02.I1.AtHome) ,XIC(S005RB02.I1.ClrUnclamp) XIC(S005RB02.I1.Clrtransfer) ] ]XIC(S005RB02.Int.EOATHome)XIC(S005RB02.Int.NoPartPres)OTL(S005RB02.Int.CycleComp);
				N: [XIC(S005RB02.Int.RstCycleComp) ,XIC(S005RB02.Int.ManualMode) XIC(S005RB02.Int.ToolRst) ]OTU(S005RB02.Int.CycleComp);
				RC: "############################$N"
				    "Outputs$N"
				    "############################";
				N: OTE(S005RB02.O1.Stop)OTE(S005RB02.O1.SafeSpeed)OTE(S005RB02.O1.MtnEnable);
				N: XIC(S005RB02.Int.ExtRunEnable)OTE(S005RB02.O1.Hold);
				N: XIC(S005RB02.Int.FltReset)OTE(S005RB02.O1.FaultRst);
				N: XIC(S005RB02.Int.DryCycle)OTE(S005RB02.O1.DryCycle);
				N: XIC(S005RB02Sfty.Int.EnblRbt)XIC(S005RB02.Int.AutoMode)[XIC(S005RB02.Int.RbtRdySU) XIC(S005RB02.O1.PdnStart) XIC(S005RB02.I1.Auto) XIO(S005RB02.I1.Pg_Running) XIO(S005RB02.I1.Pg_Paused) XIC(S005RB02.I1.AtHome) ,XIC(S005RB02.I1.Auto) XIC(S005RB02.I1.Pg_Paused) XIO(S005RB02.I1.Pg_Running) ]XIO(S005RB02.I1.RbtHeld)OTE(S005RB02.O1.UOPStart);
				N: GRT(S005RB02.Int.PgmReq,0)XIO(S005RB02.Int.Maintenance)XIC(S005RB02.Int.InitRdy)OTE(S005RB02.O1.PdnStart);
				N: XIC(S005RB02.Int.RetHome)OTE(S005RB02.O1.RetHome);
				RC: "############################$N"
				    "Robot AOIs$N"
				    "$N"
				    "RobotStdPNSelect$N"
				    "RobotStdSpeedSelect$N"
				    "############################";
				N: RobotStdPNSelect(S005RB02.AOIs.PN,S005RB02.Int.PNPerm1,S005RB02.Int.PNPerm2,S005RB02.I1,S005RB02.O1,S005RB02.Int.DecisionPermHMI)RobotStdSpeedSelect(S005RB02.AOIs.Speed,S005RB02.I1,S005RB02.O1);
				RC: "############################$N"
				    "Robot Standard$N"
				    "Cycle Time$N"
				    "############################";
				N: NOP();
				RC: "Change Value To Design Cycle Time";
				N: MOV(360000,S005RB02.Int.CycleTime);
				N: XIC(S005RB02.Int.AutoMode)XIO(S005RB02.I1.RbtHeld)XIO(S005RB02.I1.Pg_Paused)XIO(S005RB02.I1.AtHome)XIO(S005RB02.I1.WaitingOnInput)XIO(S005RB02.Int.Maintenance)MOV(3600000,S005RB02.Int.CycleTimeTmr.PRE)RTO(S005RB02.Int.CycleTimeTmr,?,?);
				N: MOV(3600000,S005RB02.Int.TackTimeTmr.PRE)RTO(S005RB02.Int.TackTimeTmr,?,?);
				N: GRT(S005RB02.Int.CycleTimeTmr.ACC,S005RB02.Int.CycleTime)OTE(S005RB02.Int.Overtime);
				N: XIC(S005RB02.I1.AtHome)XIO(S005RB02.I1.Pg_Running)[XIO(S005RB02.Int.CycleTimeOns) [MOV(S005RB02.Int.CycleTimeTmr.ACC,S005RB02.Int.CycleTimeStore) ,RES(S005RB02.Int.CycleTimeTmr) ,MOV(S005RB02.Int.TackTimeTmr.ACC,S005RB02.Int.TackTimeStore) ,RES(S005RB02.Int.TackTimeTmr) ] ,OTL(S005RB02.Int.CycleTimeOns) ];
				N: XIC(S005RB02.Int.TaskComp)OTU(S005RB02.Int.CycleTimeOns);
		END_ROUTINE

		ROUTINE D02_RB_Edit 
				RC: "############################$N"
				    "Robot Motion and Part Present Logic$N"
				    "Editable Routine$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Robot Motion and Part Present Logic$N"
				    "############################";
				N: NOP();
				N: XIO(S005RB02.I1.MH1_PP1)XIO(S005RB02.I1.MH1_PP2)XIO(S005RB02.I1.MH1_PP3)XIO(S005RB02.I1.MH1_PP4)OTE(S005RB02.Int.NoPartPres);
				N: XIC(S005RB02.Int.NoPartPres)XIC(S005RB02.SR.Int.NoPart)OTE(S005RB02.Int.Empty);
				N: XIC(S005RB02.I1.MH1_PP1)XIC(S005RB02.I1.MH1_PP2)OTE(S005RB02.Int.PartPres1);
				N: XIC(S005RB02.I1.MH1_PP3)XIC(S005RB02.I1.MH1_PP4)OTE(S005RB02.Int.PartPres2);
				N: [XIC(S005RB02.Int.PartPres1) XIC(S005RB02.SR.Int.Model1) ,XIC(S005RB02.Int.PartPres2) XIC(S005RB02.SR.Int.Model2) ]OTE(S005RB02.Int.AllPPAndSR);
				RC: "############################$N"
				    "All Tasks Complete$N"
				    "############################";
				N: XIC(S005RB02.Int.SealProc1Comp)XIC(S005RB02.Int.SealProc2Comp)XIC(S005RB02.Int.SealProc3Comp)XIO(S005RB02.Int.SealProc1Interrupted)OTE(S005RB02.Int.TaskComp);
				RC: "############################$N"
				    "Reset Cycle Complete$N"
				    "############################";
				N: [XIC(S005RB02.I1.AtHome) XIC(S005RB02.Int.CycleComp) XIC(S005RB02.Int.Empty) XIC(S005RB02.Int.ClearOfAllPicks) XIC(S005RB02.Int.ClearOfAllDrops) XIC(S005RB02.Int.EOATHome) ,XIC(S005RB02.Int.RstCycleCompPB.PB) ]OTE(S005RB02.Int.RstCycleComp);
				RC: "############################$N"
				    "Robot Style Selection$N"
				    "$N"
				    "31 - Air GT Glass Roof$N"
				    "41 - Air Pure Metal Roof$N"
				    "############################";
				N: MOV(0,S005RB02.Int.PgmReq);
				N: XIO(S005RB02.Int.Maintenance)XIC(S005TL1.SR.Int.Part)[XIC(S005RB02.Int.EOATHome) ,XIC(S005RB02.Int.NoTool) ]XIO(S005RB02.SR.Int.NoPart)[XIC(Edit.Bit) XIC(S005TL1.SR.Int.Model1) XIC(S005TL1.SR.Data.Options.CarModel.0) XIC(S005TL1.SR.Data.Options.CanRoofPack.0) MOV(31,S005RB02.Int.PgmReq) ,XIC(Edit.Bit) XIC(S005TL1.SR.Int.Model2) XIC(S005TL1.SR.Data.Options.CarModel.0) XIC(S005TL1.SR.Data.Options.CanRoofPack.1) MOV(41,S005RB02.Int.PgmReq) ];
				RC: "############################$N"
				    "Robot Maintenance Style$N"
				    "$N"
				    "6 - Maintenance$N"
				    "############################";
				N: XIC(S005RB02.Int.Maintenance)MOV(6,S005RB02.Int.PgmReq);
				RC: "############################$N"
				    "Robot Style Selection$N"
				    "Dispense Maintenance Programs$N"
				    "$N"
				    "8 - Auto Purge Dispense System 1$N"
				    "9 - Auto Purge Dispense System 2$N"
				    "10 - Nozzle 1 Check$N"
				    "11 - Nozzle 2 Check$N"
				    "############################";
				N: XIO(S005RB02.Int.DryCycle)[XIC(S005RB02.Int.AutoPurgeDisp1Strtd) MOV(8,S005RB02.Int.PgmReq) ,XIC(S005RB02.Int.AutoPurgeDisp2Strtd) MOV(9,S005RB02.Int.PgmReq) ];
				N: XIC(S005RB02.Int.Maintenance)[XIC(S005RB02.Int.Nozzle1ChkStrtd) MOV(10,S005RB02.Int.PgmReq) ,XIC(S005RB02.Int.Nozzle1ChkStrtd) MOV(11,S005RB02.Int.PgmReq) ];
				RC: "############################$N"
				    "Material Handler Pick Process Setup$N"
				    "$N"
				    "Editable Setup$N"
				    "############################";
				N: XIC(Edit.Bit)[XIC(S005RB02.Int.Empty) OTE(S005RB02.Int.PickUpSetup.Inp_Perm00) ,[XIC(S005RB02.Int.Pick1Setup) ,XIC(S005RB02.Int.Pick2Setup) ,XIC(S005RB02.Int.Pick3Setup) ,XIC(S005RB02.Int.Pick4Setup) ] OTE(S005RB02.Int.PickUpSetup.Inp_Perm01) ,[XIC(S005RB02.Int.EOATHome) ,XIC(S005RB02.Int.NoTool) ] OTE(S005RB02.Int.PickUpSetup.Inp_Perm02) ,P_Perm(S005RB02.Int.PickUpSetup) ];
				RC: "############################$N"
				    "Sealer Robot Ready Permissive$N"
				    "$N"
				    "Editable Setup$N"
				    "############################";
				N: XIC(Edit.Bit)[[XIC(S005RB02.I1.Seal1Ready) ,XIC(S005RB02.Int.DryCycle) ,XIC(S005RB02.Int.InitRdy) ] OTE(S005RB02.Int.SealSetup.Inp_Perm00) ,[XIO(S005RB02.I1.Seal1NoMjrFlt) ,XIC(S005RB02.Int.DryCycle) ,XIC(S005RB02.Int.InitRdy) ] OTE(S005RB02.Int.SealSetup.Inp_Perm01) ,[XIO(S005RB02.I1.Seal1NoMnrFlt) ,XIC(S005RB02.Int.DryCycle) ,XIC(S005RB02.Int.InitRdy) ] OTE(S005RB02.Int.SealSetup.Inp_Perm02) ,XIC(Edit.Bit) OTE(S005RB02.Int.SealSetup.Inp_Perm03) ,P_Perm(S005RB02.Int.SealSetup) ];
				RC: "############################$N"
				    "Pick Process Setup$N"
				    "$N"
				    "Add Required Conditions to Enable Robot Pick$N"
				    "############################";
				N: NOP();
				N: XIC(S005RB02.Int.AutoMode)XIC(S005RB02.Int.Empty)XIC(S005RB02.Int.EOATHome)XIO(S005RB02.Int.AbortPickSeld)XIC(Edit.Bit)OTE(S005RB02.Int.Pick1Setup);
				N: XIC(S005RB02.Int.AutoMode)XIC(Edit.Bit)XIO(S005RB02.Int.AbortPickSeld)OTE(S005RB02.Int.Pick2Setup);
				N: XIC(S005RB02.Int.AutoMode)XIC(Edit.Bit)XIO(S005RB02.Int.AbortPickSeld)OTE(S005RB02.Int.Pick3Setup);
				RC: "############################$N"
				    "Drop Process Setup$N"
				    "$N"
				    "Add Required Conditions to Enable Robot Drop$N"
				    "############################";
				N: NOP();
				N: XIC(S005TL1.Int.LoadPos1)XIC(S005TL1.Int.ClrToUnld)XIC(Edit.Bit)OTE(S005RB02.Int.Drop1Setup);
				N: XIC(S010TL1.Int.LoadPos1)XIC(S010TL1.Int.ClrToLoad)XIC(Edit.Bit)OTE(S005RB02.Int.Drop2Setup);
				N: XIC(S010TL1.Int.LoadPos2)XIC(S010TL1.Int.ClrToLoad)XIC(Edit.Bit)OTE(S005RB02.Int.Drop3Setup);
				RC: "############################$N"
				    "Robot Functions Control Mapping$N"
				    "############################";
				N: XIC(S005RB02.Int.AutoMode)XIC(S005RB02.Int.RetFromPouncePB.PB)OTL(S005RB02.Int.RetFromPounceSeld);
				N: XIC(S005RB02.Int.RetFromPounceCancelPB.PB)OTU(S005RB02.Int.RetFromPounceSeld);
				N: [XIC(S005RB02.Int.RetFromMaintPosPB.PB) ,XIC(S005RB02.Int.MaintCompPB.PB) ]OTE(S005RB02.Int.RetFromMaintSeld);
				N: XIC(S005RB02.Int.AutoMode)XIO(S005RB02.Int.DryCycle)XIO(S005RB02.Int.Pick1Comp)XIO(S005RB02.Int.Pick2Comp)XIO(S005RB02.Int.Pick3Comp)XIO(S005RB02.Int.Pick4Comp)XIO(S005RB02.Int.Pick5Comp)XIC(S005RB02.Int.AbortPickPB.PB)OTL(S005RB02.Int.AbortPickSeld);
				N: [XIC(S005RB02.Int.AutoMode) ,XIC(S005RB02.Int.ManualMode) ]XIC(S005RB02.I1.AtHome)XIC(S005RB02.Int.AbortPickCancelPB.PB)OTU(S005RB02.Int.AbortPickSeld);
				RC: "############################$N"
				    "Pick Up Process Completes Logic$N"
				    "$N"
				    "Add the required Part Present, EOAT Work Position, Tool Zone, and PN$N"
				    "############################";
				N: NOP();
				N: [XIC(S005RB02.I1.Auto) ,XIC(S005RB02.Int.InTeach) ,XIC(S005RB02.Int.ManualMode) XIC(S005RB02.Int.SetPick1CompPB.PB) ][XIC(S005RB02.Int.PartPres1) ,XIC(S005RB02.Int.DryCycle) ]XIC(S005RB02.Int.EOATWorkPos1)XIO(S005RB02.Int.ClearOfTool1)XIC(S005RB02.Int.ClearOfAllDrops)XIO(S005RB02.Int.AbortPickSeld)[XIC(S005RB02.AOIs.PN.stsPN51) ,XIC(Edit.Debug) ]XIC(Edit.Bit)OTL(S005RB02.Int.Pick1Comp);
				N: [XIC(S005RB02.Int.CycleComp) XIC(S005RB02.Int.ClearOfTool1) ,XIC(S005RB02.Int.InTeach) XIO(S005RB02.Int.AnyPartPres1) XIC(S005RB02.Int.EOATHome) XIC(Edit.Bit) ,XIC(S005RB02.Int.ManualMode) XIC(S005RB02.Int.RstPick1CompPB.PB) ]OTU(S005RB02.Int.Pick1Comp);
				N: [XIC(S005RB02.I1.Auto) ,XIC(S005RB02.Int.InTeach) ,XIC(S005RB02.Int.ManualMode) XIC(S005RB02.Int.SetPick2CompPB.PB) ][XIC(S005RB02.Int.PartPres2) ,XIC(S005RB02.Int.DryCycle) ]XIC(S005RB02.Int.EOATWorkPos2)XIO(S005RB02.Int.ClearOfTool2)XIC(S005RB02.Int.ClearOfAllDrops)XIO(S005RB02.Int.AbortPickSeld)[XIC(S005RB02.AOIs.PN.stsPN52) ,XIC(Edit.Debug) ]XIC(Edit.Bit)OTL(S005RB02.Int.Pick2Comp);
				N: [XIC(S005RB02.Int.CycleComp) XIC(S005RB02.Int.ClearOfTool2) ,XIC(S005RB02.Int.InTeach) XIO(S005RB02.Int.AnyPartPres2) XIC(S005RB02.Int.EOATHome) XIC(Edit.Bit) ,XIC(S005RB02.Int.ManualMode) XIC(S005RB02.Int.RstPick2CompPB.PB) ]OTU(S005RB02.Int.Pick2Comp);
				N: [XIC(S005RB02.I1.Auto) ,XIC(S005RB02.Int.InTeach) ,XIC(S005RB02.Int.ManualMode) XIC(S005RB02.Int.SetPick3CompPB.PB) ][XIC(S005RB02.Int.PartPres3) ,XIC(S005RB02.Int.DryCycle) ]XIC(S005RB02.Int.EOATWorkPos3)XIO(S005RB02.Int.ClearOfTool3)XIC(S005RB02.Int.ClearOfAllDrops)XIO(S005RB02.Int.AbortPickSeld)[XIC(S005RB02.AOIs.PN.stsPN53) ,XIC(Edit.Debug) ]XIC(Edit.Bit)OTL(S005RB02.Int.Pick3Comp);
				N: [XIC(S005RB02.Int.CycleComp) XIC(S005RB02.Int.ClearOfTool3) ,XIC(S005RB02.Int.InTeach) XIO(S005RB02.Int.AnyPartPres3) XIC(S005RB02.Int.EOATHome) XIC(Edit.Bit) ,XIC(S005RB02.Int.ManualMode) XIC(S005RB02.Int.RstPick3CompPB.PB) ]OTU(S005RB02.Int.Pick3Comp);
				RC: "############################$N"
				    "Drop Off Process Completes Logic$N"
				    "$N"
				    "Add the required Part Present, EOAT Work Position, Tool Zone, and PN$N"
				    "############################";
				N: NOP();
				N: XIC(S005RB02.I1.AtDrop1)[XIC(S005TL1.Int.AllPartsPres1) ,XIC(S005RB02.Int.ManualMode) XIC(S005RB02.Int.SetDrop1CompPB.PB) ]XIC(S005RB02.Int.EOATHome)XIO(S005RB02.Int.ClearOfDrop1)XIC(Edit.Bit)OTL(S005RB02.Int.Drop1Comp);
				N: XIC(S005RB02.I1.AtDrop2)[XIC(S010TL1.Int.AllPartsPres1) ,XIC(S005RB02.Int.ManualMode) XIC(S005RB02.Int.SetDrop2CompPB.PB) ]XIC(S005RB02.Int.EOATHome)XIO(S005RB02.Int.ClearOfDrop2)XIC(Edit.Bit)OTL(S005RB02.Int.Drop2Comp);
				N: XIC(S005RB02.I1.AtDrop3)[XIC(S010TL1.Int.AllPartsPres2) ,XIC(S005RB02.Int.ManualMode) XIC(S005RB02.Int.SetDrop3CompPB.PB) ]XIC(S005RB02.Int.EOATHome)XIO(S005RB02.Int.ClearOfDrop3)XIC(Edit.Bit)OTL(S005RB02.Int.Drop3Comp);
				N: XIC(S005RB02.Int.Drop1Comp)XIC(S005RB02.Int.Drop2Comp)XIC(S005RB02.Int.Drop3Comp)OTE(S005RB02.Int.LastDropComp);
				N: [XIC(S005RB02.Int.CycleComp) XIC(S005RB02.Int.ClearOfAllDrops) ,XIC(S005RB02.Int.RstCycleComp) ,XIC(S005RB02.Int.ManualMode) XIC(S005RB02.Int.RstDrop1CompPB.PB) ][OTU(S005RB02.Int.Drop1Comp) ,OTU(S005RB02.Int.Drop2Comp) ,OTU(S005RB02.Int.Drop3Comp) ,OTU(S005RB02.Int.Drop4Comp) ,OTU(S005RB02.Int.Drop5Comp) ];
				RC: "############################$N"
				    "Dispense Sealer$N"
				    "Process Logic$N"
				    "############################";
				N: NOP();
				N: [XIC(S005RB02.Int.AutoMode) [XIC(S005RB02.I1.Seal1InCycle) XIC(S005RB02.I1.Seal1Ready) XIO(S005RB02.I1.Seal1VolumeOK) ,XIC(S005RB02.Int.DryCycle) ] XIO(S005RB02.Int.ClearOfPed1) ,XIC(S005RB02.Int.SealProc1Started) ]XIO(S005RB02.Int.InTeach)XIO(S005RB02.Int.SealProc1Comp)XIO(S005RB02.Int.CycleComp)XIC(S005RB02.Int.ToolInSealPos)OTE(S005RB02.Int.SealProc1Started);
				N: XIC(S005RB02.Int.SealProc1Started)[XIC(S005RB02.Int.Seal1VolumeFlt) ,XIO(S005RB02.Int.ExtRunEnable) ]XIO(S005RB02.Int.SealProc1Comp)OTL(S005RB02.Int.SealProc1Interrupted);
				N: XIC(S005RB02.Int.ContinueSeal1Proc)OTU(S005RB02.Int.SealProc1Interrupted);
				N: [XIC(S005RB02.Int.SealProc1Started) [XIC(S005RB02.Int.ClearOfPed1) XIC(S005RB02.I1.Seal1VolumeOK) XIO(S005RB02.Int.Seal1VolumeFlt) ,XIC(S005RB02.Int.DryCycle) XIO(S005RB02.Int.ClearOfPed1) ] ,XIC(S005RB02.Int.ManualMode) [XIC(S005RB02.Int.SetSealProc1CompPB.PB) ,XIC(Edit.Bit) XIC(S005TL1.Seq.WorkPB) EQU(S005TL1.Seq.Scrl.ListPos,4) ] ]OTL(S005RB02.Int.SealProc1Comp);
				N: [[XIC(S005RB02.Int.CycleComp) ,XIC(S005RB02.Int.InTeach) XIC(S005RB02.Int.EOATHome) ] XIC(S005RB02.Int.NoPartPres) ,XIC(S005RB02.Int.RstCycleComp) ,XIC(S005RB02.Int.ManualMode) XIC(S005RB02.Int.RstSealProc1CompPB.PB) ,XIC(Edit.Bit) XIC(S005TL1.Seq.HomePB) EQU(S005TL1.Seq.Scrl.ListPos,4) ]OTU(S005RB02.Int.SealProc1Comp);
				N: XIC(S005RB02.Int.AutoMode)XIO(S005RB02.Int.DryCycle)XIC(S005RB02.Int.SealProc1Started)XIC(S005RB02.Int.ClearOfPed1)XIO(S005RB02.I1.Seal1VolumeOK)XIO(S005RB02.Int.SealProc1Comp)[MOV(5000,S005RB02.Int.Seal1VolumeFltDly.PRE) TON(S005RB02.Int.Seal1VolumeFltDly,?,?) ,XIC(S005RB02.Int.Seal1VolumeFltDly.DN) XIO(S005RB02.Int.Seal1VolumeFltOns) [OTL(S005RB02.Int.Seal1VolumeFlt) ,OTL(S005RB02.Int.Seal1VolumeFltOns) ] ];
				N: [XIC(S005RB02.Int.AutoMode) [XIC(S005RB02.Int.CycleComp) ,XIC(S005RB02.Int.ContinueSeal1Proc) ] ,XIC(S005RB02.I1.AtHome) XIC(S005RB02.Int.Empty) XIC(S005RB02.Int.EOATHome) ,XIC(Edit.Bit) ][OTU(S005RB02.Int.Seal1VolumeFlt) ,OTU(S005RB02.Int.Seal1VolumeFltOns) ];
				RC: "############################$N"
				    "$N"
				    "ROBOT FUNCTIONS PB Visibility$N"
				    "$N"
				    "############################$N"
				    "$N"
				    "Change OTU to OTE for every required Robot Function PB.Vis";
				N: NOP();
				RC: "############################$N"
				    "Robot Cycle Complete$N"
				    "############################";
				N: OTU(S005RB02.Int.SetCycleCompPB.Vis)OTU(S005RB02.Int.RstCycleCompPB.Vis);
				RC: "############################$N"
				    "Maintenance Functions$N"
				    "############################";
				N: OTU(S005RB02.Int.GlobalMaintPosPB.Vis)OTU(S005RB02.Int.GoToMaintPosTool1PB.Vis)OTU(S005RB02.Int.GoToMaintPosTool2PB.Vis)OTU(S005RB02.Int.GoToMaintPosTool3PB.Vis)OTU(S005RB02.Int.GoToMaintPosTool4PB.Vis)OTU(S005RB02.Int.GoToMaintPosNoToolPB.Vis)OTU(S005RB02.Int.RetFromMaintPosPB.Vis)OTU(S005RB02.Int.MaintCompPB.Vis);
				RC: "############################$N"
				    "Material Handling Functions$N"
				    "############################";
				N: [OTU(S005RB02.Int.RetFromPouncePB.Vis) ,OTU(S005RB02.Int.RetFromPounceCancelPB.Vis) ][OTU(S005RB02.Int.AbortPickPB.Vis) ,OTU(S005RB02.Int.AbortPickCancelPB.Vis) ][OTU(S005RB02.Int.SetPick1CompPB.Vis) OTU(S005RB02.Int.SetPick2CompPB.Vis) OTU(S005RB02.Int.SetPick3CompPB.Vis) OTU(S005RB02.Int.SetPick4CompPB.Vis) OTU(S005RB02.Int.SetPick5CompPB.Vis) ,OTU(S005RB02.Int.RstPick1CompPB.Vis) OTU(S005RB02.Int.RstPick2CompPB.Vis) OTU(S005RB02.Int.RstPick3CompPB.Vis) OTU(S005RB02.Int.RstPick4CompPB.Vis) OTU(S005RB02.Int.RstPick5CompPB.Vis) ][OTU(S005RB02.Int.SetDrop1CompPB.Vis) OTU(S005RB02.Int.SetDrop2CompPB.Vis) OTU(S005RB02.Int.SetDrop3CompPB.Vis) OTU(S005RB02.Int.SetDrop4CompPB.Vis) OTU(S005RB02.Int.SetDrop5CompPB.Vis) ,OTU(S005RB02.Int.RstDrop1CompPB.Vis) OTU(S005RB02.Int.RstDrop2CompPB.Vis) OTU(S005RB02.Int.RstDrop3CompPB.Vis) OTU(S005RB02.Int.RstDrop4CompPB.Vis) OTU(S005RB02.Int.RstDrop5CompPB.Vis) ];
				RC: "############################$N"
				    "Dispense Functions$N"
				    "############################";
				N: [OTU(S005RB02.Int.SetSealProc1CompPB.Vis) ,OTU(S005RB02.Int.RstSealProc1CompPB.Vis) ][OTU(S005RB02.Int.SetSealProc2CompPB.Vis) ,OTU(S005RB02.Int.RstSealProc2CompPB.Vis) ][OTU(S005RB02.Int.SetSealProc3CompPB.Vis) ,OTU(S005RB02.Int.RstSealProc3CompPB.Vis) ]OTU(S005RB02.Int.AutoPurgeDisp1PB.Vis)OTU(S005RB02.Int.AutoPurgeDisp2PB.Vis)OTU(S005RB02.Int.Nozzle1ChkPB.Vis)OTU(S005RB02.Int.Nozzle2ChkPB.Vis);
		END_ROUTINE

		ROUTINE D03_RB_PNs 
				N: NOP();
				RC: "############################$N"
				    "Process Numbers Logic$N"
				    "$N"
				    "PN Control$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Maintenance Position$N"
				    "############################";
				N: XIC(S005RB02.AOIs.PN.stsPN3)OTE(S005RB02.Int.AtMaint);
				RC: "############################$N"
				    "Pounce Position$N"
				    "$N"
				    "Waiting For Start Cycle Command To Continue$N"
				    "############################";
				N: XIC(S005RB02.AOIs.PN.stsPN9)[XIC(S005RB02.Int.StartCycle) OTE(S005RB02.PNPerm.PN9Perm1.Inp_Perm00) ,XIC(Edit.Bit) OTE(S005RB02.PNPerm.PN9Perm1.Inp_Perm01) ,XIC(Edit.Bit) OTE(S005RB02.PNPerm.PN9Perm1.Inp_Perm02) ,XIC(Edit.Bit) OTE(S005RB02.PNPerm.PN9Perm1.Inp_Perm03) ,XIC(Edit.Bit) OTE(S005RB02.PNPerm.PN9Perm1.Inp_Perm04) ,XIC(Edit.Bit) OTE(S005RB02.PNPerm.PN9Perm1.Inp_Perm05) ,P_Perm(S005RB02.PNPerm.PN9Perm1) ]COP(S005RB02.PNPerm.PN9Perm1,S005RB02.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S005RB02.Int.PNPerm2,1);
				RC: "############################$N"
				    "Maintenance Position Clear$N"
				    "############################";
				N: XIC(S005RB02.AOIs.PN.stsPN3)[XIC(S005RB02.Int.AutoMode) OTE(S005RB02.PNPerm.PN3Perm1.Inp_Perm00) ,XIO(S005RB02.Int.MaintPosTool1Seld) XIO(S005RB02.Int.MaintPosTool2Seld) XIO(S005RB02.Int.MaintPosTool3Seld) XIO(S005RB02.Int.MaintPosTool4Seld) XIO(S005RB02.Int.MaintPosNoToolSeld) OTE(S005RB02.PNPerm.PN3Perm1.Inp_Perm01) ,XIC(S005RB02.Int.RetFromMaintSeld) OTE(S005RB02.PNPerm.PN3Perm1.Inp_Perm02) ,XIC(S005RB02.I1.AtMaintPos) OTE(S005RB02.PNPerm.PN3Perm1.Inp_Perm03) ,P_Perm(S005RB02.PNPerm.PN3Perm1) ]COP(S005RB02.PNPerm.PN3Perm1,S005RB02.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S005RB02.Int.PNPerm2,1);
		END_ROUTINE

		ROUTINE D04_RB_MapOutpus 
				RC: "############################$N"
				    "Robot Standard Output Mapping$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Material Handler Robot$N"
				    "Output Mapping$N"
				    "############################";
				N: [XIO(S005RB02.ENet.CommOK) FLL(0,S005RB02.O1,1) ,XIC(S005RB02.ENet.CommOK) COP(S005RB02.O1,S005RB02:O1,1) ];
		END_ROUTINE

		ROUTINE Y00_Alarms_L1 
				RC: "******************************************************************$N"
				    "Robot Alarms$N"
				    "****************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Machine Faults$N"
				    "******************************************************************";
				N: NOP();
				N: EQU(FRM_P1_ESW1:I.Fault,0)EQU(FRM_P1_ESW2:I.Fault,0)XIO(S005RB02.ENet.CommOK)OTE(S1.L1[26].0);
				N: XIC(S005RB02.ENet.CommOK)XIO(S005RB02Sfty.Int.ModRunMode)OTE(S1.L1[26].1);
				N: XIC(S005RB02.Int.AutoMode)[XIC(S005RB02.Int.PartPres1) XIC(S005RB02.SR.Int.NoPart) XIC(Edit.Bit) ,XIC(S005RB02.Int.NoPartPres) XIC(S005RB02.SR.Int.Part) ]XIC(S005RB02.I1.Auto)XIO(S005RB02.Int.DryCycle)[MOV(5000,S005RB02.Int.FltDelayTmr[1].PRE) TON(S005RB02.Int.FltDelayTmr[1],?,?) ,XIC(S005RB02.Int.FltDelayTmr[1].DN) OTE(S1.L1[26].2) ];
		END_ROUTINE

		ROUTINE Y01_Alarms_L2 
				RC: "******************************************************************$N"
				    "Robot Alarms$N"
				    "****************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Manual Interventions$N"
				    "******************************************************************";
				N: NOP();
				N: XIC(S005RB02Sfty.Int.ModRunMode)XIO(S005RB02Sfty.Int.EStopIns.O1)OTE(S1.L2[26].0);
				N: XIC(S005RB02Sfty.Int.ModRunMode)XIO(S005RB02Sfty.Int.SftyIntEnbld)OTE(S1.L2[26].1);
				N: XIC(S005RB02Sfty.Int.ModRunMode)XIC(S005RB02Sfty.Int.SftyChanged)OTE(S1.L2[26].2);
				N: XIC(S005RB02.Int.AutoMode)XIC(S005RB02.I1.Auto)XIC(S005RB02.I1.AtHome)XIC(S005RB02.Int.Empty)XIO(S005RB02.Int.EOATHome)[MOV(5000,S005RB02.Int.FltDelayTmr[0].PRE) TON(S005RB02.Int.FltDelayTmr[0],?,?) ,XIC(S005RB02.Int.FltDelayTmr[0].DN) OTE(S1.L2[26].3) ];
				N: XIC(sZ005_040.PowerEnbld)XIO(S005RB02.I1.Auto)OTE(S1.L2[26].4);
				N: XIC(sZ005_040.PowerEnbld)XIC(S005RB02.I1.PendEnbld)OTE(S1.L2[26].5);
				N: XIC(S005RB02.Int.AutoMode)XIC(S005RB02.Int.ExtRunEnable)XIC(S005RB02.I1.RbtHeld)OTE(S1.L2[26].6);
				N: XIC(sZ005_040.PowerEnbld)XIC(S005RB02.Int.AbortPickSeld)OTE(S1.L2[26].7);
				N: XIC(sZ005_040.PowerEnbld)XIC(S005RB02.Int.RetFromPounceSeld)OTE(S1.L2[26].8);
		END_ROUTINE

		ROUTINE Y02_Alarms_L3 
				RC: "******************************************************************$N"
				    "Robot Alarms$N"
				    "****************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Warnings$N"
				    "******************************************************************";
				N: NOP();
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S005TL1 (Description := "Operator Load Weld Fixture",
	                 Class := Standard,
	                 MAIN := "A00_Main",
	                 MODE := 0,
	                 DisableFlag := 0,
	                 UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE A00_Main 
				N: JSR(B01_MapInputs,0);
				N: JSR(B00_NetworkDiag,0);
				N: JSR(C00_Operator,0);
				N: JSR(D00_Act1_Clamp1,0);
				N: JSR(D00_Act2_Clamp2,0);
				N: JSR(D00_Act3_Pin1,0);
				N: JSR(D00_Act4_Pin2,0);
				N: JSR(D01_MotionSeq,0);
				N: JSR(D02_PartPresent,0);
				N: JSR(L00_Lights,0);
				N: JSR(P00_Station,0);
				N: JSR(P01_StationToSfty,0);
				N: JSR(S00_HMISequence,0);
				N: JSR(S01_HMIProcComp,0);
				N: JSR(Y00_Alarms_L1,0);
				N: JSR(Y01_Alarms_L2,0);
				N: JSR(Y02_Alarms_L3,0);
				N: JSR(Z00_MapOutputs,0);
		END_ROUTINE

		ROUTINE B00_NetworkDiag 
				RC: "************************************************************$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "S005TL1 Ethernet Devices Diagnostic$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Robot$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: GSV(Module,S005RB01,EntryStatus,S005RB01.ENet.ObjectStatus)[MEQ(S005RB01.ENet.ObjectStatus,61440,24576) OTE(S005RB01.ENet.Inhibited) ,MEQ(S005RB01.ENet.ObjectStatus,61440,16384) OTE(S005RB01.ENet.CommOK) ];
				RC: "************************************************************$N"
				    "Robot$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: GSV(Module,S005RB02,EntryStatus,S005RB02.ENet.ObjectStatus)[MEQ(S005RB02.ENet.ObjectStatus,61440,24576) OTE(S005RB02.ENet.Inhibited) ,MEQ(S005RB02.ENet.ObjectStatus,61440,16384) OTE(S005RB02.ENet.CommOK) ];
				N: GSV(Module,S005TL1VM1,EntryStatus,S005TL1VM1.ENet.ObjectStatus)[MEQ(S005TL1VM1.ENet.ObjectStatus,61440,24576) OTE(S005TL1VM1.ENet.Inhibited) ,MEQ(S005TL1VM1.ENet.ObjectStatus,61440,16384) OTE(S005TL1VM1.ENet.CommOK) ];
				N: GSV(Module,S005TL1MIO1,EntryStatus,S005TL1MIO1.ENet.ObjectStatus)[MEQ(S005TL1MIO1.ENet.ObjectStatus,61440,24576) OTE(S005TL1MIO1.ENet.Inhibited) ,MEQ(S005TL1MIO1.ENet.ObjectStatus,61440,16384) OTE(S005TL1MIO1.ENet.CommOK) ];
				N: GSV(Module,S005TL1SIO1,EntryStatus,S005TL1SIO1.ENet.ObjectStatus)[MEQ(S005TL1SIO1.ENet.ObjectStatus,61440,24576) OTE(S005TL1SIO1.ENet.Inhibited) ,MEQ(S005TL1SIO1.ENet.ObjectStatus,61440,16384) OTE(S005TL1SIO1.ENet.CommOK) ];
				N: GSV(Module,S005TL1SIO2,EntryStatus,S005TL1SIO2.ENet.ObjectStatus)[MEQ(S005TL1SIO2.ENet.ObjectStatus,61440,24576) OTE(S005TL1SIO2.ENet.Inhibited) ,MEQ(S005TL1SIO2.ENet.ObjectStatus,61440,16384) OTE(S005TL1SIO2.ENet.CommOK) ];
				RC: "************************************************************$N"
				    "Balluff IOL$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: GSV(Module,S005TL1IOL1,EntryStatus,S005TL1IOL1.ENet.ObjectStatus)[MEQ(S005TL1IOL1.ENet.ObjectStatus,61440,24576) OTE(S005TL1IOL1.ENet.Inhibited) ,MEQ(S005TL1IOL1.ENet.ObjectStatus,61440,16384) OTE(S005TL1IOL1.ENet.CommOK) ];
				N: XIC(S005RB01.ENet.CommOK)XIC(S005RB02.ENet.CommOK)XIC(S005TL1VM1.ENet.CommOK)XIC(S005TL1MIO1.ENet.CommOK)XIC(S005TL1SIO1.ENet.CommOK)XIC(S005TL1SIO2.ENet.CommOK)XIC(S005TL1IOL1.ENet.CommOK)OTE(S005TL1.Int.AllModCommOk);
		END_ROUTINE

		ROUTINE B01_MapInputs 
				RC: "************************************************************$N"
				    "Map Devices Inputs$N"
				    "************************************************************";
				N: NOP();
				N: [XIO(S005TL1VM1.ENet.CommOK) FLL(0,S005TL1VM1.I1,4) ,XIC(S005TL1VM1.ENet.CommOK) COP(S005TL1VM1:I.Data[0],S005TL1VM1.I1,1) ];
				RC: "************************************************************$N"
				    "Configuration Bits: 1=Active, 0=NotActive $N"
				    "Data[16].0-7 - Channels 00-07$N"
				    "Data[17].0-7 - Channels 08-15$N"
				    "************************************************************$N"
				    "Required for Turck MIO - TBEN-L4-16DXP$N"
				    "";
				N: [XIO(S005TL1MIO1.ENet.CommOK) FLL(0,S005TL1MIO1.I,1) ,XIC(S005TL1MIO1.ENet.CommOK) [COP(S005TL1MIO1:I.Data[1],S005TL1MIO1.I,1) ,MOV(2#00000000,S005TL1MIO1:C.Data[16]) MOV(2#00000000,S005TL1MIO1:C.Data[17]) ] ];
				RC: "************************************************************$N"
				    "Station Robots in Auto$N"
				    "$N"
				    "Add SxxRBxx.I1.AUTO for every Robot$N"
				    "************************************************************$N"
				    "";
				N: XIC(S005RB01.I1.Auto)XIC(S005RB02.I1.Auto)OTE(S005TL1.Int.RbtsInAuto);
				RC: "************************************************************$N"
				    "Station Robots Teach off$N"
				    "$N"
				    "Add SxxRBxxSfty.Int.TeachOff for every Robot$N"
				    "************************************************************$N"
				    "";
				N: XIC(S005RB01.Int.TeachSSOff)XIC(S005RB02.Int.TeachSSOff)OTE(S005TL1.Int.RbtsTeachOff);
				RC: "************************************************************$N"
				    "Station Air On$N"
				    "$N"
				    "Replace Edit.Bit with air flow switch input$N"
				    "************************************************************$N"
				    "";
				N: [XIC(Edit.Bit) MOV(1500,S005TL1.Int.AirOnTmr.PRE) TOF(S005TL1.Int.AirOnTmr,?,?) ,XIC(S005TL1.Int.AirOnTmr.DN) OTE(S005TL1.Int.AirOnOk) ];
				N: XIC(Edit.Bit)OTE(S005TL1.Int.FaultResetPB);
				RC: "************************************************************$N"
				    "Known Position$N"
				    "************************************************************";
				N: XIO(S005TL1.Int.AtHomePos)XIO(S005TL1.Int.AtWorkPos1)XIO(S005TL1.Int.AtWorkPos2)XIO(S005TL1.Int.AtWorkPos3)XIC(Edit.Bit)MOV(5000,S005TL1.Int.UnknownPosTmr.PRE)TON(S005TL1.Int.UnknownPosTmr,?,?);
				N: XIO(S005TL1.Int.UnknownPosTmr.EN)[XIC(S005RB01.I1.Pg_Paused) ,XIC(S005RB01.I1.RbtHeld) ,XIC(S005RB01.I1.RbtFaulted) ][XIC(S005RB02.I1.Pg_Paused) ,XIC(S005RB02.I1.RbtHeld) ,XIC(S005RB02.I1.RbtFaulted) ]OTE(S005TL1.Int.KnownPos);
		END_ROUTINE

		ROUTINE C00_Operator 
				RC: "************************************************************$N"
				    "Operator Routine$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Operator Load Required$N"
				    "$N"
				    "Use required Robot Safety Zone Clear, Clear of Tool, Load Position and Conditions$N"
				    "************************************************************";
				N: XIC(S005RB01Sfty.Int.SftyZn1)XIC(S005RB01.Int.ClearOfTool1)XIC(S005TL1.Int.LoadPos1)XIC(Edit.Bit)XIO(S005TL1.Int.DryCycle)XIO(S005TL1.Oper.DisableLoad)OTE(S005TL1.Oper.Load1Req);
				N: XIC(S005RB01Sfty.Int.SftyZn1)XIC(S005RB01.Int.ClearOfTool1)XIC(S005TL1.Int.LoadPos2)XIC(Edit.Bit)XIO(S005TL1.Int.DryCycle)XIO(S005TL1.Oper.DisableLoad)OTE(S005TL1.Oper.Load2Req);
				N: XIC(S005RB01Sfty.Int.SftyZn1)XIC(S005RB01.Int.ClearOfTool1)XIC(S005TL1.Int.LoadPos3)XIC(Edit.Bit)XIO(S005TL1.Int.DryCycle)XIO(S005TL1.Oper.DisableLoad)OTE(S005TL1.Oper.Load3Req);
				N: XIC(S005RB01Sfty.Int.SftyZn1)XIC(S005RB01.Int.ClearOfTool1)XIC(S005TL1.Int.LoadPos4)XIC(Edit.Bit)XIO(S005TL1.Int.DryCycle)XIO(S005TL1.Oper.DisableLoad)OTE(S005TL1.Oper.Load4Req);
				N: [XIC(S005TL1.Oper.Load1Req) ,XIC(S005TL1.Oper.Load2Req) ,XIC(S005TL1.Oper.Load3Req) ,XIC(S005TL1.Oper.Load4Req) ]OTE(S005TL1.Oper.AnyOperLdReq);
				RC: "************************************************************$N"
				    "Operator Unload Required$N"
				    "$N"
				    "Use required Robot Safety Zone Clear, Clear of Tool, Unload Position and Conditions$N"
				    "************************************************************";
				N: XIC(S005RB01Sfty.Int.SftyZn1)XIC(S005RB01.Int.ClearOfTool1)XIC(S005TL1.Int.ClrToUnld)XIC(Edit.Bit)XIO(S005TL1.Int.DryCycle)OTE(S005TL1.Oper.UnldReq);
				N: [XIO(S005TL1.Oper.CycleStartPB) ,XIC(S005TL1.Oper.AntiTieDown) ]XIC(S005TL1.Oper.CycleStartReset)OTE(S005TL1.Oper.AntiTieDown);
				RC: "Change Edit.debug and Edit.Bit with CycleStart Signals";
				N: XIC(S005TL1.Int.AutoSel)[XIC(S005TL1.Int.AutoMode) XIC(S005TL1.Oper.AtWorkPos) XIC(S005TL1.Oper.AnyOperLdReq) [XIC(S005TL1.Oper.CycleStartPB) ,XIC(S005TL1.Int.DryCycle) XIC(S005TL1.Oper.DryCycStrtMem) XIC(Edit.Bit) ] XIC(Edit.Debug) XIC(Edit.Bit) ,XIC(S005TL1.Oper.CycleStartSetup) ]XIC(S005TL1.Oper.AntiTieDown)[XIC(S005TL1.Int.DryCycle) OTL(S005TL1.Oper.DryCycStrtMem) ,OTE(S005TL1.Oper.CycleStartSetup) ];
				N: XIO(S005TL1.Int.DryCycle)[XIC(S005TL1.Int.AtHomePos) ,XIC(Edit.Debug) ]OTU(S005TL1.Oper.DryCycStrtMem);
				RC: "Check Cycle Start Command. May Require Additional Cycle Start bits per load";
				N: XIC(S005TL1.Oper.AntiTieDown)[XIC(S005TL1.Oper.CycleStartSetup) ,XIC(S005TL1.Oper.CycleStart) XIC(Edit.Debug) XIC(Edit.Bit) ]XIC(S005TL1.Int.LoadComp)XIO(S005TL1.Oper.DisableLoad)[OTE(S005TL1.Oper.CycleStart) ,XIC(Edit.Debug) XIC(Edit.Bit) NOP() ];
				N: XIC(S005Sfty.AllStaLtScrnOK)XIO(S005TL1.Oper.CycleResetPB)XIO(S005TL1.Int.TaskComp)XIO(S005TL1.Int.CycComp)OTE(S005TL1.Oper.CycleStartReset);
				N: XIC(S005TL1.Int.AutoMode)XIC(S005TL1.Oper.CycleResetPB)XIO(S005TL1.Oper.CycleStartPB)[MOV(1000,S005TL1.Oper.CycleResetDlyTmr.PRE) TON(S005TL1.Oper.CycleResetDlyTmr,?,?) ,XIC(S005TL1.Oper.CycleResetDlyTmr.DN) OTE(S005TL1.Oper.CycleReset) ];
				N: XIO(S005TL1.Oper.ClrToEnter)[XIO(S005Sfty.StaZn1NotBlkd) ,XIO(S005Sfty.StaZn2NotBlkd) ,XIO(S005Sfty.StaZn3NotBlkd) ]OTL(S005TL1.Oper.LtScrnFlt);
				N: [XIC(S005TL1.Oper.CycleStartPB) ,XIC(S005TL1.Oper.CycleResetPB) ]XIC(S005Sfty.StaZn1NotBlkd)XIC(S005Sfty.StaZn2NotBlkd)XIC(S005Sfty.StaZn3NotBlkd)OTU(S005TL1.Oper.LtScrnFlt);
				RC: "Example Logic$N"
				    "Edit As Required";
				N: XIC(Edit.Bit)[XIC(S005TL1.SR.Int.Model1) [XIO(S005TL1.Int.Proc1Comp) XIO(S005TL1.Int.Proc2Comp) XIC(S005TL1.Int.LoadPos1) ,XIC(S005TL1.Int.Proc2Comp) XIO(S005TL1.Int.Proc3Comp) XIC(S005TL1.Int.LoadPos2) ] ,XIC(S005TL1.SR.Int.Model2) XIO(S005TL1.Int.Proc1Comp) XIC(S005TL1.Int.LoadPos3) ]OTE(S005TL1.Oper.AtWorkPos);
				RC: "************************************************************$N"
				    "Operator Cycle Time$N"
				    "************************************************************";
				N: NOP();
				N: MOV(60000,S005TL1.Oper.CycleTime)MUL(S005TL1.Oper.CycleTime,0.7,S005TL1.Oper.CycleTime75);
				N: XIC(S005TL1.Int.AutoMode)XIC(S005TL1.Oper.ClrToEnter)XIO(S005TL1.Oper.DisableLoad)MOV(3600000,S005TL1.Oper.CycTimeTmr.PRE)RTO(S005TL1.Oper.CycTimeTmr,?,?);
				N: GRT(S005TL1.Oper.CycTimeTmr.ACC,S005TL1.Oper.CycleTime75)OTE(S005TL1.Oper.CycNearOT);
				N: GRT(S005TL1.Oper.CycTimeTmr.ACC,S005TL1.Oper.CycleTime)OTE(S005TL1.Oper.CycOverTime);
				N: XIC(S005TL1.Oper.CycleStart)ONS(S005TL1.Oper.CycleTimeOns)[MOV(S005TL1.Oper.CycTimeTmr.ACC,S005TL1.Oper.CycleTimeStore) ,RES(S005TL1.Oper.CycTimeTmr) ];
		END_ROUTINE

		ROUTINE D00_Act1_Clamp1 (Description := "Actuator Standard Routine")
				RC: "########################$N"
				    "Actuator Standard Logic$N"
				    "########################$N"
				    "$N"
				    "Add Control for every used Actuator$N"
				    "Edit Only Work and Home Descriptions$N"
				    "Do Not edit Work/Home Control Logic";
				N: NOP();
				RC: "########################$N"
				    "Actuator[1]$N"
				    "Clamp 1$N"
				    "*Description*$N"
				    "CL1, CL2, CL3$N"
				    "########################";
				N: NOP();
				N: MOV('Close',S005TL1.Act[1].WorkCmdDesc)MOV('Open',S005TL1.Act[1].HomeCmdDesc);
				RC: "########################$N"
				    "Work Control Logic$N"
				    "########################";
				N: [XIC(S005TL1.Act[1].Home.AutoCmd) ,XIC(S005TL1.Act[1].Home.ManualCmdPB) ]XIC(S005TL1.Act[1].Home.Clr)OTE(S005TL1.Act[1].Work.SealRst);
				N: [XIC(S005TL1.Int.AutoMode) XIC(S005TL1.Act[1].Work.AutoCmd) ,XIC(S005TL1.Int.ManualMode) XIC(S005TL1.Act[1].Work.ManualCmdPB) ,XIC(S005TL1.Act[1].Work.Out) XIC(S005TL1.Act[1].Work.Seal) ]XIC(S005TL1.Act[1].Work.Clr)XIO(S005TL1.Act[1].Work.SealRst)XIC(S005TL1.Act[1].ActMtnEnbld)OTE(S005TL1.Act[1].Work.Out);
				N: XIC(S005TL1.Act[1].Work.Out)OTL(S005TL1.Act[1].Work.Mem);
				N: XIC(S005TL1.Act[1].Home.Out)OTU(S005TL1.Act[1].Work.Mem);
				N: [XIC(S005TL1.Act[1].Work.Pxs.0) XIO(S005TL1.Act[1].Home.Pxs.0) ,XIO(S005TL1.Act[1].Installed.0) ][XIC(S005TL1.Act[1].Work.Pxs.1) XIO(S005TL1.Act[1].Home.Pxs.1) ,XIO(S005TL1.Act[1].Installed.1) ][XIC(S005TL1.Act[1].Work.Pxs.2) XIO(S005TL1.Act[1].Home.Pxs.2) ,XIO(S005TL1.Act[1].Installed.2) ][XIC(S005TL1.Act[1].Work.Pxs.3) XIO(S005TL1.Act[1].Home.Pxs.3) ,XIO(S005TL1.Act[1].Installed.3) ][XIC(S005TL1.Act[1].Work.Pxs.4) XIO(S005TL1.Act[1].Home.Pxs.4) ,XIO(S005TL1.Act[1].Installed.4) ][XIC(S005TL1.Act[1].Work.Pxs.5) XIO(S005TL1.Act[1].Home.Pxs.5) ,XIO(S005TL1.Act[1].Installed.5) ][XIC(S005TL1.Act[1].Work.Pxs.6) XIO(S005TL1.Act[1].Home.Pxs.6) ,XIO(S005TL1.Act[1].Installed.6) ][XIC(S005TL1.Act[1].Work.Pxs.7) XIO(S005TL1.Act[1].Home.Pxs.7) ,XIO(S005TL1.Act[1].Installed.7) ]OTE(S005TL1.Act[1].Work.Comp);
				N: [XIC(S005TL1.Act[1].Work.Out) [RTO(S005TL1.Act[1].Work.FltTmr,?,?) ,XIC(S005TL1.Act[1].Work.Comp) OTL(S005TL1.Act[1].Work.FltTmr.DN) ] ,XIC(S005TL1.Act[1].Home.Out) RES(S005TL1.Act[1].Work.FltTmr) ,XIC(S005TL1.Act[1].Work.FltTmr.DN) XIO(S005TL1.Act[1].Work.Comp) XIC(S005TL1.Int.PPActFltsEnbld) [OTE(S005TL1.Act[1].Work.MtnFlt) ,XIC(S005TL1.Act[1].Home.Comp) OTE(S005TL1.Act[1].Work.VlvFlt) ] ];
				RC: "########################$N"
				    "Home Control Logic$N"
				    "########################";
				N: [XIC(S005TL1.Act[1].Work.AutoCmd) ,XIC(S005TL1.Act[1].Work.ManualCmdPB) ]XIC(S005TL1.Act[1].Work.Clr)OTE(S005TL1.Act[1].Home.SealRst);
				N: [XIC(S005TL1.Int.AutoMode) XIC(S005TL1.Act[1].Home.AutoCmd) ,XIC(S005TL1.Int.ManualMode) XIC(S005TL1.Act[1].Home.ManualCmdPB) ,XIC(S005TL1.Act[1].Home.Out) XIC(S005TL1.Act[1].Home.Seal) ]XIC(S005TL1.Act[1].Home.Clr)XIO(S005TL1.Act[1].Home.SealRst)XIC(S005TL1.Act[1].ActMtnEnbld)OTE(S005TL1.Act[1].Home.Out);
				N: XIC(S005TL1.Act[1].Home.Out)OTL(S005TL1.Act[1].Home.Mem);
				N: XIC(S005TL1.Act[1].Work.Out)OTU(S005TL1.Act[1].Home.Mem);
				N: [XIC(S005TL1.Act[1].Home.Pxs.0) XIO(S005TL1.Act[1].Work.Pxs.0) ,XIO(S005TL1.Act[1].Installed.0) ][XIC(S005TL1.Act[1].Home.Pxs.1) XIO(S005TL1.Act[1].Work.Pxs.1) ,XIO(S005TL1.Act[1].Installed.1) ][XIC(S005TL1.Act[1].Home.Pxs.2) XIO(S005TL1.Act[1].Work.Pxs.2) ,XIO(S005TL1.Act[1].Installed.2) ][XIC(S005TL1.Act[1].Home.Pxs.3) XIO(S005TL1.Act[1].Work.Pxs.3) ,XIO(S005TL1.Act[1].Installed.3) ][XIC(S005TL1.Act[1].Home.Pxs.4) XIO(S005TL1.Act[1].Work.Pxs.4) ,XIO(S005TL1.Act[1].Installed.4) ][XIC(S005TL1.Act[1].Home.Pxs.5) XIO(S005TL1.Act[1].Work.Pxs.5) ,XIO(S005TL1.Act[1].Installed.5) ][XIC(S005TL1.Act[1].Home.Pxs.6) XIO(S005TL1.Act[1].Work.Pxs.6) ,XIO(S005TL1.Act[1].Installed.6) ][XIC(S005TL1.Act[1].Home.Pxs.7) XIO(S005TL1.Act[1].Work.Pxs.7) ,XIO(S005TL1.Act[1].Installed.7) ]OTE(S005TL1.Act[1].Home.Comp);
				N: [XIC(S005TL1.Act[1].Home.Out) [RTO(S005TL1.Act[1].Home.FltTmr,?,?) ,XIC(S005TL1.Act[1].Home.Comp) OTL(S005TL1.Act[1].Home.FltTmr.DN) ] ,XIC(S005TL1.Act[1].Work.Out) RES(S005TL1.Act[1].Home.FltTmr) ,XIC(S005TL1.Act[1].Home.FltTmr.DN) XIO(S005TL1.Act[1].Home.Comp) XIC(S005TL1.Int.PPActFltsEnbld) [OTE(S005TL1.Act[1].Home.MtnFlt) ,XIC(S005TL1.Act[1].Work.Comp) OTE(S005TL1.Act[1].Home.VlvFlt) ] ];
				RC: "########################$N"
				    "Actuator Fault$N"
				    "########################";
				N: [XIC(S005TL1.Act[1].Home.MtnFlt) ,XIC(S005TL1.Act[1].Home.VlvFlt) ,XIC(S005TL1.Act[1].Work.MtnFlt) ,XIC(S005TL1.Act[1].Work.VlvFlt) ]OTE(S005TL1.Act[1].Faulted);
		END_ROUTINE

		ROUTINE D00_Act2_Clamp2 (Description := "Actuator Standard Routine")
				RC: "########################$N"
				    "Actuator Standard Logic$N"
				    "########################$N"
				    "$N"
				    "Add Control for every used Actuator$N"
				    "Edit Only Work and Home Descriptions$N"
				    "Do Not edit Work/Home Control Logic";
				N: NOP();
				RC: "########################$N"
				    "Actuator[2]$N"
				    "Clamp 2$N"
				    "*Description*$N"
				    "CL4, CL5, CL6$N"
				    "########################";
				N: NOP();
				N: MOV('Close',S005TL1.Act[2].WorkCmdDesc)MOV('Open',S005TL1.Act[2].HomeCmdDesc);
				RC: "########################$N"
				    "Work Control Logic$N"
				    "########################";
				N: [XIC(S005TL1.Act[2].Home.AutoCmd) ,XIC(S005TL1.Act[2].Home.ManualCmdPB) ]XIC(S005TL1.Act[2].Home.Clr)OTE(S005TL1.Act[2].Work.SealRst);
				N: [XIC(S005TL1.Int.AutoMode) XIC(S005TL1.Act[2].Work.AutoCmd) ,XIC(S005TL1.Int.ManualMode) XIC(S005TL1.Act[2].Work.ManualCmdPB) ,XIC(S005TL1.Act[2].Work.Out) XIC(S005TL1.Act[2].Work.Seal) ]XIC(S005TL1.Act[2].Work.Clr)XIO(S005TL1.Act[2].Work.SealRst)XIC(S005TL1.Act[2].ActMtnEnbld)OTE(S005TL1.Act[2].Work.Out);
				N: XIC(S005TL1.Act[2].Work.Out)OTL(S005TL1.Act[2].Work.Mem);
				N: XIC(S005TL1.Act[2].Home.Out)OTU(S005TL1.Act[2].Work.Mem);
				N: [XIC(S005TL1.Act[2].Work.Pxs.0) XIO(S005TL1.Act[2].Home.Pxs.0) ,XIO(S005TL1.Act[2].Installed.0) ][XIC(S005TL1.Act[2].Work.Pxs.1) XIO(S005TL1.Act[2].Home.Pxs.1) ,XIO(S005TL1.Act[2].Installed.1) ][XIC(S005TL1.Act[2].Work.Pxs.2) XIO(S005TL1.Act[2].Home.Pxs.2) ,XIO(S005TL1.Act[2].Installed.2) ][XIC(S005TL1.Act[2].Work.Pxs.3) XIO(S005TL1.Act[2].Home.Pxs.3) ,XIO(S005TL1.Act[2].Installed.3) ][XIC(S005TL1.Act[2].Work.Pxs.4) XIO(S005TL1.Act[2].Home.Pxs.4) ,XIO(S005TL1.Act[2].Installed.4) ][XIC(S005TL1.Act[2].Work.Pxs.5) XIO(S005TL1.Act[2].Home.Pxs.5) ,XIO(S005TL1.Act[2].Installed.5) ][XIC(S005TL1.Act[2].Work.Pxs.6) XIO(S005TL1.Act[2].Home.Pxs.6) ,XIO(S005TL1.Act[2].Installed.6) ][XIC(S005TL1.Act[2].Work.Pxs.7) XIO(S005TL1.Act[2].Home.Pxs.7) ,XIO(S005TL1.Act[2].Installed.7) ]OTE(S005TL1.Act[2].Work.Comp);
				N: [XIC(S005TL1.Act[2].Work.Out) [RTO(S005TL1.Act[2].Work.FltTmr,?,?) ,XIC(S005TL1.Act[2].Work.Comp) OTL(S005TL1.Act[2].Work.FltTmr.DN) ] ,XIC(S005TL1.Act[2].Home.Out) RES(S005TL1.Act[2].Work.FltTmr) ,XIC(S005TL1.Act[2].Work.FltTmr.DN) XIO(S005TL1.Act[2].Work.Comp) XIC(S005TL1.Int.PPActFltsEnbld) [OTE(S005TL1.Act[2].Work.MtnFlt) ,XIC(S005TL1.Act[2].Home.Comp) OTE(S005TL1.Act[2].Work.VlvFlt) ] ];
				RC: "########################$N"
				    "Home Control Logic$N"
				    "########################";
				N: [XIC(S005TL1.Act[2].Work.AutoCmd) ,XIC(S005TL1.Act[2].Work.ManualCmdPB) ]XIC(S005TL1.Act[2].Work.Clr)OTE(S005TL1.Act[2].Home.SealRst);
				N: [XIC(S005TL1.Int.AutoMode) XIC(S005TL1.Act[2].Home.AutoCmd) ,XIC(S005TL1.Int.ManualMode) XIC(S005TL1.Act[2].Home.ManualCmdPB) ,XIC(S005TL1.Act[2].Home.Out) XIC(S005TL1.Act[2].Home.Seal) ]XIC(S005TL1.Act[2].Home.Clr)XIO(S005TL1.Act[2].Home.SealRst)XIC(S005TL1.Act[2].ActMtnEnbld)OTE(S005TL1.Act[2].Home.Out);
				N: XIC(S005TL1.Act[2].Home.Out)OTL(S005TL1.Act[2].Home.Mem);
				N: XIC(S005TL1.Act[2].Work.Out)OTU(S005TL1.Act[2].Home.Mem);
				N: [XIC(S005TL1.Act[2].Home.Pxs.0) XIO(S005TL1.Act[2].Work.Pxs.0) ,XIO(S005TL1.Act[2].Installed.0) ][XIC(S005TL1.Act[2].Home.Pxs.1) XIO(S005TL1.Act[2].Work.Pxs.1) ,XIO(S005TL1.Act[2].Installed.1) ][XIC(S005TL1.Act[2].Home.Pxs.2) XIO(S005TL1.Act[2].Work.Pxs.2) ,XIO(S005TL1.Act[2].Installed.2) ][XIC(S005TL1.Act[2].Home.Pxs.3) XIO(S005TL1.Act[2].Work.Pxs.3) ,XIO(S005TL1.Act[2].Installed.3) ][XIC(S005TL1.Act[2].Home.Pxs.4) XIO(S005TL1.Act[2].Work.Pxs.4) ,XIO(S005TL1.Act[2].Installed.4) ][XIC(S005TL1.Act[2].Home.Pxs.5) XIO(S005TL1.Act[2].Work.Pxs.5) ,XIO(S005TL1.Act[2].Installed.5) ][XIC(S005TL1.Act[2].Home.Pxs.6) XIO(S005TL1.Act[2].Work.Pxs.6) ,XIO(S005TL1.Act[2].Installed.6) ][XIC(S005TL1.Act[2].Home.Pxs.7) XIO(S005TL1.Act[2].Work.Pxs.7) ,XIO(S005TL1.Act[2].Installed.7) ]OTE(S005TL1.Act[2].Home.Comp);
				N: [XIC(S005TL1.Act[2].Home.Out) [RTO(S005TL1.Act[2].Home.FltTmr,?,?) ,XIC(S005TL1.Act[2].Home.Comp) OTL(S005TL1.Act[2].Home.FltTmr.DN) ] ,XIC(S005TL1.Act[2].Work.Out) RES(S005TL1.Act[2].Home.FltTmr) ,XIC(S005TL1.Act[2].Home.FltTmr.DN) XIO(S005TL1.Act[2].Home.Comp) XIC(S005TL1.Int.PPActFltsEnbld) [OTE(S005TL1.Act[2].Home.MtnFlt) ,XIC(S005TL1.Act[2].Work.Comp) OTE(S005TL1.Act[2].Home.VlvFlt) ] ];
				N: [XIC(S005TL1.Act[2].Home.MtnFlt) ,XIC(S005TL1.Act[2].Home.VlvFlt) ,XIC(S005TL1.Act[2].Work.MtnFlt) ,XIC(S005TL1.Act[2].Work.VlvFlt) ]OTE(S005TL1.Act[2].Faulted);
		END_ROUTINE

		ROUTINE D00_Act3_Pin1 (Description := "Actuator Standard Routine")
				RC: "########################$N"
				    "Actuator Standard Logic$N"
				    "########################$N"
				    "$N"
				    "Add Control for every used Actuator$N"
				    "Edit Only Work and Home Descriptions$N"
				    "Do Not edit Work/Home Control Logic";
				N: NOP();
				RC: "########################$N"
				    "Actuator[3]$N"
				    "Pin 1$N"
				    "*Description*$N"
				    "CL7, CL8$N"
				    "########################";
				N: NOP();
				N: MOV('Advance',S005TL1.Act[3].WorkCmdDesc)MOV('Retract',S005TL1.Act[3].HomeCmdDesc);
				RC: "########################$N"
				    "Work Control Logic$N"
				    "########################";
				N: [XIC(S005TL1.Act[3].Home.AutoCmd) ,XIC(S005TL1.Act[3].Home.ManualCmdPB) ]XIC(S005TL1.Act[3].Home.Clr)OTE(S005TL1.Act[3].Work.SealRst);
				N: [XIC(S005TL1.Int.AutoMode) XIC(S005TL1.Act[3].Work.AutoCmd) ,XIC(S005TL1.Int.ManualMode) XIC(S005TL1.Act[3].Work.ManualCmdPB) ,XIC(S005TL1.Act[3].Work.Out) XIC(S005TL1.Act[3].Work.Seal) ]XIC(S005TL1.Act[3].Work.Clr)XIO(S005TL1.Act[3].Work.SealRst)XIC(S005TL1.Act[3].ActMtnEnbld)OTE(S005TL1.Act[3].Work.Out);
				N: XIC(S005TL1.Act[3].Work.Out)OTL(S005TL1.Act[3].Work.Mem);
				N: XIC(S005TL1.Act[3].Home.Out)OTU(S005TL1.Act[3].Work.Mem);
				N: [XIC(S005TL1.Act[3].Work.Pxs.0) XIO(S005TL1.Act[3].Home.Pxs.0) ,XIO(S005TL1.Act[3].Installed.0) ][XIC(S005TL1.Act[3].Work.Pxs.1) XIO(S005TL1.Act[3].Home.Pxs.1) ,XIO(S005TL1.Act[3].Installed.1) ][XIC(S005TL1.Act[3].Work.Pxs.2) XIO(S005TL1.Act[3].Home.Pxs.2) ,XIO(S005TL1.Act[3].Installed.2) ][XIC(S005TL1.Act[3].Work.Pxs.3) XIO(S005TL1.Act[3].Home.Pxs.3) ,XIO(S005TL1.Act[3].Installed.3) ][XIC(S005TL1.Act[3].Work.Pxs.4) XIO(S005TL1.Act[3].Home.Pxs.4) ,XIO(S005TL1.Act[3].Installed.4) ][XIC(S005TL1.Act[3].Work.Pxs.5) XIO(S005TL1.Act[3].Home.Pxs.5) ,XIO(S005TL1.Act[3].Installed.5) ][XIC(S005TL1.Act[3].Work.Pxs.6) XIO(S005TL1.Act[3].Home.Pxs.6) ,XIO(S005TL1.Act[3].Installed.6) ][XIC(S005TL1.Act[3].Work.Pxs.7) XIO(S005TL1.Act[3].Home.Pxs.7) ,XIO(S005TL1.Act[3].Installed.7) ]OTE(S005TL1.Act[3].Work.Comp);
				N: [XIC(S005TL1.Act[3].Work.Out) [RTO(S005TL1.Act[3].Work.FltTmr,?,?) ,XIC(S005TL1.Act[3].Work.Comp) OTL(S005TL1.Act[3].Work.FltTmr.DN) ] ,XIC(S005TL1.Act[3].Home.Out) RES(S005TL1.Act[3].Work.FltTmr) ,XIC(S005TL1.Act[3].Work.FltTmr.DN) XIO(S005TL1.Act[3].Work.Comp) XIC(S005TL1.Int.PPActFltsEnbld) [OTE(S005TL1.Act[3].Work.MtnFlt) ,XIC(S005TL1.Act[3].Home.Comp) OTE(S005TL1.Act[3].Work.VlvFlt) ] ];
				RC: "########################$N"
				    "Home Control Logic$N"
				    "########################";
				N: [XIC(S005TL1.Act[3].Work.AutoCmd) ,XIC(S005TL1.Act[3].Work.ManualCmdPB) ]XIC(S005TL1.Act[3].Work.Clr)OTE(S005TL1.Act[3].Home.SealRst);
				N: [XIC(S005TL1.Int.AutoMode) XIC(S005TL1.Act[3].Home.AutoCmd) ,XIC(S005TL1.Int.ManualMode) XIC(S005TL1.Act[3].Home.ManualCmdPB) ,XIC(S005TL1.Act[3].Home.Out) XIC(S005TL1.Act[3].Home.Seal) ]XIC(S005TL1.Act[3].Home.Clr)XIO(S005TL1.Act[3].Home.SealRst)XIC(S005TL1.Act[3].ActMtnEnbld)OTE(S005TL1.Act[3].Home.Out);
				N: XIC(S005TL1.Act[3].Home.Out)OTL(S005TL1.Act[3].Home.Mem);
				N: XIC(S005TL1.Act[3].Work.Out)OTU(S005TL1.Act[3].Home.Mem);
				N: [XIC(S005TL1.Act[3].Home.Pxs.0) XIO(S005TL1.Act[3].Work.Pxs.0) ,XIO(S005TL1.Act[3].Installed.0) ][XIC(S005TL1.Act[3].Home.Pxs.1) XIO(S005TL1.Act[3].Work.Pxs.1) ,XIO(S005TL1.Act[3].Installed.1) ][XIC(S005TL1.Act[3].Home.Pxs.2) XIO(S005TL1.Act[3].Work.Pxs.2) ,XIO(S005TL1.Act[3].Installed.2) ][XIC(S005TL1.Act[3].Home.Pxs.3) XIO(S005TL1.Act[3].Work.Pxs.3) ,XIO(S005TL1.Act[3].Installed.3) ][XIC(S005TL1.Act[3].Home.Pxs.4) XIO(S005TL1.Act[3].Work.Pxs.4) ,XIO(S005TL1.Act[3].Installed.4) ][XIC(S005TL1.Act[3].Home.Pxs.5) XIO(S005TL1.Act[3].Work.Pxs.5) ,XIO(S005TL1.Act[3].Installed.5) ][XIC(S005TL1.Act[3].Home.Pxs.6) XIO(S005TL1.Act[3].Work.Pxs.6) ,XIO(S005TL1.Act[3].Installed.6) ][XIC(S005TL1.Act[3].Home.Pxs.7) XIO(S005TL1.Act[3].Work.Pxs.7) ,XIO(S005TL1.Act[3].Installed.7) ]OTE(S005TL1.Act[3].Home.Comp);
				N: [XIC(S005TL1.Act[3].Home.Out) [RTO(S005TL1.Act[3].Home.FltTmr,?,?) ,XIC(S005TL1.Act[3].Home.Comp) OTL(S005TL1.Act[3].Home.FltTmr.DN) ] ,XIC(S005TL1.Act[3].Work.Out) RES(S005TL1.Act[3].Home.FltTmr) ,XIC(S005TL1.Act[3].Home.FltTmr.DN) XIO(S005TL1.Act[3].Home.Comp) XIC(S005TL1.Int.PPActFltsEnbld) [OTE(S005TL1.Act[3].Home.MtnFlt) ,XIC(S005TL1.Act[3].Work.Comp) OTE(S005TL1.Act[3].Home.VlvFlt) ] ];
				N: [XIC(S005TL1.Act[3].Home.MtnFlt) ,XIC(S005TL1.Act[3].Home.VlvFlt) ,XIC(S005TL1.Act[3].Work.MtnFlt) ,XIC(S005TL1.Act[3].Work.VlvFlt) ]OTE(S005TL1.Act[3].Faulted);
		END_ROUTINE

		ROUTINE D00_Act4_Pin2 (Description := "Actuator Standard Routine")
				RC: "########################$N"
				    "Actuator Standard Logic$N"
				    "########################$N"
				    "$N"
				    "Add Control for every used Actuator$N"
				    "Edit Only Work and Home Descriptions$N"
				    "Do Not edit Work/Home Control Logic";
				N: NOP();
				RC: "########################$N"
				    "Actuator[4]$N"
				    "Pin 2$N"
				    "*Description*$N"
				    "CL9, CL10$N"
				    "########################";
				N: NOP();
				N: MOV('Advance',S005TL1.Act[4].WorkCmdDesc)MOV('Retract',S005TL1.Act[4].HomeCmdDesc);
				RC: "########################$N"
				    "Work Control Logic$N"
				    "########################";
				N: [XIC(S005TL1.Act[4].Home.AutoCmd) ,XIC(S005TL1.Act[4].Home.ManualCmdPB) ]XIC(S005TL1.Act[4].Home.Clr)OTE(S005TL1.Act[4].Work.SealRst);
				N: [XIC(S005TL1.Int.AutoMode) XIC(S005TL1.Act[4].Work.AutoCmd) ,XIC(S005TL1.Int.ManualMode) XIC(S005TL1.Act[4].Work.ManualCmdPB) ,XIC(S005TL1.Act[4].Work.Out) XIC(S005TL1.Act[4].Work.Seal) ]XIC(S005TL1.Act[4].Work.Clr)XIO(S005TL1.Act[4].Work.SealRst)XIC(S005TL1.Act[4].ActMtnEnbld)OTE(S005TL1.Act[4].Work.Out);
				N: XIC(S005TL1.Act[4].Work.Out)OTL(S005TL1.Act[4].Work.Mem);
				N: XIC(S005TL1.Act[4].Home.Out)OTU(S005TL1.Act[4].Work.Mem);
				N: [XIC(S005TL1.Act[4].Work.Pxs.0) XIO(S005TL1.Act[4].Home.Pxs.0) ,XIO(S005TL1.Act[4].Installed.0) ][XIC(S005TL1.Act[4].Work.Pxs.1) XIO(S005TL1.Act[4].Home.Pxs.1) ,XIO(S005TL1.Act[4].Installed.1) ][XIC(S005TL1.Act[4].Work.Pxs.2) XIO(S005TL1.Act[4].Home.Pxs.2) ,XIO(S005TL1.Act[4].Installed.2) ][XIC(S005TL1.Act[4].Work.Pxs.3) XIO(S005TL1.Act[4].Home.Pxs.3) ,XIO(S005TL1.Act[4].Installed.3) ][XIC(S005TL1.Act[4].Work.Pxs.4) XIO(S005TL1.Act[4].Home.Pxs.4) ,XIO(S005TL1.Act[4].Installed.4) ][XIC(S005TL1.Act[4].Work.Pxs.5) XIO(S005TL1.Act[4].Home.Pxs.5) ,XIO(S005TL1.Act[4].Installed.5) ][XIC(S005TL1.Act[4].Work.Pxs.6) XIO(S005TL1.Act[4].Home.Pxs.6) ,XIO(S005TL1.Act[4].Installed.6) ][XIC(S005TL1.Act[4].Work.Pxs.7) XIO(S005TL1.Act[4].Home.Pxs.7) ,XIO(S005TL1.Act[4].Installed.7) ]OTE(S005TL1.Act[4].Work.Comp);
				N: [XIC(S005TL1.Act[4].Work.Out) [RTO(S005TL1.Act[4].Work.FltTmr,?,?) ,XIC(S005TL1.Act[4].Work.Comp) OTL(S005TL1.Act[4].Work.FltTmr.DN) ] ,XIC(S005TL1.Act[4].Home.Out) RES(S005TL1.Act[4].Work.FltTmr) ,XIC(S005TL1.Act[4].Work.FltTmr.DN) XIO(S005TL1.Act[4].Work.Comp) XIC(S005TL1.Int.PPActFltsEnbld) [OTE(S005TL1.Act[4].Work.MtnFlt) ,XIC(S005TL1.Act[4].Home.Comp) OTE(S005TL1.Act[4].Work.VlvFlt) ] ];
				RC: "########################$N"
				    "Home Control Logic$N"
				    "########################";
				N: [XIC(S005TL1.Act[4].Work.AutoCmd) ,XIC(S005TL1.Act[4].Work.ManualCmdPB) ]XIC(S005TL1.Act[4].Work.Clr)OTE(S005TL1.Act[4].Home.SealRst);
				N: [XIC(S005TL1.Int.AutoMode) XIC(S005TL1.Act[4].Home.AutoCmd) ,XIC(S005TL1.Int.ManualMode) XIC(S005TL1.Act[4].Home.ManualCmdPB) ,XIC(S005TL1.Act[4].Home.Out) XIC(S005TL1.Act[4].Home.Seal) ]XIC(S005TL1.Act[4].Home.Clr)XIO(S005TL1.Act[4].Home.SealRst)XIC(S005TL1.Act[4].ActMtnEnbld)OTE(S005TL1.Act[4].Home.Out);
				N: XIC(S005TL1.Act[4].Home.Out)OTL(S005TL1.Act[4].Home.Mem);
				N: XIC(S005TL1.Act[4].Work.Out)OTU(S005TL1.Act[4].Home.Mem);
				N: [XIC(S005TL1.Act[4].Home.Pxs.0) XIO(S005TL1.Act[4].Work.Pxs.0) ,XIO(S005TL1.Act[4].Installed.0) ][XIC(S005TL1.Act[4].Home.Pxs.1) XIO(S005TL1.Act[4].Work.Pxs.1) ,XIO(S005TL1.Act[4].Installed.1) ][XIC(S005TL1.Act[4].Home.Pxs.2) XIO(S005TL1.Act[4].Work.Pxs.2) ,XIO(S005TL1.Act[4].Installed.2) ][XIC(S005TL1.Act[4].Home.Pxs.3) XIO(S005TL1.Act[4].Work.Pxs.3) ,XIO(S005TL1.Act[4].Installed.3) ][XIC(S005TL1.Act[4].Home.Pxs.4) XIO(S005TL1.Act[4].Work.Pxs.4) ,XIO(S005TL1.Act[4].Installed.4) ][XIC(S005TL1.Act[4].Home.Pxs.5) XIO(S005TL1.Act[4].Work.Pxs.5) ,XIO(S005TL1.Act[4].Installed.5) ][XIC(S005TL1.Act[4].Home.Pxs.6) XIO(S005TL1.Act[4].Work.Pxs.6) ,XIO(S005TL1.Act[4].Installed.6) ][XIC(S005TL1.Act[4].Home.Pxs.7) XIO(S005TL1.Act[4].Work.Pxs.7) ,XIO(S005TL1.Act[4].Installed.7) ]OTE(S005TL1.Act[4].Home.Comp);
				N: [XIC(S005TL1.Act[4].Home.Out) [RTO(S005TL1.Act[4].Home.FltTmr,?,?) ,XIC(S005TL1.Act[4].Home.Comp) OTL(S005TL1.Act[4].Home.FltTmr.DN) ] ,XIC(S005TL1.Act[4].Work.Out) RES(S005TL1.Act[4].Home.FltTmr) ,XIC(S005TL1.Act[4].Home.FltTmr.DN) XIO(S005TL1.Act[4].Home.Comp) XIC(S005TL1.Int.PPActFltsEnbld) [OTE(S005TL1.Act[4].Home.MtnFlt) ,XIC(S005TL1.Act[4].Work.Comp) OTE(S005TL1.Act[4].Home.VlvFlt) ] ];
				N: [XIC(S005TL1.Act[4].Home.MtnFlt) ,XIC(S005TL1.Act[4].Home.VlvFlt) ,XIC(S005TL1.Act[4].Work.MtnFlt) ,XIC(S005TL1.Act[4].Work.VlvFlt) ]OTE(S005TL1.Act[4].Faulted);
		END_ROUTINE

		ROUTINE D01_MotionSeq (Description := "Actuator Motion and Sequence Control")
				RC: "************************************************************$N"
				    "STATION ACTUATOR$N"
				    "MOTION AND SEQUENCE$N"
				    "LOGIC$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Actuator 1 Mapping$N"
				    "$N"
				    "Clamp 1$N"
				    "*Description*$N"
				    "CL1, CL2, CL3$N"
				    "************************************************************";
				N: [OTE(S005TL1.Act[1].Installed.0) ,XIC(Edit.Bit) OTE(S005TL1.Act[1].Work.Pxs.0) ,XIC(Edit.Bit) OTE(S005TL1.Act[1].Home.Pxs.0) ][OTE(S005TL1.Act[1].Installed.1) ,XIC(Edit.Bit) OTE(S005TL1.Act[1].Work.Pxs.1) ,XIC(Edit.Bit) OTE(S005TL1.Act[1].Home.Pxs.1) ][OTE(S005TL1.Act[1].Installed.2) ,XIC(Edit.Bit) OTE(S005TL1.Act[1].Work.Pxs.2) ,XIC(Edit.Bit) OTE(S005TL1.Act[1].Home.Pxs.2) ];
				RC: "************************************************************$N"
				    "Actuator Motion Interlock$N"
				    "************************************************************$N"
				    "$N"
				    "Edit.Bit May be used for Safety Manual Motion Enable$N"
				    "Future";
				N: [XIC(S005Sfty.FX1.MotionEnbl) OTE(S005TL1.Act[1].ActMtnIntlk.Inp_Intlk00) ,XIC(Edit.Bit) OTE(S005TL1.Act[1].ActMtnIntlk.Inp_Intlk01) ,XIC(Edit.Bit) OTE(S005TL1.Act[1].ActMtnIntlk.Inp_Intlk02) ,P_Intlk(S005TL1.Act[1].ActMtnIntlk) ,XIC(S005TL1.Act[1].ActMtnIntlk.Sts_IntlkOK) OTE(S005TL1.Act[1].ActMtnEnbld) ];
				RC: "************************************************************$N"
				    "Actuator 2 Mapping$N"
				    "$N"
				    "Clamp 2$N"
				    "*Description*$N"
				    "CL4, CL5, CL6$N"
				    "************************************************************";
				N: [OTE(S005TL1.Act[2].Installed.0) ,XIC(Edit.Bit) OTE(S005TL1.Act[2].Work.Pxs.0) ,XIC(Edit.Bit) OTE(S005TL1.Act[2].Home.Pxs.0) ][OTE(S005TL1.Act[2].Installed.1) ,XIC(Edit.Bit) OTE(S005TL1.Act[2].Work.Pxs.1) ,XIC(Edit.Bit) OTE(S005TL1.Act[2].Home.Pxs.1) ][OTE(S005TL1.Act[2].Installed.2) ,XIC(Edit.Bit) OTE(S005TL1.Act[2].Work.Pxs.2) ,XIC(Edit.Bit) OTE(S005TL1.Act[2].Home.Pxs.2) ];
				RC: "************************************************************$N"
				    "Actuator Motion Interlock$N"
				    "************************************************************$N"
				    "$N"
				    "Edit.Bit May be used for Safety Manual Motion Enable$N"
				    "Future";
				N: [XIC(S005Sfty.FX1.MotionEnbl) OTE(S005TL1.Act[2].ActMtnIntlk.Inp_Intlk00) ,XIC(Edit.Bit) OTE(S005TL1.Act[2].ActMtnIntlk.Inp_Intlk01) ,XIC(Edit.Bit) OTE(S005TL1.Act[2].ActMtnIntlk.Inp_Intlk02) ,P_Intlk(S005TL1.Act[2].ActMtnIntlk) ,XIC(S005TL1.Act[2].ActMtnIntlk.Sts_IntlkOK) OTE(S005TL1.Act[2].ActMtnEnbld) ];
				RC: "************************************************************$N"
				    "Actuator 3 Mapping$N"
				    "$N"
				    "Pin 1$N"
				    "*Description*$N"
				    "CL7, CL8$N"
				    "************************************************************";
				N: [OTE(S005TL1.Act[3].Installed.0) ,XIC(Edit.Bit) OTE(S005TL1.Act[3].Work.Pxs.0) ,XIC(Edit.Bit) OTE(S005TL1.Act[3].Home.Pxs.0) ][OTE(S005TL1.Act[3].Installed.1) ,XIC(Edit.Bit) OTE(S005TL1.Act[3].Work.Pxs.1) ,XIC(Edit.Bit) OTE(S005TL1.Act[3].Home.Pxs.1) ];
				RC: "************************************************************$N"
				    "Actuator Motion Interlock$N"
				    "************************************************************$N"
				    "$N"
				    "Edit.Bit May be used for Safety Manual Motion Enable$N"
				    "Future";
				N: [XIC(S005Sfty.FX1.MotionEnbl) OTE(S005TL1.Act[3].ActMtnIntlk.Inp_Intlk00) ,XIC(Edit.Bit) OTE(S005TL1.Act[3].ActMtnIntlk.Inp_Intlk01) ,XIC(Edit.Bit) OTE(S005TL1.Act[3].ActMtnIntlk.Inp_Intlk02) ,P_Intlk(S005TL1.Act[3].ActMtnIntlk) ,XIC(S005TL1.Act[3].ActMtnIntlk.Sts_IntlkOK) OTE(S005TL1.Act[3].ActMtnEnbld) ];
				RC: "************************************************************$N"
				    "Actuator 4 Mapping$N"
				    "$N"
				    "Pin 2$N"
				    "*Description*$N"
				    "CL9, CL10$N"
				    "************************************************************";
				N: [OTE(S005TL1.Act[4].Installed.0) ,XIC(Edit.Bit) OTE(S005TL1.Act[4].Work.Pxs.0) ,XIC(Edit.Bit) OTE(S005TL1.Act[4].Home.Pxs.0) ][OTE(S005TL1.Act[4].Installed.1) ,XIC(Edit.Bit) OTE(S005TL1.Act[4].Work.Pxs.1) ,XIC(Edit.Bit) OTE(S005TL1.Act[4].Home.Pxs.1) ];
				RC: "************************************************************$N"
				    "Actuator Motion Interlock$N"
				    "************************************************************$N"
				    "$N"
				    "Edit.Bit May be used for Safety Manual Motion Enable$N"
				    "Future";
				N: [XIC(S005Sfty.FX1.MotionEnbl) OTE(S005TL1.Act[4].ActMtnIntlk.Inp_Intlk00) ,XIC(Edit.Bit) OTE(S005TL1.Act[4].ActMtnIntlk.Inp_Intlk01) ,XIC(Edit.Bit) OTE(S005TL1.Act[4].ActMtnIntlk.Inp_Intlk02) ,P_Intlk(S005TL1.Act[4].ActMtnIntlk) ,XIC(S005TL1.Act[4].ActMtnIntlk.Sts_IntlkOK) OTE(S005TL1.Act[4].ActMtnEnbld) ];
				RC: "#############################$N"
				    "S005TL1$N"
				    "Sequence Control$N"
				    "#############################$N"
				    "$N"
				    "Add Logic for all Actuators (Act[X]) in the tool sequence of operation.$N"
				    "$N"
				    "Example:$N"
				    "Act[1] to Work$N"
				    "Act[2] To Work$N"
				    "Act[1] To Home$N"
				    "Act[2] To Home";
				N: NOP();
				RC: "#####################$N"
				    "########   S005TL1 Sequence   ########$N"
				    "#####################$N"
				    "$N"
				    "Clamp 1 Close$N"
				    "Clamp 2 Close$N"
				    "Clamp 2 Open$N"
				    "Clamp 1 Open$N"
				    "Pin 1 Return$N"
				    "Pin 1 Advance$N"
				    "$N"
				    "Only as reference, rung to be deleted$N"
				    "--------------------------------------------------------------------";
				N: XIC(S005TL1.Act[1].Work.Mem)XIC(S005TL1.Act[2].Work.Mem)XIC(S005TL1.Act[2].Home.Mem)XIC(S005TL1.Act[1].Home.Mem)XIC(S005TL1.Act[3].Home.Mem)XIC(S005TL1.Act[3].Work.Mem)NOP();
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S005RB01.Int.ClearOfPick1)XIC(S005RB02.Int.ClearOfTool1)OTE(S005TL1.Act[1].Work.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S005TL1.Act[1].Work.FltTmr.PRE)XIC(S005TL1.Int.AutoMode)XIC(S005TL1.Int.Load1Comp)XIC(S005TL1.Int.CycStart)XIC(S005TL1.Act[3].Work.Comp)OTE(S005TL1.Act[1].Work.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S005TL1.Int.ManualMode)[XIC(S005TL1.Act[1].ocmdWork) ,XIC(S005TL1.Seq.WorkPB) [EQU(S005TL1.Seq.Scrl.ListPos,2) ,EQU(S005TL1.Seq.Scrl.ListPos,6) ] ]OTE(S005TL1.Act[1].Work.ManualCmdPB);
				N: XIC(S005TL1.Act[1].Work.Comp)OTE(S005TL1.Act[1].Work.Seal);
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S005RB01.Int.ClearOfPick1)XIC(S005RB02.Int.ClearOfTool1)OTE(S005TL1.Act[2].Work.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S005TL1.Act[1].Work.FltTmr.PRE)XIC(S005TL1.Int.AutoMode)XIC(S005TL1.Int.Load1Comp)XIC(S005TL1.Int.CycStart)XIC(S005TL1.Act[3].Work.Comp)XIC(S005TL1.Act[1].Work.Comp)OTE(S005TL1.Act[2].Work.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S005TL1.Int.ManualMode)[XIC(S005TL1.Act[2].ocmdWork) ,XIC(S005TL1.Seq.WorkPB) [EQU(S005TL1.Seq.Scrl.ListPos,3) ,EQU(S005TL1.Seq.Scrl.ListPos,5) ] ]OTE(S005TL1.Act[2].Work.ManualCmdPB);
				N: XIC(S005TL1.Act[2].Work.Comp)OTE(S005TL1.Act[2].Work.Seal);
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S005RB01.Int.ClearOfPick1)[XIC(S005RB02.Int.ClearOfTool1) ,XIC(S005RB02.AOIs.PN.stsPN101) ]OTE(S005TL1.Act[2].Home.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S005TL1.Act[1].Home.FltTmr.PRE)XIC(S005TL1.Int.AutoMode)XIC(S005TL1.Int.Proc1Comp)XIC(Edit.Bit)OTE(S005TL1.Act[2].Home.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S005TL1.Int.ManualMode)[XIC(S005TL1.Act[2].ocmdHome) ,XIC(S005TL1.Seq.HomePB) [EQU(S005TL1.Seq.Scrl.ListPos,3) ,EQU(S005TL1.Seq.Scrl.ListPos,5) ] ]OTE(S005TL1.Act[2].Home.ManualCmdPB);
				N: XIC(S005TL1.Act[2].Home.Comp)OTE(S005TL1.Act[2].Home.Seal);
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S005RB01.Int.ClearOfPick1)XIC(S005RB02.Int.ClearOfTool1)OTE(S005TL1.Act[1].Home.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S005TL1.Act[1].Home.FltTmr.PRE)XIC(S005TL1.Int.AutoMode)XIC(S005TL1.Int.TaskComp)OTE(S005TL1.Act[1].Home.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S005TL1.Int.ManualMode)[XIC(S005TL1.Act[1].ocmdHome) ,XIC(S005TL1.Seq.HomePB) [EQU(S005TL1.Seq.Scrl.ListPos,2) ,EQU(S005TL1.Seq.Scrl.ListPos,6) ] ]OTE(S005TL1.Act[1].Home.ManualCmdPB);
				N: XIC(S005TL1.Act[1].Home.Comp)OTE(S005TL1.Act[1].Home.Seal);
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S005RB01.Int.ClearOfPick1)XIC(S005RB02.Int.ClearOfTool1)OTE(S005TL1.Act[3].Work.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S005TL1.Act[1].Work.FltTmr.PRE)XIC(S005TL1.Int.AutoMode)XIC(S005TL1.Int.TaskComp)XIC(S005TL1.Act[1].Home.Comp)OTE(S005TL1.Act[3].Work.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S005TL1.Int.ManualMode)XIC(Edit.Bit)OTE(S005TL1.Act[3].Work.ManualCmdPB);
				N: XIC(S005TL1.Act[3].Work.Comp)OTE(S005TL1.Act[3].Work.Seal);
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S005RB01.Int.ClearOfPick1)XIC(S005RB02.Int.ClearOfTool1)OTE(S005TL1.Act[3].Home.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S005TL1.Act[1].Home.FltTmr.PRE)XIC(S005TL1.Int.AutoMode)[XIC(S005TL1.Int.TaskComp) XIC(S005TL1.Int.UnldComp) ,XIC(S005TL1.Int.PartsPresNo) XIC(S005TL1.SR.Int.NoPart) ]OTE(S005TL1.Act[3].Home.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S005TL1.Int.ManualMode)[XIC(S005TL1.Act[3].ocmdWork) ,XIC(S005TL1.Seq.WorkPB) [EQU(S005TL1.Seq.Scrl.ListPos,7) ,EQU(S005TL1.Seq.Scrl.ListPos,9) ] ]OTE(S005TL1.Act[3].Home.ManualCmdPB);
				N: XIC(S005TL1.Act[3].Home.Comp)OTE(S005TL1.Act[3].Home.Seal);
		END_ROUTINE

		ROUTINE D02_PartPresent 
				RC: "************************************************************$N"
				    "PP Common Inputs$N"
				    "$N"
				    "Assign each PP[X] to a Part Present Load Group$N"
				    "$N"
				    "PP1_xxx - 1st Load Part Presents$N"
				    "PP2_xxx - 2nd Load Part Presents$N"
				    "PP3_xxx - 3rd Load Part Presents$N"
				    "PP4_xxx - 4th Load Part Presents$N"
				    "************************************************************";
				N: NOP();
				N: XIO(S005TL1.Int.DryCycle)[XIC(sZ005_040.PowerEnbld) XIC(S005TL1.Int.AirOnOk) XIC(S005TL1.Int.AllModCommOk) XIC(Edit.Bit) ,XIC(_Temp.Bool01) ]OTE(S005TL1.Int.PPActFltsEnbld);
				RC: "************************************************************$N"
				    "Part Present Logic$N"
				    "$N"
				    "************************************************************$N"
				    "Part Present AOI Parameter Mapping";
				N: NOP();
				RC: "************************************************************$N"
				    "PartPresent$N"
				    "************************************************************$N"
				    "DryCycle Load Condition$N"
				    "If the Tool is loaded by a Robot, The Timer should be removed";
				N: XIC(S005TL1.Int.DryCycle)XIC(S005TL1.Oper.DryCycStrtMem)XIC(S005TL1.Int.ClrToLoad)XIO(S005TL1.Int.ClrToUnld)XIO(S005TL1.Int.CycComp)XIC(S005RB01Sfty.Int.SftyZn1)XIO(S005TL1.Oper.DisableLoad)[MOV(10000,S005TL1.Oper.DryCycLd1DlyTmr.PRE) TON(S005TL1.Oper.DryCycLd1DlyTmr,?,?) ,[OTE(S005TL1.PP[1].inpPPDryCycleLoadTrgr) ,OTE(S005TL1.PP[2].inpPPDryCycleLoadTrgr) ,OTE(S005TL1.PP[3].inpPPDryCycleLoadTrgr) ,OTE(S005TL1.PP[4].inpPPDryCycleLoadTrgr) ] ];
				RC: "************************************************************$N"
				    "PartPresent - AIR$N"
				    "************************************************************$N"
				    "DryCycle Unload Condition";
				N: XIC(S005TL1.Int.DryCycle)XIC(S005RB01.Int.EOATWorkPos1)XIC(S005RB01.I1.Auto)XIO(S005RB01.Int.AbortPickSeld)XIC(Edit.Bit)[OTE(S005TL1.PP[1].inpPPDryCycleUnldTrgr) ,OTE(S005TL1.PP[2].inpPPDryCycleUnldTrgr) ];
				RC: "************************************************************$N"
				    "PartPresent  - GRAVITY$N"
				    "************************************************************$N"
				    "DryCycle Unload Condition";
				N: XIC(S005TL1.Int.DryCycle)XIC(S005RB01.Int.EOATWorkPos2)XIC(S005RB01.I1.Auto)XIO(S005RB01.Int.AbortPickSeld)XIC(Edit.Bit)[OTE(S005TL1.PP[3].inpPPDryCycleUnldTrgr) ,OTE(S005TL1.PP[4].inpPPDryCycleUnldTrgr) ];
				RC: "************************************************************$N"
				    "Set Used/Installed Sensors$N"
				    "************************************************************$N"
				    "Change instruction to OTE if sensor used.$N"
				    "Change instruction to OTU if the sensor will not be used/installed";
				N: OTE(S005TL1.PP[1].inpPPSensorInst.0)OTE(S005TL1.PP[1].inpPPSensorInst.1)OTU(S005TL1.PP[1].inpPPSensorInst.2)OTU(S005TL1.PP[1].inpPPSensorInst.3)OTU(S005TL1.PP[1].inpPPSensorInst.4)OTU(S005TL1.PP[1].inpPPSensorInst.5)OTU(S005TL1.PP[1].inpPPSensorInst.6)OTU(S005TL1.PP[1].inpPPSensorInst.7);
				RC: "************************************************************$N"
				    "Add all first load Switch Inputs$N"
				    "************************************************************";
				N: [MOV(0,S005TL1.PP[1].inpPPSensor) ,[XIC(S005TL1VM1.I1.0) OTE(S005TL1.PP[1].inpPPSensor.0) ,XIC(S005TL1VM1.I1.1) OTE(S005TL1.PP[1].inpPPSensor.1) ] ,XIC(S005TL1.Int.DryCycle) XIC(S005TL1.PP[1].stsPPMem) MOV(2#0000_0011,S005TL1.PP[1].inpPPSensor) ];
				N: [XIC(S005TL1VM1.I1.0) ,XIC(S005TL1VM1.I1.1) ]OTE(S005TL1.PP[1].PPAnySensor);
				RC: "************************************************************$N"
				    "Change Edit.Bit with required conditions for PP to be ON/OFF$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(S005TL1.PP[1].inpOnCondition);
				N: XIC(Edit.Bit)OTE(S005TL1.PP[1].inpOffCondition);
				RC: "************************************************************$N"
				    "Set Used/Installed Sensors$N"
				    "************************************************************$N"
				    "Change instruction to OTE if sensor used.$N"
				    "Change instruction to OTU if the sensor will not be used/installed";
				N: OTE(S005TL1.PP[2].inpPPSensorInst.0)OTE(S005TL1.PP[2].inpPPSensorInst.1)OTE(S005TL1.PP[2].inpPPSensorInst.2)OTU(S005TL1.PP[2].inpPPSensorInst.3)OTU(S005TL1.PP[2].inpPPSensorInst.4)OTU(S005TL1.PP[2].inpPPSensorInst.5)OTU(S005TL1.PP[2].inpPPSensorInst.6)OTU(S005TL1.PP[2].inpPPSensorInst.7);
				RC: "************************************************************$N"
				    "Add all second load Switch Inputs$N"
				    "Model Air$N"
				    "************************************************************";
				N: [MOV(0,S005TL1.PP[2].inpPPSensor) ,[XIC(S005TL1VM1.I1.2) OTE(S005TL1.PP[2].inpPPSensor.0) ,XIC(S005TL1VM1.I1.3) OTE(S005TL1.PP[2].inpPPSensor.1) ,XIC(S005TL1VM1.I1.4) OTE(S005TL1.PP[2].inpPPSensor.2) ] ,XIC(S005TL1.Int.DryCycle) XIC(S005TL1.PP[2].stsPPMem) MOV(2#0000_0111,S005TL1.PP[2].inpPPSensor) ];
				N: [XIC(S005TL1VM1.I1.2) ,XIC(S005TL1VM1.I1.3) ,XIC(S005TL1VM1.I1.4) ]OTE(S005TL1.PP[2].PPAnySensor);
				RC: "************************************************************$N"
				    "Change Edit.Bit with required conditions for PP to be ON/OFF$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(S005TL1.PP[2].inpOnCondition);
				N: XIC(Edit.Bit)OTE(S005TL1.PP[2].inpOffCondition);
				RC: "Model 1 Part Present AOIs$N"
				    "Lucid AIR";
				N: PartPresent(S005TL1.PP[1],S005TL1.PP[1].inpPPSensor,S005TL1.PP[1].inpOnCondition,S005TL1.PP[1].inpOffCondition,S005TL1.Int.DryCycle,S005TL1.Int.PPActFltsEnbld)PartPresent(S005TL1.PP[2],S005TL1.PP[2].inpPPSensor,S005TL1.PP[2].inpOnCondition,S005TL1.PP[2].inpOffCondition,S005TL1.Int.DryCycle,S005TL1.Int.PPActFltsEnbld);
				RC: "************************************************************$N"
				    "Set Used/Installed Sensors$N"
				    "************************************************************$N"
				    "Change instruction to OTE if sensor used.$N"
				    "Change instruction to OTU if the sensor will not be used/installed";
				N: OTE(S005TL1.PP[3].inpPPSensorInst.0)OTE(S005TL1.PP[3].inpPPSensorInst.1)OTU(S005TL1.PP[3].inpPPSensorInst.2)OTU(S005TL1.PP[3].inpPPSensorInst.3)OTU(S005TL1.PP[3].inpPPSensorInst.4)OTU(S005TL1.PP[3].inpPPSensorInst.5)OTU(S005TL1.PP[3].inpPPSensorInst.6)OTU(S005TL1.PP[3].inpPPSensorInst.7);
				RC: "************************************************************$N"
				    "Add all first load Switch Inputs$N"
				    "Model Gravity$N"
				    "************************************************************";
				N: [MOV(0,S005TL1.PP[3].inpPPSensor) ,[XIC(S005TL1VM1.I2.0) OTE(S005TL1.PP[3].inpPPSensor.0) ,XIC(S005TL1VM1.I2.1) OTE(S005TL1.PP[3].inpPPSensor.1) ] ,XIC(S005TL1.Int.DryCycle) XIC(S005TL1.PP[3].stsPPMem) MOV(2#0000_0011,S005TL1.PP[3].inpPPSensor) ];
				N: [XIC(S005TL1VM1.I2.0) ,XIC(S005TL1VM1.I2.1) ]OTE(S005TL1.PP[3].PPAnySensor);
				RC: "************************************************************$N"
				    "Change Edit.Bit with required conditions for PP to be ON/OFF$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(S005TL1.PP[3].inpOnCondition);
				N: XIC(Edit.Bit)OTE(S005TL1.PP[3].inpOffCondition);
				RC: "************************************************************$N"
				    "Set Used/Installed Sensors$N"
				    "************************************************************$N"
				    "Change instruction to OTE if sensor used.$N"
				    "Change instruction to OTU if the sensor will not be used/installed";
				N: OTE(S005TL1.PP[4].inpPPSensorInst.0)OTE(S005TL1.PP[4].inpPPSensorInst.1)OTE(S005TL1.PP[4].inpPPSensorInst.2)OTU(S005TL1.PP[4].inpPPSensorInst.3)OTU(S005TL1.PP[4].inpPPSensorInst.4)OTU(S005TL1.PP[4].inpPPSensorInst.5)OTU(S005TL1.PP[4].inpPPSensorInst.6)OTU(S005TL1.PP[4].inpPPSensorInst.7);
				RC: "************************************************************$N"
				    "Add all Second load Switch Inputs$N"
				    "Model Gravity$N"
				    "************************************************************";
				N: [[XIC(S005TL1VM1.I2.2) OTE(S005TL1.PP[4].inpPPSensor.0) ,XIC(S005TL1VM1.I2.3) OTE(S005TL1.PP[4].inpPPSensor.1) ,XIC(S005TL1VM1.I2.4) OTE(S005TL1.PP[4].inpPPSensor.2) ] ,XIC(S005TL1.Int.DryCycle) XIC(S005TL1.PP[4].stsPPMem) MOV(2#0000_0111,S005TL1.PP[4].inpPPSensor) ];
				N: [XIC(S005TL1VM1.I2.2) ,XIC(S005TL1VM1.I2.3) ,XIC(S005TL1VM1.I2.4) ]OTE(S005TL1.PP[4].PPAnySensor);
				RC: "************************************************************$N"
				    "Change Edit.Bit with required conditions for PP to be ON/OFF$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(S005TL1.PP[4].inpOnCondition);
				N: XIC(Edit.Bit)OTE(S005TL1.PP[4].inpOffCondition);
				RC: "Model 2 Part Present AOIs$N"
				    "Lucid GRAVITY";
				N: PartPresent(S005TL1.PP[3],S005TL1.PP[3].inpPPSensor,S005TL1.PP[3].inpOnCondition,S005TL1.PP[3].inpOffCondition,S005TL1.Int.DryCycle,S005TL1.Int.PPActFltsEnbld)PartPresent(S005TL1.PP[4],S005TL1.PP[4].inpPPSensor,S005TL1.PP[4].inpOnCondition,S005TL1.PP[4].inpOffCondition,S005TL1.Int.DryCycle,S005TL1.Int.PPActFltsEnbld);
				RC: "************************************************************$N"
				    "Parts Present Fault$N"
				    "************************************************************";
				N: NOP();
				N: [XIC(S005TL1.PP[1].stsPPNotOK) ,XIC(S005TL1.PP[2].stsPPNotOK) ,XIC(S005TL1.PP[3].stsPPNotOK) ,XIC(S005TL1.PP[4].stsPPNotOK) ]OTE(S005TL1.Int.PPFault);
				RC: "*************************************************************$N"
				    "Use to avoid load parts during drycycle$N"
				    "**************************************************************";
				N: XIO(S005TL1.Int.PartsPresNo)OTE(S005TL1.Int.AnyPartPres);
		END_ROUTINE

		ROUTINE L00_Lights 
				RC: "************************************************************$N"
				    "Operator Stack Light$N"
				    "Logic$N"
				    "************************************************************";
				N: NOP();
				RC: "######################$N"
				    "Operator Clear To Enter$N"
				    "$N"
				    "GREEN Light$N"
				    "Steady - Clear To Enter$N"
				    "Flash - No Auto Or Lightscreen Fault$N"
				    "######################";
				N: XIC(sZ005_040.PowerEnbld)[XIC(S005TL1.Int.AutoMode) [[XIC(S005TL1.Oper.Load1Req) ,XIC(S005TL1.Oper.Load2Req) ,XIC(S005TL1.Oper.Load3Req) ,XIC(S005TL1.Oper.Load4Req) ,XIC(S005TL1.Oper.UnldReq) ] XIO(S005TL1.Oper.LtScrnFlt) ,XIC(S005TL1.Oper.LtScrnFlt) XIO(Status.FlasherHigh) ] ,XIO(S005TL1.Int.AutoMode) XIO(Status.FlasherHigh) ]OTE(S005TL1.Oper.ClrToEnter);
				RC: "######################$N"
				    "Operator Parts Loaded$N"
				    "$N"
				    "WHITE Light$N"
				    "Steady - All required parts loaded$N"
				    "Flash - Any Part Loaded, Not All$N"
				    "######################";
				N: XIC(sZ005_040.PowerEnbld)XIC(S005TL1.Int.AutoMode)XIO(S005TL1.Int.DryCycle)[[XIC(S005TL1.Int.Load1Comp) XIC(Edit.Bit) ,XIC(S005TL1.Int.Load2Comp) XIC(Edit.Bit) ,XIC(S005TL1.Int.Load3Comp) XIC(Edit.Bit) ,XIC(S005TL1.Int.Load4Comp) XIC(Edit.Bit) ] ,[XIC(S005TL1.Int.AnyPartPres1) XIO(S005TL1.Int.Load1Comp) ,XIC(S005TL1.Int.AnyPartPres2) XIO(S005TL1.Int.Load2Comp) ,XIC(S005TL1.Int.AnyPartPres3) XIO(S005TL1.Int.Load3Comp) ,XIC(S005TL1.Int.AnyPartPres4) XIO(S005TL1.Int.Load4Comp) ] XIC(Status.FlasherHigh) ]OTE(S005TL1.Oper.PartsLoaded);
				RC: "######################$N"
				    "Operator NOT Clear to Enter$N"
				    "$N"
				    "Red Light$N"
				    "Steady - Do not Enter$N"
				    "Flash - Station Not in Auto$N"
				    "######################";
				N: XIC(sZ005_040.PowerEnbld)[XIC(S005TL1.Int.AutoMode) XIO(S005TL1.Oper.ClrToEnter) ,XIO(S005TL1.Int.AutoMode) XIO(Status.FlasherHigh) ]OTE(S005TL1.Oper.NotClrToEnter);
				RC: "######################$N"
				    "Output Mapping$N"
				    "######################";
				N: NOP();
				N: XIC(S005TL1.Oper.ClrToEnter)OTE(S005TL1.Oper.SL.O.Segment.Segment_5.Green);
				N: XIC(S005TL1.Oper.PartsLoaded)OTE(S005TL1.Oper.SL.O.Segment.Segment_3.White);
				N: XIC(S005TL1.Oper.NotClrToEnter)OTE(S005TL1.Oper.SL.O.Segment.Segment_1.Red);
				N: XIC(S005TL1.Oper.ClrToEnter)[XIC(S005TL1.Oper.CycOverTime) OTE(S005TL1.Oper.SL.O.Buzzer.Continuous) ,XIC(S005TL1.Oper.CycNearOT) OTE(S005TL1.Oper.SL.O.Buzzer.Beep_1Hz) ];
				N: BMC_AOI_PROC_BNI0085(ZoneAOIs.OpSL[0],S005TL1IOL1.Port1,S005TL1.Oper.SL);
		END_ROUTINE

		ROUTINE P00_Station 
				RC: "###########################$N"
				    "Station$N"
				    "Standard Logic$N"
				    "$N"
				    "BiWCGlx Rev 1.0$N"
				    "###########################";
				N: NOP();
				RC: "########################################$N"
				    "Home Position$N"
				    "########################################";
				N: XIC(S005TL1.Act[1].Home.Comp)XIC(S005TL1.Act[2].Home.Comp)XIC(S005TL1.Act[3].Home.Comp)OTE(S005TL1.Int.AtHomePos);
				RC: "************************************************************$N"
				    "Station Part Present Summary$N"
				    "************************************************************$N"
				    "$N"
				    "OTU Bit if not used or required";
				N: NOP();
				N: XIC(S005TL1.PP[1].stsPPOff)XIC(S005TL1.PP[2].stsPPOff)XIC(S005TL1.PP[3].stsPPOff)XIC(S005TL1.PP[4].stsPPOff)OTE(S005TL1.Int.PartsPresNo);
				N: XIC(S005TL1.Int.PartsPresNo)XIC(S005TL1.SR.Int.NoPart)OTE(S005TL1.Int.Empty);
				N: [XIC(S005TL1.PP[1].stsPPOn) XIC(S005TL1.PP[2].stsPPOff) ,XIC(S005TL1.PP[3].stsPPOn) XIC(S005TL1.PP[4].stsPPOff) ]OTE(S005TL1.Int.AllPartsPres1);
				N: [XIC(S005TL1.PP[1].PPAnySensor) ,XIC(S005TL1.PP[3].PPAnySensor) ]OTE(S005TL1.Int.AnyPartPres1);
				N: [XIC(S005TL1.PP[1].stsPPOn) XIC(S005TL1.PP[2].stsPPOn) ,XIC(S005TL1.PP[3].stsPPOn) XIC(S005TL1.PP[4].stsPPOn) ]OTE(S005TL1.Int.AllPartsPres2);
				N: [XIC(S005TL1.PP[2].PPAnySensor) ,XIC(S005TL1.PP[4].PPAnySensor) ]OTE(S005TL1.Int.AnyPartPres2);
				N: OTU(S005TL1.Int.AllPartsPres3);
				N: OTU(S005TL1.Int.AnyPartPres3);
				N: [XIC(S005TL1.SR.Int.Model1) XIC(S005TL1.PP[1].stsPPOn) XIC(S005TL1.PP[2].stsPPOn) ,XIC(S005TL1.SR.Int.Model2) XIC(S005TL1.PP[3].stsPPOn) XIC(S005TL1.PP[4].stsPPOn) ]XIC(Edit.Bit)OTE(S005TL1.Int.AllPPandSR);
				N: XIC(S005RB02.Int.Sta1TaskComp)XIC(Edit.Bit)OTE(S005TL1.Int.RbtsTaskComp);
				RC: "************************************************************$N"
				    "Auto Mode Selected$N"
				    "************************************************************$N"
				    "";
				N: [XIO(S005TL1.Int.ManualModePB) XIO(S005TL1.Int.NoModePB) XIO(Z005_040.NoModePB) ,XIC(S005TL1.Int.AutoMode) ][XIC(S005TL1.Int.NoMode) [XIC(S005TL1.Int.AutoSelPB) ,XIC(Z005_040.GlobalAutoModeSelPB) ,XIC(S005TL1.Int.AutoModePB) ,XIC(Z005_040.GlobalAutoModePB) ] ,XIC(S005TL1.Int.AutoSel) ]XIC(S005TL1.Int.RbtsInAuto)XIC(S005TL1.Int.RbtsTeachOff)OTE(S005TL1.Int.AutoSel);
				RC: "************************************************************$N"
				    "Station Auto Mode$N"
				    "Interlocks$N"
				    "************************************************************";
				N: [XIC(Z005_040.AutoModeSetup.Sts_IntlkOK) OTE(S005TL1.Int.AutoModeSetup.Inp_Intlk00) ,XIC(S005TL1.Int.AutoSel) OTE(S005TL1.Int.AutoModeSetup.Inp_Intlk01) ,[XIO(S005TL1.Int.AutoModeStop) ,XIC(Edit.Debug) ] OTE(S005TL1.Int.AutoModeSetup.Inp_Intlk02) ,XIO(S005TL1.Int.ManualMode) OTE(S005TL1.Int.AutoModeSetup.Inp_Intlk03) ,XIC(S005TL1.Int.RbtsTeachOff) OTE(S005TL1.Int.AutoModeSetup.Inp_Intlk04) ,XIC(S005TL1.Int.RbtsInAuto) OTE(S005TL1.Int.AutoModeSetup.Inp_Intlk05) ,XIC(S005TL1.Int.AirOnOk) OTE(S005TL1.Int.AutoModeSetup.Inp_Intlk06) ,XIC(Edit.Bit) OTE(S005TL1.Int.AutoModeSetup.Inp_Intlk07) ,XIC(Edit.Bit) OTE(S005TL1.Int.AutoModeSetup.Inp_Intlk08) ,P_Intlk(S005TL1.Int.AutoModeSetup) ];
				RC: "************************************************************$N"
				    "Auto Mode $N"
				    "Running$N"
				    "************************************************************";
				N: XIC(S005TL1.Int.AutoModeSetup.Sts_IntlkOK)[[XIC(S005TL1.Int.AutoModePB) ,XIC(Z005_040.GlobalAutoModePB) ] ,XIC(S005TL1.Int.AutoMode) ][MOV(25,S005TL1.Int.AutoDlyTmr.PRE) TON(S005TL1.Int.AutoDlyTmr,?,?) ,XIC(S005TL1.Int.AutoDlyTmr.DN) OTE(S005TL1.Int.AutoMode) ];
				RC: "************************************************************$N"
				    "Auto Cycle Stop$N"
				    "************************************************************$N"
				    "";
				N: XIC(S005TL1.Int.AutoMode)[XIC(S005TL1.Int.NoModePB) ,XIC(Z005_040.AutoModeStopReq) ,XIC(S005TL1.Int.AutoModeStopReq) ]XIO(S005TL1.Int.AutoModeStop)OTE(S005TL1.Int.AutoModeStopReq);
				N: [XIC(S005RB01.I1.Pg_Paused) ,XIC(S005RB01.I1.RbtHeld) ,XIC(S005RB01.I1.RbtFaulted) ,XIC(S005RB01.I1.WaitingOnInput) ][XIC(S005RB02.I1.Pg_Paused) ,XIC(S005RB02.I1.RbtHeld) ,XIC(S005RB02.I1.RbtFaulted) ,XIC(S005RB02.I1.WaitingOnInput) ]OTE(S005TL1.Int.AutoModeStopEnable);
				N: XIC(S005TL1.Int.AutoMode)XIC(S005TL1.Int.AutoModeStopReq)XIC(S005TL1.Int.AutoModeStopEnable)OTE(S005TL1.Int.AutoModeStop);
				RC: "************************************************************$N"
				    "Manual Mode$N"
				    "************************************************************$N"
				    "";
				N: XIO(S005TL1.Int.NoModePB)XIO(Z005_040.NoModePB)XIO(S005TL1.Int.AutoSelPB)XIO(S005TL1.Int.AutoSel)[XIC(S005TL1.Int.NoMode) [XIC(S005TL1.Int.ManualModePB) ,XIC(Z005_040.ManualModePB) ] ,XIC(S005TL1.Int.ManualMode) ][XIC(S005RB01.Int.InTeach) ,XIC(Edit.Debug) ]OTE(S005TL1.Int.ManualMode);
				RC: "************************************************************$N"
				    "Dry Cycle$N"
				    "************************************************************$N"
				    "";
				N: XIC(Z005_040.DryCycle)OTE(S005TL1.Int.DryCycle);
				RC: "************************************************************$N"
				    "No Mode$N"
				    "************************************************************$N"
				    "";
				N: XIO(S005TL1.Int.AutoSel)XIO(S005TL1.Int.ManualMode)OTE(S005TL1.Int.NoMode);
				RC: "########################################$N"
				    "Load Setups$N"
				    "########################################";
				N: XIC(S005TL1.Int.AtHomePos)OTE(S005TL1.Int.LoadPos1);
				N: XIC(Edit.Bit)OTE(S005TL1.Int.LoadPos2);
				N: XIC(Edit.Bit)OTE(S005TL1.Int.LoadPos3);
				N: XIC(Edit.Bit)OTE(S005TL1.Int.LoadPos4);
				N: XIC(S005TL1.Int.AutoMode)[XIC(S005TL1.Int.LoadPos1) XIC(Edit.Bit) ,XIC(S005TL1.Int.LoadPos2) XIC(Edit.Bit) ,XIC(S005TL1.Int.LoadPos3) XIC(Edit.Bit) ,XIC(S005TL1.Int.LoadPos4) XIC(Edit.Bit) ]XIO(S005TL1.Int.TaskComp)XIO(S005TL1.Int.CycComp)XIC(S005Sfty.AllStaLtScrnOK)OTE(S005TL1.Int.ClrToLoad);
				N: XIC(Edit.Bit)OTE(S005TL1.Int.Load1Comp);
				N: XIC(Edit.Bit)OTE(S005TL1.Int.Load2Comp);
				N: XIC(Edit.Bit)OTE(S005TL1.Int.Load3Comp);
				N: XIC(Edit.Bit)OTE(S005TL1.Int.Load4Comp);
				N: XIC(Edit.Bit)OTE(S005TL1.Int.LoadComp);
				RC: "########################################$N"
				    "Work Positions$N"
				    "$N"
				    "10 Work Positions Available$N"
				    "########################################";
				N: XIC(S005TL1.Act[1].Work.Comp)XIC(S005TL1.Act[2].Work.Comp)XIC(S005TL1.Act[3].Work.Comp)OTE(S005TL1.Int.AtWorkPos1);
				N: XIC(Edit.Bit)OTE(S005TL1.Int.AtWorkPos2);
				N: XIC(Edit.Bit)OTE(S005TL1.Int.AtWorkPos3);
				RC: "########################################$N"
				    "Station Process Completes$N"
				    "$N"
				    "10 Process Completes Available$N"
				    "########################################";
				N: XIC(S005TL1.Int.RbtsTaskComp)XIC(Edit.Bit)OTE(S005TL1.Int.Proc1Comp);
				N: XIC(Edit.Bit)OTE(S005TL1.Int.Proc2Comp);
				N: XIC(Edit.Bit)OTE(S005TL1.Int.Proc3Comp);
				RC: "########################################$N"
				    "Station Tasks Complete$N"
				    "########################################";
				N: XIC(S005TL1.Int.CycStart)XIC(S005TL1.Int.Proc1Comp)XIC(S005TL1.Int.RbtsTaskComp)XIC(Edit.Bit)OTL(S005TL1.Int.TaskComp);
				N: [XIC(S005TL1.Int.UnldComp) ,XIC(S005TL1.Int.RstCycComp) ]OTU(S005TL1.Int.TaskComp);
				RC: "########################################$N"
				    "Unload Setups$N"
				    "########################################";
				N: XIC(S005TL1.Act[1].Home.Comp)XIC(S005TL1.Act[2].Home.Comp)XIC(S005TL1.Act[3].Work.Comp)OTE(S005TL1.Int.UnldPos1);
				N: XIC(Edit.Bit)OTE(S005TL1.Int.UnldPos2);
				N: XIC(Edit.Bit)OTE(S005TL1.Int.UnldPos3);
				N: [XIC(S005TL1.Int.TaskComp) ,XIC(S005TL1.Int.SetCycleCompPB) ]XIC(S005TL1.Int.UnldPos1)XIC(Edit.Bit)OTL(S005TL1.Int.CycComp);
				N: XIC(S005TL1.Int.RstCycComp)OTU(S005TL1.Int.UnldComp)OTU(S005TL1.Int.CycComp);
				N: XIC(S005TL1.Int.AutoMode)XIC(S005TL1.Int.AllPPandSR)XIC(S005TL1.Int.UnldPos1)XIC(S005TL1.Int.TaskComp)XIC(S005TL1.Int.CycComp)XIC(Edit.Bit)OTE(S005TL1.Int.ClrToUnld);
				N: XIC(S005TL1.Int.TaskComp)XIC(S005TL1.Int.CycComp)XIC(S005TL1.Int.Empty)XIC(Edit.Bit)OTL(S005TL1.Int.UnldComp);
				N: [XIC(S005TL1.Int.AutoMode) XIC(S005TL1.Int.Empty) ,XIC(S005TL1.Int.RstCycleCompPB) ][XIC(S005TL1.Int.AtHomePos) ,XIC(Edit.Bit) ]XIC(Edit.Bit)OTE(S005TL1.Int.RstCycComp);
				RC: "########################################$N"
				    "Cycle Start Logic$N"
				    "########################################$N"
				    "$N"
				    "To be detemined how cycle start will be handled. Different Process starts may be involved.";
				N: XIC(Edit.Debug)OTE(S005TL1.Int.CycStart);
				RC: "************************************************************$N"
				    "Station Cycle Time Logic$N"
				    "************************************************************";
				N: NOP();
				N: MOV(3600000,S005TL1.Int.TackTMR.PRE)RTO(S005TL1.Int.TackTMR,?,?);
				N: XIC(S005TL1.Int.AutoMode)XIC(S005RB02.Int.AutoMode)XIC(S005RB01.Int.ClearOfPick1)MOV(3600000,S005TL1.Int.IndexTMR.PRE)RTO(S005TL1.Int.IndexTMR,?,?);
				N: [XIC(S005TL1.Int.AutoMode) [XIC(S005TL1.Int.CycStart) XIO(S005TL1.Int.UnldComp) ,XIC(S005TL1.Int.TaskComp) XIO(S005TL1.Int.UnldPos1) XIC(Edit.Bit) ,XIC(S005TL1.Int.UnldComp) XIO(S005TL1.Int.CycComp) XIC(S005TL1.Int.PartsPresNo) ] ,XIC(S005TL1.Oper.CycTimeTmr.EN) ]XIO(S005TL1.Int.IndexTMR.TT)MOV(3600000,S005TL1.Int.CycTMR.PRE)RTO(S005TL1.Int.CycTMR,?,?);
				N: [XIC(S005TL1.Oper.CycTimeTmr.EN) ,XIC(S005TL1.Int.IndexTMR.EN) ,XIC(S005TL1.Int.CycTMR.EN) ]MOV(3600000,S005TL1.Int.ProcTMR.PRE)RTO(S005TL1.Int.ProcTMR,?,?);
				N: XIC(S005TL1.Int.UnldComp)[XIO(S005TL1.Int.CycCompONS.0) [MOV(S005TL1.Int.CycTMR.ACC,S005TL1.Int.CycTimeStore) ,RES(S005TL1.Int.CycTMR) ] ,OTL(S005TL1.Int.CycCompONS.0) ];
				N: XIC(S005TL1.Int.CycCompONS.0)XIO(S005TL1.Int.IndexTMR.EN)[XIO(S005TL1.Int.CycCompONS.1) [MOV(S005TL1.Int.TackTMR.ACC,S005TL1.Int.TackTimeStore) ,RES(S005TL1.Int.TackTMR) ,MOV(S005TL1.Int.IndexTMR.ACC,S005TL1.Int.IndexTimeStore) ,RES(S005TL1.Int.IndexTMR) ,MOV(S005TL1.Int.ProcTMR.ACC,S005TL1.Int.ProcTimeStore) ,RES(S005TL1.Int.ProcTMR) ] ,OTL(S005TL1.Int.CycCompONS.1) ];
				N: XIC(S005TL1.Int.CycStart)OTU(S005TL1.Int.CycCompONS.0)OTU(S005TL1.Int.CycCompONS.1);
				RC: "************************************************************$N"
				    "Station State$N"
				    "************************************************************";
				N: NOP();
				N: XIC(Edit.Bit)OTE(S005TL1.Int.Starved);
				N: XIC(Edit.Bit)OTE(S005TL1.Int.Blocked);
				RC: "************************************************************$N"
				    "Station Mode for HMI$N"
				    "$N"
				    "###REQUIRES UPDATE####$N"
				    "************************************************************";
				N: [MOV(0,S005TL1.Int.RunningMode) ,XIC(Status.AlwaysOff) XIC(Edit.Debug) MOV(1,S005TL1.Int.RunningMode) ,XIC(S005TL1.Int.HoldEndOfCycle) MOV(2,S005TL1.Int.RunningMode) ,XIC(S005TL1.Int.DryCycle) MOV(3,S005TL1.Int.RunningMode) ];
				RC: "************************************************************$N"
				    "Station Mode Status for HMI$N"
				    "$N"
				    "######REQUIRED UPDATE########$N"
				    "************************************************************";
				N: [XIO(HMI_FRM005.stsAnyFixtureOnFault) XIO(HMI_FRM005.stsAnyRobotOnFault) MOV(1,S005TL1.Int.RunningModeStatus) ,XIC(S005TL1.Int.Blocked) MOV(2,S005TL1.Int.RunningModeStatus) ,XIC(S005TL1.Int.Starved) MOV(3,S005TL1.Int.RunningModeStatus) ,[XIC(HMI_FRM005.stsAnyFixtureOnFault) ,XIC(HMI_FRM005.stsAnyRobotOnFault) ] MOV(0,S005TL1.Int.RunningModeStatus) ];
				RC: "************************************************************$N"
				    "Station Operation Mode for HMI$N"
				    "$N"
				    "#####REQUIRES UPDATE#####$N"
				    "************************************************************";
				N: [MOV(0,S005TL1.Int.OperationMode) ,XIC(S005TL1.Int.AutoSel) MOV(1,S005TL1.Int.OperationMode) ,XIC(S005TL1.Int.ManualMode) MOV(2,S005TL1.Int.OperationMode) ,XIC(S005TL1.Int.AutoMode) MOV(3,S005TL1.Int.OperationMode) ];
		END_ROUTINE

		ROUTINE P01_StationToSfty 
				RC: "************************************************************$N"
				    "Map States to Safety Tag$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S005TL1.Int.KnownPos)OTE(StdToSfty.S005KnownPos);
				N: XIC(Edit.Bit)[MOV(500,S005TL1.Int.ClrToUnlockDlyTmr.PRE) TON(S005TL1.Int.ClrToUnlockDlyTmr,?,?) ,XIC(S005TL1.Int.ClrToUnlockDlyTmr.DN) OTE(StdToSfty.S005ClrToUnlock) ];
				N: XIC(Edit.Bit)OTE(StdToSfty.S005OprSw);
		END_ROUTINE

		ROUTINE S00_HMISequence 
				RC: "############################$N"
				    "Station Sequence List$N"
				    "############################$N"
				    "$N"
				    "Map Station Sequence";
				N: NOP();
				RC: "############################$N"
				    "Robots Clear for Motion Indicator$N"
				    "############################";
				N: XIC(S005RB01.Int.ClearOfPick1)XIC(S005RB02.Int.ClearOfTool1)OTE(S005TL1.Seq.RbtsClr);
				RC: "$N"
				    "############################$N"
				    "Sequence of Operation$N"
				    "############################$N"
				    "$N"
				    "Operation = STRING    -    Indicates the Name of the operation on the HMI$N"
				    "WorkIndText / HomeIndText = STRING    -    Indicates the Text to Display for the Home Indicator and Work Indicator on the HMI$N"
				    "WorkPBText / HomePBText = STRING     -     Indicates the Text to Display on the Work and Home Push Buttons on the HMI  (If the string is empty, the buttons wont be shown on the HMI)$N"
				    "$N"
				    "WorkInd / HomeInd = DINT$N"
				    "1 - Solid on the HMI (Actual State)$N"
				    "2 - Blinking on the HMI (Required State)";
				N: NOP();
				RC: "Set the SeqMax to the number of sequence steps used on the scroll list";
				N: FLL(0,S005TL1.Seq.Operation[0],32)FLL(0,S005TL1.Seq.HomeInd[0],32)FLL(0,S005TL1.Seq.WorkInd[0],32);
				N: MOV('* S005TL1 *',S005TL1.Seq.Operation[0]);
				N: [XIC(S005TL1.SR.Int.Model1) ,XIC(S005TL1.SR.Int.Model2) ][MOV('Operator 1st Load',S005TL1.Seq.Operation[1]) MOV('IN CYCLE',S005TL1.Seq.HomeIndText[1]) MOV('COMPLETE',S005TL1.Seq.WorkIndText[1]) MOV('',S005TL1.Seq.HomePBText[1]) MOV('',S005TL1.Seq.WorkPBText[1]) ,XIC(S005TL1.Int.LoadPos1) XIO(S005TL1.Int.LoadComp) MOV(1,S005TL1.Seq.HomeInd[1]) ,[XIC(S005TL1.Int.LoadComp) MOV(1,S005TL1.Seq.WorkInd[1]) ,XIC(S005TL1.Int.LoadPos1) XIO(S005TL1.Int.LoadComp) MOV(2,S005TL1.Seq.WorkInd[1]) ] ];
				N: [XIC(S005TL1.SR.Int.Model1) ,XIC(S005TL1.SR.Int.Model2) ][MOV('Act[1] Clamp 1 Close',S005TL1.Seq.Operation[2]) MOV('OPENED',S005TL1.Seq.HomeIndText[2]) MOV('CLOSED',S005TL1.Seq.WorkIndText[2]) MOV('OPEN',S005TL1.Seq.HomePBText[2]) MOV('CLOSE',S005TL1.Seq.WorkPBText[2]) ,XIC(S005TL1.Int.LoadComp) XIC(S005TL1.Act[1].Home.Comp) XIO(S005TL1.Act[1].Work.Comp) MOV(1,S005TL1.Seq.HomeInd[2]) ,[XIC(S005TL1.Act[1].Work.Comp) MOV(1,S005TL1.Seq.WorkInd[2]) ,XIC(S005TL1.Int.LoadComp) XIO(S005TL1.Act[1].Work.Comp) MOV(2,S005TL1.Seq.WorkInd[2]) ] ];
				N: [XIC(S005TL1.SR.Int.Model1) ,XIC(S005TL1.SR.Int.Model2) ][MOV('Act[2] Clamp 2 Close',S005TL1.Seq.Operation[3]) MOV('OPENED',S005TL1.Seq.HomeIndText[3]) MOV('CLOSED',S005TL1.Seq.WorkIndText[3]) MOV('OPEN',S005TL1.Seq.HomePBText[3]) MOV('CLOSE',S005TL1.Seq.WorkPBText[3]) ,XIC(S005TL1.Act[1].Work.Comp) XIC(S005TL1.Act[2].Home.Comp) XIO(S005TL1.Act[2].Work.Comp) MOV(1,S005TL1.Seq.HomeInd[3]) ,[XIC(S005TL1.Act[2].Work.Comp) MOV(1,S005TL1.Seq.WorkInd[3]) ,XIC(S005TL1.Act[1].Work.Comp) XIO(S005TL1.Act[2].Work.Comp) MOV(2,S005TL1.Seq.WorkInd[3]) ] ];
				N: [XIC(S005TL1.SR.Int.Model1) ,XIC(S005TL1.SR.Int.Model2) ][MOV('Robot S005RB02 Seal 1',S005TL1.Seq.Operation[4]) MOV('IN CYCLE',S005TL1.Seq.HomeIndText[4]) MOV('COMPLETED',S005TL1.Seq.WorkIndText[4]) MOV('RESET COMPLETE',S005TL1.Seq.HomePBText[4]) MOV('SET COMPLETE',S005TL1.Seq.WorkPBText[4]) ,XIC(S005TL1.Int.AtWorkPos1) XIO(S005RB02.Int.TaskComp) MOV(1,S005TL1.Seq.HomeInd[4]) ,[XIC(S005RB02.Int.SealProc1Comp) MOV(1,S005TL1.Seq.WorkInd[4]) ,XIC(S005TL1.Int.AtWorkPos1) XIO(S005RB02.Int.SealProc1Comp) MOV(2,S005TL1.Seq.WorkInd[4]) ] ];
				N: [XIC(S005TL1.SR.Int.Model1) ,XIC(S005TL1.SR.Int.Model2) ][MOV('Act[2] Clamp 2 Open',S005TL1.Seq.Operation[5]) MOV('OPENED',S005TL1.Seq.HomeIndText[5]) MOV('CLOSED',S005TL1.Seq.WorkIndText[5]) MOV('OPEN',S005TL1.Seq.HomePBText[5]) MOV('CLOSE',S005TL1.Seq.WorkPBText[5]) ,[XIC(S005TL1.Act[2].Home.Comp) MOV(1,S005TL1.Seq.HomeInd[5]) ,XIC(S005RB02.Int.TaskComp) XIO(S005TL1.Act[2].Home.Comp) MOV(2,S005TL1.Seq.HomeInd[5]) ] ,XIC(S005RB02.Int.TaskComp) XIC(S005TL1.Act[2].Work.Comp) XIO(S005TL1.Act[2].Home.Comp) MOV(1,S005TL1.Seq.WorkInd[5]) ];
				N: [XIC(S005TL1.SR.Int.Model1) ,XIC(S005TL1.SR.Int.Model2) ][MOV('Act[1] Clamp 1 Open',S005TL1.Seq.Operation[6]) MOV('OPENED',S005TL1.Seq.HomeIndText[6]) MOV('CLOSED',S005TL1.Seq.WorkIndText[6]) MOV('OPEN',S005TL1.Seq.HomePBText[6]) MOV('CLOSE',S005TL1.Seq.WorkPBText[6]) ,[XIC(S005TL1.Act[1].Home.Comp) MOV(1,S005TL1.Seq.HomeInd[6]) ,XIC(S005RB02.Int.TaskComp) XIC(S005TL1.Act[2].Home.Comp) XIO(S005TL1.Act[1].Home.Comp) MOV(2,S005TL1.Seq.HomeInd[6]) ] ,XIC(S005RB02.Int.TaskComp) XIC(S005TL1.Act[2].Home.Comp) XIC(S005TL1.Act[1].Work.Comp) XIO(S005TL1.Act[1].Home.Comp) MOV(1,S005TL1.Seq.WorkInd[6]) ];
				N: [XIC(S005TL1.SR.Int.Model1) ,XIC(S005TL1.SR.Int.Model2) ][MOV('Act[3] Pin 1 Return',S005TL1.Seq.Operation[7]) MOV('RETURNED',S005TL1.Seq.HomeIndText[7]) MOV('ADVANCED',S005TL1.Seq.WorkIndText[7]) MOV('RETURN',S005TL1.Seq.HomePBText[7]) MOV('ADVANCE',S005TL1.Seq.WorkPBText[7]) ,[XIC(S005TL1.Act[3].Home.Comp) MOV(1,S005TL1.Seq.HomeInd[7]) ,XIC(S005RB02.Int.TaskComp) XIC(S005TL1.Act[1].Home.Comp) XIO(S005TL1.Act[3].Home.Comp) MOV(2,S005TL1.Seq.HomeInd[7]) ] ,XIC(S005RB02.Int.TaskComp) XIC(S005TL1.Act[1].Home.Comp) XIO(S005TL1.Act[3].Work.Comp) XIO(S005TL1.Act[3].Home.Comp) MOV(1,S005TL1.Seq.WorkInd[7]) ];
				N: [XIC(S005TL1.SR.Int.Model1) ,XIC(S005TL1.SR.Int.Model2) ][MOV('Robot S005RB01 Pick',S005TL1.Seq.Operation[8]) MOV('IN CYCLE',S005TL1.Seq.HomeIndText[8]) MOV('COMPLETED',S005TL1.Seq.WorkIndText[8]) MOV('RESET COMPLETE',S005TL1.Seq.HomePBText[8]) MOV('SET COMPLETE',S005TL1.Seq.WorkPBText[8]) ,XIC(S005TL1.Act[3].Home.Comp) XIO(S005RB01.Int.TaskComp) MOV(1,S005TL1.Seq.HomeInd[8]) ,[XIC(S005RB01.Int.TaskComp) MOV(1,S005TL1.Seq.WorkInd[8]) ,XIC(S005RB02.Int.TaskComp) XIC(S005TL1.Act[3].Home.Comp) XIO(S005RB01.Int.TaskComp) MOV(2,S005TL1.Seq.WorkInd[8]) ] ];
				N: [XIC(S005TL1.SR.Int.Model1) ,XIC(S005TL1.SR.Int.Model2) ][MOV('Act[3] Pin 1 Advance',S005TL1.Seq.Operation[9]) MOV('RETURNED',S005TL1.Seq.HomeIndText[9]) MOV('ADVANCED',S005TL1.Seq.WorkIndText[9]) MOV('RETURN',S005TL1.Seq.HomePBText[9]) MOV('ADVANCE',S005TL1.Seq.WorkPBText[9]) ,XIC(S005TL1.Act[3].Home.Comp) XIC(S005RB02.Int.TaskComp) XIO(S005TL1.Act[3].Work.Comp) MOV(1,S005TL1.Seq.HomeInd[9]) ,[XIC(S005TL1.Act[3].Work.Comp) MOV(1,S005TL1.Seq.WorkInd[9]) ,XIC(S005TL1.Act[3].Home.Comp) XIC(S005RB02.Int.TaskComp) XIO(S005TL1.Act[2].Work.Comp) MOV(2,S005TL1.Seq.WorkInd[9]) ] ];
				N: XIC(S005TL1.Int.AutoMode)[XIC(S005TL1.SR.Int.Model1) MOV(1,S005TL1.Seq.Scrl.ModelReg) ,XIC(S005TL1.SR.Int.Model2) MOV(1,S005TL1.Seq.Scrl.ModelReg) ];
				N: HMI_SeqScrollList(S005TL1.Seq.Scrl,10,S005TL1.Int.AutoMode,S005TL1.Int.ManualMode,2);
		END_ROUTINE

		ROUTINE S01_HMIProcComp 
				RC: "############################$N"
				    "Station Process Complete$N"
				    "HMI Mapping$N"
				    "############################$N"
				    "$N"
				    "Define the process complete indicators for HMI display";
				N: NOP();
				RC: "############################$N"
				    "Delete Any OTU Coil Used$N"
				    "############################";
				N: OTU(S005TL1.Int.HMIProcComp[2].Vis)OTU(S005TL1.Int.HMIProcComp[3].Vis)OTU(S005TL1.Int.HMIProcComp[4].Vis)OTU(S005TL1.Int.HMIProcComp[5].Vis)OTU(S005TL1.Int.HMIProcComp[6].Vis)OTU(S005TL1.Int.HMIProcComp[7].Vis)OTU(S005TL1.Int.HMIProcComp[8].Vis)OTU(S005TL1.Int.HMIProcComp[9].Vis);
				RC: "############################$N"
				    "Map HMI Tags$N"
				    "############################$N"
				    "$N"
				    "1. Replace the String for the required Process Text$N"
				    "2. Add the indicator controller bit. This can be any station/robot process, task complete or cycle complete.$N"
				    "3. Add the Coil that the Set PB will be controlling. This coil should match the controlled Complete.$N"
				    "4. Add the Coil that the Reset PB will be controlling. This coil should match the controlled Complete.$N"
				    "$N"
				    "Order shall be maintained.HMI to display completes in order from 0 to 9 in stations and from 0-19 in robots.";
				N: [OTE(S005TL1.Int.HMIProcComp[0].Vis) MOV('S005TL1 Cycle Complete',S005TL1.Int.HMIProcComp[0].Name) ,XIC(S005TL1.Int.TaskComp) OTE(S005TL1.Int.HMIProcComp[0].Ind) ,XIC(S005TL1.Int.HMIProcComp[0].SetPB) OTE(S005TL1.Int.SetCycleCompPB) ,XIC(S005TL1.Int.HMIProcComp[0].RstPB) OTE(S005TL1.Int.RstCycleCompPB) ];
				N: [OTE(S005TL1.Int.HMIProcComp[1].Vis) MOV('S005TL1 Test Complete',S005TL1.Int.HMIProcComp[1].Name) ,XIC(S005TL1.Int.Proc1Comp) OTE(S005TL1.Int.HMIProcComp[1].Ind) ,XIC(S005TL1.Int.HMIProcComp[0].SetPB) OTE(S005TL1.Int.SetProc1Comp) ,XIC(S005TL1.Int.HMIProcComp[0].RstPB) OTE(S005TL1.Int.RstProc1Comp) ];
		END_ROUTINE

		ROUTINE Y00_Alarms_L1 (Description := "Machine Fault Alarm Messages")
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L1$N"
				    "Machine Faults$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "Module Communication Faults$N"
				    "#######################$N"
				    "$N"
				    "Add the ENet.CommOK signal of the First upstream Ethernet Device If Daisy Chain.$N"
				    "If the First Upstream Ethernet Device is a Switch, TBD.$N"
				    "$N"
				    "-------------------------------------------$N"
				    "Sx.L1[1].0 - SxL1[1].31$N"
				    "Up to 32 Alarms$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(Edit.Bit) XIO(S005TL1SIO1.ENet.CommOK) XIO(S005TL1SIO1.ENet.Inhibited) OTE(S1.L1[1].0) ,XIC(S005TL1SIO1.ENet.CommOK) XIO(S005TL1SIO2.ENet.CommOK) XIO(S005TL1SIO2.ENet.Inhibited) OTE(S1.L1[1].1) ,XIC(S005TL1SIO2.ENet.CommOK) XIO(S005TL1MIO1.ENet.CommOK) XIO(S005TL1MIO1.ENet.Inhibited) OTE(S1.L1[1].2) ,XIC(S005TL1MIO1.ENet.CommOK) XIO(S005TL1VM1.ENet.CommOK) XIO(S005TL1VM1.ENet.Inhibited) OTE(S1.L1[1].3) ,XIC(Edit.Bit) XIO(S005RB01.ENet.CommOK) XIO(S005RB01.ENet.Inhibited) OTE(S1.L1[1].10) ,XIC(Edit.Bit) XIO(S005RB02.ENet.CommOK) XIO(S005RB02.ENet.Inhibited) OTE(S1.L1[1].11) ];
				N: [XIO(S005TL1SIO1:I.ConnectionFaulted) [XIO(S005TL1SIO1:I.RunMode) ,XIO(S005Sfty.Mod1.InputStatus) ] OTE(S1.L1[1].21) ,XIO(S005TL1SIO2:I.ConnectionFaulted) [XIO(S005TL1SIO2:I.RunMode) ,XIO(S005Sfty.Mod2.InputStatus) ] OTE(S1.L1[1].22) ];
				RC: "#######################$N"
				    "Safety Instruction Faults$N"
				    "$N"
				    "E-Stop$N"
				    "Oper Light Screens And Scanners$N"
				    "Safety Position Devices$N"
				    "InterCell Safety Devices$N"
				    "#######################$N"
				    "$N"
				    "-------------------------------------------$N"
				    "Sx.L1[2].0 - SxL1[3].31$N"
				    "Up to 64 Alarms$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(S005Sfty.E1.Estop.FP) OTE(S1.L1[2].0) ,XIC(S005Sfty.E2.Estop.FP) OTE(S1.L1[2].1) ,XIC(S005Sfty.E3.Estop.FP) OTE(S1.L1[2].2) ];
				N: [XIC(S005Sfty.OperLS.LC1.FP) OTE(S1.L1[2].10) ,XIC(S005Sfty.OperLS.LC2.FP) OTE(S1.L1[2].11) ,XIC(S005Sfty.OperLS.LC3.FP) OTE(S1.L1[2].12) ];
				N: [XIC(S005Sfty.OperLS.SCN1_1.FP) OTE(S1.L1[2].13) ,XIC(S005Sfty.OperLS.SCN1_2.FP) OTE(S1.L1[2].14) ,XIC(S005Sfty.OperLS.SCN2_1.FP) OTE(S1.L1[2].15) ,XIC(S005Sfty.OperLS.SCN2_2.FP) OTE(S1.L1[2].16) ];
				N: [XIC(S005Sfty.SftyPosDev.SPD1.FP) OTE(S1.L1[3].0) ,XIC(S005Sfty.SftyPosDev.SPD2.FP) OTE(S1.L1[3].1) ,XIC(S005Sfty.SftyPosDev.SPD3.FP) OTE(S1.L1[3].2) ,XIC(S005Sfty.SftyPosDev.SPD4.FP) OTE(S1.L1[3].3) ];
				N: [XIC(S005Sfty.IntSftyDevice.LC1.FP) OTE(S1.L1[2].20) ,XIC(S005Sfty.IntSftyDevice.LC2.FP) OTE(S1.L1[2].21) ,XIC(S005Sfty.IntSftyDevice.LC3.FP) OTE(S1.L1[2].22) ];
				N: [XIC(S005Sfty.IntSftyDevice.SCN1_1.FP) OTE(S1.L1[2].23) ,XIC(S005Sfty.IntSftyDevice.SCN1_2.FP) OTE(S1.L1[2].24) ,XIC(S005Sfty.IntSftyDevice.SCN2_1.FP) OTE(S1.L1[2].25) ,XIC(S005Sfty.IntSftyDevice.SCN2_2.FP) OTE(S1.L1[2].26) ];
				RC: "#######################$N"
				    "Part Present Faults$N"
				    "#######################$N"
				    "$N"
				    "-------------------------------------------$N"
				    "Sx.L1[10].0 - SxL1[12].31$N"
				    "Up to 96 Alarms$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(S005TL1.Int.PPActFltsEnbld)[XIC(S005TL1.PP[1].stsNotONFault) [XIO(S005TL1.PP[1].inpPPSensor.0) OTE(S1.L1[10].0) ,XIO(S005TL1.PP[1].inpPPSensor.1) OTE(S1.L1[10].2) ] ,XIC(S005TL1.PP[1].stsStillONFault) [XIC(S005TL1.PP[1].inpPPSensor.0) OTE(S1.L1[10].1) ,XIC(S005TL1.PP[1].inpPPSensor.1) OTE(S1.L1[10].3) ] ];
				N: XIC(S005TL1.Int.PPActFltsEnbld)[XIC(S005TL1.PP[2].stsNotONFault) [XIO(S005TL1.PP[2].inpPPSensor.0) OTE(S1.L1[10].4) ,XIO(S005TL1.PP[2].inpPPSensor.1) OTE(S1.L1[10].6) ,XIO(S005TL1.PP[2].inpPPSensor.2) OTE(S1.L1[10].8) ] ,XIC(S005TL1.PP[2].stsStillONFault) [XIC(S005TL1.PP[2].inpPPSensor.0) OTE(S1.L1[10].5) ,XIC(S005TL1.PP[2].inpPPSensor.1) OTE(S1.L1[10].7) ,XIC(S005TL1.PP[2].inpPPSensor.2) OTE(S1.L1[10].9) ] ];
				N: XIC(S005TL1.Int.PPActFltsEnbld)[XIC(S005TL1.PP[3].stsNotONFault) [XIO(S005TL1.PP[3].inpPPSensor.0) OTE(S1.L1[10].10) ,XIO(S005TL1.PP[3].inpPPSensor.1) OTE(S1.L1[10].12) ] ,XIC(S005TL1.PP[3].stsStillONFault) [XIC(S005TL1.PP[3].inpPPSensor.0) OTE(S1.L1[10].11) ,XIC(S005TL1.PP[3].inpPPSensor.1) OTE(S1.L1[10].13) ] ];
				N: XIC(S005TL1.Int.PPActFltsEnbld)[XIC(S005TL1.PP[4].stsNotONFault) [XIO(S005TL1.PP[4].inpPPSensor.0) OTE(S1.L1[10].14) ,XIO(S005TL1.PP[4].inpPPSensor.1) OTE(S1.L1[10].16) ,XIO(S005TL1.PP[4].inpPPSensor.2) OTE(S1.L1[10].18) ] ,XIC(S005TL1.PP[4].stsStillONFault) [XIC(S005TL1.PP[4].inpPPSensor.0) OTE(S1.L1[10].15) ,XIC(S005TL1.PP[4].inpPPSensor.1) OTE(S1.L1[10].17) ,XIC(S005TL1.PP[4].inpPPSensor.2) OTE(S1.L1[10].19) ] ];
				RC: "#######################$N"
				    "Actuator Faults$N"
				    "#######################$N"
				    "$N"
				    "-------------------------------------------$N"
				    "Sx.L1[14].0 - SxL1[21].31$N"
				    "Up to 256 Alarms$N"
				    "$N"
				    "";
				N: NOP();
				N: [XIC(S005TL1.Act[1].Work.VlvFlt) OTE(S1.L1[15].0) ,XIC(S005TL1.Act[1].Home.VlvFlt) OTE(S1.L1[15].1) ];
				N: XIC(S005TL1.Act[1].Work.MtnFlt)XIO(S005TL1.Act[1].Work.VlvFlt)[[XIC(S005TL1.Act[1].Installed.0) XIO(S005TL1.Act[1].Work.Pxs.0) OTE(S1.L1[15].2) ,XIC(S005TL1.Act[1].Work.Pxs.0) XIC(S005TL1.Act[1].Home.Pxs.0) OTE(S1.L1[15].4) ] ,[XIC(S005TL1.Act[1].Installed.1) XIO(S005TL1.Act[1].Work.Pxs.1) OTE(S1.L1[15].6) ,XIC(S005TL1.Act[1].Work.Pxs.1) XIC(S005TL1.Act[1].Home.Pxs.1) OTE(S1.L1[15].8) ] ,[XIC(S005TL1.Act[1].Installed.2) XIO(S005TL1.Act[1].Work.Pxs.2) OTE(S1.L1[15].10) ,XIC(S005TL1.Act[1].Work.Pxs.2) XIC(S005TL1.Act[1].Home.Pxs.2) OTE(S1.L1[15].12) ] ];
				N: XIC(S005TL1.Act[1].Home.MtnFlt)XIO(S005TL1.Act[1].Home.VlvFlt)[[XIC(S005TL1.Act[1].Installed.0) XIO(S005TL1.Act[1].Home.Pxs.0) OTE(S1.L1[15].3) ,XIC(S005TL1.Act[1].Home.Pxs.0) XIC(S005TL1.Act[1].Work.Pxs.0) OTE(S1.L1[15].5) ] ,[XIC(S005TL1.Act[1].Installed.1) XIO(S005TL1.Act[1].Home.Pxs.1) OTE(S1.L1[15].7) ,XIC(S005TL1.Act[1].Home.Pxs.1) XIC(S005TL1.Act[1].Work.Pxs.1) OTE(S1.L1[15].9) ] ,[XIC(S005TL1.Act[1].Installed.2) XIO(S005TL1.Act[1].Home.Pxs.2) OTE(S1.L1[15].11) ,XIC(S005TL1.Act[1].Home.Pxs.2) XIC(S005TL1.Act[1].Work.Pxs.2) OTE(S1.L1[15].13) ] ];
				N: [XIC(S005TL1.Act[2].Work.VlvFlt) OTE(S1.L1[15].16) ,XIC(S005TL1.Act[2].Home.VlvFlt) OTE(S1.L1[15].17) ];
				N: XIC(S005TL1.Act[2].Work.MtnFlt)XIO(S005TL1.Act[2].Work.VlvFlt)[[XIC(S005TL1.Act[2].Installed.0) XIO(S005TL1.Act[2].Work.Pxs.0) OTE(S1.L1[15].18) ,XIC(S005TL1.Act[2].Work.Pxs.0) XIC(S005TL1.Act[2].Home.Pxs.0) OTE(S1.L1[15].20) ] ,[XIC(S005TL1.Act[2].Installed.1) XIO(S005TL1.Act[2].Work.Pxs.1) OTE(S1.L1[15].22) ,XIC(S005TL1.Act[2].Work.Pxs.1) XIC(S005TL1.Act[2].Home.Pxs.1) OTE(S1.L1[15].24) ] ,[XIC(S005TL1.Act[2].Installed.2) XIO(S005TL1.Act[2].Work.Pxs.2) OTE(S1.L1[15].26) ,XIC(S005TL1.Act[2].Work.Pxs.2) XIC(S005TL1.Act[2].Home.Pxs.2) OTE(S1.L1[15].28) ] ];
				N: XIC(S005TL1.Act[2].Home.MtnFlt)XIO(S005TL1.Act[2].Home.VlvFlt)[[XIC(S005TL1.Act[2].Installed.0) XIO(S005TL1.Act[2].Home.Pxs.0) OTE(S1.L1[15].19) ,XIC(S005TL1.Act[2].Home.Pxs.0) XIC(S005TL1.Act[2].Work.Pxs.0) OTE(S1.L1[15].21) ] ,[XIC(S005TL1.Act[2].Installed.1) XIO(S005TL1.Act[2].Home.Pxs.1) OTE(S1.L1[15].23) ,XIC(S005TL1.Act[2].Home.Pxs.1) XIC(S005TL1.Act[2].Work.Pxs.1) OTE(S1.L1[15].25) ] ,[XIC(S005TL1.Act[2].Installed.2) XIO(S005TL1.Act[2].Home.Pxs.2) OTE(S1.L1[15].27) ,XIC(S005TL1.Act[2].Home.Pxs.2) XIC(S005TL1.Act[2].Work.Pxs.2) OTE(S1.L1[15].29) ] ];
				N: [XIC(S005TL1.Act[3].Work.VlvFlt) OTE(S1.L1[16].0) ,XIC(S005TL1.Act[3].Home.VlvFlt) OTE(S1.L1[16].1) ];
				N: XIC(S005TL1.Act[3].Work.MtnFlt)XIO(S005TL1.Act[3].Work.VlvFlt)[[XIC(S005TL1.Act[3].Installed.0) XIO(S005TL1.Act[3].Work.Pxs.0) OTE(S1.L1[16].2) ,XIC(S005TL1.Act[3].Work.Pxs.0) XIC(S005TL1.Act[3].Home.Pxs.0) OTE(S1.L1[16].4) ] ,[XIC(S005TL1.Act[3].Installed.1) XIO(S005TL1.Act[3].Work.Pxs.1) OTE(S1.L1[16].6) ,XIC(S005TL1.Act[3].Work.Pxs.1) XIC(S005TL1.Act[3].Home.Pxs.1) OTE(S1.L1[16].8) ] ];
				N: XIC(S005TL1.Act[3].Home.MtnFlt)XIO(S005TL1.Act[3].Home.VlvFlt)[[XIC(S005TL1.Act[3].Installed.0) XIO(S005TL1.Act[3].Home.Pxs.0) OTE(S1.L1[16].3) ,XIC(S005TL1.Act[3].Home.Pxs.0) XIC(S005TL1.Act[3].Work.Pxs.0) OTE(S1.L1[16].5) ] ,[XIC(S005TL1.Act[3].Installed.1) XIO(S005TL1.Act[3].Home.Pxs.1) OTE(S1.L1[16].7) ,XIC(S005TL1.Act[3].Home.Pxs.1) XIC(S005TL1.Act[3].Work.Pxs.1) OTE(S1.L1[16].9) ] ];
				N: [XIC(S005TL1.Act[4].Work.VlvFlt) OTE(S1.L1[16].12) ,XIC(S005TL1.Act[4].Home.VlvFlt) OTE(S1.L1[16].13) ];
				N: XIC(S005TL1.Act[4].Work.MtnFlt)XIO(S005TL1.Act[4].Work.VlvFlt)[[XIC(S005TL1.Act[4].Installed.0) XIO(S005TL1.Act[4].Work.Pxs.0) OTE(S1.L1[16].14) ,XIC(S005TL1.Act[4].Work.Pxs.0) XIC(S005TL1.Act[4].Home.Pxs.0) OTE(S1.L1[16].16) ] ,[XIC(S005TL1.Act[4].Installed.1) XIO(S005TL1.Act[4].Work.Pxs.1) OTE(S1.L1[16].18) ,XIC(S005TL1.Act[4].Work.Pxs.1) XIC(S005TL1.Act[4].Home.Pxs.1) OTE(S1.L1[16].20) ] ];
				N: XIC(S005TL1.Act[4].Home.MtnFlt)XIO(S005TL1.Act[4].Home.VlvFlt)[[XIC(S005TL1.Act[4].Installed.0) XIO(S005TL1.Act[4].Home.Pxs.0) OTE(S1.L1[16].15) ,XIC(S005TL1.Act[4].Home.Pxs.0) XIC(S005TL1.Act[4].Work.Pxs.0) OTE(S1.L1[16].17) ] ,[XIC(S005TL1.Act[4].Installed.1) XIO(S005TL1.Act[4].Home.Pxs.1) OTE(S1.L1[16].19) ,XIC(S005TL1.Act[4].Home.Pxs.1) XIC(S005TL1.Act[4].Work.Pxs.1) OTE(S1.L1[16].21) ] ];
				RC: "#######################$N"
				    "Shift Register Data Mismatch Fault$N"
				    "#######################$N"
				    "$N"
				    "-------------------------------------------$N"
				    "Sx.L1[65].0 - SxL1[65].31$N"
				    "Up to 32 Alarms$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(S005TL1.Int.AutoMode)XIO(S005TL1.Int.DryCycle)[XIC(S005TL1.Int.AllPartsPres1) XIC(S005TL1.SR.Int.NoPart) ,XIC(S005TL1.Int.PartsPresNo) XIO(S005TL1.SR.Int.NoPart) ][MOV(5000,S005TL1.Int.FltDelayTmr[0].PRE) TON(S005TL1.Int.FltDelayTmr[0],?,?) ,XIC(S005TL1.Int.FltDelayTmr[0].DN) OTE(S1.L1[65].0) ];
		END_ROUTINE

		ROUTINE Y01_Alarms_L2 (Description := "Manual Intervention Alarm Messages")
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L2$N"
				    "Manual Interventions$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "Inhibited Modules$N"
				    "#######################";
				N: NOP();
				N: [XIC(S005RB01.ENet.Inhibited) OTE(S1.L2[2].0) ,XIC(S005RB02.ENet.Inhibited) OTE(S1.L2[2].1) ,XIC(S005TL1MIO1.ENet.Inhibited) OTE(S1.L2[2].2) ,XIC(S005TL1SIO1.ENet.Inhibited) OTE(S1.L2[2].3) ,XIC(S005TL1SIO2.ENet.Inhibited) OTE(S1.L2[2].4) ,XIC(S005TL1VM1.ENet.Inhibited) OTE(S1.L2[2].5) ];
				RC: "#######################$N"
				    "E-Stop Activated$N"
				    "#######################";
				N: NOP();
				N: XIC(S005Sfty.Mod1.RunMode)XIO(S005Sfty.E1.EstpChnA)XIO(S005Sfty.E1.EstpChnB)OTE(S1.L2[3].0);
				N: XIC(S005Sfty.Mod1.RunMode)XIO(S005Sfty.E2.EstpChnA)XIO(S005Sfty.E2.EstpChnB)OTE(S1.L2[3].1);
				N: XIC(S005Sfty.Mod2.RunMode)XIO(S005Sfty.E3.EstpChnA)XIO(S005Sfty.E3.EstpChnB)OTE(S1.L2[3].2);
				RC: "#######################$N"
				    "Station Light Screen Faulted$N"
				    "#######################";
				N: NOP();
				N: XIC(S005TL1.Int.AutoMode)XIC(S005TL1.Oper.LtScrnFlt)OTE(S1.L2[9].0);
				RC: "#######################$N"
				    "Station No Air$N"
				    "#######################";
				N: NOP();
				N: XIC(S005TL1.Int.AllModCommOk)XIO(S005TL1.Int.AirOnOk)OTE(S1.L2[10].0);
		END_ROUTINE

		ROUTINE Y02_Alarms_L3 (Description := "Warning Alarm Messages")
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L3$N"
				    "Warnings$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "RESERVED$N"
				    "#######################";
				N: NOP();
				N: XIC(S005TL1.Int.AutoMode)[XIC(S005TL1.Int.OtCyc) XIO(S005TL1.Int.CycComp) ,XIC(S005TL1.Int.OtTotal) ]OTE(S1.L3[10].0);
				N: XIC(S005TL1.Int.AutoMode)XIC(S005TL1.Oper.CycOverTime)OTE(S1.L3[10].1);
				N: XIC(S005TL1.Int.AutoModeSetup.Sts_IntlkOK)XIO(S005TL1.Int.AutoMode)XIC(S005TL1.Int.RbtsInAuto)OTE(S1.L3[5].0);
		END_ROUTINE

		ROUTINE Z00_MapOutputs 
				RC: "************************************************************$N"
				    "Map Devices Outputs$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S005TL1.Act[1].Work.Out)XIO(S005TL1.Act[1].Home.Out)OTE(S005TL1VM1.O.0);
				N: XIC(S005TL1.Act[1].Home.Out)XIO(S005TL1.Act[1].Work.Out)OTE(S005TL1VM1.O.1);
				N: XIC(S005TL1.Act[2].Work.Out)XIO(S005TL1.Act[2].Home.Out)OTE(S005TL1VM1.O.2);
				N: XIC(S005TL1.Act[2].Home.Out)XIO(S005TL1.Act[2].Work.Out)OTE(S005TL1VM1.O.3);
				N: XIC(S005TL1.Act[3].Work.Out)XIO(S005TL1.Act[3].Home.Out)OTE(S005TL1VM1.O.4);
				N: XIC(S005TL1.Act[3].Home.Out)XIO(S005TL1.Act[3].Work.Out)OTE(S005TL1VM1.O.5);
				N: [XIO(S005TL1VM1.ENet.CommOK) [CLR(S005TL1VM1.O) ,FLL(0,S005TL1VM1:O.Data[0],2) ] ,XIC(S005TL1VM1.ENet.CommOK) COP(S005TL1VM1.O,S005TL1VM1:O.Data[0],2) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S005TL1Sfty (Class := Safety,
	                     MAIN := "s_A00_Main",
	                     MODE := 0,
	                     DisableFlag := 0,
	                     UseAsFolder := 0)
		TAG
			sR01AOI : RobotSftyAOI (Usage := Public) := [131,[0,[0,0,0],[0,0,0],0,[0,0,0,0,0,0,0,0,0],0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0],0,0,0]];
			sR02AOI : RobotSftyAOI  := [131,[0,[0,0,0],[0,0,0],0,[0,0,0,0,0,0,0,0,0],0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0],0,0,0]];
		END_TAG

		ROUTINE s_A00_Main 
				N: JSR(s_B00_ModStatus,0);
				N: JSR(s_D00_Estop,0);
				N: JSR(s_D01_LC,0);
				N: JSR(s_D02_OPR,0);
				N: JSR(s_D03_SPD,0);
				N: JSR(s_D04_ICSD1,0);
				N: JSR(s_E00_RB01,0);
				N: JSR(s_E00_RB02,0);
				N: JSR(s_E01_TL1,0);
				N: JSR(s_Z00_Summary,0);
		END_ROUTINE

		ROUTINE s_B00_ModStatus (Description := "Safety Module IO Status")
				RC: "************************************************************$N"
				    "FRM007 Module Status$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Module 1 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: XIC(S005TL1SIO1:I.RunMode)OTE(S005Sfty.Mod1.RunMode);
				N: XIC(S005TL1SIO1:I.Pt00InputStatus)XIC(S005TL1SIO1:I.Pt01InputStatus)XIC(S005TL1SIO1:I.Pt02InputStatus)XIC(S005TL1SIO1:I.Pt03InputStatus)XIC(S005TL1SIO1:I.Pt04InputStatus)XIC(S005TL1SIO1:I.Pt05InputStatus)XIC(S005TL1SIO1:I.Pt06InputStatus)XIC(S005TL1SIO1:I.Pt07InputStatus)XIC(S005TL1SIO1:I.Pt08InputStatus)XIC(S005TL1SIO1:I.Pt09InputStatus)XIC(S005TL1SIO1:I.Pt10InputStatus)XIC(S005TL1SIO1:I.Pt11InputStatus)OTE(S005Sfty.Mod1.InputStatus);
				N: XIC(S005TL1SIO1:I.Pt00OutputStatus)XIC(S005TL1SIO1:I.Pt01OutputStatus)XIC(S005TL1SIO1:I.Pt02OutputStatus)XIC(S005TL1SIO1:I.Pt03OutputStatus)OTE(S005Sfty.Mod1.OutputStatus);
				RC: "************************************************************$N"
				    "Module 2 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: XIC(S005TL1SIO2:I.RunMode)OTE(S005Sfty.Mod2.RunMode);
				N: XIC(S005TL1SIO2:I.Pt00InputStatus)XIC(S005TL1SIO2:I.Pt01InputStatus)XIC(S005TL1SIO2:I.Pt02InputStatus)XIC(S005TL1SIO2:I.Pt03InputStatus)XIC(S005TL1SIO2:I.Pt04InputStatus)XIC(S005TL1SIO2:I.Pt05InputStatus)XIC(S005TL1SIO2:I.Pt06InputStatus)XIC(S005TL1SIO2:I.Pt07InputStatus)XIC(S005TL1SIO2:I.Pt08InputStatus)XIC(S005TL1SIO2:I.Pt09InputStatus)XIC(S005TL1SIO2:I.Pt10InputStatus)XIC(S005TL1SIO2:I.Pt11InputStatus)OTE(S005Sfty.Mod2.InputStatus);
				N: XIC(S005TL1SIO2:I.Pt00OutputStatus)XIC(S005TL1SIO2:I.Pt01OutputStatus)XIC(S005TL1SIO2:I.Pt02OutputStatus)XIC(S005TL1SIO2:I.Pt03OutputStatus)OTE(S005Sfty.Mod2.OutputStatus);
				RC: "************************************************************$N"
				    "Module Summary$N"
				    "************************************************************";
				N: XIC(S005Sfty.Mod1.RunMode)XIC(S005Sfty.Mod2.RunMode)OTE(S005Sfty.AllModRunMode);
				N: XIC(S005Sfty.Mod1.InputStatus)XIC(S005Sfty.Mod2.InputStatus)OTE(S005Sfty.AllModInStatusOk);
				N: XIC(S005Sfty.Mod1.OutputStatus)XIC(S005Sfty.Mod2.OutputStatus)OTE(S005Sfty.AllModOutStatusOk);
		END_ROUTINE

		ROUTINE s_D00_Estop (Description := "Emergency Stop Safety Routine")
				RC: "************************************************************$N"
				    "Station_Name Emergency Stop$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "E-Stop$N"
				    "Station_Name E1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(Estop_Input1)OTE(Station_NameSfty.E1.EstpChnA);
				N: XIC(Estop_Input2)OTE(Station_NameSfty.E1.EstpChnB);
				N: [XIC(S005Sfty.Oper1SwipeStart) ,XIC(sZ005_040.AnyGateRstPB) ]OTE(S005Sfty.E1.EstpInstCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S005Sfty.E1.EstpInstFltRst);
				N: XIC(S005Sfty.AllModRunMode)ESTOP(S005Sfty.E1.Estop,MANUAL,S005Sfty.E1.EstpChnA,S005Sfty.E1.EstpChnB,S005Sfty.E1.EstpInstCR,S005Sfty.E1.EstpInstFltRst);
		END_ROUTINE

		ROUTINE s_D01_LC (Description := "Light Screen and Safety Scanner Safety Routine")
				RC: "************************************************************$N"
				    "Safety Light Curtains and Scanners$N"
				    "************************************************************";
				N: NOP();
				N: OTE(S005Sfty.OperLS.LC1Installed)OTU(S005Sfty.OperLS.LC2Installed)OTU(S005Sfty.OperLS.LC3Installed)OTE(S005Sfty.OperLS.SCN1_1Installed)OTE(S005Sfty.OperLS.SCN1_2Installed)OTE(S005Sfty.OperLS.SCN2_1Installed)OTE(S005Sfty.OperLS.SCN2_2Installed);
				RC: "************************************************************$N"
				    "LC Instruction$N"
				    "Input Mapping$N"
				    "************************************************************$N"
				    "Edit all required Input mapping rungs with the correct safety input$N"
				    "Edit LC Muting as required. Check Rung description for details";
				N: NOP();
				RC: "************************************************************$N"
				    "S005 LC1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S005TL1SIO1:I.Pt02Data)OTE(S005Sfty.OperLS.LC1ChnAInp);
				N: XIC(S005TL1SIO1:I.Pt03Data)OTE(S005Sfty.OperLS.LC1ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTU(S005Sfty.OperLS.LC1MuteInstalled) ,XIC(sEdit.Bit) XIC(S005Sfty.OperLS.LC1MuteInstalled) OTE(S005Sfty.OperLS.LC1Mute) ];
				RC: "************************************************************$N"
				    "S005 Scanner 1_1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S005TL1SIO2:I.Pt00Data)OTE(S005Sfty.OperLS.SCN1_1ChnAInp);
				N: XIC(S005TL1SIO2:I.Pt01Data)OTE(S005Sfty.OperLS.SCN1_1ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTE(S005Sfty.OperLS.SCN1_1MuteInstalled) ,XIC(S005Sfty.SftyPosDev.SPD1.O1) XIC(S005Sfty.OperLS.SCN1_1MuteInstalled) OTE(S005Sfty.OperLS.SCN1_1Mute) ];
				RC: "************************************************************$N"
				    "S005 Scanner 1_2$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S005TL1SIO2:I.Pt02Data)OTE(S005Sfty.OperLS.SCN1_2ChnAInp);
				N: XIC(S005TL1SIO2:I.Pt03Data)OTE(S005Sfty.OperLS.SCN1_2ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTE(S005Sfty.OperLS.SCN2_1MuteInstalled) ,XIC(S005Sfty.SftyPosDev.SPD1.O1) XIC(S005Sfty.OperLS.SCN2_1MuteInstalled) OTE(S005Sfty.OperLS.SCN2_1Mute) ];
				RC: "************************************************************$N"
				    "S005 Scanner 2_1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S005TL1SIO1:I.Pt04Data)OTE(S005Sfty.OperLS.SCN2_1ChnAInp);
				N: XIC(S005TL1SIO1:I.Pt05Data)OTE(S005Sfty.OperLS.SCN2_1ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTU(S005Sfty.OperLS.SCN1_2MuteInstalled) ,XIC(sEdit.Bit) XIC(S005Sfty.OperLS.SCN1_2MuteInstalled) OTE(S005Sfty.OperLS.SCN1_2Mute) ];
				RC: "************************************************************$N"
				    "S005 Scanner 2_1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S005TL1SIO1:I.Pt06Data)OTE(S005Sfty.OperLS.SCN2_2ChnAInp);
				N: XIC(S005TL1SIO1:I.Pt07Data)OTE(S005Sfty.OperLS.SCN2_2ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTU(S005Sfty.OperLS.SCN2_2MuteInstalled) ,XIC(sEdit.Bit) XIC(S005Sfty.OperLS.SCN2_2MuteInstalled) OTE(S005Sfty.OperLS.SCN2_2Mute) ];
				RC: "************************************************************$N"
				    "LC Instruction$N"
				    "$N"
				    "DO NOT EDIT AFTER THIS POINT$N"
				    "************************************************************$N"
				    "";
				N: NOP();
				N: [XIC(S005Sfty.OperLS.LC1ChnAInp) ,XIC(S005Sfty.OperLS.LC1Mute) XIC(S005Sfty.OperLS.LC1MuteInstalled) ]OTE(S005Sfty.OperLS.LC1ChnAInst);
				N: [XIC(S005Sfty.OperLS.LC1ChnBInp) ,XIC(S005Sfty.OperLS.LC1Mute) XIC(S005Sfty.OperLS.LC1MuteInstalled) ]OTE(S005Sfty.OperLS.LC1ChnBInst);
				N: XIC(S005Sfty.Oper1SwipeStart)ONS(S005Sfty.OperLS.LC1InsCROns)OTE(S005Sfty.OperLS.LC1InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S005Sfty.OperLS.LC1FltRst);
				N: XIC(S005Sfty.OperLS.LC1Installed)XIC(S005Sfty.AllModRunMode)LC(S005Sfty.OperLS.LC1,MANUAL,S005Sfty.OperLS.LC1ChnAInst,S005Sfty.OperLS.LC1ChnBInst,20,S005Sfty.OperLS.LC1Mute,S005Sfty.OperLS.LC1InsCR,S005Sfty.OperLS.LC1FltRst);
				N: [XIC(S005Sfty.OperLS.SCN1_1ChnAInp) ,XIC(S005Sfty.OperLS.SCN1_1MuteInstalled) XIC(S005Sfty.OperLS.SCN1_1Mute) ]OTE(S005Sfty.OperLS.SCN1_1ChnAInst);
				N: [XIC(S005Sfty.OperLS.SCN1_1ChnBInp) ,XIC(S005Sfty.OperLS.SCN1_1MuteInstalled) XIC(S005Sfty.OperLS.SCN1_1Mute) ]OTE(S005Sfty.OperLS.SCN1_1ChnBInst);
				N: XIC(S005Sfty.Oper1SwipeStart)OTE(S005Sfty.OperLS.SCN1_1InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S005Sfty.OperLS.SCN1_1FltRst);
				N: XIC(S005Sfty.OperLS.SCN1_1Installed)XIC(S005Sfty.AllModRunMode)LC(S005Sfty.OperLS.SCN1_1,MANUAL,S005Sfty.OperLS.SCN1_1ChnAInst,S005Sfty.OperLS.SCN1_1ChnBInst,20,S005Sfty.OperLS.SCN1_1Mute,S005Sfty.OperLS.SCN1_1InsCR,S005Sfty.OperLS.SCN1_1FltRst);
				N: [XIC(S005Sfty.OperLS.SCN1_2ChnAInp) ,XIC(S005Sfty.OperLS.SCN1_2MuteInstalled) XIC(S005Sfty.OperLS.SCN1_2Mute) ]OTE(S005Sfty.OperLS.SCN1_2ChnAInst);
				N: [XIC(S005Sfty.OperLS.SCN1_2ChnBInp) ,XIC(S005Sfty.OperLS.SCN1_2MuteInstalled) XIC(S005Sfty.OperLS.SCN1_2Mute) ]OTE(S005Sfty.OperLS.SCN1_2ChnBInst);
				N: XIC(S005Sfty.Oper1SwipeStart)OTE(S005Sfty.OperLS.SCN1_2InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S005Sfty.OperLS.SCN1_2FltRst);
				N: XIC(S005Sfty.OperLS.SCN1_2Installed)XIC(S005Sfty.AllModRunMode)LC(S005Sfty.OperLS.SCN1_2,MANUAL,S005Sfty.OperLS.SCN1_2ChnAInst,S005Sfty.OperLS.SCN1_2ChnBInst,20,S005Sfty.OperLS.SCN1_2Mute,S005Sfty.OperLS.SCN1_2InsCR,S005Sfty.OperLS.SCN1_2FltRst);
				N: [XIC(S005Sfty.OperLS.SCN2_1ChnAInp) ,XIC(S005Sfty.OperLS.SCN2_1MuteInstalled) XIC(S005Sfty.OperLS.SCN2_1Mute) ]OTE(S005Sfty.OperLS.SCN2_1ChnAInst);
				N: [XIC(S005Sfty.OperLS.SCN2_1ChnBInp) ,XIC(S005Sfty.OperLS.SCN2_1MuteInstalled) XIC(S005Sfty.OperLS.SCN2_1Mute) ]OTE(S005Sfty.OperLS.SCN2_1ChnBInst);
				N: XIC(S005Sfty.Oper1SwipeStart)OTE(S005Sfty.OperLS.SCN2_1InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S005Sfty.OperLS.SCN2_1FltRst);
				N: XIC(S005Sfty.OperLS.SCN2_1Installed)XIC(S005Sfty.AllModRunMode)LC(S005Sfty.OperLS.SCN2_1,MANUAL,S005Sfty.OperLS.SCN2_1ChnAInst,S005Sfty.OperLS.SCN2_1ChnBInst,20,S005Sfty.OperLS.SCN2_1Mute,S005Sfty.OperLS.SCN2_1InsCR,S005Sfty.OperLS.SCN2_1FltRst);
				N: [XIC(S005Sfty.OperLS.SCN2_2ChnAInp) ,XIC(S005Sfty.OperLS.SCN2_2MuteInstalled) XIC(S005Sfty.OperLS.SCN2_2Mute) ]OTE(S005Sfty.OperLS.SCN2_2ChnAInst);
				N: [XIC(S005Sfty.OperLS.SCN2_2ChnBInp) ,XIC(S005Sfty.OperLS.SCN2_2MuteInstalled) XIC(S005Sfty.OperLS.SCN2_2Mute) ]OTE(S005Sfty.OperLS.SCN2_2ChnBInst);
				N: XIC(S005Sfty.Oper1SwipeStart)OTE(S005Sfty.OperLS.SCN2_2InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S005Sfty.OperLS.SCN2_2FltRst);
				N: XIC(S005Sfty.OperLS.SCN2_2Installed)XIC(S005Sfty.AllModRunMode)LC(S005Sfty.OperLS.SCN2_2,MANUAL,S005Sfty.OperLS.SCN2_2ChnAInst,S005Sfty.OperLS.SCN2_2ChnBInst,20,S005Sfty.OperLS.SCN2_2Mute,S005Sfty.OperLS.SCN2_2InsCR,S005Sfty.OperLS.SCN2_2FltRst);
		END_ROUTINE

		ROUTINE s_D02_OPR (Description := "Operator Finger Swipe Safety Routine")
				RC: "************************************************************$N"
				    "Station 005 Cycle Start$N"
				    "Finger Swipe$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S005Sfty.Oper1Instd)FingerSwipe(S005Sfty.OPR1,S005Sfty.Oper1SwipeStart);
				N: XIC(S005Sfty.Oper2Instd)FingerSwipe(S005Sfty.OPR2,S005Sfty.Oper2SwipeStart);
		END_ROUTINE

		ROUTINE s_D03_SPD (Description := "Safety Position Devices Routine")
				RC: "************************************************************$N"
				    "Station 005 Safety Position Devices$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S005TL1SIO2:I.Pt08Data)OTE(S005Sfty.SftyPosDev.SPD1ChnA);
				N: XIC(S005TL1SIO2:I.Pt09Data)OTE(S005Sfty.SftyPosDev.SPD1ChnB);
				N: [XIC(S005Sfty.Oper1SwipeStart) ,XIC(sZ005_040.AnyGateRstPB) ]ONS(S005Sfty.SftyPosDev.SPD1InsCROns)OTE(S005Sfty.SftyPosDev.SPD1InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S005Sfty.SftyPosDev.SPD1InsFltRst);
				N: XIC(S005Sfty.AllModRunMode)RIN(S005Sfty.SftyPosDev.SPD1,AUTOMATIC,S005Sfty.SftyPosDev.SPD1ChnA,S005Sfty.SftyPosDev.SPD1ChnB,S005Sfty.SftyPosDev.SPD1InsCR,S005Sfty.SftyPosDev.SPD1InsFltRst);
		END_ROUTINE

		ROUTINE s_D04_ICSD1 (Description := "InterCell Safety Devices Routine$N(Migration Lightscreens, Scanners, other)")
				RC: "************************************************************$N"
				    "Intercell Safety Devices$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "LC Instruction$N"
				    "Input Mapping$N"
				    "************************************************************$N"
				    "Edit all required Input mapping rungs with the correct safety input$N"
				    "Edit LC Muting as required. Check Rung description for details";
				N: NOP();
				RC: "************************************************************$N"
				    "Station 005 ICSD LC1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S005TL1SIO2:I.Pt04Data)OTE(S005Sfty.IntSftyDevice.LC1ChnAInp);
				N: XIC(S005TL1SIO2:I.Pt05Data)OTE(S005Sfty.IntSftyDevice.LC1ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTE(S005Sfty.IntSftyDevice.LC1MuteInstalled) ,XIC(sEdit.Bit) XIC(S005Sfty.AllStaLtScrnOK) XIC(S005Sfty.IntSftyDevice.LC1MuteInstalled) OTE(S005Sfty.IntSftyDevice.LC1Mute) ];
				RC: "************************************************************$N"
				    "LC Instruction$N"
				    "$N"
				    "DO NOT EDIT AFTER THIS POINT$N"
				    "************************************************************$N"
				    "";
				N: NOP();
				N: [XIC(S005Sfty.IntSftyDevice.LC1ChnAInp) ,XIC(S005Sfty.IntSftyDevice.LC1MuteInstalled) XIC(S005Sfty.IntSftyDevice.LC1Mute) ]OTE(S005Sfty.IntSftyDevice.LC1ChnAInst);
				N: [XIC(S005Sfty.IntSftyDevice.LC1ChnBInp) ,XIC(S005Sfty.IntSftyDevice.LC1MuteInstalled) XIC(S005Sfty.IntSftyDevice.LC1Mute) ]OTE(S005Sfty.IntSftyDevice.LC1ChnBInst);
				N: [XIC(S005Sfty.Oper1SwipeStart) ,XIC(sZ005_040.AnyGateRstPB) ]ONS(S005Sfty.IntSftyDevice.LC1InsCROns)XIC(sZ005_040.PerimeterSafe)OTE(S005Sfty.IntSftyDevice.LC1InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S005Sfty.IntSftyDevice.LC1FltRst);
				N: XIC(S005Sfty.AllModRunMode)LC(S005Sfty.IntSftyDevice.LC1,MANUAL,S005Sfty.IntSftyDevice.LC1ChnAInst,S005Sfty.IntSftyDevice.LC1ChnBInst,20,S005Sfty.IntSftyDevice.LC1Mute,S005Sfty.IntSftyDevice.LC1InsCR,S005Sfty.IntSftyDevice.LC1FltRst);
		END_ROUTINE

		ROUTINE s_E00_RB01 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "Station 005 RB01$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S005RB01:SI.Input[0],S005RB01Sfty.I,1);
				N: XIC(S005RB01:SI.RunMode)OTE(S005RB01Sfty.Int.ModRunMode);
				N: XIC(S005RB01:SI.ConnectionFaulted)OTE(S005RB01Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "############################";
				N: XIC(S005Sfty.AllStaLtScrnOK)OTE(S005RB01Sfty.Int.AreaSafe);
				N: OTE(S005RB01Sfty.Int.Zn1LtScrnActive);
				N: OTE(S005RB01Sfty.Int.Zn2LtScrnActive);
				N: OTE(S005RB01Sfty.Int.Zn3LtScrnActive);
				N: OTE(S005RB01Sfty.Int.Zn4LtScrnActive);
				N: OTE(S005RB01Sfty.Int.Zn5LtScrnActive);
				N: OTE(S005RB01Sfty.Int.Zn6LtScrnActive);
				N: OTE(S005RB01Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S005RB01Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S005RB01Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S005RB01Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS005RB01)OTE(S005RB01Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS005RB01)OTE(S005RB01Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR01AOI,S005RB01Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S005RB01Sfty.O,S005RB01:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_E00_RB02 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "Station 005 RB02$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S005RB02:SI.Input[0],S005RB02Sfty.I,1);
				N: XIC(S005RB02:SI.RunMode)OTE(S005RB02Sfty.Int.ModRunMode);
				N: XIC(S005RB02:SI.ConnectionFaulted)OTE(S005RB02Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "############################";
				N: OTE(S005RB02Sfty.Int.AreaSafe);
				N: XIC(S005Sfty.AllStaLtScrnOK)OTE(S005RB02Sfty.Int.Zn1LtScrnActive);
				N: OTE(S005RB02Sfty.Int.Zn2LtScrnActive);
				N: OTE(S005RB02Sfty.Int.Zn3LtScrnActive);
				N: OTE(S005RB02Sfty.Int.Zn4LtScrnActive);
				N: OTE(S005RB02Sfty.Int.Zn5LtScrnActive);
				N: OTE(S005RB02Sfty.Int.Zn6LtScrnActive);
				N: OTE(S005RB02Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S005RB02Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S005RB02Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S005RB02Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS005RB02)OTE(S005RB02Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS005RB02)OTE(S005RB02Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR02AOI,S005RB02Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S005RB02Sfty.O,S005RB02:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_E01_TL1 (Description := "Station Fixture Safety Routine")
				RC: "************************************************************$N"
				    "Station 005 TL1$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Minor Motion Enable$N"
				    "************************************************************$N"
				    "$N"
				    "This feature is disabled by default.$N"
				    "Use needs to be approved by Controls Department";
				N: OTU(S005Sfty.MinorMtnEnbld);
				N: XIC(sZ005_040.AllEStopsOk)[XIC(sZ005_040.PerimeterSafe) XIC(S005Sfty.AllStaLtScrnOK) ,XIC(sZ005_040.AnyBypassSwOn) ][XIC(S005Sfty.FX1.MotionEnbl) ,XIC(S005Sfty.FX1.SoftStartPwrOn) ]OTE(S005Sfty.FX1.SoftStartPwrOn);
				N: XIC(sZ005_040.AllEStopsOk)[XIC(sZ005_040.PerimeterSafe) XIC(S005Sfty.AllStaLtScrnOK) ,XIC(S005Sfty.MinorMtnEnbld) ]OTE(S005Sfty.FX1.MotionEnbl);
				RC: "Soft Start Valve Power Output$N"
				    "************************************************************";
				N: XIC(S005Sfty.FX1.SoftStartPwrOn)[OTE(S005TL1SIO1:O.Pt00Data) ,OTE(S005TL1SIO1:O.Pt01Data) ];
				RC: "Valve Manifold DC Power Output$N"
				    "************************************************************";
				N: XIC(S005Sfty.FX1.MotionEnbl)[OTE(S005TL1SIO1:O.Pt02Data) ,OTE(S005TL1SIO1:O.Pt03Data) ];
		END_ROUTINE

		ROUTINE s_Z00_Summary (Description := "Station Safety Summary")
				RC: "############################$N"
				    "Station Safety Summary$N"
				    "############################";
				N: NOP();
				N: OTU(S005Sfty.Oper1Instd)OTU(S005Sfty.Oper2Instd);
				N: OTU(S005Sfty.LoadAssistInstld);
				N: [XIO(S005Sfty.OperLS.LC1.LCB) ,XIO(S005Sfty.OperLS.LC1Installed) ][XIO(S005Sfty.OperLS.LC2.LCB) ,XIO(S005Sfty.OperLS.LC2Installed) ][XIO(S005Sfty.OperLS.LC3.LCB) ,XIO(S005Sfty.OperLS.LC3Installed) ][XIO(S005Sfty.OperLS.SCN1_1.O1) ,XIO(S005Sfty.OperLS.SCN1_1Installed) ][XIO(S005Sfty.OperLS.SCN1_2.O1) ,XIO(S005Sfty.OperLS.SCN1_2Installed) ][XIO(S005Sfty.OperLS.SCN2_1.O1) ,XIO(S005Sfty.OperLS.SCN2_1Installed) ][XIO(S005Sfty.OperLS.SCN2_2.O1) ,XIO(S005Sfty.OperLS.SCN2_2Installed) ]OTE(S005Sfty.StaZn1NotBlkd);
				N: [XIC(S005Sfty.OperLS.LC1.O1) ,XIO(S005Sfty.OperLS.LC1Installed) ][XIC(S005Sfty.OperLS.LC2.O1) ,XIO(S005Sfty.OperLS.LC2Installed) ][XIC(S005Sfty.OperLS.LC3.O1) ,XIO(S005Sfty.OperLS.LC3Installed) ][XIC(S005Sfty.OperLS.SCN1_1.O1) ,XIO(S005Sfty.OperLS.SCN1_1Installed) ][XIC(S005Sfty.OperLS.SCN1_2.O1) ,XIO(S005Sfty.OperLS.SCN1_2Installed) ][XIC(S005Sfty.OperLS.SCN2_1.O1) ,XIO(S005Sfty.OperLS.SCN2_1Installed) ][XIC(S005Sfty.OperLS.SCN2_2.O1) ,XIO(S005Sfty.OperLS.SCN2_2Installed) ]OTE(S005Sfty.StaZn1Active);
				N: [XIO(S005Sfty.OperLS.LC1.LCB) ,XIO(S005Sfty.OperLS.LC1Installed) ][XIO(S005Sfty.OperLS.SCN1_1.O1) ,XIO(S005Sfty.OperLS.SCN1_1Installed) ][XIO(S005Sfty.OperLS.SCN1_2.O1) ,XIO(S005Sfty.OperLS.SCN1_2Installed) ]OTE(S005Sfty.StaZn2NotBlkd);
				N: [XIC(S005Sfty.OperLS.LC2.O1) ,XIO(S005Sfty.OperLS.LC2Installed) ][XIC(S005Sfty.OperLS.SCN2_1.O1) ,XIO(S005Sfty.OperLS.SCN2_1Installed) ][XIC(S005Sfty.OperLS.SCN2_2.O1) ,XIO(S005Sfty.OperLS.SCN2_2Installed) ]OTE(S005Sfty.StaZn2Active);
				N: OTE(S005Sfty.StaZn3NotBlkd);
				N: OTE(S005Sfty.StaZn3Active);
				N: XIC(S005Sfty.StaZn1Active)XIC(S005Sfty.StaZn2Active)XIC(S005Sfty.StaZn3Active)OTE(S005Sfty.AllStaLtScrnOK);
				N: XIC(S005Sfty.LoadAssistInstld)OTE(S005Sfty.LoadAssistClear);
				N: XIC(S005Sfty.LoadAssistInstld)OTE(S005Sfty.LoadAssistActive);
				N: XIC(S005Sfty.Oper1Instd)XIC(sEdit.Bit)OTE(S005Sfty.Oper1SwipeStart);
				N: XIC(S005Sfty.Oper2Instd)XIC(sEdit.Bit)OTE(S005Sfty.Oper2SwipeStart);
				N: XIC(sSftyFromStd.S005ClrToUnlock)OTE(S005Sfty.ClearToUnlock);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S010RB01 (Description := "Carry Gun Self Pierce Rivet",
	                  Class := Standard,
	                  MAIN := "A00_Main",
	                  MODE := 0,
	                  DisableFlag := 0,
	                  UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE A00_Main 
				N: JSR(D00_RB_MapInputs,0);
				N: JSR(D01_RB_Zones,0);
				N: JSR(D02_RB,0);
				N: JSR(D02_RB_Edit,0);
				N: JSR(D03_RB_PNs,0);
				N: JSR(D04_RB_MapOutpus,0);
				N: JSR(Y00_Alarms_L1,0);
				N: JSR(Y01_Alarms_L2,0);
				N: JSR(Y02_Alarms_L3,0);
		END_ROUTINE

		ROUTINE D00_RB_MapInputs 
				RC: "############################$N"
				    "Self Pierce Rivet$N"
				    "Input Mapping$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Self Pierce Rivet$N"
				    "Input Mapping$N"
				    "############################";
				N: [XIO(S010RB01.ENet.CommOK) FLL(0,S010RB01.I1,1) ,XIC(S010RB01.ENet.CommOK) COP(S010RB01:I1.Input[0],S010RB01.I1,1) ];
				N: [XIC(S010TL1.Int.AutoMode) OTE(S010RB01.Int.AutoMode) ,XIC(S010TL1.Int.ManualMode) OTE(S010RB01.Int.ManualMode) ];
				N: XIC(S010TL1.Int.DryCycle)OTE(S010RB01.Int.DryCycle);
				N: [XIC(S010TL1.Int.AutoModeStopReq) ,XIC(Z005_040.AutoModeStopReq) ]OTE(S010RB01.Int.AutoModeStopReq);
				N: [XIC(Edit.Bit) MOV(1500,S010RB01.Int.AirOnDelayTmr.PRE) TOF(S010RB01.Int.AirOnDelayTmr,?,?) ,XIC(S010RB01.Int.AirOnDelayTmr.DN) OTE(S010RB01.Int.AirOn) ];
				N: XIC(Edit.Bit)OTU(S010RB01.Int.DisableDrives);
				N: XIC(S010TL1.Int.RstCycComp)OTE(S010RB01.Int.ToolRst);
				N: [XIC(S010TL1.Int.FaultResetPB) XIC(sZ005_040.AllGatesOk) ,XIC(sZ005_040.StaPowerEnblPB) ,XIC(S010RB01.Int.ExtMotorOn) ]OTE(S010RB01.Int.FltReset);
				N: XIC(S010RB01.Int.SetCycleCompPB.PB)OTE(S010RB01.Int.SetCycleComp);
		END_ROUTINE

		ROUTINE D01_RB_Zones 
				RC: "******************************************************************$N"
				    "Robot Standard$N"
				    "Zones$N"
				    "$N"
				    "Zn1 = Pick$N"
				    "Zn2 = Drop$N"
				    "Zn3 = Maintenance Position$N"
				    "$N"
				    "Zn4-10 TBD$N"
				    "******************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "RobotStdZone AOI Setup$N"
				    "$N"
				    "1. OTE Zn#Used to Enable. If Zone not used OTU$N"
				    "$N"
				    "2. Add All Adjacent Zone.outRbtZnClrMem -]/[- $N"
				    "$N"
				    "3. Add all required tool Pick/Drop Setup Conditions$N"
				    "******************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Zone 1$N"
				    "$N"
				    "S010RB01 Zone 1 with S005RB01 Zone 2 (Drop) And S020RB05 Zone 1 (Pick)$N"
				    "S010RB01 Rivet Process (SPR)$N"
				    "******************************************************************";
				N: [OTE(S010RB01.Int.Zn1Used) ,XIO(S005RB01.AOIs.Zone[2].outRbtZnClrMem) XIO(S020RB05.AOIs.Zone[1].outRbtZnClrMem) OTE(S010RB01.Int.Zn1ClrMem) ,XIC(S010RB01.Int.AutoMode) XIC(S010TL1.Int.AtWorkPos1) OTE(S010RB01.Int.Zn1ToolCond) ,RobotStdZone(S010RB01.AOIs.Zone[1],S010RB01.Int.Zn1Used,S010RB01.Int.Zn1ClrMem,S010RB01.Int.Zn1ToolCond,S010RB01.I1.ClrIntfZn1,S010RB01.O1.ZnClear1) ];
				RC: "******************************************************************$N"
				    "Zone 2$N"
				    "******************************************************************";
				N: [OTE(S010RB01.Int.Zn2Used) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn2ClrMem) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn2ToolCond) ,RobotStdZone(S010RB01.AOIs.Zone[2],S010RB01.Int.Zn2Used,S010RB01.Int.Zn2ClrMem,S010RB01.Int.Zn2ToolCond,S010RB01.I1.ClrIntfZn2,S010RB01.O1.ZnClear2) ];
				RC: "******************************************************************$N"
				    "Zone 3$N"
				    "******************************************************************";
				N: [OTU(S010RB01.Int.Zn3Used) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn3ClrMem) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn3ToolCond) ,RobotStdZone(S010RB01.AOIs.Zone[3],S010RB01.Int.Zn3Used,S010RB01.Int.Zn3ClrMem,S010RB01.Int.Zn3ToolCond,S010RB01.I1.ClrIntfZn3,S010RB01.O1.ZnClear3) ];
				RC: "******************************************************************$N"
				    "Zone 4$N"
				    "******************************************************************";
				N: [OTU(S010RB01.Int.Zn4Used) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn4ClrMem) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn4ToolCond) ,RobotStdZone(S010RB01.AOIs.Zone[4],S010RB01.Int.Zn4Used,S010RB01.Int.Zn4ClrMem,S010RB01.Int.Zn4ToolCond,S010RB01.I1.ClrIntfZn4,S010RB01.O1.ZnClear4) ];
				RC: "******************************************************************$N"
				    "Zone 5$N"
				    "******************************************************************";
				N: [OTU(S010RB01.Int.Zn5Used) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn5ClrMem) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn5ToolCond) ,RobotStdZone(S010RB01.AOIs.Zone[5],S010RB01.Int.Zn5Used,S010RB01.Int.Zn5ClrMem,S010RB01.Int.Zn5ToolCond,S010RB01.I1.ClrIntfZn5,S010RB01.O1.ZnClear5) ];
				RC: "******************************************************************$N"
				    "Zone 6$N"
				    "******************************************************************";
				N: [OTU(S010RB01.Int.Zn6Used) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn6ClrMem) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn6ToolCond) ,RobotStdZone(S010RB01.AOIs.Zone[6],S010RB01.Int.Zn6Used,S010RB01.Int.Zn6ClrMem,S010RB01.Int.Zn6ToolCond,S010RB01.I1.ClrIntfZn6,S010RB01.O1.ZnClear6) ];
				RC: "******************************************************************$N"
				    "Zone 7$N"
				    "******************************************************************";
				N: [OTU(S010RB01.Int.Zn7Used) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn7ClrMem) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn7ToolCond) ,RobotStdZone(S010RB01.AOIs.Zone[7],S010RB01.Int.Zn7Used,S010RB01.Int.Zn7ClrMem,S010RB01.Int.Zn7ToolCond,S010RB01.I1.ClrIntfZn7,S010RB01.O1.ZnClear7) ];
				RC: "******************************************************************$N"
				    "Zone 8$N"
				    "******************************************************************";
				N: [OTU(S010RB01.Int.Zn8Used) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn8ClrMem) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn8ToolCond) ,RobotStdZone(S010RB01.AOIs.Zone[8],S010RB01.Int.Zn8Used,S010RB01.Int.Zn8ClrMem,S010RB01.Int.Zn8ToolCond,S010RB01.I1.ClrIntfZn8,S010RB01.O1.ZnClear8) ];
				RC: "******************************************************************$N"
				    "Zone 9$N"
				    "******************************************************************";
				N: [OTU(S010RB01.Int.Zn9Used) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn9ClrMem) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn9ToolCond) ,RobotStdZone(S010RB01.AOIs.Zone[9],S010RB01.Int.Zn9Used,S010RB01.Int.Zn9ClrMem,S010RB01.Int.Zn9ToolCond,S010RB01.I1.ClrIntfZn9,S010RB01.O1.ZnClear9) ];
				RC: "******************************************************************$N"
				    "Zone 10$N"
				    "******************************************************************";
				N: [OTU(S010RB01.Int.Zn10Used) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn10ClrMem) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn10ToolCond) ,RobotStdZone(S010RB01.AOIs.Zone[10],S010RB01.Int.Zn10Used,S010RB01.Int.Zn10ClrMem,S010RB01.Int.Zn10ToolCond,S010RB01.I1.ClrIntfZn10,S010RB01.O1.ZnClear10) ];
				RC: "******************************************************************$N"
				    "Zone 11$N"
				    "******************************************************************";
				N: [OTU(S010RB01.Int.Zn11Used) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn11ClrMem) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn11ToolCond) ,RobotStdZone(S010RB01.AOIs.Zone[11],S010RB01.Int.Zn11Used,S010RB01.Int.Zn11ClrMem,S010RB01.Int.Zn11ToolCond,S010RB01.I1.ClrIntfZn11,S010RB01.O1.ZnClear11) ];
				RC: "******************************************************************$N"
				    "Zone 12$N"
				    "******************************************************************";
				N: [OTU(S010RB01.Int.Zn12Used) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn12ClrMem) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn12ToolCond) ,RobotStdZone(S010RB01.AOIs.Zone[12],S010RB01.Int.Zn12Used,S010RB01.Int.Zn12ClrMem,S010RB01.Int.Zn12ToolCond,S010RB01.I1.ClrIntfZn12,S010RB01.O1.ZnClear12) ];
				RC: "******************************************************************$N"
				    "Zone 13$N"
				    "******************************************************************";
				N: [OTU(S010RB01.Int.Zn13Used) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn13ClrMem) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn13ToolCond) ,RobotStdZone(S010RB01.AOIs.Zone[13],S010RB01.Int.Zn13Used,S010RB01.Int.Zn13ClrMem,S010RB01.Int.Zn13ToolCond,S010RB01.I1.ClrIntfZn13,S010RB01.O1.ZnClear13) ];
				RC: "******************************************************************$N"
				    "Zone 14$N"
				    "******************************************************************";
				N: [OTU(S010RB01.Int.Zn14Used) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn14ClrMem) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn14ToolCond) ,RobotStdZone(S010RB01.AOIs.Zone[14],S010RB01.Int.Zn14Used,S010RB01.Int.Zn14ClrMem,S010RB01.Int.Zn14ToolCond,S010RB01.I1.ClrIntfZn14,S010RB01.O1.ZnClear14) ];
				RC: "******************************************************************$N"
				    "Zone 15$N"
				    "******************************************************************";
				N: [OTU(S010RB01.Int.Zn15Used) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn15ClrMem) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn15ToolCond) ,RobotStdZone(S010RB01.AOIs.Zone[15],S010RB01.Int.Zn15Used,S010RB01.Int.Zn15ClrMem,S010RB01.Int.Zn15ToolCond,S010RB01.I1.ClrIntfZn15,S010RB01.O1.ZnClear15) ];
				RC: "******************************************************************$N"
				    "Zone 16$N"
				    "******************************************************************";
				N: [OTU(S010RB01.Int.Zn16Used) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn16ClrMem) ,XIC(Edit.Bit) OTE(S010RB01.Int.Zn16ToolCond) ,RobotStdZone(S010RB01.AOIs.Zone[16],S010RB01.Int.Zn16Used,S010RB01.Int.Zn16ClrMem,S010RB01.Int.Zn16ToolCond,S010RB01.I1.ClrIntfZn16,S010RB01.O1.ZnClear16) ];
				N: [XIO(S010RB01.AOIs.Zone[1].outRbtZnClrMem) ,XIC(S010RB01.I1.AtHome) ]OTE(S010RB01.Int.ClearOfTool1);
				N: [XIC(Edit.Bit) ,XIC(S010RB01.I1.AtHome) ]OTE(S010RB01.Int.ClearOfTool2);
				N: [XIC(Edit.Bit) ,XIC(S010RB01.I1.AtHome) ]OTE(S010RB01.Int.ClearOfTool3);
				N: [XIC(Edit.Bit) ,XIC(S010RB01.I1.AtHome) ]OTE(S010RB01.Int.ClearOfTool4);
				N: [XIC(Edit.Bit) ,XIC(S010RB01.I1.AtHome) ]OTE(S010RB01.Int.ClearOfTool5);
		END_ROUTINE

		ROUTINE D02_RB 
				RC: "############################$N"
				    "S010RB01$N"
				    "Fanuc Robot Carry Gun $N"
				    "Self Pierce Rivet Application$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Rung to check which PN is Active$N"
				    "############################";
				N: NEQ(S010RB01.AOIs.PN.stsPN,0)NOP();
				N: [XIO(S010RB01.I1.PendEnbld) XIC(S010RB01Sfty.Int.TeachOff) OTE(S010RB01.Int.TeachSSOff) ,XIC(S010RB01.I1.PendEnbld) XIC(S010RB01Sfty.Int.TeachSeld) OTE(S010RB01.Int.InTeach) ];
				N: XIC(sZ005_040.PowerEnbld)XIC(sZ005_040.PerimeterSafe)XIC(S010RB01Sfty.Int.EnblRbt)XIC(S010RB01Sfty.Int.TeachOff)XIC(S010RB01Sfty.Int.AdjRbtsTeachOff)XIO(S010RB01Sfty.Int.DisableDrives)XIO(S010RB01.I1.Auto)[XIC(Z005_040.GlobalAutoModePB) ,XIC(S010RB01.Int.SrvoOnDwlTmr.TT) ]XIC(Z005_040.AirOn)XIC(Z005_040.AllModCommOk)[MOV(3000,S010RB01.Int.SrvoOnDwlTmr.PRE) TON(S010RB01.Int.SrvoOnDwlTmr,?,?) ,XIC(S010RB01.Int.SrvoOnDwlTmr.EN) XIO(S010RB01.Int.SrvoOnDwlTmr.DN) OTE(S010RB01.Int.ExtMotorOn) ];
				RC: "############################$N"
				    "External Run Enable$N"
				    "############################";
				N: [XIO(S010RB01.Int.DisableDrives) [XIC(S010RB01.Int.AutoMode) XIC(S010RB01.I1.Auto) ,XIC(S010RB01.Int.ManualMode) ] ,XIC(S010RB01.Int.InTeach) ]MOV(1000,S010RB01.Int.RunEnableDelayTmr.PRE)TON(S010RB01.Int.RunEnableDelayTmr,?,?);
				N: XIC(S010RB01.Int.RunEnableDelayTmr.DN)[XIC(S010RB01.Int.AutoMode) XIC(S010RB01.I1.Auto) ,XIC(S010RB01.Int.InTeach) XIO(S010RB01.I1.Auto) ]XIC(sZ005_040.PowerEnbld)OTE(S010RB01.Int.ExtRunEnable);
				RC: "############################$N"
				    "Robot Ready Status$N"
				    "############################";
				N: XIC(S010RB01.I1.Cmd_Enbl)XIC(S010RB01.I1.Sys_Rdy)XIO(S010RB01.I1.RbtFaulted)XIO(S010RB01.I1.PendEnbld)XIC(S010RB01.I1.Auto)OTE(S010RB01.Int.RbtRdySU);
				N: XIC(S010RB01.Int.RbtRdySU)XIC(S010RB01.I1.AtHome)XIO(S010RB01.I1.Pg_Running)XIO(S010RB01.I1.Pg_Paused)XIO(S010RB01.I1.RbtHeld)OTE(S010RB01.Int.RbtRdy);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S010RB01.Int.RetFromMaintSeld) ,XIC(S010RB01.Int.MaintPosNoToolSeld) ,XIC(S010RB01.Int.MaintPosTool2Seld) ,XIC(S010RB01.Int.MaintPosTool3Seld) ,XIC(S010RB01.Int.MaintPosTool4Seld) ]OTU(S010RB01.Int.MaintPosTool1Seld);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S010RB01.Int.RetFromMaintSeld) ,XIC(S010RB01.Int.MaintPosNoToolSeld) ,XIC(S010RB01.Int.MaintPosTool1Seld) ,XIC(S010RB01.Int.MaintPosTool3Seld) ,XIC(S010RB01.Int.MaintPosTool4Seld) ]OTU(S010RB01.Int.MaintPosTool2Seld);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S010RB01.Int.RetFromMaintSeld) ,XIC(S010RB01.Int.MaintPosNoToolSeld) ,XIC(S010RB01.Int.MaintPosTool1Seld) ,XIC(S010RB01.Int.MaintPosTool2Seld) ,XIC(S010RB01.Int.MaintPosTool4Seld) ]OTU(S010RB01.Int.MaintPosTool3Seld);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S010RB01.Int.RetFromMaintSeld) ,XIC(S010RB01.Int.MaintPosNoToolSeld) ,XIC(S010RB01.Int.MaintPosTool1Seld) ,XIC(S010RB01.Int.MaintPosTool2Seld) ,XIC(S010RB01.Int.MaintPosTool3Seld) ]OTU(S010RB01.Int.MaintPosTool4Seld);
				N: [XIC(S010RB01.Int.RetFromMaintSeld) ,XIC(S010RB01.Int.MaintPosTool1Seld) ,XIC(S010RB01.Int.MaintPosTool2Seld) ,XIC(S010RB01.Int.MaintPosTool3Seld) ,XIC(S010RB01.Int.MaintPosTool4Seld) ]OTU(S010RB01.Int.MaintPosNoToolSeld);
				N: XIC(S010RB01.Int.AutoMode)[XIC(S010RB01.Int.GoToMaintPosTool1PB.PB) OTL(S010RB01.Int.MaintPosTool1Seld) ,XIC(S010RB01.Int.GoToMaintPosTool2PB.PB) OTL(S010RB01.Int.MaintPosTool2Seld) ,XIC(S010RB01.Int.GoToMaintPosTool3PB.PB) OTL(S010RB01.Int.MaintPosTool3Seld) ,XIC(S010RB01.Int.GoToMaintPosTool4PB.PB) OTL(S010RB01.Int.MaintPosTool4Seld) ];
				N: XIC(S010RB01.Int.AutoMode)XIC(S010RB01.Int.GoToMaintPosNoToolPB.PB)OTL(S010RB01.Int.MaintPosNoToolSeld);
				N: [XIC(S010RB01.Int.MaintPosTool1Seld) ,XIC(S010RB01.Int.MaintPosTool2Seld) ,XIC(S010RB01.Int.MaintPosTool3Seld) ,XIC(S010RB01.Int.MaintPosTool4Seld) ,XIC(S010RB01.Int.MaintPosNoToolSeld) ][XIC(S010RB01.I1.Clrtransfer) OTE(S010RB01.Int.Maintenance) ,OTE(S010RB01.Int.MaintenanceSetup) ];
				RC: "############################$N"
				    "Robot Initiate Permissives$N"
				    "$N"
				    "Do not Edit Permissives$N"
				    "Lucid Motors Controls Dpt.$N"
				    "############################";
				N: [XIC(S010RB01.Int.AirOn) OTE(S010RB01.Int.InitPerm1.Inp_Perm00) ,XIO(S010RB01.Int.CycleComp) OTE(S010RB01.Int.InitPerm1.Inp_Perm01) ,XIO(S010RB01.Int.RetHome) OTE(S010RB01.Int.InitPerm1.Inp_Perm02) ,XIO(S010RB01.I1.RvtAuto) OTE(S010RB01.Int.InitPerm1.Inp_Perm03) ,XIO(S010RB01.I1.RvtClrAtNose) OTE(S010RB01.Int.InitPerm1.Inp_Perm04) ,P_Perm(S010RB01.Int.InitPerm1) ];
				N: [XIC(S010RB01.I1.Auto) OTE(S010RB01.Int.InitPerm2.Inp_Perm00) ,XIC(S010RB01.Int.TeachSSOff) OTE(S010RB01.Int.InitPerm2.Inp_Perm01) ,XIO(S010RB01.Int.CycEndSeld) OTE(S010RB01.Int.InitPerm2.Inp_Perm02) ,XIO(S010RB01.Int.RetFromPounceSeld) OTE(S010RB01.Int.InitPerm2.Inp_Perm03) ,XIO(S010RB01.Int.AutoModeStopReq) OTE(S010RB01.Int.InitPerm2.Inp_Perm04) ,XIO(S010RB01.Int.FixtInPosHold) OTE(S010RB01.Int.InitPerm2.Inp_Perm05) ,[XIO(S010RB01.I1.RvtInCycle) ,XIC(S010RB01.Int.InitRdy) ] OTE(S010RB01.Int.InitPerm2.Inp_Perm06) ,[XIO(S010RB01.I1.RvtProc1Welded) ,XIC(S010RB01.Int.InitRdy) ] OTE(S010RB01.Int.InitPerm2.Inp_Perm07) ,[XIC(S010RB01.I1.RvtRdyToOp) ,XIC(S010RB01.Int.Maintenance) ] OTE(S010RB01.Int.InitPerm2.Inp_Perm08) ,P_Perm(S010RB01.Int.InitPerm2) ];
				N: XIC(S010RB01.Int.AutoMode)[XIC(S010RB01.Int.SprSetup.Sts_PermOK) XIC(S010RB01.Int.InitPerm1.Sts_PermOK) ,XIC(S010RB01.Int.Maintenance) ]XIC(S010RB01.Int.InitPerm2.Sts_PermOK)OTE(S010RB01.Int.InitRdy);
				RC: "############################$N"
				    "Robot Style Selection Outputs$N"
				    "############################";
				N: XIC(S010RB01.Int.InitRdy)[XIC(S010RB01.Int.PgmReq.0) OTE(S010RB01.O1.Style1) ,XIC(S010RB01.Int.PgmReq.1) OTE(S010RB01.O1.Style2) ,XIC(S010RB01.Int.PgmReq.2) OTE(S010RB01.O1.Style3) ,XIC(S010RB01.Int.PgmReq.3) OTE(S010RB01.O1.Style4) ,XIC(S010RB01.Int.PgmReq.4) OTE(S010RB01.O1.Style5) ,XIC(S010RB01.Int.PgmReq.5) OTE(S010RB01.O1.Style6) ,XIC(S010RB01.Int.PgmReq.6) OTE(S010RB01.O1.Style7) ,XIC(S010RB01.Int.PgmReq.7) OTE(S010RB01.O1.Style8) ];
				N: [XIC(S010RB01.Int.TaskComp) XIC(S010RB01.I1.ClrUnclamp) ,XIC(S010RB01.Int.SetCycleComp) [XIC(S010RB01.I1.AtHome) ,XIC(S010RB01.I1.ClrUnclamp) XIC(S010RB01.I1.Clrtransfer) ] ]OTL(S010RB01.Int.CycleComp);
				N: [XIC(S010RB01.Int.RstCycleComp) ,XIC(S010RB01.Int.ManualMode) XIC(S010RB01.Int.ToolRst) ]OTU(S010RB01.Int.CycleComp);
				RC: "############################$N"
				    "Outputs$N"
				    "############################";
				N: OTE(S010RB01.O1.Stop)OTE(S010RB01.O1.SafeSpeed)OTE(S010RB01.O1.MtnEnable);
				N: XIC(S010RB01.Int.ExtRunEnable)OTE(S010RB01.O1.Hold);
				N: XIC(S010RB01.Int.FltReset)OTE(S010RB01.O1.FaultRst);
				N: XIC(S010RB01.Int.DryCycle)OTE(S010RB01.O1.DryCycle);
				N: XIC(S010RB01Sfty.Int.EnblRbt)XIC(S010RB01.Int.AutoMode)[XIC(S010RB01.Int.RbtRdySU) XIC(S010RB01.O1.PdnStart) XIC(S010RB01.I1.Auto) XIO(S010RB01.I1.Pg_Running) XIO(S010RB01.I1.Pg_Paused) XIC(S010RB01.I1.AtHome) ,XIC(S010RB01.I1.Auto) XIC(S010RB01.I1.Pg_Paused) XIO(S010RB01.I1.Pg_Running) ]XIO(S010RB01.I1.RbtHeld)OTE(S010RB01.O1.UOPStart);
				N: GRT(S010RB01.Int.PgmReq,0)XIO(S010RB01.Int.Maintenance)XIC(S010RB01.Int.InitRdy)OTE(S010RB01.O1.PdnStart);
				N: XIC(S010RB01.Int.RetHome)OTE(S010RB01.O1.RetHome);
				RC: "############################$N"
				    "Robot AOIs$N"
				    "$N"
				    "RobotStdPNSelect$N"
				    "RobotStdSpeedSelect$N"
				    "############################";
				N: RobotStdPNSelect(S010RB01.AOIs.PN,S010RB01.Int.PNPerm1,S010RB01.Int.PNPerm2,S010RB01.I1,S010RB01.O1,S010RB01.Int.DecisionPermHMI)RobotStdSpeedSelect(S010RB01.AOIs.Speed,S010RB01.I1,S010RB01.O1);
				RC: "############################$N"
				    "Robot Standard$N"
				    "Cycle Time$N"
				    "############################";
				N: NOP();
				N: XIC(S010RB01.Int.AutoMode)XIO(S010RB01.I1.RbtHeld)XIO(S010RB01.I1.Pg_Paused)XIO(S010RB01.I1.AtHome)XIO(S010RB01.I1.WaitingOnInput)XIO(S010RB01.Int.Maintenance)MOV(3600000,S010RB01.Int.CycleTimeTmr.PRE)RTO(S010RB01.Int.CycleTimeTmr,?,?);
				N: MOV(3600000,S010RB01.Int.TackTimeTmr.PRE)RTO(S010RB01.Int.TackTimeTmr,?,?);
				N: GRT(S010RB01.Int.CycleTimeTmr.ACC,S010RB01.Int.CycleTime)OTE(S010RB01.Int.Overtime);
				N: XIC(S010RB01.I1.AtHome)XIO(S010RB01.I1.Pg_Running)[XIO(S010RB01.Int.CycleTimeOns) [MOV(S010RB01.Int.CycleTimeTmr.ACC,S010RB01.Int.CycleTimeStore) ,RES(S010RB01.Int.CycleTimeTmr) ,MOV(S010RB01.Int.TackTimeTmr.ACC,S010RB01.Int.TackTimeStore) ,RES(S010RB01.Int.TackTimeTmr) ] ,OTL(S010RB01.Int.CycleTimeOns) ];
				N: XIC(S010RB01.Int.TaskComp)OTU(S010RB01.Int.CycleTimeOns);
		END_ROUTINE

		ROUTINE D02_RB_Edit 
				RC: "############################$N"
				    "Robot Editable Routine$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "All Tasks Complete$N"
				    "############################";
				N: XIC(S010RB01.Int.Spr1Comp)OTE(S010RB01.Int.TaskComp);
				RC: "############################$N"
				    "Reset Cycle Complete$N"
				    "############################";
				N: [XIC(S010RB01.Int.CycleComp) XIC(S010RB01.Int.ClearOfTool1) XIC(S010RB01.Int.ToolRst) ,XIC(S010RB01.Int.RstCycleCompPB.PB) ]OTE(S010RB01.Int.RstCycleComp);
				RC: "############################$N"
				    "Self Pierce Rivet Process Setup$N"
				    "$N"
				    "Editable Setup$N"
				    "############################";
				N: XIC(Edit.Bit)[[XIC(S010RB01.I1.RvtOnOff) ,XIC(S010RB01.Int.DryCycle) XIO(S010RB01.I1.RvtOnOff) ] OTE(S010RB01.Int.SprSetup.Inp_Perm00) ,[XIO(S010RB01.I1.RvtFault) ,XIC(S010RB01.Int.DryCycle) ,XIC(S010RB01.Int.InitRdy) ,XIC(S010RB01.Int.DryCycle) XIO(S010RB01.I1.RvtOnOff) ] OTE(S010RB01.Int.SprSetup.Inp_Perm01) ,XIC(S010RB01.Int.ToolSprPos1) OTE(S010RB01.Int.SprSetup.Inp_Perm02) ,XIC(Edit.Bit) OTE(S010RB01.Int.SprSetup.Inp_Perm03) ,P_Perm(S010RB01.Int.SprSetup) ];
				RC: "############################$N"
				    "Robot Style Selection$N"
				    "$N"
				    "31 - Air GT Glass Roof$N"
				    "41 - Air Pure Metal Roof$N"
				    "############################";
				N: MOV(0,S010RB01.Int.PgmReq);
				N: XIO(S010RB01.Int.Maintenance)XIC(S010TL1.SR.Int.Part)[XIC(Edit.Bit) XIC(S010TL1.SR.Int.Model1) XIC(S010TL1.SR.Data.Options.CarModel.0) XIC(S010TL1.SR.Data.Options.CanRoofPack.0) MOV(31,S010RB01.Int.PgmReq) ,XIC(Edit.Bit) XIC(S010TL1.SR.Int.Model2) XIC(S010TL1.SR.Data.Options.CarModel.0) XIC(S010TL1.SR.Data.Options.CanRoofPack.1) MOV(41,S010RB01.Int.PgmReq) ];
				N: XIC(S010RB01.Int.Maintenance)MOV(6,S010RB01.Int.PgmReq);
				RC: "############################$N"
				    "Robot Functions Control Mapping$N"
				    "############################";
				N: XIC(S010RB01.Int.AutoMode)XIC(S010RB01.Int.RetFromPouncePB.PB)OTL(S010RB01.Int.RetFromPounceSeld);
				N: XIC(S010RB01.Int.RetFromPounceCancelPB.PB)OTU(S010RB01.Int.RetFromPounceSeld);
				N: [XIC(S010RB01.Int.RetFromMaintPosPB.PB) ,XIC(S010RB01.Int.MaintCompPB.PB) ]OTE(S010RB01.Int.RetFromMaintSeld);
				RC: "############################$N"
				    "Rvt SPR Process Completes Logic$N"
				    "$N"
				    "Add the required Part Present, Rvt Completes, Tool Zone, and PN$N"
				    "############################";
				N: NOP();
				N: XIC(S010RB01.Int.AutoMode)XIO(S010RB01.Int.Maintenance)XIC(S010RB01.I1.RvtProc1Welded)XIO(S010RB01.I1.Clrtransfer)XIO(S010RB01.I1.ClrUnclamp)OTL(S010RB01.Int.Spr1Rvtd);
				N: XIC(S010RB01.Int.AutoMode)XIO(S010RB01.Int.Maintenance)XIC(S010RB01.I1.RvtProc2Welded)XIO(S010RB01.I1.Clrtransfer)XIO(S010RB01.I1.ClrUnclamp)OTL(S010RB01.Int.Spr2Rvtd);
				N: [XIC(S010RB01.Int.CycleComp) ,XIC(S010RB01.I1.RvtSkipAll) ,XIC(S010RB01.I1.RvtFault) ,XIC(S010RB01.Int.RstCycleComp) ,XIC(Edit.Bit) ][OTU(S010RB01.Int.Spr1Rvtd) ,OTU(S010RB01.Int.Spr2Rvtd) ];
				N: [XIC(S010RB01.Int.Spr1Rvtd) XIC(S010RB01.I1.RvtSeqComp) ,XIC(S010RB01.Int.ManualMode) XIC(S010RB01.Int.SetSpr1CompPB.PB) ]OTL(S010RB01.Int.Spr1Comp);
				N: [XIC(S010RB01.Int.Spr2Rvtd) XIC(S010RB01.I1.RvtSeqComp) ,XIC(S010RB01.Int.ManualMode) XIC(S010RB01.Int.SetSpr2CompPB.PB) ]OTL(S010RB01.Int.Spr2Comp);
				N: [XIC(S010RB01.Int.CycleComp) ,XIC(S010RB01.Int.RstCycleComp) ,XIC(S010RB01.Int.ManualMode) XIC(S010RB01.Int.RstSpr1CompPB.PB) ][OTU(S010RB01.Int.Spr1Comp) ,OTU(S010RB01.Int.Spr2Comp) ];
				N: XIC(S010RB01.Int.AutoMode)XIO(S010RB01.Int.DryCycle)XIC(S010RB01.I1.RvtInCycle)XIC(S010RB01.I1.RvtFault)XIO(S010RB01.I1.Clrtransfer)OTL(S010RB01.Int.SprFault);
				N: [XIO(S010RB01.I1.RvtFault) XIC(S010RB01.I1.RvtOnOff) ,XIC(S010RB01.Int.DryCycle) XIO(S010RB01.I1.RvtOnOff) ]OTU(S010RB01.Int.SprFault);
				RC: "############################$N"
				    "Robot Cycle Complete$N"
				    "############################";
				N: OTU(S010RB01.Int.SetCycleCompPB.Vis)OTU(S010RB01.Int.RstCycleCompPB.Vis);
				RC: "############################$N"
				    "Maintenance Functions$N"
				    "############################";
				N: OTU(S010RB01.Int.GlobalMaintPosPB.Vis)OTU(S010RB01.Int.GoToMaintPosTool1PB.Vis)OTU(S010RB01.Int.GoToMaintPosTool2PB.Vis)OTU(S010RB01.Int.GoToMaintPosTool3PB.Vis)OTU(S010RB01.Int.GoToMaintPosTool4PB.Vis)OTU(S010RB01.Int.GoToMaintPosNoToolPB.Vis)OTU(S010RB01.Int.RetFromMaintPosPB.Vis)OTU(S010RB01.Int.MaintCompPB.Vis);
				RC: "############################$N"
				    "Self Pierce Rivet Functions$N"
				    "############################";
				N: [OTU(S010RB01.Int.SetSpr1CompPB.Vis) ,OTU(S010RB01.Int.RstSpr1CompPB.Vis) ][OTU(S010RB01.Int.SetSpr2CompPB.Vis) ,OTU(S010RB01.Int.RstSpr2CompPB.Vis) ][OTU(S010RB01.Int.SetSpr3CompPB.Vis) ,OTU(S010RB01.Int.RstSpr3CompPB.Vis) ][OTU(S010RB01.Int.SetSpr4CompPB.Vis) ,OTU(S010RB01.Int.RstSpr4CompPB.Vis) ][OTU(S010RB01.Int.SetSpr5CompPB.Vis) ,OTU(S010RB01.Int.RstSpr5CompPB.Vis) ];
		END_ROUTINE

		ROUTINE D03_RB_PNs 
				RC: "############################$N"
				    "Process Numbers Logic$N"
				    "$N"
				    "PN Control$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Maintenance Position$N"
				    "############################";
				N: XIC(S010RB01.AOIs.PN.stsPN3)OTE(S010RB01.Int.AtMaint);
				RC: "############################$N"
				    "Maintenance Position Clear$N"
				    "############################";
				N: XIC(S010RB01.AOIs.PN.stsPN3)[XIC(S010RB01.Int.AutoMode) OTE(S010RB01.PNPerm.PN3Perm1.Inp_Perm00) ,XIO(S010RB01.Int.MaintPosTool1Seld) XIO(S010RB01.Int.MaintPosTool2Seld) XIO(S010RB01.Int.MaintPosTool3Seld) XIO(S010RB01.Int.MaintPosTool4Seld) XIO(S010RB01.Int.MaintPosNoToolSeld) OTE(S010RB01.PNPerm.PN3Perm1.Inp_Perm01) ,XIC(S010RB01.Int.RetFromMaintSeld) OTE(S010RB01.PNPerm.PN3Perm1.Inp_Perm02) ,XIC(S010RB01.I1.AtMaintPos) OTE(S010RB01.PNPerm.PN3Perm1.Inp_Perm03) ,P_Perm(S010RB01.PNPerm.PN3Perm1) ]COP(S010RB01.PNPerm.PN3Perm1,S010RB01.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S010RB01.Int.PNPerm2,1);
				RC: "ProcessNumber 130 - OK to Enter S010TL1$N"
				    "SPR Process ";
				N: XIC(S010RB01.AOIs.PN.stsPN130)[XIO(S010RB01.Int.Spr1Comp) OTE(S010RB01.PNPerm.PN130Perm1.Inp_Perm00) ,XIC(S010RB01.Int.ToolSprPos1) OTE(S010RB01.PNPerm.PN130Perm1.Inp_Perm01) ,XIC(S010TL1.Int.AllPartsPres1) OTE(S010RB01.PNPerm.PN130Perm1.Inp_Perm02) ,XIC(Edit.Bit) OTE(S010RB01.PNPerm.PN130Perm1.Inp_Perm03) ,P_Perm(S010RB01.PNPerm.PN130Perm1) ]COP(S010RB01.PNPerm.PN130Perm1,S010RB01.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S010RB01.Int.PNPerm2,1);
				RC: "ProcessNumber 131 - OK To Start SPR Process$N"
				    "S010TL1";
				N: XIC(S010RB01.AOIs.PN.stsPN131)[XIC(S010TL1.Int.AtWorkPos1) OTE(S010RB01.PNPerm.PN131Perm1.Inp_Perm00) ,XIC(S010TL1.Int.AllPartsPres1) OTE(S010RB01.PNPerm.PN131Perm1.Inp_Perm01) ,XIC(Edit.Bit) OTE(S010RB01.PNPerm.PN131Perm1.Inp_Perm02) ,XIC(Edit.Bit) OTE(S010RB01.PNPerm.PN131Perm1.Inp_Perm03) ,XIC(Edit.Bit) OTE(S010RB01.PNPerm.PN131Perm1.Inp_Perm04) ,P_Perm(S010RB01.PNPerm.PN131Perm1) ]COP(S010RB01.PNPerm.PN131Perm1,S010RB01.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S010RB01.Int.PNPerm2,1);
				RC: "ProcessNumber 133 - S010TL1 SPR Process 1$N"
				    "Complete";
				N: XIC(S010RB01.AOIs.PN.stsPN133)[XIC(S010RB01.Int.Spr1Rvtd) OTE(S010RB01.PNPerm.PN133Perm1.Inp_Perm00) ,XIC(S010RB01.Int.Spr1Comp) OTE(S010RB01.PNPerm.PN133Perm1.Inp_Perm01) ,XIC(Edit.Bit) OTE(S010RB01.PNPerm.PN133Perm1.Inp_Perm02) ,XIC(Edit.Bit) OTE(S010RB01.PNPerm.PN133Perm1.Inp_Perm03) ,XIC(Edit.Bit) OTE(S010RB01.PNPerm.PN133Perm1.Inp_Perm04) ,XIC(Edit.Bit) OTE(S010RB01.PNPerm.PN133Perm1.Inp_Perm05) ,P_Perm(S010RB01.PNPerm.PN133Perm1) ]COP(S010RB01.PNPerm.PN133Perm1,S010RB01.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S010RB01.Int.PNPerm2,1);
		END_ROUTINE

		ROUTINE D04_RB_MapOutpus 
				RC: "############################$N"
				    "Robot Standard Output Mapping$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Output Mapping$N"
				    "############################";
				N: [XIO(S010RB01.ENet.CommOK) FLL(0,S010RB01.O1,1) ,XIC(S010RB01.ENet.CommOK) COP(S010RB01.O1,S010RB01:O1,1) ];
		END_ROUTINE

		ROUTINE Y00_Alarms_L1 
				RC: "******************************************************************$N"
				    "Robot Alarms$N"
				    "****************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Machine Faults$N"
				    "******************************************************************";
				N: NOP();
				N: EQU(FRM_P1_ESW1:I.Fault,0)EQU(FRM_P1_ESW2:I.Fault,0)XIO(S010RB01.ENet.CommOK)OTE(S2.L1[24].0);
				N: XIC(S010RB01.ENet.CommOK)XIO(S010RB01Sfty.Int.ModRunMode)OTE(S2.L1[24].1);
		END_ROUTINE

		ROUTINE Y01_Alarms_L2 
				RC: "******************************************************************$N"
				    "Robot Alarms$N"
				    "****************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Manual Interventions$N"
				    "******************************************************************";
				N: NOP();
				N: XIC(S010RB01Sfty.Int.ModRunMode)XIO(S010RB01Sfty.Int.EStopIns.O1)OTE(S2.L2[24].0);
				N: XIC(S010RB01Sfty.Int.ModRunMode)XIO(S010RB01Sfty.Int.SftyIntEnbld)OTE(S2.L2[24].1);
				N: XIC(S010RB01Sfty.Int.ModRunMode)XIC(S010RB01Sfty.Int.SftyChanged)OTE(S2.L2[24].2);
				N: XIC(S010RB01.Int.AutoMode)XIC(S010RB01.I1.Auto)XIC(S010RB01.I1.AtHome)[MOV(5000,S010RB01.Int.FltDelayTmr[0].PRE) TON(S010RB01.Int.FltDelayTmr[0],?,?) ,XIC(S010RB01.Int.FltDelayTmr[0].DN) OTE(S2.L2[24].3) ];
				N: XIC(sZ005_040.PowerEnbld)XIO(S010RB01.I1.Auto)OTE(S2.L2[24].4);
				N: XIC(sZ005_040.PowerEnbld)XIC(S010RB01.I1.PendEnbld)OTE(S2.L2[24].5);
				N: XIC(S010RB01.Int.AutoMode)XIC(S010RB01.Int.ExtRunEnable)XIC(S010RB01.I1.RbtHeld)OTE(S2.L2[24].6);
				N: XIC(sZ005_040.PowerEnbld)XIC(S010RB01.Int.RetFromPounceSeld)OTE(S2.L2[24].7);
		END_ROUTINE

		ROUTINE Y02_Alarms_L3 
				RC: "******************************************************************$N"
				    "Robot Alarms$N"
				    "****************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Warnings$N"
				    "******************************************************************";
				N: NOP();
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S010RB02 (Description := "Carry Gun Flow Drill Screw",
	                  Class := Standard,
	                  MAIN := "A00_Main",
	                  MODE := 0,
	                  DisableFlag := 0,
	                  UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE A00_Main 
				N: JSR(D00_RB_MapInputs,0);
				N: JSR(D01_RB_Zones,0);
				N: JSR(D02_RB,0);
				N: JSR(D02_RB_Edit,0);
				N: JSR(D03_RB_PNs,0);
				N: JSR(D04_RB_MapOutpus,0);
				N: JSR(Y00_Alarms_L1,0);
				N: JSR(Y01_Alarms_L2,0);
				N: JSR(Y02_Alarms_L3,0);
		END_ROUTINE

		ROUTINE D00_RB_MapInputs 
				RC: "############################$N"
				    "Flow Drill Screw$N"
				    "Input Mapping$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Flow Drill Screw$N"
				    "Input Mapping$N"
				    "############################";
				N: [XIO(S010RB02.ENet.CommOK) FLL(0,S010RB02.I1,1) ,XIC(S010RB02.ENet.CommOK) COP(S010RB02:I1.Input[0],S010RB02.I1,1) ];
				N: [XIC(S010TL1.Int.AutoMode) OTE(S010RB02.Int.AutoMode) ,XIC(S010TL1.Int.ManualMode) OTE(S010RB02.Int.ManualMode) ];
				N: XIC(S010TL1.Int.DryCycle)OTE(S010RB02.Int.DryCycle);
				N: [XIC(S010TL1.Int.AutoModeStopReq) ,XIC(Z005_040.AutoModeStopReq) ]OTE(S010RB02.Int.AutoModeStopReq);
				N: [XIC(Edit.Bit) MOV(1500,S010RB02.Int.AirOnDelayTmr.PRE) TOF(S010RB02.Int.AirOnDelayTmr,?,?) ,XIC(S010RB02.Int.AirOnDelayTmr.DN) OTE(S010RB02.Int.AirOn) ];
				N: XIC(Edit.Bit)OTU(S010RB02.Int.DisableDrives);
				N: XIC(S010TL1.Int.RstCycComp)OTE(S010RB02.Int.ToolRst);
				N: [XIC(S010TL1.Int.FaultResetPB) XIC(sZ005_040.AllGatesOk) ,XIC(sZ005_040.StaPowerEnblPB) ,XIC(S010RB02.Int.ExtMotorOn) ]OTE(S010RB02.Int.FltReset);
				N: XIC(S010RB02.Int.SetCycleCompPB.PB)OTE(S010RB02.Int.SetCycleComp);
		END_ROUTINE

		ROUTINE D01_RB_Zones 
				RC: "******************************************************************$N"
				    "Robot Standard$N"
				    "Zones$N"
				    "$N"
				    "Zn1 = Pick$N"
				    "Zn2 = Drop$N"
				    "Zn3 = Maintenance Position$N"
				    "$N"
				    "Zn4-10 TBD$N"
				    "******************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "RobotStdZone AOI Setup$N"
				    "$N"
				    "1. OTE Zn#Used to Enable. If Zone not used OTU$N"
				    "$N"
				    "2. Add All Adjacent Zone.outRbtZnClrMem -]/[- $N"
				    "$N"
				    "3. Add all required tool Pick/Drop Setup Conditions$N"
				    "******************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Zone 1$N"
				    "$N"
				    "S010RB02 Zone 1 with S005RB01 Zone 2 (Drop) And S020RB05 Zone 1 (Pick)$N"
				    "S010RB02 Rivet Process (SPR)$N"
				    "******************************************************************";
				N: [OTE(S010RB02.Int.Zn1Used) ,XIO(S005RB01.AOIs.Zone[2].outRbtZnClrMem) XIO(S020RB05.AOIs.Zone[1].outRbtZnClrMem) OTE(S010RB02.Int.Zn1ClrMem) ,XIC(S010RB02.Int.AutoMode) XIC(S010TL1.Int.AtWorkPos2) OTE(S010RB02.Int.Zn1ToolCond) ,RobotStdZone(S010RB02.AOIs.Zone[1],S010RB02.Int.Zn1Used,S010RB02.Int.Zn1ClrMem,S010RB02.Int.Zn1ToolCond,S010RB02.I1.ClrIntfZn1,S010RB02.O1.ZnClear1) ];
				RC: "******************************************************************$N"
				    "Zone 2$N"
				    "******************************************************************";
				N: [OTE(S010RB02.Int.Zn2Used) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn2ClrMem) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn2ToolCond) ,RobotStdZone(S010RB02.AOIs.Zone[2],S010RB02.Int.Zn2Used,S010RB02.Int.Zn2ClrMem,S010RB02.Int.Zn2ToolCond,S010RB02.I1.ClrIntfZn2,S010RB02.O1.ZnClear2) ];
				RC: "******************************************************************$N"
				    "Zone 3$N"
				    "******************************************************************";
				N: [OTU(S010RB02.Int.Zn3Used) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn3ClrMem) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn3ToolCond) ,RobotStdZone(S010RB02.AOIs.Zone[3],S010RB02.Int.Zn3Used,S010RB02.Int.Zn3ClrMem,S010RB02.Int.Zn3ToolCond,S010RB02.I1.ClrIntfZn3,S010RB02.O1.ZnClear3) ];
				RC: "******************************************************************$N"
				    "Zone 4$N"
				    "******************************************************************";
				N: [OTU(S010RB02.Int.Zn4Used) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn4ClrMem) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn4ToolCond) ,RobotStdZone(S010RB02.AOIs.Zone[4],S010RB02.Int.Zn4Used,S010RB02.Int.Zn4ClrMem,S010RB02.Int.Zn4ToolCond,S010RB02.I1.ClrIntfZn4,S010RB02.O1.ZnClear4) ];
				RC: "******************************************************************$N"
				    "Zone 5$N"
				    "******************************************************************";
				N: [OTU(S010RB02.Int.Zn5Used) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn5ClrMem) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn5ToolCond) ,RobotStdZone(S010RB02.AOIs.Zone[5],S010RB02.Int.Zn5Used,S010RB02.Int.Zn5ClrMem,S010RB02.Int.Zn5ToolCond,S010RB02.I1.ClrIntfZn5,S010RB02.O1.ZnClear5) ];
				RC: "******************************************************************$N"
				    "Zone 6$N"
				    "******************************************************************";
				N: [OTU(S010RB02.Int.Zn6Used) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn6ClrMem) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn6ToolCond) ,RobotStdZone(S010RB02.AOIs.Zone[6],S010RB02.Int.Zn6Used,S010RB02.Int.Zn6ClrMem,S010RB02.Int.Zn6ToolCond,S010RB02.I1.ClrIntfZn6,S010RB02.O1.ZnClear6) ];
				RC: "******************************************************************$N"
				    "Zone 7$N"
				    "******************************************************************";
				N: [OTU(S010RB02.Int.Zn7Used) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn7ClrMem) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn7ToolCond) ,RobotStdZone(S010RB02.AOIs.Zone[7],S010RB02.Int.Zn7Used,S010RB02.Int.Zn7ClrMem,S010RB02.Int.Zn7ToolCond,S010RB02.I1.ClrIntfZn7,S010RB02.O1.ZnClear7) ];
				RC: "******************************************************************$N"
				    "Zone 8$N"
				    "******************************************************************";
				N: [OTU(S010RB02.Int.Zn8Used) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn8ClrMem) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn8ToolCond) ,RobotStdZone(S010RB02.AOIs.Zone[8],S010RB02.Int.Zn8Used,S010RB02.Int.Zn8ClrMem,S010RB02.Int.Zn8ToolCond,S010RB02.I1.ClrIntfZn8,S010RB02.O1.ZnClear8) ];
				RC: "******************************************************************$N"
				    "Zone 9$N"
				    "******************************************************************";
				N: [OTU(S010RB02.Int.Zn9Used) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn9ClrMem) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn9ToolCond) ,RobotStdZone(S010RB02.AOIs.Zone[9],S010RB02.Int.Zn9Used,S010RB02.Int.Zn9ClrMem,S010RB02.Int.Zn9ToolCond,S010RB02.I1.ClrIntfZn9,S010RB02.O1.ZnClear9) ];
				RC: "******************************************************************$N"
				    "Zone 10$N"
				    "******************************************************************";
				N: [OTU(S010RB02.Int.Zn10Used) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn10ClrMem) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn10ToolCond) ,RobotStdZone(S010RB02.AOIs.Zone[10],S010RB02.Int.Zn10Used,S010RB02.Int.Zn10ClrMem,S010RB02.Int.Zn10ToolCond,S010RB02.I1.ClrIntfZn10,S010RB02.O1.ZnClear10) ];
				RC: "******************************************************************$N"
				    "Zone 11$N"
				    "******************************************************************";
				N: [OTU(S010RB02.Int.Zn11Used) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn11ClrMem) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn11ToolCond) ,RobotStdZone(S010RB02.AOIs.Zone[11],S010RB02.Int.Zn11Used,S010RB02.Int.Zn11ClrMem,S010RB02.Int.Zn11ToolCond,S010RB02.I1.ClrIntfZn11,S010RB02.O1.ZnClear11) ];
				RC: "******************************************************************$N"
				    "Zone 12$N"
				    "******************************************************************";
				N: [OTU(S010RB02.Int.Zn12Used) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn12ClrMem) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn12ToolCond) ,RobotStdZone(S010RB02.AOIs.Zone[12],S010RB02.Int.Zn12Used,S010RB02.Int.Zn12ClrMem,S010RB02.Int.Zn12ToolCond,S010RB02.I1.ClrIntfZn12,S010RB02.O1.ZnClear12) ];
				RC: "******************************************************************$N"
				    "Zone 13$N"
				    "******************************************************************";
				N: [OTU(S010RB02.Int.Zn13Used) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn13ClrMem) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn13ToolCond) ,RobotStdZone(S010RB02.AOIs.Zone[13],S010RB02.Int.Zn13Used,S010RB02.Int.Zn13ClrMem,S010RB02.Int.Zn13ToolCond,S010RB02.I1.ClrIntfZn13,S010RB02.O1.ZnClear13) ];
				RC: "******************************************************************$N"
				    "Zone 14$N"
				    "******************************************************************";
				N: [OTU(S010RB02.Int.Zn14Used) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn14ClrMem) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn14ToolCond) ,RobotStdZone(S010RB02.AOIs.Zone[14],S010RB02.Int.Zn14Used,S010RB02.Int.Zn14ClrMem,S010RB02.Int.Zn14ToolCond,S010RB02.I1.ClrIntfZn14,S010RB02.O1.ZnClear14) ];
				RC: "******************************************************************$N"
				    "Zone 15$N"
				    "******************************************************************";
				N: [OTU(S010RB02.Int.Zn15Used) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn15ClrMem) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn15ToolCond) ,RobotStdZone(S010RB02.AOIs.Zone[15],S010RB02.Int.Zn15Used,S010RB02.Int.Zn15ClrMem,S010RB02.Int.Zn15ToolCond,S010RB02.I1.ClrIntfZn15,S010RB02.O1.ZnClear15) ];
				RC: "******************************************************************$N"
				    "Zone 16$N"
				    "******************************************************************";
				N: [OTU(S010RB02.Int.Zn16Used) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn16ClrMem) ,XIC(Edit.Bit) OTE(S010RB02.Int.Zn16ToolCond) ,RobotStdZone(S010RB02.AOIs.Zone[16],S010RB02.Int.Zn16Used,S010RB02.Int.Zn16ClrMem,S010RB02.Int.Zn16ToolCond,S010RB02.I1.ClrIntfZn16,S010RB02.O1.ZnClear16) ];
				N: [XIO(S010RB02.AOIs.Zone[1].outRbtZnClrMem) ,XIC(S010RB02.I1.AtHome) ]OTE(S010RB02.Int.ClearOfTool1);
				N: [XIC(Edit.Bit) ,XIC(S010RB02.I1.AtHome) ]OTE(S010RB02.Int.ClearOfTool2);
				N: [XIC(Edit.Bit) ,XIC(S010RB02.I1.AtHome) ]OTE(S010RB02.Int.ClearOfTool3);
				N: [XIC(Edit.Bit) ,XIC(S010RB02.I1.AtHome) ]OTE(S010RB02.Int.ClearOfTool4);
				N: [XIC(Edit.Bit) ,XIC(S010RB02.I1.AtHome) ]OTE(S010RB02.Int.ClearOfTool5);
		END_ROUTINE

		ROUTINE D02_RB 
				RC: "############################$N"
				    "S010RB02$N"
				    "Fanuc Robot Carry Gun $N"
				    "Flow Drill Screw Application$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Rung to check which PN is Active$N"
				    "############################";
				N: NEQ(S010RB02.AOIs.PN.stsPN,0)NOP();
				N: [XIO(S010RB02.I1.PendEnbld) XIC(S010RB02Sfty.Int.TeachOff) OTE(S010RB02.Int.TeachSSOff) ,XIC(S010RB02.I1.PendEnbld) XIC(S010RB02Sfty.Int.TeachSeld) OTE(S010RB02.Int.InTeach) ];
				N: XIC(sZ005_040.PowerEnbld)XIC(sZ005_040.PerimeterSafe)XIC(S010RB02Sfty.Int.EnblRbt)XIC(S010RB02Sfty.Int.TeachOff)XIC(S010RB02Sfty.Int.AdjRbtsTeachOff)XIO(S010RB02Sfty.Int.DisableDrives)XIO(S010RB02.I1.Auto)[XIC(Z005_040.GlobalAutoModePB) ,XIC(S010RB02.Int.SrvoOnDwlTmr.TT) ]XIC(Z005_040.AirOn)XIC(Z005_040.AllModCommOk)[MOV(3000,S010RB02.Int.SrvoOnDwlTmr.PRE) TON(S010RB02.Int.SrvoOnDwlTmr,?,?) ,XIC(S010RB02.Int.SrvoOnDwlTmr.EN) XIO(S010RB02.Int.SrvoOnDwlTmr.DN) OTE(S010RB02.Int.ExtMotorOn) ];
				RC: "############################$N"
				    "External Run Enable$N"
				    "############################";
				N: [XIO(S010RB02.Int.DisableDrives) [XIC(S010RB02.Int.AutoMode) XIC(S010RB02.I1.Auto) ,XIC(S010RB02.Int.ManualMode) ] ,XIC(S010RB02.Int.InTeach) ]MOV(1000,S010RB02.Int.RunEnableDelayTmr.PRE)TON(S010RB02.Int.RunEnableDelayTmr,?,?);
				N: XIC(S010RB02.Int.RunEnableDelayTmr.DN)[XIC(S010RB02.Int.AutoMode) XIC(S010RB02.I1.Auto) ,XIC(S010RB02.Int.InTeach) XIO(S010RB02.I1.Auto) ]XIC(sZ005_040.PowerEnbld)OTE(S010RB02.Int.ExtRunEnable);
				RC: "############################$N"
				    "Robot Ready Status$N"
				    "############################";
				N: XIC(S010RB02.I1.Cmd_Enbl)XIC(S010RB02.I1.Sys_Rdy)XIO(S010RB02.I1.RbtFaulted)XIO(S010RB02.I1.PendEnbld)XIC(S010RB02.I1.Auto)OTE(S010RB02.Int.RbtRdySU);
				N: XIC(S010RB02.Int.RbtRdySU)XIC(S010RB02.I1.AtHome)XIO(S010RB02.I1.Pg_Running)XIO(S010RB02.I1.Pg_Paused)XIO(S010RB02.I1.RbtHeld)OTE(S010RB02.Int.RbtRdy);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S010RB02.Int.RetFromMaintSeld) ,XIC(S010RB02.Int.MaintPosNoToolSeld) ,XIC(S010RB02.Int.MaintPosTool2Seld) ,XIC(S010RB02.Int.MaintPosTool3Seld) ,XIC(S010RB02.Int.MaintPosTool4Seld) ]OTU(S010RB02.Int.MaintPosTool1Seld);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S010RB02.Int.RetFromMaintSeld) ,XIC(S010RB02.Int.MaintPosNoToolSeld) ,XIC(S010RB02.Int.MaintPosTool1Seld) ,XIC(S010RB02.Int.MaintPosTool3Seld) ,XIC(S010RB02.Int.MaintPosTool4Seld) ]OTU(S010RB02.Int.MaintPosTool2Seld);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S010RB02.Int.RetFromMaintSeld) ,XIC(S010RB02.Int.MaintPosNoToolSeld) ,XIC(S010RB02.Int.MaintPosTool1Seld) ,XIC(S010RB02.Int.MaintPosTool2Seld) ,XIC(S010RB02.Int.MaintPosTool4Seld) ]OTU(S010RB02.Int.MaintPosTool3Seld);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S010RB02.Int.RetFromMaintSeld) ,XIC(S010RB02.Int.MaintPosNoToolSeld) ,XIC(S010RB02.Int.MaintPosTool1Seld) ,XIC(S010RB02.Int.MaintPosTool2Seld) ,XIC(S010RB02.Int.MaintPosTool3Seld) ]OTU(S010RB02.Int.MaintPosTool4Seld);
				N: [XIC(S010RB02.Int.RetFromMaintSeld) ,XIC(S010RB02.Int.MaintPosTool1Seld) ,XIC(S010RB02.Int.MaintPosTool2Seld) ,XIC(S010RB02.Int.MaintPosTool3Seld) ,XIC(S010RB02.Int.MaintPosTool4Seld) ]OTU(S010RB02.Int.MaintPosNoToolSeld);
				N: XIC(S010RB02.Int.AutoMode)[XIC(S010RB02.Int.GoToMaintPosTool1PB.PB) OTL(S010RB02.Int.MaintPosTool1Seld) ,XIC(S010RB02.Int.GoToMaintPosTool2PB.PB) OTL(S010RB02.Int.MaintPosTool2Seld) ,XIC(S010RB02.Int.GoToMaintPosTool3PB.PB) OTL(S010RB02.Int.MaintPosTool3Seld) ,XIC(S010RB02.Int.GoToMaintPosTool4PB.PB) OTL(S010RB02.Int.MaintPosTool4Seld) ];
				N: XIC(S010RB02.Int.AutoMode)XIC(S010RB02.Int.GoToMaintPosNoToolPB.PB)OTL(S010RB02.Int.MaintPosNoToolSeld);
				N: [XIC(S010RB02.Int.MaintPosTool1Seld) ,XIC(S010RB02.Int.MaintPosTool2Seld) ,XIC(S010RB02.Int.MaintPosTool3Seld) ,XIC(S010RB02.Int.MaintPosTool4Seld) ,XIC(S010RB02.Int.MaintPosNoToolSeld) ][XIC(S010RB02.I1.Clrtransfer) OTE(S010RB02.Int.Maintenance) ,OTE(S010RB02.Int.MaintenanceSetup) ];
				RC: "############################$N"
				    "Robot Initiate Permissives$N"
				    "$N"
				    "Do not Edit Permissives$N"
				    "Lucid Motors Controls Dpt.$N"
				    "############################";
				N: [XIC(S010RB02.Int.AirOn) OTE(S010RB02.Int.InitPerm1.Inp_Perm00) ,XIO(S010RB02.Int.CycleComp) OTE(S010RB02.Int.InitPerm1.Inp_Perm01) ,XIO(S010RB02.Int.RetHome) OTE(S010RB02.Int.InitPerm1.Inp_Perm02) ,XIC(S010RB02.I1.FdsAuto) OTE(S010RB02.Int.InitPerm1.Inp_Perm03) ,XIO(S010RB02.I1.FdsReqSuperClean) OTE(S010RB02.Int.InitPerm1.Inp_Perm04) ,XIO(S010RB02.Int.CleanScrewAtNose) OTE(S010RB02.Int.InitPerm1.Inp_Perm05) ,P_Perm(S010RB02.Int.InitPerm1) ];
				N: [XIC(S010RB02.I1.Auto) OTE(S010RB02.Int.InitPerm2.Inp_Perm00) ,XIC(S010RB02.Int.TeachSSOff) OTE(S010RB02.Int.InitPerm2.Inp_Perm01) ,XIO(S010RB02.Int.CycEndSeld) OTE(S010RB02.Int.InitPerm2.Inp_Perm02) ,XIO(S010RB02.Int.RetFromPounceSeld) OTE(S010RB02.Int.InitPerm2.Inp_Perm03) ,XIO(S010RB02.Int.AutoModeStopReq) OTE(S010RB02.Int.InitPerm2.Inp_Perm04) ,XIO(S010RB02.Int.FixtInPosHold) OTE(S010RB02.Int.InitPerm2.Inp_Perm05) ,[XIO(S010RB02.I1.FdsInCycle) ,XIC(S010RB02.Int.InitRdy) ] OTE(S010RB02.Int.InitPerm2.Inp_Perm06) ,[XIO(S010RB02.I1.FdsProc1Welded) ,XIC(S010RB02.Int.InitRdy) ] OTE(S010RB02.Int.InitPerm2.Inp_Perm07) ,[XIC(S010RB02.I1.FdsRdyToOp) ,XIC(S010RB02.Int.Maintenance) ] OTE(S010RB02.Int.InitPerm2.Inp_Perm08) ,P_Perm(S010RB02.Int.InitPerm2) ];
				N: XIC(S010RB02.Int.AutoMode)[XIC(S010RB02.Int.FdsSetup.Sts_PermOK) XIC(S010RB02.Int.InitPerm1.Sts_PermOK) ,XIC(S010RB02.Int.Maintenance) ]XIC(S010RB02.Int.InitPerm2.Sts_PermOK)OTE(S010RB02.Int.InitRdy);
				RC: "############################$N"
				    "Robot Style Selection Outputs$N"
				    "############################";
				N: XIC(S010RB02.Int.InitRdy)[XIC(S010RB02.Int.PgmReq.0) OTE(S010RB02.O1.Style1) ,XIC(S010RB02.Int.PgmReq.1) OTE(S010RB02.O1.Style2) ,XIC(S010RB02.Int.PgmReq.2) OTE(S010RB02.O1.Style3) ,XIC(S010RB02.Int.PgmReq.3) OTE(S010RB02.O1.Style4) ,XIC(S010RB02.Int.PgmReq.4) OTE(S010RB02.O1.Style5) ,XIC(S010RB02.Int.PgmReq.5) OTE(S010RB02.O1.Style6) ,XIC(S010RB02.Int.PgmReq.6) OTE(S010RB02.O1.Style7) ,XIC(S010RB02.Int.PgmReq.7) OTE(S010RB02.O1.Style8) ];
				N: [XIC(S010RB02.Int.RetFromPounceSeld) ,XIC(S010RB02.Int.MaintPosTool1Seld) ,XIC(S010RB02.Int.MaintPosTool2Seld) ,XIC(S010RB02.Int.MaintPosTool3Seld) ,XIC(S010RB02.Int.MaintPosTool4Seld) ,XIC(S010RB02.Int.MaintPosNoToolSeld) ]OTE(S010RB02.Int.RetHome);
				N: [XIC(S010RB02.Int.TaskComp) XIC(S010RB02.I1.ClrUnclamp) ,XIC(S010RB02.Int.SetCycleComp) [XIC(S010RB02.I1.AtHome) ,XIC(S010RB02.I1.ClrUnclamp) XIC(S010RB02.I1.Clrtransfer) ] ]OTL(S010RB02.Int.CycleComp);
				N: [XIC(S010RB02.Int.RstCycleComp) ,XIC(S010RB02.Int.ManualMode) XIC(S010RB02.Int.ToolRst) ]OTU(S010RB02.Int.CycleComp);
				RC: "############################$N"
				    "Outputs$N"
				    "############################";
				N: OTE(S010RB02.O1.Stop)OTE(S010RB02.O1.SafeSpeed)OTE(S010RB02.O1.MtnEnable);
				N: XIC(S010RB02.Int.ExtRunEnable)OTE(S010RB02.O1.Hold);
				N: XIC(S010RB02.Int.FltReset)OTE(S010RB02.O1.FaultRst);
				N: XIC(S010RB02.Int.DryCycle)OTE(S010RB02.O1.DryCycle);
				N: XIC(S010RB02Sfty.Int.EnblRbt)XIC(S010RB02.Int.AutoMode)[XIC(S010RB02.Int.RbtRdySU) XIC(S010RB02.O1.PdnStart) XIC(S010RB02.I1.Auto) XIO(S010RB02.I1.Pg_Running) XIO(S010RB02.I1.Pg_Paused) XIC(S010RB02.I1.AtHome) ,XIC(S010RB02.I1.Auto) XIC(S010RB02.I1.Pg_Paused) XIO(S010RB02.I1.Pg_Running) ]XIO(S010RB02.I1.RbtHeld)OTE(S010RB02.O1.UOPStart);
				N: GRT(S010RB02.Int.PgmReq,0)XIO(S010RB02.Int.Maintenance)XIC(S010RB02.Int.InitRdy)OTE(S010RB02.O1.PdnStart);
				N: XIC(S010RB02.Int.RetHome)OTE(S010RB02.O1.RetHome);
				RC: "############################$N"
				    "Robot AOIs$N"
				    "$N"
				    "RobotStdPNSelect$N"
				    "RobotStdSpeedSelect$N"
				    "############################";
				N: RobotStdPNSelect(S010RB02.AOIs.PN,S010RB02.Int.PNPerm1,S010RB02.Int.PNPerm2,S010RB02.I1,S010RB02.O1,S010RB02.Int.DecisionPermHMI)RobotStdSpeedSelect(S010RB02.AOIs.Speed,S010RB02.I1,S010RB02.O1);
				RC: "############################$N"
				    "Robot Standard$N"
				    "Cycle Time$N"
				    "############################";
				N: NOP();
				N: XIC(S010RB02.Int.AutoMode)XIO(S010RB02.I1.RbtHeld)XIO(S010RB02.I1.Pg_Paused)XIO(S010RB02.I1.AtHome)XIO(S010RB02.I1.WaitingOnInput)XIO(S010RB02.Int.Maintenance)MOV(3600000,S010RB02.Int.CycleTimeTmr.PRE)RTO(S010RB02.Int.CycleTimeTmr,?,?);
				N: MOV(3600000,S010RB02.Int.TackTimeTmr.PRE)RTO(S010RB02.Int.TackTimeTmr,?,?);
				N: GRT(S010RB02.Int.CycleTimeTmr.ACC,S010RB02.Int.CycleTime)OTE(S010RB02.Int.Overtime);
				N: XIC(S010RB02.I1.AtHome)XIO(S010RB02.I1.Pg_Running)[XIO(S010RB02.Int.CycleTimeOns) [MOV(S010RB02.Int.CycleTimeTmr.ACC,S010RB02.Int.CycleTimeStore) ,RES(S010RB02.Int.CycleTimeTmr) ,MOV(S010RB02.Int.TackTimeTmr.ACC,S010RB02.Int.TackTimeStore) ,RES(S010RB02.Int.TackTimeTmr) ] ,OTL(S010RB02.Int.CycleTimeOns) ];
				N: XIC(S010RB02.Int.TaskComp)OTU(S010RB02.Int.CycleTimeOns);
				RC: "############################$N"
				    "Material Handler Robot$N"
				    "Output Mapping$N"
				    "############################";
				N: [XIO(S010RB02.ENet.CommOK) FLL(0,S010RB02.O1,1) ,XIC(S010RB02.ENet.CommOK) COP(S010RB02.O1,S010RB02:O1,1) ];
		END_ROUTINE

		ROUTINE D02_RB_Edit 
				RC: "############################$N"
				    "Robot Editable Routine$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "All Tasks Complete$N"
				    "############################";
				N: XIC(S010RB02.Int.Fds1Comp)OTE(S010RB02.Int.TaskComp);
				RC: "############################$N"
				    "Reset Cycle Complete$N"
				    "############################";
				N: [XIC(S010RB02.Int.CycleComp) XIC(S010RB02.Int.ClearOfTool1) XIC(S010RB02.Int.ToolRst) ,XIC(S010RB02.Int.RstCycleCompPB.PB) ]OTE(S010RB02.Int.RstCycleComp);
				RC: "############################$N"
				    "Flow Drill Screw Process Setup$N"
				    "$N"
				    "Editable Setup$N"
				    "############################";
				N: XIC(Edit.Bit)[[XIC(S010RB02.I1.FdsIntActive) ,XIC(S010RB02.Int.DryCycle) XIO(S010RB02.I1.RvtOnOff) ] OTE(S010RB02.Int.FdsSetup.Inp_Perm00) ,[XIO(S010RB02.I1.FdsFault) ,XIC(S010RB02.Int.DryCycle) ,XIC(S010RB02.Int.InitRdy) ,XIC(S010RB02.Int.DryCycle) XIO(S010RB02.I1.FdsIntActive) ] OTE(S010RB02.Int.FdsSetup.Inp_Perm01) ,XIC(S010RB02.Int.ToolFdsPos1) OTE(S010RB02.Int.FdsSetup.Inp_Perm02) ,XIC(Edit.Bit) OTE(S010RB02.Int.FdsSetup.Inp_Perm03) ,P_Perm(S010RB02.Int.FdsSetup) ];
				RC: "############################$N"
				    "Robot Style Selection$N"
				    "$N"
				    "31 - Air GT Glass Roof$N"
				    "41 - Air Pure Metal Roof$N"
				    "############################";
				N: MOV(0,S010RB02.Int.PgmReq);
				N: XIO(S010RB02.Int.Maintenance)XIC(S010TL1.SR.Int.Part)[XIC(Edit.Bit) XIC(S010TL1.SR.Int.Model1) XIC(S010TL1.SR.Data.Options.CarModel.0) XIC(S010TL1.SR.Data.Options.CanRoofPack.0) MOV(31,S010RB02.Int.PgmReq) ,XIC(Edit.Bit) XIC(S010TL1.SR.Int.Model2) XIC(S010TL1.SR.Data.Options.CarModel.0) XIC(S010TL1.SR.Data.Options.CanRoofPack.1) MOV(41,S010RB02.Int.PgmReq) ];
				N: XIC(S010RB02.Int.Maintenance)MOV(6,S010RB02.Int.PgmReq);
				RC: "############################$N"
				    "Robot Functions Control Mapping$N"
				    "############################";
				N: XIC(S010RB02.Int.AutoMode)XIC(S010RB02.Int.RetFromPouncePB.PB)OTL(S010RB02.Int.RetFromPounceSeld);
				N: XIC(S010RB02.Int.RetFromPounceCancelPB.PB)OTU(S010RB02.Int.RetFromPounceSeld);
				N: [XIC(S010RB02.Int.RetFromMaintPosPB.PB) ,XIC(S010RB02.Int.MaintCompPB.PB) ]OTE(S010RB02.Int.RetFromMaintSeld);
				RC: "############################$N"
				    "FDS Process Completes Logic$N"
				    "$N"
				    "Add the required Part Present, Fds Completes, Tool Zone, and PN$N"
				    "############################";
				N: NOP();
				N: XIC(S010RB02.Int.AutoMode)XIO(S010RB02.Int.Maintenance)XIC(S010RB02.I1.FdsProc1Welded)XIO(S010RB02.I1.Clrtransfer)XIO(S010RB02.I1.ClrUnclamp)OTL(S010RB02.Int.Proc1Fdsd);
				N: XIC(S010RB02.Int.AutoMode)XIO(S010RB02.Int.Maintenance)XIC(S010RB02.I1.FdsProc2Welded)XIO(S010RB02.I1.Clrtransfer)XIO(S010RB02.I1.ClrUnclamp)OTL(S010RB02.Int.Proc2Fdsd);
				N: [XIC(S010RB02.Int.CycleComp) ,XIC(S010RB02.I1.FdsSkipAll) ,XIC(S010RB02.I1.FdsFault) ,XIC(S010RB02.Int.RstCycleComp) ,XIC(Edit.Bit) ][OTU(S010RB02.Int.Proc1Fdsd) ,OTU(S010RB02.Int.Proc2Fdsd) ];
				N: [XIC(S010RB02.Int.Proc1Fdsd) XIC(S010RB02.I1.FdsProcessOK) ,XIC(S010RB02.Int.ManualMode) XIC(S010RB02.Int.SetFds1CompPB.PB) ]OTL(S010RB02.Int.Fds1Comp);
				N: [XIC(S010RB02.Int.Proc2Fdsd) XIC(S010RB02.I1.FdsProcessOK) ,XIC(S010RB02.Int.ManualMode) XIC(S010RB02.Int.SetFds2CompPB.PB) ]OTL(S010RB02.Int.Fds2Comp);
				N: [XIC(S010RB02.Int.CycleComp) ,XIC(S010RB02.Int.RstCycleComp) ,XIC(S010RB02.Int.ManualMode) XIC(S010RB02.Int.RstFds1CompPB.PB) ]XIC(Edit.Bit)[OTU(S010RB02.Int.Fds1Comp) ,OTU(S010RB02.Int.Fds2Comp) ];
				N: XIC(S010RB02.Int.AutoMode)XIO(S010RB02.Int.DryCycle)XIC(S010RB02.I1.FdsInCycle)XIC(S010RB02.I1.FdsFault)XIO(S010RB02.I1.Clrtransfer)OTL(S010RB02.Int.FdsFault);
				N: [XIO(S010RB02.I1.FdsFault) XIC(S010RB02.I1.FdsIntActive) ,XIC(S010RB02.Int.DryCycle) XIO(S010RB02.I1.FdsIntActive) ]OTU(S010RB02.Int.FdsFault);
				RC: "############################$N"
				    "Robot Cycle Complete$N"
				    "############################";
				N: OTU(S010RB02.Int.SetCycleCompPB.Vis)OTU(S010RB02.Int.RstCycleCompPB.Vis);
				RC: "############################$N"
				    "Maintenance Functions$N"
				    "############################";
				N: OTU(S010RB02.Int.GlobalMaintPosPB.Vis)OTU(S010RB02.Int.GoToMaintPosTool1PB.Vis)OTU(S010RB02.Int.GoToMaintPosTool2PB.Vis)OTU(S010RB02.Int.GoToMaintPosTool3PB.Vis)OTU(S010RB02.Int.GoToMaintPosTool4PB.Vis)OTU(S010RB02.Int.GoToMaintPosNoToolPB.Vis)OTU(S010RB02.Int.RetFromMaintPosPB.Vis)OTU(S010RB02.Int.MaintCompPB.Vis);
				RC: "############################$N"
				    "Flow Drill Screw$N"
				    " Functions$N"
				    "############################";
				N: [OTU(S010RB02.Int.SetFds1CompPB.Vis) ,OTU(S010RB02.Int.RstFds1CompPB.Vis) ][OTU(S010RB02.Int.SetFds2CompPB.Vis) ,OTU(S010RB02.Int.RstFds2CompPB.Vis) ][OTU(S010RB02.Int.SetFds3CompPB.Vis) ,OTU(S010RB02.Int.RstFds3CompPB.Vis) ][OTU(S010RB02.Int.SetFds4CompPB.Vis) ,OTU(S010RB02.Int.RstFds4CompPB.Vis) ][OTU(S010RB02.Int.SetFds5CompPB.Vis) ,OTU(S010RB02.Int.RstFds5CompPB.Vis) ];
		END_ROUTINE

		ROUTINE D03_RB_PNs 
				RC: "############################$N"
				    "Maintenance Position$N"
				    "############################";
				N: XIC(S010RB02.AOIs.PN.stsPN3)OTE(S010RB02.Int.AtMaint);
				RC: "############################$N"
				    "Maintenance Position Clear$N"
				    "############################";
				N: XIC(S010RB02.AOIs.PN.stsPN3)[XIC(S010RB02.Int.AutoMode) OTE(S010RB02.PNPerm.PN3Perm1.Inp_Perm00) ,XIO(S010RB02.Int.MaintPosTool1Seld) XIO(S010RB02.Int.MaintPosTool2Seld) XIO(S010RB02.Int.MaintPosTool3Seld) XIO(S010RB02.Int.MaintPosTool4Seld) XIO(S010RB02.Int.MaintPosNoToolSeld) OTE(S010RB02.PNPerm.PN3Perm1.Inp_Perm01) ,XIC(S010RB02.Int.RetFromMaintSeld) OTE(S010RB02.PNPerm.PN3Perm1.Inp_Perm02) ,P_Perm(S010RB02.PNPerm.PN3Perm1) ]COP(S010RB02.PNPerm.PN3Perm1,S010RB02.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S010RB02.Int.PNPerm2,1);
		END_ROUTINE

		ROUTINE D04_RB_MapOutpus 
				RC: "############################$N"
				    "Robot Standard Output Mapping$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Output Mapping$N"
				    "############################";
				N: [XIO(S010RB02.ENet.CommOK) FLL(0,S010RB02.O1,1) ,XIC(S010RB02.ENet.CommOK) COP(S010RB02.O1,S010RB02:O1,1) ];
		END_ROUTINE

		ROUTINE Y00_Alarms_L1 
				RC: "******************************************************************$N"
				    "Robot Alarms$N"
				    "****************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Machine Faults$N"
				    "******************************************************************";
				N: NOP();
				N: EQU(FRM_P1_ESW1:I.Fault,0)EQU(FRM_P1_ESW2:I.Fault,0)XIO(S010RB01.ENet.CommOK)OTE(S2.L1[26].0);
				N: XIC(S010RB01.ENet.CommOK)XIO(S010RB01Sfty.Int.ModRunMode)OTE(S2.L1[26].1);
		END_ROUTINE

		ROUTINE Y01_Alarms_L2 
				RC: "******************************************************************$N"
				    "Robot Alarms$N"
				    "****************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Manual Interventions$N"
				    "******************************************************************";
				N: NOP();
				N: XIC(S010RB01Sfty.Int.ModRunMode)XIO(S010RB01Sfty.Int.EStopIns.O1)OTE(S2.L2[26].0);
				N: XIC(S010RB01Sfty.Int.ModRunMode)XIO(S010RB01Sfty.Int.SftyIntEnbld)OTE(S2.L2[26].1);
				N: XIC(S010RB01Sfty.Int.ModRunMode)XIC(S010RB01Sfty.Int.SftyChanged)OTE(S2.L2[26].2);
				N: XIC(S010RB01.Int.AutoMode)XIC(S010RB01.I1.Auto)XIC(S010RB01.I1.AtHome)[MOV(5000,S010RB01.Int.FltDelayTmr[0].PRE) TON(S010RB01.Int.FltDelayTmr[0],?,?) ,XIC(S010RB01.Int.FltDelayTmr[0].DN) OTE(S2.L2[26].3) ];
				N: XIC(sZ005_040.PowerEnbld)XIO(S010RB01.I1.Auto)OTE(S2.L2[26].4);
				N: XIC(sZ005_040.PowerEnbld)XIC(S010RB01.I1.PendEnbld)OTE(S2.L2[26].5);
				N: XIC(S010RB01.Int.AutoMode)XIC(S010RB01.Int.ExtRunEnable)XIC(S010RB01.I1.RbtHeld)OTE(S2.L2[26].6);
				N: XIC(sZ005_040.PowerEnbld)XIC(S010RB01.Int.RetFromPounceSeld)OTE(S2.L2[26].7);
		END_ROUTINE

		ROUTINE Y02_Alarms_L3 
				RC: "******************************************************************$N"
				    "Robot Alarms$N"
				    "****************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Warnings$N"
				    "******************************************************************";
				N: NOP();
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S010Sfty (Class := Safety,
	                  MAIN := "s_A00_Main",
	                  MODE := 0,
	                  DisableFlag := 0,
	                  UseAsFolder := 0)
		TAG
			Station : s_udt_Sfty_Smry (COMMENT.KNOWNPOSITION.0 := "FRM010 TL1$NKnown Position",
			            Usage := Public) := [[0],57,0,0,1,1,[0,0]];
		END_TAG

		ROUTINE s_A00_Main 
				N: JSR(s_B00_ModStatus,0);
				N: JSR(s_E00_RB01,0);
				N: JSR(s_E00_RB02,0);
				N: JSR(s_E01_TL1,0);
				N: JSR(s_Z00_Summary,0);
		END_ROUTINE

		ROUTINE s_B00_ModStatus (Description := "Safety Module IO Status")
				RC: "************************************************************$N"
				    "FRM007 Module Status$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Module 1 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: XIC(S010TL1SIO1:I.RunMode)OTE(S010Sfty.Mod1.RunMode);
				N: XIC(S010TL1SIO1:I.Pt00InputStatus)XIC(S010TL1SIO1:I.Pt01InputStatus)XIC(S010TL1SIO1:I.Pt02InputStatus)XIC(S010TL1SIO1:I.Pt03InputStatus)XIC(S010TL1SIO1:I.Pt04InputStatus)XIC(S010TL1SIO1:I.Pt05InputStatus)XIC(S010TL1SIO1:I.Pt06InputStatus)XIC(S010TL1SIO1:I.Pt07InputStatus)XIC(S010TL1SIO1:I.Pt08InputStatus)XIC(S010TL1SIO1:I.Pt09InputStatus)XIC(S010TL1SIO1:I.Pt10InputStatus)XIC(S010TL1SIO1:I.Pt11InputStatus)OTE(S010Sfty.Mod1.InputStatus);
				N: XIC(S010TL1SIO1:I.Pt00OutputStatus)XIC(S010TL1SIO1:I.Pt01OutputStatus)XIC(S010TL1SIO1:I.Pt02OutputStatus)XIC(S010TL1SIO1:I.Pt03OutputStatus)OTE(S010Sfty.Mod1.OutputStatus);
				RC: "************************************************************$N"
				    "Module 2 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: XIC(S010TL1SIO2:I.RunMode)OTE(S010Sfty.Mod2.RunMode);
				N: XIC(S010TL1SIO2:I.Pt00InputStatus)XIC(S010TL1SIO2:I.Pt01InputStatus)XIC(S010TL1SIO2:I.Pt02InputStatus)XIC(S010TL1SIO2:I.Pt03InputStatus)XIC(S010TL1SIO2:I.Pt04InputStatus)XIC(S010TL1SIO2:I.Pt05InputStatus)XIC(S010TL1SIO2:I.Pt06InputStatus)XIC(S010TL1SIO2:I.Pt07InputStatus)XIC(S010TL1SIO2:I.Pt08InputStatus)XIC(S010TL1SIO2:I.Pt09InputStatus)XIC(S010TL1SIO2:I.Pt10InputStatus)XIC(S010TL1SIO2:I.Pt11InputStatus)OTE(S010Sfty.Mod2.InputStatus);
				N: XIC(S010TL1SIO2:I.Pt00OutputStatus)XIC(S010TL1SIO2:I.Pt01OutputStatus)XIC(S010TL1SIO2:I.Pt02OutputStatus)XIC(S010TL1SIO2:I.Pt03OutputStatus)OTE(S010Sfty.Mod2.OutputStatus);
				RC: "************************************************************$N"
				    "Module Summary$N"
				    "************************************************************";
				N: XIC(S010Sfty.Mod1.RunMode)XIC(S010Sfty.Mod2.RunMode)OTE(S010Sfty.AllModRunMode);
				N: XIC(S010Sfty.Mod1.InputStatus)XIC(S010Sfty.Mod2.InputStatus)OTE(S010Sfty.AllModInStatusOk);
				N: XIC(S010Sfty.Mod1.OutputStatus)XIC(S010Sfty.Mod2.OutputStatus)OTE(S010Sfty.AllModOutStatusOk);
		END_ROUTINE

		ROUTINE s_E00_RB01 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "Station 010 RB01$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S010RB01:SI.Input[0],S010RB01Sfty.I,1);
				N: XIC(S010RB01:SI.RunMode)OTE(S010RB01Sfty.Int.ModRunMode);
				N: XIC(S010RB01:SI.ConnectionFaulted)OTE(S010RB01Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "Only LightScreen, Scanners. No Gates$N"
				    "############################";
				N: OTE(S010RB01Sfty.Int.AreaSafe);
				N: OTE(S010RB01Sfty.Int.Zn1LtScrnActive);
				N: OTE(S010RB01Sfty.Int.Zn2LtScrnActive);
				N: OTE(S010RB01Sfty.Int.Zn3LtScrnActive);
				N: OTE(S010RB01Sfty.Int.Zn4LtScrnActive);
				N: OTE(S010RB01Sfty.Int.Zn5LtScrnActive);
				N: OTE(S010RB01Sfty.Int.Zn6LtScrnActive);
				N: OTE(S010RB01Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S010RB01Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S010RB01Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S010RB01Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS010RB01)OTE(S010RB01Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS010RB01)OTE(S010RB01Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR01AOI,S010RB01Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S010RB01Sfty.O,S010RB01:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_E00_RB02 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "Station 010 RB02$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S010RB02:SI.Input[0],S010RB02Sfty.I,1);
				N: XIC(S010RB02:SI.RunMode)OTE(S010RB02Sfty.Int.ModRunMode);
				N: XIC(S010RB02:SI.ConnectionFaulted)OTE(S010RB02Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "############################";
				N: OTE(S010RB02Sfty.Int.AreaSafe);
				N: OTE(S010RB02Sfty.Int.Zn1LtScrnActive);
				N: OTE(S010RB02Sfty.Int.Zn2LtScrnActive);
				N: OTE(S010RB02Sfty.Int.Zn3LtScrnActive);
				N: OTE(S010RB02Sfty.Int.Zn4LtScrnActive);
				N: OTE(S010RB02Sfty.Int.Zn5LtScrnActive);
				N: OTE(S010RB02Sfty.Int.Zn6LtScrnActive);
				N: OTE(S010RB02Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S010RB02Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S010RB02Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S010RB02Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS010RB02)OTE(S010RB02Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS010RB02)OTE(S010RB02Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR02AOI,S010RB02Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S010RB02Sfty.O,S010RB02:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_E01_TL1 (Description := "Station Fixture Safety Routine")
				RC: "************************************************************$N"
				    "FRM010 TL1$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Minor Motion Enable$N"
				    "************************************************************$N"
				    "$N"
				    "This feature is disabled by default.$N"
				    "Use needs to be approved by Controls Department";
				N: OTU(S010Sfty.MinorMtnEnbld);
				N: XIC(sZ005_040.AllEStopsOk)[XIC(sZ005_040.PerimeterSafe) XIC(S010Sfty.AllStaLtScrnOK) ,XIC(sZ005_040.AnyBypassSwOn) ][XIC(S010Sfty.FX1.MotionEnbl) ,XIC(S010Sfty.FX1.SoftStartPwrOn) ]OTE(S010Sfty.FX1.SoftStartPwrOn);
				N: XIC(sZ005_040.AllEStopsOk)[XIC(sZ005_040.PerimeterSafe) XIC(S010Sfty.AllStaLtScrnOK) ,XIC(S010Sfty.MinorMtnEnbld) ]OTE(S010Sfty.FX1.MotionEnbl);
				RC: "Soft Start Valve Power Output$N"
				    "************************************************************";
				N: XIC(S010Sfty.FX1.SoftStartPwrOn)[OTE(S010TL1SIO1:O.Pt00Data) ,OTE(S010TL1SIO1:O.Pt01Data) ];
				RC: "Valve Manifold DC Power Output$N"
				    "************************************************************";
				N: XIC(S010Sfty.FX1.MotionEnbl)[OTE(S010TL1SIO1:O.Pt02Data) ,OTE(S010TL1SIO1:O.Pt03Data) ];
		END_ROUTINE

		ROUTINE s_Z00_Summary (Description := "Station Safety Summary")
				N: OTU(S010Sfty.Oper1Instd)OTU(S010Sfty.Oper2Instd);
				N: OTU(S010Sfty.LoadAssistInstld);
				N: [XIO(S010Sfty.OperLS.LC1.LCB) ,XIO(S010Sfty.OperLS.LC1Installed) ][XIO(S010Sfty.OperLS.LC2.LCB) ,XIO(S010Sfty.OperLS.LC2Installed) ][XIO(S010Sfty.OperLS.LC3.LCB) ,XIO(S010Sfty.OperLS.LC3Installed) ][XIO(S010Sfty.OperLS.SCN1_1.LCB) ,XIO(S010Sfty.OperLS.SCN1_1Installed) ][XIO(S010Sfty.OperLS.SCN1_2.LCB) ,XIO(S010Sfty.OperLS.SCN1_2Installed) ][XIO(S010Sfty.OperLS.SCN2_1.LCB) ,XIO(S010Sfty.OperLS.SCN2_1Installed) ][XIO(S010Sfty.OperLS.SCN2_2.LCB) ,XIO(S010Sfty.OperLS.SCN2_2Installed) ]OTE(S010Sfty.StaZn1NotBlkd);
				N: [XIC(S010Sfty.OperLS.LC1.O1) ,XIO(S010Sfty.OperLS.LC1Installed) ][XIC(S010Sfty.OperLS.LC2.O1) ,XIO(S010Sfty.OperLS.LC2Installed) ][XIC(S010Sfty.OperLS.LC3.O1) ,XIO(S010Sfty.OperLS.LC3Installed) ][XIC(S010Sfty.OperLS.SCN1_1.O1) ,XIO(S010Sfty.OperLS.SCN1_1Installed) ][XIC(S010Sfty.OperLS.SCN1_2.O1) ,XIO(S010Sfty.OperLS.SCN1_2Installed) ][XIC(S010Sfty.OperLS.SCN2_1.O1) ,XIO(S010Sfty.OperLS.SCN2_1Installed) ][XIC(S010Sfty.OperLS.SCN2_2.O1) ,XIO(S010Sfty.OperLS.SCN2_2Installed) ]OTE(S010Sfty.StaZn1Active);
				N: OTE(S010Sfty.StaZn2NotBlkd);
				N: OTE(S010Sfty.StaZn2Active);
				N: OTE(S010Sfty.StaZn3NotBlkd);
				N: OTE(S010Sfty.StaZn3Active);
				N: XIC(S010Sfty.StaZn1Active)XIC(S010Sfty.StaZn2Active)XIC(S010Sfty.StaZn3Active)OTE(S010Sfty.AllStaLtScrnOK);
				N: XIC(S010Sfty.LoadAssistInstld)OTE(S010Sfty.LoadAssistClear);
				N: XIC(S010Sfty.LoadAssistInstld)OTE(S010Sfty.LoadAssistActive);
				N: XIC(S010Sfty.Oper1Instd)XIC(sEdit.Bit)OTE(S010Sfty.Oper1SwipeStart);
				N: XIC(S010Sfty.Oper2Instd)XIC(sEdit.Bit)OTE(S010Sfty.Oper2SwipeStart);
				N: XIC(sSftyFromStd.S010ClrToUnlock)OTE(S010Sfty.ClearToUnlock);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S010TL1 (Description := "Weld Fixture",
	                 Class := Standard,
	                 MAIN := "A00_Main",
	                 MODE := 0,
	                 DisableFlag := 0,
	                 UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE A00_Main 
				N: JSR(B01_MapInputs,0);
				N: JSR(B00_NetworkDiag,0);
				N: JSR(D00_Act1_Clamp1,0);
				N: JSR(D00_Act2_Clamp2,0);
				N: JSR(D00_Act3_Clamp3,0);
				N: JSR(D00_Act4_Slide1,0);
				N: JSR(D01_MotionSeq,0);
				N: JSR(D02_PartPresent,0);
				N: JSR(P00_Station,0);
				N: JSR(P01_StationToSfty,0);
				N: JSR(S00_HMISequence,0);
				N: JSR(S01_HMIProcComp,0);
				N: JSR(Y00_Alarms_L1,0);
				N: JSR(Y01_Alarms_L2,0);
				N: JSR(Y02_Alarms_L3,0);
				N: JSR(Z00_MapOutputs,0);
		END_ROUTINE

		ROUTINE B00_NetworkDiag 
				RC: "************************************************************$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "S010 TL1 Ethernet Devices Diagnostic$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Robot$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: GSV(Module,S010RB01,EntryStatus,S010RB01.ENet.ObjectStatus)[MEQ(S010RB01.ENet.ObjectStatus,61440,24576) OTE(S010RB01.ENet.Inhibited) ,MEQ(S010RB01.ENet.ObjectStatus,61440,16384) OTE(S010RB01.ENet.CommOK) ];
				RC: "************************************************************$N"
				    "Robot$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: GSV(Module,S010RB02,EntryStatus,S010RB02.ENet.ObjectStatus)[MEQ(S010RB02.ENet.ObjectStatus,61440,24576) OTE(S010RB02.ENet.Inhibited) ,MEQ(S010RB02.ENet.ObjectStatus,61440,16384) OTE(S010RB02.ENet.CommOK) ];
				N: GSV(Module,S010TL1VM1,EntryStatus,S010TL1VM1.ENet.ObjectStatus)[MEQ(S010TL1VM1.ENet.ObjectStatus,61440,24576) OTE(S010TL1VM1.ENet.Inhibited) ,MEQ(S010TL1VM1.ENet.ObjectStatus,61440,16384) OTE(S010TL1VM1.ENet.CommOK) ];
				N: GSV(Module,S010TL1MIO1,EntryStatus,S010TL1MIO1.ENet.ObjectStatus)[MEQ(S010TL1MIO1.ENet.ObjectStatus,61440,24576) OTE(S010TL1MIO1.ENet.Inhibited) ,MEQ(S010TL1MIO1.ENet.ObjectStatus,61440,16384) OTE(S010TL1MIO1.ENet.CommOK) ];
				N: GSV(Module,S010TL1MIO2,EntryStatus,S010TL1MIO2.ENet.ObjectStatus)[MEQ(S010TL1MIO2.ENet.ObjectStatus,61440,24576) OTE(S010TL1MIO2.ENet.Inhibited) ,MEQ(S010TL1MIO2.ENet.ObjectStatus,61440,16384) OTE(S010TL1MIO2.ENet.CommOK) ];
				N: GSV(Module,S010TL1SIO1,EntryStatus,S010TL1SIO1.ENet.ObjectStatus)[MEQ(S010TL1SIO1.ENet.ObjectStatus,61440,24576) OTE(S010TL1SIO1.ENet.Inhibited) ,MEQ(S010TL1SIO1.ENet.ObjectStatus,61440,16384) OTE(S010TL1SIO1.ENet.CommOK) ];
				N: GSV(Module,S010TL1SIO2,EntryStatus,S010TL1SIO2.ENet.ObjectStatus)[MEQ(S010TL1SIO2.ENet.ObjectStatus,61440,24576) OTE(S010TL1SIO2.ENet.Inhibited) ,MEQ(S010TL1SIO2.ENet.ObjectStatus,61440,16384) OTE(S010TL1SIO2.ENet.CommOK) ];
				N: XIC(S010RB01.ENet.CommOK)XIC(S010RB02.ENet.CommOK)XIC(S010TL1VM1.ENet.CommOK)XIC(S010TL1MIO1.ENet.CommOK)XIC(S010TL1MIO2.ENet.CommOK)XIC(S010TL1SIO1.ENet.CommOK)XIC(S010TL1SIO2.ENet.CommOK)OTE(S010TL1.Int.AllModCommOk);
		END_ROUTINE

		ROUTINE B01_MapInputs 
				RC: "************************************************************$N"
				    "Map Devices Inputs$N"
				    "************************************************************";
				N: NOP();
				N: [XIO(S010TL1VM1.ENet.CommOK) FLL(0,S010TL1VM1.I1,4) ,XIC(S010TL1VM1.ENet.CommOK) COP(S010TL1VM1:I.Data[0],S010TL1VM1.I1,1) ];
				RC: "************************************************************$N"
				    "Configuration Bits: 1=Active, 0=NotActive $N"
				    "Data[16].0-7 - Channels 00-07$N"
				    "Data[17].0-7 - Channels 08-15$N"
				    "************************************************************$N"
				    "Required for Turck MIO - TBEN-L4-16DXP$N"
				    "";
				N: [XIO(S010TL1MIO1.ENet.CommOK) FLL(0,S010TL1MIO1.I,1) ,XIC(S010TL1MIO1.ENet.CommOK) [COP(S010TL1MIO1:I.Data[1],S010TL1MIO1.I,1) ,MOV(2#00000000,S010TL1MIO1:C.Data[16]) MOV(2#00000000,S010TL1MIO1:C.Data[17]) ] ];
				RC: "************************************************************$N"
				    "Configuration Bits: 1=Active, 0=NotActive $N"
				    "Data[16].0-7 - Channels 00-07$N"
				    "Data[17].0-7 - Channels 08-15$N"
				    "************************************************************$N"
				    "Required for Turck MIO - TBEN-L4-16DXP$N"
				    "";
				N: [XIO(S010TL1MIO2.ENet.CommOK) FLL(0,S010TL1MIO2.I,1) ,XIC(S010TL1MIO2.ENet.CommOK) [COP(S010TL1MIO2:I.Data[1],S010TL1MIO2.I,1) ,MOV(2#00000000,S010TL1MIO2:C.Data[16]) MOV(2#00000000,S010TL1MIO2:C.Data[17]) ] ];
				RC: "************************************************************$N"
				    "Station Robots in Auto$N"
				    "$N"
				    "Add SxxRBxx.I1.AUTO for every Robot$N"
				    "************************************************************$N"
				    "";
				N: XIC(S010RB01.I1.Auto)XIC(S010RB02.I1.Auto)OTE(S010TL1.Int.RbtsInAuto);
				RC: "************************************************************$N"
				    "Station Robots Teach off$N"
				    "$N"
				    "Add SxxRBxxSfty.Int.TeachOff for every Robot$N"
				    "************************************************************$N"
				    "";
				N: XIC(S010RB01.Int.TeachSSOff)XIC(S010RB02.Int.TeachSSOff)OTE(S010TL1.Int.RbtsTeachOff);
				RC: "************************************************************$N"
				    "Station Air On$N"
				    "$N"
				    "Replace Edit.Bit with air flow switch input$N"
				    "************************************************************$N"
				    "";
				N: [XIC(Edit.Bit) MOV(1500,S010TL1.Int.AirOnTmr.PRE) TOF(S010TL1.Int.AirOnTmr,?,?) ,XIC(S010TL1.Int.AirOnTmr.DN) OTE(S010TL1.Int.AirOnOk) ];
				N: XIC(Edit.Bit)OTE(S010TL1.Int.FaultResetPB);
				RC: "************************************************************$N"
				    "Known Position$N"
				    "************************************************************";
				N: XIO(S010TL1.Int.AtHomePos)XIO(S010TL1.Int.AtWorkPos1)XIO(S010TL1.Int.AtWorkPos2)XIO(S010TL1.Int.AtWorkPos3)XIC(Edit.Bit)MOV(5000,S010TL1.Int.UnknownPosTmr.PRE)TON(S010TL1.Int.UnknownPosTmr,?,?);
				N: XIO(S010TL1.Int.UnknownPosTmr.EN)[XIC(S010RB01.I1.Pg_Paused) ,XIC(S010RB01.I1.RbtHeld) ,XIC(S010RB01.I1.RbtFaulted) ][XIC(S010RB02.I1.Pg_Paused) ,XIC(S010RB02.I1.RbtHeld) ,XIC(S010RB02.I1.RbtFaulted) ]OTE(S010TL1.Int.KnownPos);
		END_ROUTINE

		ROUTINE D00_Act1_Clamp1 (Description := "Actuator Standard Routine")
				RC: "########################$N"
				    "Actuator Standard Logic$N"
				    "########################$N"
				    "$N"
				    "Add Control for every used Actuator$N"
				    "Edit Only Work and Home Descriptions$N"
				    "Do Not edit Work/Home Control Logic";
				N: NOP();
				RC: "########################$N"
				    "Actuator[1]$N"
				    "Clamp 1$N"
				    "*Description*$N"
				    "CL1, CL2, CL3$N"
				    "########################";
				N: NOP();
				N: MOV('Close',S010TL1.Act[1].WorkCmdDesc)MOV('Open',S010TL1.Act[1].HomeCmdDesc);
				RC: "########################$N"
				    "Work Control Logic$N"
				    "########################";
				N: [XIC(S010TL1.Act[1].Home.AutoCmd) ,XIC(S010TL1.Act[1].Home.ManualCmdPB) ]XIC(S010TL1.Act[1].Home.Clr)OTE(S010TL1.Act[1].Work.SealRst);
				N: [XIC(S010TL1.Int.AutoMode) XIC(S010TL1.Act[1].Work.AutoCmd) ,XIC(S010TL1.Int.ManualMode) XIC(S010TL1.Act[1].Work.ManualCmdPB) ,XIC(S010TL1.Act[1].Work.Out) XIC(S010TL1.Act[1].Work.Seal) ]XIC(S010TL1.Act[1].Work.Clr)XIO(S010TL1.Act[1].Work.SealRst)XIC(S010TL1.Act[1].ActMtnEnbld)OTE(S010TL1.Act[1].Work.Out);
				N: XIC(S010TL1.Act[1].Work.Out)OTL(S010TL1.Act[1].Work.Mem);
				N: XIC(S010TL1.Act[1].Home.Out)OTU(S010TL1.Act[1].Work.Mem);
				N: [XIC(S010TL1.Act[1].Work.Pxs.0) XIO(S010TL1.Act[1].Home.Pxs.0) ,XIO(S010TL1.Act[1].Installed.0) ][XIC(S010TL1.Act[1].Work.Pxs.1) XIO(S010TL1.Act[1].Home.Pxs.1) ,XIO(S010TL1.Act[1].Installed.1) ][XIC(S010TL1.Act[1].Work.Pxs.2) XIO(S010TL1.Act[1].Home.Pxs.2) ,XIO(S010TL1.Act[1].Installed.2) ][XIC(S010TL1.Act[1].Work.Pxs.3) XIO(S010TL1.Act[1].Home.Pxs.3) ,XIO(S010TL1.Act[1].Installed.3) ][XIC(S010TL1.Act[1].Work.Pxs.4) XIO(S010TL1.Act[1].Home.Pxs.4) ,XIO(S010TL1.Act[1].Installed.4) ][XIC(S010TL1.Act[1].Work.Pxs.5) XIO(S010TL1.Act[1].Home.Pxs.5) ,XIO(S010TL1.Act[1].Installed.5) ][XIC(S010TL1.Act[1].Work.Pxs.6) XIO(S010TL1.Act[1].Home.Pxs.6) ,XIO(S010TL1.Act[1].Installed.6) ][XIC(S010TL1.Act[1].Work.Pxs.7) XIO(S010TL1.Act[1].Home.Pxs.7) ,XIO(S010TL1.Act[1].Installed.7) ]OTE(S010TL1.Act[1].Work.Comp);
				N: [XIC(S010TL1.Act[1].Work.Out) [RTO(S010TL1.Act[1].Work.FltTmr,?,?) ,XIC(S010TL1.Act[1].Work.Comp) OTL(S010TL1.Act[1].Work.FltTmr.DN) ] ,XIC(S010TL1.Act[1].Home.Out) RES(S010TL1.Act[1].Work.FltTmr) ,XIC(S010TL1.Act[1].Work.FltTmr.DN) XIO(S010TL1.Act[1].Work.Comp) XIC(S010TL1.Int.PPActFltsEnbld) [OTE(S010TL1.Act[1].Work.MtnFlt) ,XIC(S010TL1.Act[1].Home.Comp) OTE(S010TL1.Act[1].Work.VlvFlt) ] ];
				RC: "########################$N"
				    "Home Control Logic$N"
				    "########################";
				N: [XIC(S010TL1.Act[1].Work.AutoCmd) ,XIC(S010TL1.Act[1].Work.ManualCmdPB) ]XIC(S010TL1.Act[1].Work.Clr)OTE(S010TL1.Act[1].Home.SealRst);
				N: [XIC(S010TL1.Int.AutoMode) XIC(S010TL1.Act[1].Home.AutoCmd) ,XIC(S010TL1.Int.ManualMode) XIC(S010TL1.Act[1].Home.ManualCmdPB) ,XIC(S010TL1.Act[1].Home.Out) XIC(S010TL1.Act[1].Home.Seal) ]XIC(S010TL1.Act[1].Home.Clr)XIO(S010TL1.Act[1].Home.SealRst)XIC(S010TL1.Act[1].ActMtnEnbld)OTE(S010TL1.Act[1].Home.Out);
				N: XIC(S010TL1.Act[1].Home.Out)OTL(S010TL1.Act[1].Home.Mem);
				N: XIC(S010TL1.Act[1].Work.Out)OTU(S010TL1.Act[1].Home.Mem);
				N: [XIC(S010TL1.Act[1].Home.Pxs.0) XIO(S010TL1.Act[1].Work.Pxs.0) ,XIO(S010TL1.Act[1].Installed.0) ][XIC(S010TL1.Act[1].Home.Pxs.1) XIO(S010TL1.Act[1].Work.Pxs.1) ,XIO(S010TL1.Act[1].Installed.1) ][XIC(S010TL1.Act[1].Home.Pxs.2) XIO(S010TL1.Act[1].Work.Pxs.2) ,XIO(S010TL1.Act[1].Installed.2) ][XIC(S010TL1.Act[1].Home.Pxs.3) XIO(S010TL1.Act[1].Work.Pxs.3) ,XIO(S010TL1.Act[1].Installed.3) ][XIC(S010TL1.Act[1].Home.Pxs.4) XIO(S010TL1.Act[1].Work.Pxs.4) ,XIO(S010TL1.Act[1].Installed.4) ][XIC(S010TL1.Act[1].Home.Pxs.5) XIO(S010TL1.Act[1].Work.Pxs.5) ,XIO(S010TL1.Act[1].Installed.5) ][XIC(S010TL1.Act[1].Home.Pxs.6) XIO(S010TL1.Act[1].Work.Pxs.6) ,XIO(S010TL1.Act[1].Installed.6) ][XIC(S010TL1.Act[1].Home.Pxs.7) XIO(S010TL1.Act[1].Work.Pxs.7) ,XIO(S010TL1.Act[1].Installed.7) ]OTE(S010TL1.Act[1].Home.Comp);
				N: [XIC(S010TL1.Act[1].Home.Out) [RTO(S010TL1.Act[1].Home.FltTmr,?,?) ,XIC(S010TL1.Act[1].Home.Comp) OTL(S010TL1.Act[1].Home.FltTmr.DN) ] ,XIC(S010TL1.Act[1].Work.Out) RES(S010TL1.Act[1].Home.FltTmr) ,XIC(S010TL1.Act[1].Home.FltTmr.DN) XIO(S010TL1.Act[1].Home.Comp) XIC(S010TL1.Int.PPActFltsEnbld) [OTE(S010TL1.Act[1].Home.MtnFlt) ,XIC(S010TL1.Act[1].Work.Comp) OTE(S010TL1.Act[1].Home.VlvFlt) ] ];
				RC: "########################$N"
				    "Actuator Fault$N"
				    "########################";
				N: [XIC(S010TL1.Act[1].Home.MtnFlt) ,XIC(S010TL1.Act[1].Home.VlvFlt) ,XIC(S010TL1.Act[1].Work.MtnFlt) ,XIC(S010TL1.Act[1].Work.VlvFlt) ]OTE(S010TL1.Act[1].Faulted);
		END_ROUTINE

		ROUTINE D00_Act2_Clamp2 (Description := "Actuator Standard Routine")
				RC: "########################$N"
				    "Actuator Standard Logic$N"
				    "########################$N"
				    "$N"
				    "Add Control for every used Actuator$N"
				    "Edit Only Work and Home Descriptions$N"
				    "Do Not edit Work/Home Control Logic";
				N: NOP();
				RC: "########################$N"
				    "Actuator[2]$N"
				    "Clamp 2$N"
				    "*Description*$N"
				    "CL4, CL5, CL6$N"
				    "########################";
				N: NOP();
				N: MOV('Close',S010TL1.Act[2].WorkCmdDesc)MOV('Open',S010TL1.Act[2].HomeCmdDesc);
				RC: "########################$N"
				    "Work Control Logic$N"
				    "########################";
				N: [XIC(S010TL1.Act[2].Home.AutoCmd) ,XIC(S010TL1.Act[2].Home.ManualCmdPB) ]XIC(S010TL1.Act[2].Home.Clr)OTE(S010TL1.Act[2].Work.SealRst);
				N: [XIC(S010TL1.Int.AutoMode) XIC(S010TL1.Act[2].Work.AutoCmd) ,XIC(S010TL1.Int.ManualMode) XIC(S010TL1.Act[2].Work.ManualCmdPB) ,XIC(S010TL1.Act[2].Work.Out) XIC(S010TL1.Act[2].Work.Seal) ]XIC(S010TL1.Act[2].Work.Clr)XIO(S010TL1.Act[2].Work.SealRst)XIC(S010TL1.Act[2].ActMtnEnbld)OTE(S010TL1.Act[2].Work.Out);
				N: XIC(S010TL1.Act[2].Work.Out)OTL(S010TL1.Act[2].Work.Mem);
				N: XIC(S010TL1.Act[2].Home.Out)OTU(S010TL1.Act[2].Work.Mem);
				N: [XIC(S010TL1.Act[2].Work.Pxs.0) XIO(S010TL1.Act[2].Home.Pxs.0) ,XIO(S010TL1.Act[2].Installed.0) ][XIC(S010TL1.Act[2].Work.Pxs.1) XIO(S010TL1.Act[2].Home.Pxs.1) ,XIO(S010TL1.Act[2].Installed.1) ][XIC(S010TL1.Act[2].Work.Pxs.2) XIO(S010TL1.Act[2].Home.Pxs.2) ,XIO(S010TL1.Act[2].Installed.2) ][XIC(S010TL1.Act[2].Work.Pxs.3) XIO(S010TL1.Act[2].Home.Pxs.3) ,XIO(S010TL1.Act[2].Installed.3) ][XIC(S010TL1.Act[2].Work.Pxs.4) XIO(S010TL1.Act[2].Home.Pxs.4) ,XIO(S010TL1.Act[2].Installed.4) ][XIC(S010TL1.Act[2].Work.Pxs.5) XIO(S010TL1.Act[2].Home.Pxs.5) ,XIO(S010TL1.Act[2].Installed.5) ][XIC(S010TL1.Act[2].Work.Pxs.6) XIO(S010TL1.Act[2].Home.Pxs.6) ,XIO(S010TL1.Act[2].Installed.6) ][XIC(S010TL1.Act[2].Work.Pxs.7) XIO(S010TL1.Act[2].Home.Pxs.7) ,XIO(S010TL1.Act[2].Installed.7) ]OTE(S010TL1.Act[2].Work.Comp);
				N: [XIC(S010TL1.Act[2].Work.Out) [RTO(S010TL1.Act[2].Work.FltTmr,?,?) ,XIC(S010TL1.Act[2].Work.Comp) OTL(S010TL1.Act[2].Work.FltTmr.DN) ] ,XIC(S010TL1.Act[2].Home.Out) RES(S010TL1.Act[2].Work.FltTmr) ,XIC(S010TL1.Act[2].Work.FltTmr.DN) XIO(S010TL1.Act[2].Work.Comp) XIC(S010TL1.Int.PPActFltsEnbld) [OTE(S010TL1.Act[2].Work.MtnFlt) ,XIC(S010TL1.Act[2].Home.Comp) OTE(S010TL1.Act[2].Work.VlvFlt) ] ];
				RC: "########################$N"
				    "Home Control Logic$N"
				    "########################";
				N: [XIC(S010TL1.Act[2].Work.AutoCmd) ,XIC(S010TL1.Act[2].Work.ManualCmdPB) ]XIC(S010TL1.Act[2].Work.Clr)OTE(S010TL1.Act[2].Home.SealRst);
				N: [XIC(S010TL1.Int.AutoMode) XIC(S010TL1.Act[2].Home.AutoCmd) ,XIC(S010TL1.Int.ManualMode) XIC(S010TL1.Act[2].Home.ManualCmdPB) ,XIC(S010TL1.Act[2].Home.Out) XIC(S010TL1.Act[2].Home.Seal) ]XIC(S010TL1.Act[2].Home.Clr)XIO(S010TL1.Act[2].Home.SealRst)XIC(S010TL1.Act[2].ActMtnEnbld)OTE(S010TL1.Act[2].Home.Out);
				N: XIC(S010TL1.Act[2].Home.Out)OTL(S010TL1.Act[2].Home.Mem);
				N: XIC(S010TL1.Act[2].Work.Out)OTU(S010TL1.Act[2].Home.Mem);
				N: [XIC(S010TL1.Act[2].Home.Pxs.0) XIO(S010TL1.Act[2].Work.Pxs.0) ,XIO(S010TL1.Act[2].Installed.0) ][XIC(S010TL1.Act[2].Home.Pxs.1) XIO(S010TL1.Act[2].Work.Pxs.1) ,XIO(S010TL1.Act[2].Installed.1) ][XIC(S010TL1.Act[2].Home.Pxs.2) XIO(S010TL1.Act[2].Work.Pxs.2) ,XIO(S010TL1.Act[2].Installed.2) ][XIC(S010TL1.Act[2].Home.Pxs.3) XIO(S010TL1.Act[2].Work.Pxs.3) ,XIO(S010TL1.Act[2].Installed.3) ][XIC(S010TL1.Act[2].Home.Pxs.4) XIO(S010TL1.Act[2].Work.Pxs.4) ,XIO(S010TL1.Act[2].Installed.4) ][XIC(S010TL1.Act[2].Home.Pxs.5) XIO(S010TL1.Act[2].Work.Pxs.5) ,XIO(S010TL1.Act[2].Installed.5) ][XIC(S010TL1.Act[2].Home.Pxs.6) XIO(S010TL1.Act[2].Work.Pxs.6) ,XIO(S010TL1.Act[2].Installed.6) ][XIC(S010TL1.Act[2].Home.Pxs.7) XIO(S010TL1.Act[2].Work.Pxs.7) ,XIO(S010TL1.Act[2].Installed.7) ]OTE(S010TL1.Act[2].Home.Comp);
				N: [XIC(S010TL1.Act[2].Home.Out) [RTO(S010TL1.Act[2].Home.FltTmr,?,?) ,XIC(S010TL1.Act[2].Home.Comp) OTL(S010TL1.Act[2].Home.FltTmr.DN) ] ,XIC(S010TL1.Act[2].Work.Out) RES(S010TL1.Act[2].Home.FltTmr) ,XIC(S010TL1.Act[2].Home.FltTmr.DN) XIO(S010TL1.Act[2].Home.Comp) XIC(S010TL1.Int.PPActFltsEnbld) [OTE(S010TL1.Act[2].Home.MtnFlt) ,XIC(S010TL1.Act[2].Work.Comp) OTE(S010TL1.Act[2].Home.VlvFlt) ] ];
				N: [XIC(S010TL1.Act[2].Home.MtnFlt) ,XIC(S010TL1.Act[2].Home.VlvFlt) ,XIC(S010TL1.Act[2].Work.MtnFlt) ,XIC(S010TL1.Act[2].Work.VlvFlt) ]OTE(S010TL1.Act[2].Faulted);
		END_ROUTINE

		ROUTINE D00_Act3_Clamp3 (Description := "Actuator Standard Routine")
				RC: "########################$N"
				    "Actuator Standard Logic$N"
				    "########################$N"
				    "$N"
				    "Add Control for every used Actuator$N"
				    "Edit Only Work and Home Descriptions$N"
				    "Do Not edit Work/Home Control Logic";
				N: NOP();
				RC: "########################$N"
				    "Actuator[3]$N"
				    "Clamp 3$N"
				    "*Description*$N"
				    "CL7, CL8$N"
				    "########################";
				N: NOP();
				N: MOV('Advance',S010TL1.Act[3].WorkCmdDesc)MOV('Retract',S010TL1.Act[3].HomeCmdDesc);
				RC: "########################$N"
				    "Work Control Logic$N"
				    "########################";
				N: [XIC(S010TL1.Act[3].Home.AutoCmd) ,XIC(S010TL1.Act[3].Home.ManualCmdPB) ]XIC(S010TL1.Act[3].Home.Clr)OTE(S010TL1.Act[3].Work.SealRst);
				N: [XIC(S010TL1.Int.AutoMode) XIC(S010TL1.Act[3].Work.AutoCmd) ,XIC(S010TL1.Int.ManualMode) XIC(S010TL1.Act[3].Work.ManualCmdPB) ,XIC(S010TL1.Act[3].Work.Out) XIC(S010TL1.Act[3].Work.Seal) ]XIC(S010TL1.Act[3].Work.Clr)XIO(S010TL1.Act[3].Work.SealRst)XIC(S010TL1.Act[3].ActMtnEnbld)OTE(S010TL1.Act[3].Work.Out);
				N: XIC(S010TL1.Act[3].Work.Out)OTL(S010TL1.Act[3].Work.Mem);
				N: XIC(S010TL1.Act[3].Home.Out)OTU(S010TL1.Act[3].Work.Mem);
				N: [XIC(S010TL1.Act[3].Work.Pxs.0) XIO(S010TL1.Act[3].Home.Pxs.0) ,XIO(S010TL1.Act[3].Installed.0) ][XIC(S010TL1.Act[3].Work.Pxs.1) XIO(S010TL1.Act[3].Home.Pxs.1) ,XIO(S010TL1.Act[3].Installed.1) ][XIC(S010TL1.Act[3].Work.Pxs.2) XIO(S010TL1.Act[3].Home.Pxs.2) ,XIO(S010TL1.Act[3].Installed.2) ][XIC(S010TL1.Act[3].Work.Pxs.3) XIO(S010TL1.Act[3].Home.Pxs.3) ,XIO(S010TL1.Act[3].Installed.3) ][XIC(S010TL1.Act[3].Work.Pxs.4) XIO(S010TL1.Act[3].Home.Pxs.4) ,XIO(S010TL1.Act[3].Installed.4) ][XIC(S010TL1.Act[3].Work.Pxs.5) XIO(S010TL1.Act[3].Home.Pxs.5) ,XIO(S010TL1.Act[3].Installed.5) ][XIC(S010TL1.Act[3].Work.Pxs.6) XIO(S010TL1.Act[3].Home.Pxs.6) ,XIO(S010TL1.Act[3].Installed.6) ][XIC(S010TL1.Act[3].Work.Pxs.7) XIO(S010TL1.Act[3].Home.Pxs.7) ,XIO(S010TL1.Act[3].Installed.7) ]OTE(S010TL1.Act[3].Work.Comp);
				N: [XIC(S010TL1.Act[3].Work.Out) [RTO(S010TL1.Act[3].Work.FltTmr,?,?) ,XIC(S010TL1.Act[3].Work.Comp) OTL(S010TL1.Act[3].Work.FltTmr.DN) ] ,XIC(S010TL1.Act[3].Home.Out) RES(S010TL1.Act[3].Work.FltTmr) ,XIC(S010TL1.Act[3].Work.FltTmr.DN) XIO(S010TL1.Act[3].Work.Comp) XIC(S010TL1.Int.PPActFltsEnbld) [OTE(S010TL1.Act[3].Work.MtnFlt) ,XIC(S010TL1.Act[3].Home.Comp) OTE(S010TL1.Act[3].Work.VlvFlt) ] ];
				RC: "########################$N"
				    "Home Control Logic$N"
				    "########################";
				N: [XIC(S010TL1.Act[3].Work.AutoCmd) ,XIC(S010TL1.Act[3].Work.ManualCmdPB) ]XIC(S010TL1.Act[3].Work.Clr)OTE(S010TL1.Act[3].Home.SealRst);
				N: [XIC(S010TL1.Int.AutoMode) XIC(S010TL1.Act[3].Home.AutoCmd) ,XIC(S010TL1.Int.ManualMode) XIC(S010TL1.Act[3].Home.ManualCmdPB) ,XIC(S010TL1.Act[3].Home.Out) XIC(S010TL1.Act[3].Home.Seal) ]XIC(S010TL1.Act[3].Home.Clr)XIO(S010TL1.Act[3].Home.SealRst)XIC(S010TL1.Act[3].ActMtnEnbld)OTE(S010TL1.Act[3].Home.Out);
				N: XIC(S010TL1.Act[3].Home.Out)OTL(S010TL1.Act[3].Home.Mem);
				N: XIC(S010TL1.Act[3].Work.Out)OTU(S010TL1.Act[3].Home.Mem);
				N: [XIC(S010TL1.Act[3].Home.Pxs.0) XIO(S010TL1.Act[3].Work.Pxs.0) ,XIO(S010TL1.Act[3].Installed.0) ][XIC(S010TL1.Act[3].Home.Pxs.1) XIO(S010TL1.Act[3].Work.Pxs.1) ,XIO(S010TL1.Act[3].Installed.1) ][XIC(S010TL1.Act[3].Home.Pxs.2) XIO(S010TL1.Act[3].Work.Pxs.2) ,XIO(S010TL1.Act[3].Installed.2) ][XIC(S010TL1.Act[3].Home.Pxs.3) XIO(S010TL1.Act[3].Work.Pxs.3) ,XIO(S010TL1.Act[3].Installed.3) ][XIC(S010TL1.Act[3].Home.Pxs.4) XIO(S010TL1.Act[3].Work.Pxs.4) ,XIO(S010TL1.Act[3].Installed.4) ][XIC(S010TL1.Act[3].Home.Pxs.5) XIO(S010TL1.Act[3].Work.Pxs.5) ,XIO(S010TL1.Act[3].Installed.5) ][XIC(S010TL1.Act[3].Home.Pxs.6) XIO(S010TL1.Act[3].Work.Pxs.6) ,XIO(S010TL1.Act[3].Installed.6) ][XIC(S010TL1.Act[3].Home.Pxs.7) XIO(S010TL1.Act[3].Work.Pxs.7) ,XIO(S010TL1.Act[3].Installed.7) ]OTE(S010TL1.Act[3].Home.Comp);
				N: [XIC(S010TL1.Act[3].Home.Out) [RTO(S010TL1.Act[3].Home.FltTmr,?,?) ,XIC(S010TL1.Act[3].Home.Comp) OTL(S010TL1.Act[3].Home.FltTmr.DN) ] ,XIC(S010TL1.Act[3].Work.Out) RES(S010TL1.Act[3].Home.FltTmr) ,XIC(S010TL1.Act[3].Home.FltTmr.DN) XIO(S010TL1.Act[3].Home.Comp) XIC(S010TL1.Int.PPActFltsEnbld) [OTE(S010TL1.Act[3].Home.MtnFlt) ,XIC(S010TL1.Act[3].Work.Comp) OTE(S010TL1.Act[3].Home.VlvFlt) ] ];
				N: [XIC(S010TL1.Act[3].Home.MtnFlt) ,XIC(S010TL1.Act[3].Home.VlvFlt) ,XIC(S010TL1.Act[3].Work.MtnFlt) ,XIC(S010TL1.Act[3].Work.VlvFlt) ]OTE(S010TL1.Act[3].Faulted);
		END_ROUTINE

		ROUTINE D00_Act4_Slide1 (Description := "Actuator Standard Routine")
				RC: "########################$N"
				    "Actuator Standard Logic$N"
				    "########################$N"
				    "$N"
				    "Add Control for every used Actuator$N"
				    "Edit Only Work and Home Descriptions$N"
				    "Do Not edit Work/Home Control Logic";
				N: NOP();
				RC: "########################$N"
				    "Actuator[4]$N"
				    "Slide 1$N"
				    "*Description*$N"
				    "CL9$N"
				    "########################";
				N: NOP();
				N: MOV('Advance',S010TL1.Act[4].WorkCmdDesc)MOV('Retract',S010TL1.Act[4].HomeCmdDesc);
				RC: "########################$N"
				    "Work Control Logic$N"
				    "########################";
				N: [XIC(S010TL1.Act[4].Home.AutoCmd) ,XIC(S010TL1.Act[4].Home.ManualCmdPB) ]XIC(S010TL1.Act[4].Home.Clr)OTE(S010TL1.Act[4].Work.SealRst);
				N: [XIC(S010TL1.Int.AutoMode) XIC(S010TL1.Act[4].Work.AutoCmd) ,XIC(S010TL1.Int.ManualMode) XIC(S010TL1.Act[4].Work.ManualCmdPB) ,XIC(S010TL1.Act[4].Work.Out) XIC(S010TL1.Act[4].Work.Seal) ]XIC(S010TL1.Act[4].Work.Clr)XIO(S010TL1.Act[4].Work.SealRst)XIC(S010TL1.Act[4].ActMtnEnbld)OTE(S010TL1.Act[4].Work.Out);
				N: XIC(S010TL1.Act[4].Work.Out)OTL(S010TL1.Act[4].Work.Mem);
				N: XIC(S010TL1.Act[4].Home.Out)OTU(S010TL1.Act[4].Work.Mem);
				N: [XIC(S010TL1.Act[4].Work.Pxs.0) XIO(S010TL1.Act[4].Home.Pxs.0) ,XIO(S010TL1.Act[4].Installed.0) ][XIC(S010TL1.Act[4].Work.Pxs.1) XIO(S010TL1.Act[4].Home.Pxs.1) ,XIO(S010TL1.Act[4].Installed.1) ][XIC(S010TL1.Act[4].Work.Pxs.2) XIO(S010TL1.Act[4].Home.Pxs.2) ,XIO(S010TL1.Act[4].Installed.2) ][XIC(S010TL1.Act[4].Work.Pxs.3) XIO(S010TL1.Act[4].Home.Pxs.3) ,XIO(S010TL1.Act[4].Installed.3) ][XIC(S010TL1.Act[4].Work.Pxs.4) XIO(S010TL1.Act[4].Home.Pxs.4) ,XIO(S010TL1.Act[4].Installed.4) ][XIC(S010TL1.Act[4].Work.Pxs.5) XIO(S010TL1.Act[4].Home.Pxs.5) ,XIO(S010TL1.Act[4].Installed.5) ][XIC(S010TL1.Act[4].Work.Pxs.6) XIO(S010TL1.Act[4].Home.Pxs.6) ,XIO(S010TL1.Act[4].Installed.6) ][XIC(S010TL1.Act[4].Work.Pxs.7) XIO(S010TL1.Act[4].Home.Pxs.7) ,XIO(S010TL1.Act[4].Installed.7) ]OTE(S010TL1.Act[4].Work.Comp);
				N: [XIC(S010TL1.Act[4].Work.Out) [RTO(S010TL1.Act[4].Work.FltTmr,?,?) ,XIC(S010TL1.Act[4].Work.Comp) OTL(S010TL1.Act[4].Work.FltTmr.DN) ] ,XIC(S010TL1.Act[4].Home.Out) RES(S010TL1.Act[4].Work.FltTmr) ,XIC(S010TL1.Act[4].Work.FltTmr.DN) XIO(S010TL1.Act[4].Work.Comp) XIC(S010TL1.Int.PPActFltsEnbld) [OTE(S010TL1.Act[4].Work.MtnFlt) ,XIC(S010TL1.Act[4].Home.Comp) OTE(S010TL1.Act[4].Work.VlvFlt) ] ];
				RC: "########################$N"
				    "Home Control Logic$N"
				    "########################";
				N: [XIC(S010TL1.Act[4].Work.AutoCmd) ,XIC(S010TL1.Act[4].Work.ManualCmdPB) ]XIC(S010TL1.Act[4].Work.Clr)OTE(S010TL1.Act[4].Home.SealRst);
				N: [XIC(S010TL1.Int.AutoMode) XIC(S010TL1.Act[4].Home.AutoCmd) ,XIC(S010TL1.Int.ManualMode) XIC(S010TL1.Act[4].Home.ManualCmdPB) ,XIC(S010TL1.Act[4].Home.Out) XIC(S010TL1.Act[4].Home.Seal) ]XIC(S010TL1.Act[4].Home.Clr)XIO(S010TL1.Act[4].Home.SealRst)XIC(S010TL1.Act[4].ActMtnEnbld)OTE(S010TL1.Act[4].Home.Out);
				N: XIC(S010TL1.Act[4].Home.Out)OTL(S010TL1.Act[4].Home.Mem);
				N: XIC(S010TL1.Act[4].Work.Out)OTU(S010TL1.Act[4].Home.Mem);
				N: [XIC(S010TL1.Act[4].Home.Pxs.0) XIO(S010TL1.Act[4].Work.Pxs.0) ,XIO(S010TL1.Act[4].Installed.0) ][XIC(S010TL1.Act[4].Home.Pxs.1) XIO(S010TL1.Act[4].Work.Pxs.1) ,XIO(S010TL1.Act[4].Installed.1) ][XIC(S010TL1.Act[4].Home.Pxs.2) XIO(S010TL1.Act[4].Work.Pxs.2) ,XIO(S010TL1.Act[4].Installed.2) ][XIC(S010TL1.Act[4].Home.Pxs.3) XIO(S010TL1.Act[4].Work.Pxs.3) ,XIO(S010TL1.Act[4].Installed.3) ][XIC(S010TL1.Act[4].Home.Pxs.4) XIO(S010TL1.Act[4].Work.Pxs.4) ,XIO(S010TL1.Act[4].Installed.4) ][XIC(S010TL1.Act[4].Home.Pxs.5) XIO(S010TL1.Act[4].Work.Pxs.5) ,XIO(S010TL1.Act[4].Installed.5) ][XIC(S010TL1.Act[4].Home.Pxs.6) XIO(S010TL1.Act[4].Work.Pxs.6) ,XIO(S010TL1.Act[4].Installed.6) ][XIC(S010TL1.Act[4].Home.Pxs.7) XIO(S010TL1.Act[4].Work.Pxs.7) ,XIO(S010TL1.Act[4].Installed.7) ]OTE(S010TL1.Act[4].Home.Comp);
				N: [XIC(S010TL1.Act[4].Home.Out) [RTO(S010TL1.Act[4].Home.FltTmr,?,?) ,XIC(S010TL1.Act[4].Home.Comp) OTL(S010TL1.Act[4].Home.FltTmr.DN) ] ,XIC(S010TL1.Act[4].Work.Out) RES(S010TL1.Act[4].Home.FltTmr) ,XIC(S010TL1.Act[4].Home.FltTmr.DN) XIO(S010TL1.Act[4].Home.Comp) XIC(S010TL1.Int.PPActFltsEnbld) [OTE(S010TL1.Act[4].Home.MtnFlt) ,XIC(S010TL1.Act[4].Work.Comp) OTE(S010TL1.Act[4].Home.VlvFlt) ] ];
				N: [XIC(S010TL1.Act[4].Home.MtnFlt) ,XIC(S010TL1.Act[4].Home.VlvFlt) ,XIC(S010TL1.Act[4].Work.MtnFlt) ,XIC(S010TL1.Act[4].Work.VlvFlt) ]OTE(S010TL1.Act[4].Faulted);
		END_ROUTINE

		ROUTINE D01_MotionSeq (Description := "Actuator Motion and Sequence Control")
				RC: "************************************************************$N"
				    "STATION ACTUATOR$N"
				    "MOTION AND SEQUENCE$N"
				    "LOGIC$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Actuator 1 Mapping$N"
				    "$N"
				    "Clamp 1$N"
				    "*Description*$N"
				    "CL1, CL2, CL3$N"
				    "************************************************************";
				N: [OTE(S010TL1.Act[1].Installed.0) ,XIC(Edit.Bit) OTE(S010TL1.Act[1].Work.Pxs.0) ,XIC(Edit.Bit) OTE(S010TL1.Act[1].Home.Pxs.0) ][OTE(S010TL1.Act[1].Installed.1) ,XIC(Edit.Bit) OTE(S010TL1.Act[1].Work.Pxs.1) ,XIC(Edit.Bit) OTE(S010TL1.Act[1].Home.Pxs.1) ][OTE(S010TL1.Act[1].Installed.2) ,XIC(Edit.Bit) OTE(S010TL1.Act[1].Work.Pxs.2) ,XIC(Edit.Bit) OTE(S010TL1.Act[1].Home.Pxs.2) ];
				RC: "************************************************************$N"
				    "Actuator Motion Interlock$N"
				    "************************************************************$N"
				    "$N"
				    "Edit.Bit May be used for Safety Manual Motion Enable$N"
				    "Future";
				N: [XIC(S010Sfty.FX1.MotionEnbl) OTE(S010TL1.Act[1].ActMtnIntlk.Inp_Intlk00) ,XIC(Edit.Bit) OTE(S010TL1.Act[1].ActMtnIntlk.Inp_Intlk01) ,XIC(Edit.Bit) OTE(S010TL1.Act[1].ActMtnIntlk.Inp_Intlk02) ,P_Intlk(S010TL1.Act[1].ActMtnIntlk) ,XIC(S010TL1.Act[1].ActMtnIntlk.Sts_IntlkOK) OTE(S010TL1.Act[1].ActMtnEnbld) ];
				RC: "************************************************************$N"
				    "Actuator 2 Mapping$N"
				    "$N"
				    "Clamp 2$N"
				    "*Description*$N"
				    "CL4, CL5, CL6$N"
				    "************************************************************";
				N: [OTE(S010TL1.Act[2].Installed.0) ,XIC(Edit.Bit) OTE(S010TL1.Act[2].Work.Pxs.0) ,XIC(Edit.Bit) OTE(S010TL1.Act[2].Home.Pxs.0) ][OTE(S010TL1.Act[2].Installed.1) ,XIC(Edit.Bit) OTE(S010TL1.Act[2].Work.Pxs.1) ,XIC(Edit.Bit) OTE(S010TL1.Act[2].Home.Pxs.1) ][OTE(S010TL1.Act[2].Installed.2) ,XIC(Edit.Bit) OTE(S010TL1.Act[2].Work.Pxs.2) ,XIC(Edit.Bit) OTE(S010TL1.Act[2].Home.Pxs.2) ];
				RC: "************************************************************$N"
				    "Actuator Motion Interlock$N"
				    "************************************************************$N"
				    "$N"
				    "Edit.Bit May be used for Safety Manual Motion Enable$N"
				    "Future";
				N: [XIC(S010Sfty.FX1.MotionEnbl) OTE(S010TL1.Act[2].ActMtnIntlk.Inp_Intlk00) ,XIC(Edit.Bit) OTE(S010TL1.Act[2].ActMtnIntlk.Inp_Intlk01) ,XIC(Edit.Bit) OTE(S010TL1.Act[2].ActMtnIntlk.Inp_Intlk02) ,P_Intlk(S010TL1.Act[2].ActMtnIntlk) ,XIC(S010TL1.Act[2].ActMtnIntlk.Sts_IntlkOK) OTE(S010TL1.Act[2].ActMtnEnbld) ];
				RC: "************************************************************$N"
				    "Actuator 3 Mapping$N"
				    "$N"
				    "Clamp 3$N"
				    "*Description*$N"
				    "CL7, CL8$N"
				    "************************************************************";
				N: [OTE(S010TL1.Act[3].Installed.0) ,XIC(Edit.Bit) OTE(S010TL1.Act[3].Work.Pxs.0) ,XIC(Edit.Bit) OTE(S010TL1.Act[3].Home.Pxs.0) ][OTE(S010TL1.Act[3].Installed.1) ,XIC(Edit.Bit) OTE(S010TL1.Act[3].Work.Pxs.1) ,XIC(Edit.Bit) OTE(S010TL1.Act[3].Home.Pxs.1) ];
				RC: "************************************************************$N"
				    "Actuator Motion Interlock$N"
				    "************************************************************$N"
				    "$N"
				    "Edit.Bit May be used for Safety Manual Motion Enable$N"
				    "Future";
				N: [XIC(S010Sfty.FX1.MotionEnbl) OTE(S010TL1.Act[3].ActMtnIntlk.Inp_Intlk00) ,XIC(Edit.Bit) OTE(S010TL1.Act[3].ActMtnIntlk.Inp_Intlk01) ,XIC(Edit.Bit) OTE(S010TL1.Act[3].ActMtnIntlk.Inp_Intlk02) ,P_Intlk(S010TL1.Act[3].ActMtnIntlk) ,XIC(S010TL1.Act[3].ActMtnIntlk.Sts_IntlkOK) OTE(S010TL1.Act[3].ActMtnEnbld) ];
				RC: "************************************************************$N"
				    "Actuator 4 Mapping$N"
				    "$N"
				    "Slide 1$N"
				    "*Description*$N"
				    "CL9$N"
				    "************************************************************";
				N: [OTE(S010TL1.Act[4].Installed.0) ,XIC(Edit.Bit) OTE(S010TL1.Act[4].Work.Pxs.0) ,XIC(Edit.Bit) OTE(S010TL1.Act[4].Home.Pxs.0) ][OTE(S010TL1.Act[4].Installed.1) ,XIC(Edit.Bit) OTE(S010TL1.Act[4].Work.Pxs.1) ,XIC(Edit.Bit) OTE(S010TL1.Act[4].Home.Pxs.1) ];
				RC: "************************************************************$N"
				    "Actuator Motion Interlock$N"
				    "************************************************************$N"
				    "$N"
				    "Edit.Bit May be used for Safety Manual Motion Enable$N"
				    "Future";
				N: [XIC(S010Sfty.FX1.MotionEnbl) OTE(S010TL1.Act[4].ActMtnIntlk.Inp_Intlk00) ,XIC(Edit.Bit) OTE(S010TL1.Act[4].ActMtnIntlk.Inp_Intlk01) ,XIC(Edit.Bit) OTE(S010TL1.Act[4].ActMtnIntlk.Inp_Intlk02) ,P_Intlk(S010TL1.Act[4].ActMtnIntlk) ,XIC(S010TL1.Act[4].ActMtnIntlk.Sts_IntlkOK) OTE(S010TL1.Act[4].ActMtnEnbld) ];
				RC: "#############################$N"
				    "S010TL1$N"
				    "Sequence Control$N"
				    "#############################$N"
				    "$N"
				    "Add Logic for all Actuators (Act[X]) in the tool sequence of operation.$N"
				    "$N"
				    "Example:$N"
				    "Act[1] to Work$N"
				    "Act[2] To Work$N"
				    "Act[1] To Home$N"
				    "Act[2] To Home";
				N: NOP();
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S005RB01.Int.ClearOfDrop1)XIC(S010RB01.Int.ClearOfTool1)XIC(S010RB02.Int.ClearOfTool1)XIC(S020RB01.Int.ClearOfPick1)OTE(S010TL1.Act[1].Work.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S010TL1.Act[1].Work.FltTmr.PRE)XIC(S010TL1.Int.AutoMode)XIC(Edit.Bit)OTE(S010TL1.Act[1].Work.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S010TL1.Int.ManualMode)XIC(Edit.Bit)OTE(S010TL1.Act[1].Work.ManualCmdPB);
				N: XIC(S010TL1.Act[1].Work.Comp)OTE(S010TL1.Act[1].Work.Seal);
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S005RB01.Int.ClearOfDrop1)XIC(S010RB01.Int.ClearOfTool1)XIC(S010RB02.Int.ClearOfTool1)XIC(S020RB01.Int.ClearOfPick1)OTE(S010TL1.Act[2].Work.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S010TL1.Act[1].Work.FltTmr.PRE)XIC(S010TL1.Int.AutoMode)XIC(Edit.Bit)OTE(S010TL1.Act[2].Work.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S010TL1.Int.ManualMode)XIC(Edit.Bit)OTE(S010TL1.Act[2].Work.ManualCmdPB);
				N: XIC(S010TL1.Act[2].Work.Comp)OTE(S010TL1.Act[2].Work.Seal);
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S005RB01.Int.ClearOfDrop1)XIC(S010RB01.Int.ClearOfTool1)XIC(S010RB02.Int.ClearOfTool1)XIC(S020RB01.Int.ClearOfPick1)OTE(S010TL1.Act[2].Home.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S010TL1.Act[1].Home.FltTmr.PRE)XIC(S010TL1.Int.AutoMode)XIC(Edit.Bit)OTE(S010TL1.Act[2].Home.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S010TL1.Int.ManualMode)XIC(Edit.Bit)OTE(S010TL1.Act[2].Home.ManualCmdPB);
				N: XIC(S010TL1.Act[2].Home.Comp)OTE(S010TL1.Act[2].Home.Seal);
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S005RB01.Int.ClearOfDrop1)XIC(S010RB01.Int.ClearOfTool1)XIC(S010RB02.Int.ClearOfTool1)XIC(S020RB01.Int.ClearOfPick1)OTE(S010TL1.Act[1].Home.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S010TL1.Act[1].Home.FltTmr.PRE)XIC(S010TL1.Int.AutoMode)XIC(Edit.Bit)OTE(S010TL1.Act[1].Home.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S010TL1.Int.ManualMode)XIC(Edit.Bit)OTE(S010TL1.Act[1].Home.ManualCmdPB);
				N: XIC(S010TL1.Act[1].Home.Comp)OTE(S010TL1.Act[1].Home.Seal);
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S005RB01.Int.ClearOfDrop1)XIC(S010RB01.Int.ClearOfTool1)XIC(S010RB02.Int.ClearOfTool1)XIC(S020RB01.Int.ClearOfPick1)OTE(S010TL1.Act[3].Work.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S010TL1.Act[1].Work.FltTmr.PRE)XIC(S010TL1.Int.AutoMode)XIC(Edit.Bit)OTE(S010TL1.Act[3].Work.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S010TL1.Int.ManualMode)XIC(Edit.Bit)OTE(S010TL1.Act[3].Work.ManualCmdPB);
				N: XIC(S010TL1.Act[3].Work.Comp)OTE(S010TL1.Act[3].Work.Seal);
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S005RB01.Int.ClearOfDrop1)XIC(S010RB01.Int.ClearOfTool1)XIC(S010RB02.Int.ClearOfTool1)XIC(S020RB01.Int.ClearOfPick1)OTE(S010TL1.Act[3].Home.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S010TL1.Act[1].Home.FltTmr.PRE)XIC(S010TL1.Int.AutoMode)XIC(Edit.Bit)OTE(S010TL1.Act[3].Home.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S010TL1.Int.ManualMode)XIC(Edit.Bit)OTE(S010TL1.Act[3].Home.ManualCmdPB);
				N: XIC(S010TL1.Act[3].Home.Comp)OTE(S010TL1.Act[3].Home.Seal);
		END_ROUTINE

		ROUTINE D02_PartPresent 
				RC: "************************************************************$N"
				    "PP Common Inputs$N"
				    "$N"
				    "Assign each PP[X] to a Part Present Load Group$N"
				    "$N"
				    "PP1_xxx - 1st Load Part Presents$N"
				    "PP2_xxx - 2nd Load Part Presents$N"
				    "PP3_xxx - 3rd Load Part Presents$N"
				    "PP4_xxx - 4th Load Part Presents$N"
				    "************************************************************";
				N: NOP();
				N: XIO(S010TL1.Int.DryCycle)XIC(sZ005_040.PowerEnbld)XIC(S010TL1.Int.AirOnOk)XIC(S010TL1.Int.AllModCommOk)XIC(Edit.Bit)OTE(S010TL1.Int.PPActFltsEnbld);
				RC: "************************************************************$N"
				    "Part Present Logic$N"
				    "$N"
				    "************************************************************$N"
				    "Part Present AOI Parameter Mapping";
				N: NOP();
				RC: "************************************************************$N"
				    "PartPresent$N"
				    "************************************************************$N"
				    "DryCycle Load Condition$N"
				    "If the Tool is loaded by a Robot, The Timer should be removed";
				N: XIC(S010TL1.Int.DryCycle)XIC(Edit.Bit)[OTE(S010TL1.PP[1].inpPPDryCycleLoadTrgr) ,OTE(S010TL1.PP[2].inpPPDryCycleLoadTrgr) ,OTE(S010TL1.PP[3].inpPPDryCycleLoadTrgr) ,OTE(S010TL1.PP[4].inpPPDryCycleLoadTrgr) ];
				RC: "************************************************************$N"
				    "PartPresent - AIR$N"
				    "************************************************************$N"
				    "DryCycle Unload Condition";
				N: XIC(S010TL1.Int.DryCycle)XIC(Edit.Bit)[OTE(S010TL1.PP[1].inpPPDryCycleUnldTrgr) ,OTE(S010TL1.PP[2].inpPPDryCycleUnldTrgr) ];
				RC: "************************************************************$N"
				    "PartPresent  - GRAVITY$N"
				    "************************************************************$N"
				    "DryCycle Unload Condition";
				N: XIC(S010TL1.Int.DryCycle)XIC(Edit.Bit)[OTE(S010TL1.PP[3].inpPPDryCycleUnldTrgr) ,OTE(S010TL1.PP[4].inpPPDryCycleUnldTrgr) ];
				RC: "************************************************************$N"
				    "Set Used/Installed Sensors$N"
				    "************************************************************$N"
				    "Change instruction to OTE if sensor used.$N"
				    "Change instruction to OTU if the sensor will not be used/installed";
				N: OTE(S010TL1.PP[1].inpPPSensorInst.0)OTE(S010TL1.PP[1].inpPPSensorInst.1)OTU(S010TL1.PP[1].inpPPSensorInst.2)OTU(S010TL1.PP[1].inpPPSensorInst.3)OTU(S010TL1.PP[1].inpPPSensorInst.4)OTU(S010TL1.PP[1].inpPPSensorInst.5)OTU(S010TL1.PP[1].inpPPSensorInst.6)OTU(S010TL1.PP[1].inpPPSensorInst.7);
				RC: "************************************************************$N"
				    "Add all first load Switch Inputs$N"
				    "Model Air$N"
				    "************************************************************";
				N: [MOV(0,S010TL1.PP[1].inpPPSensor) ,[XIC(S010TL1VM1.I1.0) OTE(S010TL1.PP[1].inpPPSensor.0) ,XIC(S010TL1VM1.I1.1) OTE(S010TL1.PP[1].inpPPSensor.1) ] ,XIC(S010TL1.Int.DryCycle) XIC(S010TL1.PP[1].stsPPMem) MOV(2#0000_0011,S010TL1.PP[1].inpPPSensor) ];
				N: [XIC(S010TL1VM1.I1.0) ,XIC(S010TL1VM1.I1.1) ]OTE(S010TL1.PP[1].PPAnySensor);
				RC: "************************************************************$N"
				    "Change Edit.Bit with required conditions for PP to be ON/OFF$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(S010TL1.PP[1].inpOnCondition);
				N: XIC(Edit.Bit)OTE(S010TL1.PP[1].inpOffCondition);
				RC: "************************************************************$N"
				    "Set Used/Installed Sensors$N"
				    "************************************************************$N"
				    "Change instruction to OTE if sensor used.$N"
				    "Change instruction to OTU if the sensor will not be used/installed";
				N: OTE(S010TL1.PP[2].inpPPSensorInst.0)OTE(S010TL1.PP[2].inpPPSensorInst.1)OTE(S010TL1.PP[2].inpPPSensorInst.2)OTU(S010TL1.PP[2].inpPPSensorInst.3)OTU(S010TL1.PP[2].inpPPSensorInst.4)OTU(S010TL1.PP[2].inpPPSensorInst.5)OTU(S010TL1.PP[2].inpPPSensorInst.6)OTU(S010TL1.PP[2].inpPPSensorInst.7);
				RC: "************************************************************$N"
				    "Add all second load Switch Inputs$N"
				    "Model Air$N"
				    "************************************************************";
				N: [MOV(0,S010TL1.PP[2].inpPPSensor) ,[XIC(S010TL1VM1.I1.2) OTE(S010TL1.PP[2].inpPPSensor.0) ,XIC(S010TL1VM1.I1.3) OTE(S010TL1.PP[2].inpPPSensor.1) ,XIC(S010TL1VM1.I1.4) OTE(S010TL1.PP[2].inpPPSensor.2) ] ,XIC(S010TL1.Int.DryCycle) XIC(S010TL1.PP[2].stsPPMem) MOV(2#0000_0111,S010TL1.PP[2].inpPPSensor) ];
				N: [XIC(S010TL1VM1.I1.2) ,XIC(S010TL1VM1.I1.3) ,XIC(S010TL1VM1.I1.4) ]OTE(S010TL1.PP[2].PPAnySensor);
				RC: "************************************************************$N"
				    "Change Edit.Bit with required conditions for PP to be ON/OFF$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(S010TL1.PP[2].inpOnCondition);
				N: XIC(Edit.Bit)OTE(S010TL1.PP[2].inpOffCondition);
				RC: "Model 1 Part Present AOIs$N"
				    "Lucid AIR";
				N: PartPresent(S010TL1.PP[1],S010TL1.PP[1].inpPPSensor,S010TL1.PP[1].inpOnCondition,S010TL1.PP[1].inpOffCondition,S010TL1.Int.DryCycle,S010TL1.Int.PPActFltsEnbld)PartPresent(S010TL1.PP[2],S010TL1.PP[2].inpPPSensor,S010TL1.PP[2].inpOnCondition,S010TL1.PP[2].inpOffCondition,S010TL1.Int.DryCycle,S010TL1.Int.PPActFltsEnbld);
				RC: "************************************************************$N"
				    "Set Used/Installed Sensors$N"
				    "************************************************************$N"
				    "Change instruction to OTE if sensor used.$N"
				    "Change instruction to OTU if the sensor will not be used/installed";
				N: OTE(S010TL1.PP[3].inpPPSensorInst.0)OTE(S010TL1.PP[3].inpPPSensorInst.1)OTU(S010TL1.PP[3].inpPPSensorInst.2)OTU(S010TL1.PP[3].inpPPSensorInst.3)OTU(S010TL1.PP[3].inpPPSensorInst.4)OTU(S010TL1.PP[3].inpPPSensorInst.5)OTU(S010TL1.PP[3].inpPPSensorInst.6)OTU(S010TL1.PP[3].inpPPSensorInst.7);
				RC: "************************************************************$N"
				    "Add all first load Switch Inputs$N"
				    "Model Gravity$N"
				    "************************************************************";
				N: [MOV(0,S010TL1.PP[3].inpPPSensor) ,[XIC(S010TL1VM1.I2.0) OTE(S010TL1.PP[3].inpPPSensor.0) ,XIC(S010TL1VM1.I2.1) OTE(S010TL1.PP[3].inpPPSensor.1) ] ,XIC(S010TL1.Int.DryCycle) XIC(S010TL1.PP[3].stsPPMem) MOV(2#0000_0011,S010TL1.PP[3].inpPPSensor) ];
				N: [XIC(S010TL1VM1.I2.0) ,XIC(S010TL1VM1.I2.1) ]OTE(S010TL1.PP[3].PPAnySensor);
				RC: "************************************************************$N"
				    "Change Edit.Bit with required conditions for PP to be ON/OFF$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(S010TL1.PP[3].inpOnCondition);
				N: XIC(Edit.Bit)OTE(S010TL1.PP[3].inpOffCondition);
				RC: "************************************************************$N"
				    "Set Used/Installed Sensors$N"
				    "************************************************************$N"
				    "Change instruction to OTE if sensor used.$N"
				    "Change instruction to OTU if the sensor will not be used/installed";
				N: OTE(S010TL1.PP[4].inpPPSensorInst.0)OTE(S010TL1.PP[4].inpPPSensorInst.1)OTE(S010TL1.PP[4].inpPPSensorInst.2)OTU(S010TL1.PP[4].inpPPSensorInst.3)OTU(S010TL1.PP[4].inpPPSensorInst.4)OTU(S010TL1.PP[4].inpPPSensorInst.5)OTU(S010TL1.PP[4].inpPPSensorInst.6)OTU(S010TL1.PP[4].inpPPSensorInst.7);
				RC: "************************************************************$N"
				    "Add all Second load Switch Inputs$N"
				    "Model Gravity$N"
				    "************************************************************";
				N: [[XIC(S010TL1VM1.I2.2) OTE(S010TL1.PP[4].inpPPSensor.0) ,XIC(S010TL1VM1.I2.3) OTE(S010TL1.PP[4].inpPPSensor.1) ,XIC(S010TL1VM1.I2.4) OTE(S010TL1.PP[4].inpPPSensor.2) ] ,XIC(S010TL1.Int.DryCycle) XIC(S010TL1.PP[4].stsPPMem) MOV(2#0000_0111,S010TL1.PP[4].inpPPSensor) ];
				N: [XIC(S010TL1VM1.I2.2) ,XIC(S010TL1VM1.I2.3) ,XIC(S010TL1VM1.I2.4) ]OTE(S010TL1.PP[4].PPAnySensor);
				RC: "************************************************************$N"
				    "Change Edit.Bit with required conditions for PP to be ON/OFF$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(S010TL1.PP[4].inpOnCondition);
				N: XIC(Edit.Bit)OTE(S010TL1.PP[4].inpOffCondition);
				RC: "Model 2 Part Present AOIs$N"
				    "Lucid GRAVITY";
				N: PartPresent(S010TL1.PP[3],S010TL1.PP[3].inpPPSensor,S010TL1.PP[3].inpOnCondition,S010TL1.PP[3].inpOffCondition,S010TL1.Int.DryCycle,S010TL1.Int.PPActFltsEnbld)PartPresent(S010TL1.PP[4],S010TL1.PP[4].inpPPSensor,S010TL1.PP[4].inpOnCondition,S010TL1.PP[4].inpOffCondition,S010TL1.Int.DryCycle,S010TL1.Int.PPActFltsEnbld);
				RC: "************************************************************$N"
				    "Parts Present Fault$N"
				    "************************************************************";
				N: NOP();
				N: [XIC(S010TL1.PP[1].stsPPNotOK) ,XIC(S010TL1.PP[2].stsPPNotOK) ,XIC(S010TL1.PP[3].stsPPNotOK) ,XIC(S010TL1.PP[4].stsPPNotOK) ]OTE(S010TL1.Int.PPFault);
				RC: "*************************************************************$N"
				    "Use to avoid load parts during drycycle$N"
				    "**************************************************************";
				N: XIO(S010TL1.Int.PartsPresNo)OTE(S010TL1.Int.AnyPartPres);
		END_ROUTINE

		ROUTINE P00_Station 
				RC: "###########################$N"
				    "Station$N"
				    "Standard Logic$N"
				    "$N"
				    "BiWCGlx Rev 1.0$N"
				    "###########################";
				N: NOP();
				RC: "########################################$N"
				    "Home Position$N"
				    "########################################";
				N: XIC(S010TL1.Act[1].Home.Comp)XIC(S010TL1.Act[2].Home.Comp)XIC(S010TL1.Act[3].Home.Comp)OTE(S010TL1.Int.AtHomePos);
				RC: "************************************************************$N"
				    "Station Part Present Summary$N"
				    "************************************************************$N"
				    "$N"
				    "OTU Bit if not used or required";
				N: NOP();
				N: XIC(S010TL1.PP[1].stsPPOff)XIC(S010TL1.PP[2].stsPPOff)XIC(S010TL1.PP[3].stsPPOff)XIC(S010TL1.PP[4].stsPPOff)OTE(S010TL1.Int.PartsPresNo);
				N: XIC(S010TL1.Int.PartsPresNo)XIC(S010TL1.SR.Int.NoPart)OTE(S010TL1.Int.Empty);
				N: [XIC(S010TL1.PP[1].stsPPOn) XIC(S010TL1.PP[2].stsPPOff) ,XIC(S010TL1.PP[3].stsPPOn) XIC(S010TL1.PP[4].stsPPOff) ]OTE(S010TL1.Int.AllPartsPres1);
				N: [XIC(S010TL1.PP[1].PPAnySensor) ,XIC(S010TL1.PP[3].PPAnySensor) ]OTE(S010TL1.Int.AnyPartPres1);
				N: [XIC(S010TL1.PP[1].stsPPOn) XIC(S010TL1.PP[2].stsPPOn) ,XIC(S010TL1.PP[3].stsPPOn) XIC(S010TL1.PP[4].stsPPOn) ]OTE(S010TL1.Int.AllPartsPres2);
				N: [XIC(S010TL1.PP[2].PPAnySensor) ,XIC(S010TL1.PP[4].PPAnySensor) ]OTE(S010TL1.Int.AnyPartPres2);
				N: OTU(S010TL1.Int.AllPartsPres3);
				N: OTU(S010TL1.Int.AnyPartPres3);
				N: [XIC(S010TL1.SR.Int.Model1) XIC(S010TL1.PP[1].stsPPOn) XIC(S010TL1.PP[2].stsPPOn) ,XIC(S010TL1.SR.Int.Model2) XIC(S010TL1.PP[3].stsPPOn) XIC(S010TL1.PP[4].stsPPOn) ]XIC(Edit.Bit)OTE(S010TL1.Int.AllPPandSR);
				N: XIC(S010RB01.Int.Sta1TaskComp)XIC(S010RB02.Int.Sta1TaskComp)OTE(S010TL1.Int.RbtsTaskComp);
				RC: "************************************************************$N"
				    "Auto Mode Selected$N"
				    "************************************************************$N"
				    "";
				N: [XIO(S010TL1.Int.ManualModePB) XIO(S010TL1.Int.NoModePB) XIO(Z005_040.NoModePB) ,XIC(S010TL1.Int.AutoMode) ][XIC(S010TL1.Int.NoMode) [XIC(S010TL1.Int.AutoSelPB) ,XIC(Z005_040.GlobalAutoModeSelPB) ,XIC(S010TL1.Int.AutoModePB) ,XIC(Z005_040.GlobalAutoModePB) ] ,XIC(S010TL1.Int.AutoSel) ]XIC(S010TL1.Int.RbtsInAuto)XIC(S010TL1.Int.RbtsTeachOff)OTE(S010TL1.Int.AutoSel);
				RC: "************************************************************$N"
				    "Station Auto Mode$N"
				    "Interlocks$N"
				    "************************************************************";
				N: [XIC(Z005_040.AutoModeSetup.Sts_IntlkOK) OTE(S010TL1.Int.AutoModeSetup.Inp_Intlk00) ,XIC(S010TL1.Int.AutoSel) OTE(S010TL1.Int.AutoModeSetup.Inp_Intlk01) ,XIO(S010TL1.Int.AutoModeStop) OTE(S010TL1.Int.AutoModeSetup.Inp_Intlk02) ,XIO(S010TL1.Int.ManualMode) OTE(S010TL1.Int.AutoModeSetup.Inp_Intlk03) ,XIC(S010TL1.Int.RbtsTeachOff) OTE(S010TL1.Int.AutoModeSetup.Inp_Intlk04) ,XIC(S010TL1.Int.RbtsInAuto) OTE(S010TL1.Int.AutoModeSetup.Inp_Intlk05) ,XIC(S010TL1.Int.AirOnOk) OTE(S010TL1.Int.AutoModeSetup.Inp_Intlk06) ,XIC(Edit.Bit) OTE(S010TL1.Int.AutoModeSetup.Inp_Intlk07) ,XIC(Edit.Bit) OTE(S010TL1.Int.AutoModeSetup.Inp_Intlk08) ,P_Intlk(S010TL1.Int.AutoModeSetup) ];
				RC: "************************************************************$N"
				    "Auto Mode $N"
				    "Running$N"
				    "************************************************************";
				N: XIC(S010TL1.Int.AutoModeSetup.Sts_IntlkOK)[[XIC(S010TL1.Int.AutoModePB) ,XIC(Z005_040.GlobalAutoModePB) ] ,XIC(S010TL1.Int.AutoMode) ][MOV(25,S010TL1.Int.AutoDlyTmr.PRE) TON(S010TL1.Int.AutoDlyTmr,?,?) ,XIC(S010TL1.Int.AutoDlyTmr.DN) OTE(S010TL1.Int.AutoMode) ];
				RC: "************************************************************$N"
				    "Auto Cycle Stop$N"
				    "************************************************************$N"
				    "";
				N: XIC(S010TL1.Int.AutoMode)[XIC(S010TL1.Int.NoModePB) ,XIC(Z005_040.AutoModeStopReq) ,XIC(S010TL1.Int.AutoModeStopReq) ]XIO(S010TL1.Int.AutoModeStop)OTE(S010TL1.Int.AutoModeStopReq);
				N: [XIC(S010RB01.I1.Pg_Paused) ,XIC(S010RB01.I1.RbtHeld) ,XIC(S010RB01.I1.RbtFaulted) ][XIC(S010RB02.I1.Pg_Paused) ,XIC(S010RB02.I1.RbtHeld) ,XIC(S010RB02.I1.RbtFaulted) ]OTE(S010TL1.Int.AutoModeStopEnable);
				N: XIC(S010TL1.Int.AutoMode)XIC(S010TL1.Int.AutoModeStopReq)XIC(S010TL1.Int.AutoModeStopEnable)OTE(S010TL1.Int.AutoModeStop);
				RC: "************************************************************$N"
				    "Manual Mode$N"
				    "************************************************************$N"
				    "";
				N: XIO(S010TL1.Int.NoModePB)XIO(Z005_040.NoModePB)XIO(S010TL1.Int.AutoSelPB)XIO(S010TL1.Int.AutoSel)[XIC(S010TL1.Int.NoMode) [XIC(S010TL1.Int.ManualModePB) ,XIC(Z005_040.ManualModePB) ] ,XIC(S010TL1.Int.ManualMode) ]XIC(S010RB01.Int.InTeach)OTE(S010TL1.Int.ManualMode);
				RC: "************************************************************$N"
				    "Dry Cycle$N"
				    "************************************************************$N"
				    "";
				N: XIC(Z005_040.DryCycle)OTE(S010TL1.Int.DryCycle);
				RC: "************************************************************$N"
				    "No Mode$N"
				    "************************************************************$N"
				    "";
				N: XIO(S010TL1.Int.AutoSel)XIO(S010TL1.Int.ManualMode)OTE(S010TL1.Int.NoMode);
				RC: "########################################$N"
				    "Load Setups$N"
				    "########################################";
				N: XIC(S010TL1.Int.AtHomePos)OTE(S010TL1.Int.LoadPos1);
				N: XIC(Edit.Bit)OTE(S010TL1.Int.LoadPos2);
				N: XIC(Edit.Bit)OTE(S010TL1.Int.LoadPos3);
				N: XIC(Edit.Bit)OTE(S010TL1.Int.LoadPos4);
				N: XIC(S010TL1.Int.AutoMode)[XIC(S010TL1.Int.LoadPos1) XIC(Edit.Bit) ,XIC(S010TL1.Int.LoadPos2) XIC(Edit.Bit) ,XIC(S010TL1.Int.LoadPos3) XIC(Edit.Bit) ,XIC(S010TL1.Int.LoadPos4) XIC(Edit.Bit) ]XIO(S010TL1.Int.TaskComp)XIO(S010TL1.Int.CycComp)XIC(S010Sfty.AllStaLtScrnOK)OTE(S010TL1.Int.ClrToLoad);
				N: XIC(Edit.Bit)OTE(S010TL1.Int.Load1Comp);
				N: XIC(Edit.Bit)OTE(S010TL1.Int.Load2Comp);
				N: XIC(Edit.Bit)OTE(S010TL1.Int.Load3Comp);
				N: XIC(Edit.Bit)OTE(S010TL1.Int.Load4Comp);
				N: XIC(Edit.Bit)OTE(S010TL1.Int.LoadComp);
				RC: "########################################$N"
				    "Work Positions$N"
				    "$N"
				    "10 Work Positions Available$N"
				    "########################################";
				N: XIC(S010TL1.Act[1].Work.Comp)XIC(S010TL1.Act[2].Work.Comp)XIC(S010TL1.Act[3].Work.Comp)OTE(S010TL1.Int.AtWorkPos1);
				N: XIC(Edit.Bit)OTE(S010TL1.Int.AtWorkPos2);
				N: XIC(Edit.Bit)OTE(S010TL1.Int.AtWorkPos3);
				RC: "########################################$N"
				    "Station Process Completes$N"
				    "$N"
				    "10 Process Completes Available$N"
				    "########################################";
				N: XIC(Edit.Bit)OTE(S010TL1.Int.Proc1Comp);
				N: XIC(S010TL1.Int.RbtsTaskComp)XIC(Edit.Bit)OTE(S010TL1.Int.Proc2Comp);
				N: XIC(Edit.Bit)OTE(S010TL1.Int.Proc3Comp);
				RC: "########################################$N"
				    "Station Tasks Complete$N"
				    "########################################";
				N: XIC(S010TL1.Int.CycStart)XIC(S010TL1.Int.Proc2Comp)XIC(S010TL1.Int.RbtsTaskComp)XIC(Edit.Bit)OTL(S010TL1.Int.TaskComp);
				N: [XIC(S010TL1.Int.UnldComp) ,XIC(S010TL1.Int.RstCycComp) ]OTU(S010TL1.Int.TaskComp);
				RC: "########################################$N"
				    "Unload Setups$N"
				    "########################################";
				N: XIC(S010TL1.Act[1].Home.Comp)XIC(S010TL1.Act[2].Home.Comp)XIC(S010TL1.Act[3].Work.Comp)OTE(S010TL1.Int.UnldPos1);
				N: XIC(Edit.Bit)OTE(S010TL1.Int.UnldPos2);
				N: XIC(Edit.Bit)OTE(S010TL1.Int.UnldPos3);
				N: XIC(S010TL1.Int.TaskComp)XIC(S010TL1.Int.UnldPos3)XIC(Edit.Bit)OTL(S010TL1.Int.CycComp);
				N: XIC(S010TL1.Int.RstCycComp)OTU(S010TL1.Int.UnldComp)OTU(S010TL1.Int.CycComp);
				N: XIC(S010TL1.Int.AutoMode)XIC(S010TL1.Int.AllPPandSR)XIC(S010TL1.Int.UnldPos1)XIC(S010TL1.Int.TaskComp)XIC(S010TL1.Int.CycComp)XIC(Edit.Bit)OTE(S010TL1.Int.ClrToUnld);
				N: XIC(S010TL1.Int.TaskComp)XIC(S010TL1.Int.CycComp)XIC(S010TL1.Int.Empty)XIC(Edit.Bit)OTL(S010TL1.Int.UnldComp);
				N: XIC(S010TL1.Int.AutoMode)XIC(S010TL1.Int.Empty)[XIC(S010TL1.Int.AtHomePos) ,XIC(Edit.Bit) ]XIC(Edit.Bit)OTE(S010TL1.Int.RstCycComp);
				RC: "########################################$N"
				    "Cycle Start Logic$N"
				    "########################################$N"
				    "$N"
				    "To be detemined how cycle start will be handled. Different Process starts may be involved.";
				N: XIC(Edit.Debug)OTE(S010TL1.Int.CycStart);
				RC: "************************************************************$N"
				    "Station Cycle Time Logic$N"
				    "************************************************************";
				N: NOP();
				N: MOV(3600000,S010TL1.Int.TackTMR.PRE)RTO(S010TL1.Int.TackTMR,?,?);
				N: XIC(S010TL1.Int.AutoMode)[XIC(S005RB01.Int.AutoMode) XIO(S005RB01.Int.ClearOfDrop1) ,XIC(S020RB05.Int.AutoMode) XIC(S020RB05.Int.ClearOfPick1) ]MOV(3600000,S010TL1.Int.IndexTMR.PRE)RTO(S010TL1.Int.IndexTMR,?,?);
				N: [XIC(S010TL1.Int.AutoMode) [XIC(S010TL1.Int.CycStart) XIO(S010TL1.Int.UnldComp) ,XIC(S010TL1.Int.TaskComp) XIO(S010TL1.Int.UnldPos1) XIC(Edit.Bit) ,XIC(S010TL1.Int.UnldComp) XIO(S010TL1.Int.CycComp) XIC(S010TL1.Int.PartsPresNo) ] ,XIC(S010TL1.Oper.CycTimeTmr.EN) ]XIO(S010TL1.Int.IndexTMR.TT)MOV(3600000,S010TL1.Int.CycTMR.PRE)RTO(S010TL1.Int.CycTMR,?,?);
				N: [XIC(S010TL1.Oper.CycTimeTmr.EN) ,XIC(S010TL1.Int.IndexTMR.EN) ,XIC(S010TL1.Int.CycTMR.EN) ]MOV(3600000,S010TL1.Int.ProcTMR.PRE)RTO(S010TL1.Int.ProcTMR,?,?);
				N: XIC(S010TL1.Int.UnldComp)[XIO(S010TL1.Int.CycCompONS.0) [MOV(S010TL1.Int.CycTMR.ACC,S010TL1.Int.CycTimeStore) ,RES(S010TL1.Int.CycTMR) ] ,OTL(S010TL1.Int.CycCompONS.0) ];
				N: XIC(S010TL1.Int.CycCompONS.0)XIO(S010TL1.Int.IndexTMR.EN)[XIO(S010TL1.Int.CycCompONS.1) [MOV(S010TL1.Int.TackTMR.ACC,S010TL1.Int.TackTimeStore) ,RES(S010TL1.Int.TackTMR) ,MOV(S010TL1.Int.IndexTMR.ACC,S010TL1.Int.IndexTimeStore) ,RES(S010TL1.Int.IndexTMR) ,MOV(S010TL1.Int.ProcTMR.ACC,S010TL1.Int.ProcTimeStore) ,RES(S010TL1.Int.ProcTMR) ] ,OTL(S010TL1.Int.CycCompONS.1) ];
				N: XIC(S010TL1.Int.CycStart)OTU(S010TL1.Int.CycCompONS.0)OTU(S010TL1.Int.CycCompONS.1);
				RC: "************************************************************$N"
				    "Station State$N"
				    "************************************************************";
				N: NOP();
				N: XIC(Edit.Bit)OTE(S010TL1.Int.Starved);
				N: XIC(Edit.Bit)OTE(S010TL1.Int.Blocked);
				RC: "************************************************************$N"
				    "Station Mode for HMI$N"
				    "$N"
				    "###REQUIRES UPDATE####$N"
				    "************************************************************";
				N: [MOV(0,S010TL1.Int.RunningMode) ,XIC(Status.AlwaysOff) XIC(Edit.Debug) MOV(1,S010TL1.Int.RunningMode) ,XIC(S010TL1.Int.HoldEndOfCycle) MOV(2,S010TL1.Int.RunningMode) ,XIC(S010TL1.Int.DryCycle) MOV(3,S010TL1.Int.RunningMode) ];
				RC: "************************************************************$N"
				    "Station Mode Status for HMI$N"
				    "$N"
				    "######REQUIRED UPDATE########$N"
				    "************************************************************";
				N: [XIO(HMI_FRM005.stsAnyFixtureOnFault) XIO(HMI_FRM005.stsAnyRobotOnFault) MOV(1,S010TL1.Int.RunningModeStatus) ,XIC(S010TL1.Int.Blocked) MOV(2,S010TL1.Int.RunningModeStatus) ,XIC(S010TL1.Int.Starved) MOV(3,S010TL1.Int.RunningModeStatus) ,[XIC(HMI_FRM005.stsAnyFixtureOnFault) ,XIC(HMI_FRM005.stsAnyRobotOnFault) ] MOV(0,S010TL1.Int.RunningModeStatus) ];
				RC: "************************************************************$N"
				    "Station Operation Mode for HMI$N"
				    "$N"
				    "#####REQUIRES UPDATE#####$N"
				    "************************************************************";
				N: [MOV(0,S010TL1.Int.OperationMode) ,XIC(S010TL1.Int.AutoSel) MOV(1,S010TL1.Int.OperationMode) ,XIC(S010TL1.Int.ManualMode) MOV(2,S010TL1.Int.OperationMode) ,XIC(S010TL1.Int.AutoMode) MOV(3,S010TL1.Int.OperationMode) ];
		END_ROUTINE

		ROUTINE P01_StationToSfty 
				RC: "************************************************************$N"
				    "Map States to Safety Tag$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S010TL1.Int.KnownPos)OTE(StdToSfty.S010KnownPos);
				N: XIC(Edit.Bit)[MOV(500,S010TL1.Int.ClrToUnlockDlyTmr.PRE) TON(S010TL1.Int.ClrToUnlockDlyTmr,?,?) ,XIC(S010TL1.Int.ClrToUnlockDlyTmr.DN) OTE(StdToSfty.S010ClrToUnlock) ];
		END_ROUTINE

		ROUTINE S00_HMISequence 
				RC: "############################$N"
				    "Station Sequence List$N"
				    "############################$N"
				    "$N"
				    "Map Station Sequence";
				N: NOP();
				RC: "############################$N"
				    "Robots Clear for Motion Indicator$N"
				    "############################";
				N: XIC(S010RB02.Int.ClearOfTool1)OTE(S010TL1.Seq.RbtsClr);
				RC: "$N"
				    "############################$N"
				    "Sequence of Operation$N"
				    "############################$N"
				    "$N"
				    "Operation = STRING    -    Indicates the Name of the operation on the HMI$N"
				    "WorkIndText / HomeIndText = STRING    -    Indicates the Text to Display for the Home Indicator and Work Indicator on the HMI$N"
				    "WorkPBText / HomePBText = STRING     -     Indicates the Text to Display on the Work and Home Push Buttons on the HMI  (If the string is empty, the buttons wont be shown on the HMI)$N"
				    "$N"
				    "WorkInd / HomeInd = DINT$N"
				    "1 - Solid on the HMI (Actual State)$N"
				    "2 - Blinking on the HMI (Required State)";
				N: NOP();
				RC: "Set the SeqMax to the number of sequence steps used on the scroll list";
				N: FLL(0,S010TL1.Seq.Operation[0],32)FLL(0,S010TL1.Seq.HomeInd[0],32)FLL(0,S010TL1.Seq.WorkInd[0],32);
				N: MOV('* S010TL1 *',S010TL1.Seq.Operation[0]);
				N: [XIC(S010TL1.SR.Int.Model1) ,XIC(S010TL1.SR.Int.Model2) ]XIC(Edit.Bit)[MOV('Operator 1st Load',S010TL1.Seq.Operation[1]) MOV('IN CYCLE',S010TL1.Seq.HomeIndText[1]) MOV('COMPLETE',S010TL1.Seq.WorkIndText[1]) MOV('',S010TL1.Seq.HomePBText[1]) MOV('',S010TL1.Seq.WorkPBText[1]) ,MOV(1,S010TL1.Seq.HomeInd[1]) ,[MOV(1,S010TL1.Seq.WorkInd[1]) ,MOV(2,S010TL1.Seq.WorkInd[1]) ] ];
				N: [XIC(S010TL1.SR.Int.Model1) ,XIC(S010TL1.SR.Int.Model2) ]XIC(Edit.Bit)[MOV('Act[1] Clamp 1 Close',S010TL1.Seq.Operation[2]) MOV('OPENED',S010TL1.Seq.HomeIndText[2]) MOV('CLOSED',S010TL1.Seq.WorkIndText[2]) MOV('OPEN',S010TL1.Seq.HomePBText[2]) MOV('CLOSE',S010TL1.Seq.WorkPBText[2]) ,MOV(1,S010TL1.Seq.HomeInd[2]) ,[MOV(1,S010TL1.Seq.WorkInd[2]) ,MOV(2,S010TL1.Seq.WorkInd[2]) ] ];
				N: [XIC(S010TL1.SR.Int.Model1) ,XIC(S010TL1.SR.Int.Model2) ]XIC(Edit.Bit)[MOV('Act[2] Clamp 2 Close',S010TL1.Seq.Operation[3]) MOV('OPENED',S010TL1.Seq.HomeIndText[3]) MOV('CLOSED',S010TL1.Seq.WorkIndText[3]) MOV('OPEN',S010TL1.Seq.HomePBText[3]) MOV('CLOSE',S010TL1.Seq.WorkPBText[3]) ,MOV(1,S010TL1.Seq.HomeInd[3]) ,[MOV(1,S010TL1.Seq.WorkInd[3]) ,MOV(2,S010TL1.Seq.WorkInd[3]) ] ];
				N: [XIC(S010TL1.SR.Int.Model1) ,XIC(S010TL1.SR.Int.Model2) ]XIC(Edit.Bit)[MOV('Robot S010RB02 Seal 1',S010TL1.Seq.Operation[4]) MOV('IN CYCLE',S010TL1.Seq.HomeIndText[4]) MOV('COMPLETED',S010TL1.Seq.WorkIndText[4]) MOV('RESET COMPLETE',S010TL1.Seq.HomePBText[4]) MOV('SET COMPLETE',S010TL1.Seq.WorkPBText[4]) ,MOV(1,S010TL1.Seq.HomeInd[4]) ,[MOV(1,S010TL1.Seq.WorkInd[4]) ,MOV(2,S010TL1.Seq.WorkInd[4]) ] ];
				N: [XIC(S010TL1.SR.Int.Model1) ,XIC(S010TL1.SR.Int.Model2) ]XIC(Edit.Bit)[MOV('Act[2] Clamp 2 Open',S010TL1.Seq.Operation[5]) MOV('OPENED',S010TL1.Seq.HomeIndText[5]) MOV('CLOSED',S010TL1.Seq.WorkIndText[5]) MOV('OPEN',S010TL1.Seq.HomePBText[5]) MOV('CLOSE',S010TL1.Seq.WorkPBText[5]) ,[MOV(1,S010TL1.Seq.HomeInd[5]) ,MOV(2,S010TL1.Seq.HomeInd[5]) ] ,MOV(1,S010TL1.Seq.WorkInd[5]) ];
				N: [XIC(S010TL1.SR.Int.Model1) ,XIC(S010TL1.SR.Int.Model2) ]XIC(Edit.Bit)[MOV('Act[1] Clamp 1 Open',S010TL1.Seq.Operation[6]) MOV('OPENED',S010TL1.Seq.HomeIndText[6]) MOV('CLOSED',S010TL1.Seq.WorkIndText[6]) MOV('OPEN',S010TL1.Seq.HomePBText[6]) MOV('CLOSE',S010TL1.Seq.WorkPBText[6]) ,[MOV(1,S010TL1.Seq.HomeInd[6]) ,MOV(2,S010TL1.Seq.HomeInd[6]) ] ,MOV(1,S010TL1.Seq.WorkInd[6]) ];
				N: [XIC(S010TL1.SR.Int.Model1) ,XIC(S010TL1.SR.Int.Model2) ]XIC(Edit.Bit)[MOV('Act[3] Pin 1 Return',S010TL1.Seq.Operation[7]) MOV('RETURNED',S010TL1.Seq.HomeIndText[7]) MOV('ADVANCED',S010TL1.Seq.WorkIndText[7]) MOV('RETURN',S010TL1.Seq.HomePBText[7]) MOV('ADVANCE',S010TL1.Seq.WorkPBText[7]) ,[MOV(1,S010TL1.Seq.HomeInd[7]) ,MOV(2,S010TL1.Seq.HomeInd[7]) ] ,MOV(1,S010TL1.Seq.WorkInd[7]) ];
				N: [XIC(S010TL1.SR.Int.Model1) ,XIC(S010TL1.SR.Int.Model2) ]XIC(Edit.Bit)[MOV('Robot S010RB01 Pick',S010TL1.Seq.Operation[8]) MOV('IN CYCLE',S010TL1.Seq.HomeIndText[8]) MOV('COMPLETED',S010TL1.Seq.WorkIndText[8]) MOV('RESET COMPLETE',S010TL1.Seq.HomePBText[8]) MOV('SET COMPLETE',S010TL1.Seq.WorkPBText[8]) ,MOV(1,S010TL1.Seq.HomeInd[8]) ,[MOV(1,S010TL1.Seq.WorkInd[8]) ,MOV(2,S010TL1.Seq.WorkInd[8]) ] ];
				N: [XIC(S010TL1.SR.Int.Model1) ,XIC(S010TL1.SR.Int.Model2) ]XIC(Edit.Bit)[MOV('Act[3] Pin 1 Advance',S010TL1.Seq.Operation[9]) MOV('RETURNED',S010TL1.Seq.HomeIndText[9]) MOV('ADVANCED',S010TL1.Seq.WorkIndText[9]) MOV('RETURN',S010TL1.Seq.HomePBText[9]) MOV('ADVANCE',S010TL1.Seq.WorkPBText[9]) ,MOV(1,S010TL1.Seq.HomeInd[9]) ,[MOV(1,S010TL1.Seq.WorkInd[9]) ,MOV(2,S010TL1.Seq.WorkInd[9]) ] ];
				N: XIC(S010TL1.Int.AutoMode)[XIC(S010TL1.SR.Int.Model1) MOV(1,S010TL1.Seq.Scrl.ModelReg) ,XIC(S010TL1.SR.Int.Model2) MOV(1,S010TL1.Seq.Scrl.ModelReg) ];
				N: HMI_SeqScrollList(S010TL1.Seq.Scrl,10,S010TL1.Int.AutoMode,S010TL1.Int.ManualMode,2);
		END_ROUTINE

		ROUTINE S01_HMIProcComp 
				RC: "############################$N"
				    "Station Process Complete$N"
				    "HMI Mapping$N"
				    "############################$N"
				    "$N"
				    "Define the process complete indicators for HMI display";
				N: NOP();
				RC: "############################$N"
				    "Delete Any OTU Coil Used$N"
				    "############################";
				N: OTU(S010TL1.Int.HMIProcComp[0].Vis)OTU(S010TL1.Int.HMIProcComp[1].Vis)OTU(S010TL1.Int.HMIProcComp[2].Vis)OTU(S010TL1.Int.HMIProcComp[3].Vis)OTU(S010TL1.Int.HMIProcComp[4].Vis)OTU(S010TL1.Int.HMIProcComp[5].Vis)OTU(S010TL1.Int.HMIProcComp[6].Vis)OTU(S010TL1.Int.HMIProcComp[7].Vis)OTU(S010TL1.Int.HMIProcComp[8].Vis)OTU(S010TL1.Int.HMIProcComp[9].Vis);
		END_ROUTINE

		ROUTINE Y00_Alarms_L1 (Description := "Machine Fault Alarm Messages")
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L1$N"
				    "Machine Faults$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "Module Communication Faults$N"
				    "#######################$N"
				    "$N"
				    "Add the ENet.CommOK signal of the First upstream Ethernet Device If Daisy Chain.$N"
				    "If the First Upstream Ethernet Device is a Switch, TBD.";
				N: NOP();
				N: [XIC(S010TL1SIO1.ENet.CommOK) XIO(S010TL1MIO1.ENet.CommOK) XIO(S010TL1MIO1.ENet.Inhibited) OTE(S2.L1[1].0) ,XIC(S010TL1MIO1.ENet.CommOK) XIO(S010TL1VM1.ENet.CommOK) XIO(S010TL1VM1.ENet.Inhibited) OTE(S2.L1[1].1) ,XIC(Edit.Bit) XIO(S010RB01.ENet.CommOK) XIO(S010RB01.ENet.Inhibited) OTE(S2.L1[1].2) ,XIC(Edit.Bit) XIO(S010RB02.ENet.CommOK) XIO(S010RB02.ENet.Inhibited) OTE(S2.L1[1].3) ];
				N: XIO(S010TL1SIO1:I.ConnectionFaulted)[XIO(S010TL1SIO1:I.RunMode) ,XIO(S010Sfty.Mod1.InputStatus) ]OTE(S2.L1[1].21);
				RC: "#######################$N"
				    "Safety Instruction Faults$N"
				    "$N"
				    "E-Stop$N"
				    "Oper Light Screens And Scanners$N"
				    "Safety Position Devices$N"
				    "InterCell Safety Devices$N"
				    "#######################";
				N: NOP();
				N: [XIC(S010Sfty.IntSftyDevice.LC1.FP) OTE(S2.L1[2].20) ,XIC(S010Sfty.IntSftyDevice.LC2.FP) OTE(S2.L1[2].21) ,XIC(S010Sfty.IntSftyDevice.LC3.FP) OTE(S2.L1[2].22) ];
				N: [XIC(S010Sfty.IntSftyDevice.SCN1_1.FP) OTE(S2.L1[2].23) ,XIC(S010Sfty.IntSftyDevice.SCN1_2.FP) OTE(S2.L1[2].24) ,XIC(S010Sfty.IntSftyDevice.SCN2_1.FP) OTE(S2.L1[2].25) ,XIC(S010Sfty.IntSftyDevice.SCN2_2.FP) OTE(S2.L1[2].26) ];
				RC: "#######################$N"
				    "Operator Light Screen And Scanner Fault$N"
				    "#######################$N"
				    "$N"
				    "Use the correct Module Run Mode";
				N: NOP();
				RC: "#######################$N"
				    "Part Present Faults$N"
				    "#######################";
				N: NOP();
				N: XIC(S010TL1.Int.PPActFltsEnbld)[XIC(S010TL1.PP[1].stsNotONFault) [XIO(S010TL1.PP[1].inpPPSensor.0) OTE(S2.L1[10].0) ,XIO(S010TL1.PP[1].inpPPSensor.1) OTE(S2.L1[10].2) ] ,XIC(S010TL1.PP[1].stsStillONFault) [XIC(S010TL1.PP[1].inpPPSensor.0) OTE(S2.L1[10].1) ,XIC(S010TL1.PP[1].inpPPSensor.1) OTE(S2.L1[10].3) ] ];
				N: XIC(S010TL1.Int.PPActFltsEnbld)[XIC(S010TL1.PP[2].stsNotONFault) [XIO(S010TL1.PP[2].inpPPSensor.0) OTE(S2.L1[10].4) ,XIO(S010TL1.PP[2].inpPPSensor.1) OTE(S2.L1[10].6) ,XIO(S010TL1.PP[2].inpPPSensor.2) OTE(S2.L1[10].8) ] ,XIC(S010TL1.PP[2].stsStillONFault) [XIC(S010TL1.PP[2].inpPPSensor.0) OTE(S2.L1[10].5) ,XIC(S010TL1.PP[2].inpPPSensor.1) OTE(S2.L1[10].7) ,XIC(S010TL1.PP[2].inpPPSensor.2) OTE(S2.L1[10].9) ] ];
				RC: "#######################$N"
				    "Actuator Faults$N"
				    "#######################";
				N: NOP();
				N: [XIC(S010TL1.Act[1].Work.VlvFlt) OTE(S2.L1[15].0) ,XIC(S010TL1.Act[1].Home.VlvFlt) OTE(S2.L1[15].1) ];
				N: XIC(S010TL1.Act[1].Work.MtnFlt)XIO(S010TL1.Act[1].Work.VlvFlt)[[XIC(S010TL1.Act[1].Installed.0) XIO(S010TL1.Act[1].Work.Pxs.0) OTE(S2.L1[15].2) ,XIC(S010TL1.Act[1].Work.Pxs.0) XIC(S010TL1.Act[1].Home.Pxs.0) OTE(S2.L1[15].4) ] ,[XIC(S010TL1.Act[1].Installed.1) XIO(S010TL1.Act[1].Work.Pxs.1) OTE(S2.L1[15].6) ,XIC(S010TL1.Act[1].Work.Pxs.1) XIC(S010TL1.Act[1].Home.Pxs.1) OTE(S2.L1[15].8) ] ,[XIC(S010TL1.Act[1].Installed.2) XIO(S010TL1.Act[1].Work.Pxs.2) OTE(S2.L1[15].10) ,XIC(S010TL1.Act[1].Work.Pxs.2) XIC(S010TL1.Act[1].Home.Pxs.2) OTE(S2.L1[15].12) ] ];
				N: XIC(S010TL1.Act[1].Home.MtnFlt)XIO(S010TL1.Act[1].Home.VlvFlt)[[XIC(S010TL1.Act[1].Installed.0) XIO(S010TL1.Act[1].Home.Pxs.0) OTE(S2.L1[15].3) ,XIC(S010TL1.Act[1].Home.Pxs.0) XIC(S010TL1.Act[1].Work.Pxs.0) OTE(S2.L1[15].5) ] ,[XIC(S010TL1.Act[1].Installed.1) XIO(S010TL1.Act[1].Home.Pxs.1) OTE(S2.L1[15].7) ,XIC(S010TL1.Act[1].Home.Pxs.1) XIC(S010TL1.Act[1].Work.Pxs.1) OTE(S2.L1[15].9) ] ,[XIC(S010TL1.Act[1].Installed.2) XIO(S010TL1.Act[1].Home.Pxs.2) OTE(S2.L1[15].11) ,XIC(S010TL1.Act[1].Home.Pxs.2) XIC(S010TL1.Act[1].Work.Pxs.2) OTE(S2.L1[15].13) ] ];
				N: [XIC(S010TL1.Act[2].Work.VlvFlt) OTE(S2.L1[15].14) ,XIC(S010TL1.Act[2].Home.VlvFlt) OTE(S2.L1[15].15) ];
				N: XIC(S010TL1.Act[2].Work.MtnFlt)XIO(S010TL1.Act[2].Work.VlvFlt)[[XIC(S010TL1.Act[2].Installed.0) XIO(S010TL1.Act[2].Work.Pxs.0) OTE(S2.L1[15].16) ,XIC(S010TL1.Act[2].Work.Pxs.0) XIC(S010TL1.Act[2].Home.Pxs.0) OTE(S2.L1[15].18) ] ,[XIC(S010TL1.Act[2].Installed.1) XIO(S010TL1.Act[2].Work.Pxs.1) OTE(S2.L1[15].20) ,XIC(S010TL1.Act[2].Work.Pxs.1) XIC(S010TL1.Act[2].Home.Pxs.1) OTE(S2.L1[15].22) ] ,[XIC(S010TL1.Act[2].Installed.2) XIO(S010TL1.Act[2].Work.Pxs.2) OTE(S2.L1[15].24) ,XIC(S010TL1.Act[2].Work.Pxs.2) XIC(S010TL1.Act[2].Home.Pxs.2) OTE(S2.L1[15].26) ] ];
				N: XIC(S010TL1.Act[2].Home.MtnFlt)XIO(S010TL1.Act[2].Home.VlvFlt)[[XIC(S010TL1.Act[2].Installed.0) XIO(S010TL1.Act[2].Home.Pxs.0) OTE(S2.L1[15].17) ,XIC(S010TL1.Act[2].Home.Pxs.0) XIC(S010TL1.Act[2].Work.Pxs.0) OTE(S2.L1[15].19) ] ,[XIC(S010TL1.Act[2].Installed.1) XIO(S010TL1.Act[2].Home.Pxs.1) OTE(S2.L1[15].21) ,XIC(S010TL1.Act[2].Home.Pxs.1) XIC(S010TL1.Act[2].Work.Pxs.1) OTE(S2.L1[15].23) ] ,[XIC(S010TL1.Act[2].Installed.2) XIO(S010TL1.Act[2].Home.Pxs.2) OTE(S2.L1[15].25) ,XIC(S010TL1.Act[2].Home.Pxs.2) XIC(S010TL1.Act[2].Work.Pxs.2) OTE(S2.L1[15].27) ] ];
				RC: "#######################$N"
				    "Shift Register Data Mismatch Fault$N"
				    "#######################";
				N: NOP();
				N: XIC(S010TL1.Int.AutoMode)XIO(S010TL1.Int.DryCycle)[XIC(S010TL1.Int.AllPartsPres2) XIC(S010TL1.SR.Int.NoPart) ,XIC(S010TL1.Int.PartsPresNo) XIO(S010TL1.SR.Int.NoPart) ][MOV(5000,S010TL1.Int.FltDelayTmr[0].PRE) TON(S010TL1.Int.FltDelayTmr[0],?,?) ,XIC(S010TL1.Int.FltDelayTmr[0].DN) OTE(S2.L1[40].0) ];
		END_ROUTINE

		ROUTINE Y01_Alarms_L2 (Description := "Manual Intervention Alarm Messages")
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L2$N"
				    "Manual Interventions$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "Inhibited Modules$N"
				    "#######################";
				N: NOP();
				N: [XIC(S010RB01.ENet.Inhibited) OTE(S2.L2[2].0) ,XIC(S010TL1MIO1.ENet.Inhibited) OTE(S2.L2[2].1) ,XIC(S010TL1SIO1.ENet.Inhibited) OTE(S2.L2[2].2) ,XIC(S010TL1VM1.ENet.Inhibited) OTE(S2.L2[2].3) ];
				RC: "#######################$N"
				    "E-Stop Activated$N"
				    "#######################";
				N: NOP();
				RC: "#######################$N"
				    "Operator Light Screen And Scanner Fault$N"
				    "#######################$N"
				    "$N"
				    "Use the correct Module Run Mode";
				N: NOP();
				RC: "#######################$N"
				    "Operator Light Screen And Scanner Fault$N"
				    "#######################$N"
				    "$N"
				    "Use the correct Module Run Mode";
				N: NOP();
				RC: "#######################$N"
				    "Station No Air$N"
				    "#######################";
				N: NOP();
				N: XIC(Edit.Bit)XIO(S010TL1.Int.AirOnOk)OTE(S2.L2[10].0);
		END_ROUTINE

		ROUTINE Y02_Alarms_L3 (Description := "Warning Alarm Messages")
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L3$N"
				    "Warnings$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "RESERVED$N"
				    "#######################";
				N: NOP();
		END_ROUTINE

		ROUTINE Z00_MapOutputs 
				RC: "************************************************************$N"
				    "Map Devices Outputs$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S010TL1.Act[1].Work.Out)XIO(S010TL1.Act[1].Home.Out)OTE(S010TL1VM1.O.0);
				N: XIC(S010TL1.Act[1].Home.Out)XIO(S010TL1.Act[1].Work.Out)OTE(S010TL1VM1.O.1);
				N: XIC(S010TL1.Act[2].Work.Out)XIO(S010TL1.Act[2].Home.Out)OTE(S010TL1VM1.O.2);
				N: XIC(S010TL1.Act[2].Home.Out)XIO(S010TL1.Act[2].Work.Out)OTE(S010TL1VM1.O.3);
				N: XIC(S010TL1.Act[3].Work.Out)XIO(S010TL1.Act[3].Home.Out)OTE(S010TL1VM1.O.4);
				N: XIC(S010TL1.Act[3].Home.Out)XIO(S010TL1.Act[3].Work.Out)OTE(S010TL1VM1.O.5);
				N: [XIO(S010TL1VM1.ENet.CommOK) [CLR(S010TL1VM1.O) ,FLL(0,S010TL1VM1:O.Data[0],2) ] ,XIC(S010TL1VM1.ENet.CommOK) COP(S010TL1VM1.O,S010TL1VM1:O.Data[0],2) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S015RT1 (Description := "Rack Station",
	                 Class := Standard,
	                 MAIN := "A00_Main",
	                 MODE := 0,
	                 DisableFlag := 0,
	                 UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE A00_Main 
				N: JSR(B01_MapInputs,0);
				N: JSR(B00_NetworkDiag,0);
				N: JSR(C00_Operator,0);
				N: JSR(D02_PartPresent,0);
				N: JSR(D03_RackPresent,0);
				N: JSR(P00_Lower_Rack,0);
				N: JSR(P01_StationToSfty,0);
				N: JSR(Y00_Alarms_L1,0);
				N: JSR(Y01_Alarms_L2,0);
				N: JSR(Y02_Alarms_L3,0);
				N: JSR(Z00_MapOutputs,0);
		END_ROUTINE

		ROUTINE B00_NetworkDiag 
				RC: "************************************************************$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "S010 TL1 Ethernet Devices Diagnostic$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Robot$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: GSV(Module,S015RB01,EntryStatus,S015RB01.ENet.ObjectStatus)[MEQ(S015RB01.ENet.ObjectStatus,61440,24576) OTE(S015RB01.ENet.Inhibited) ,MEQ(S015RB01.ENet.ObjectStatus,61440,16384) OTE(S015RB01.ENet.CommOK) ];
				RC: "************************************************************$N"
				    "Robot$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: GSV(Module,S015RB02,EntryStatus,S015RB02.ENet.ObjectStatus)[MEQ(S015RB02.ENet.ObjectStatus,61440,24576) OTE(S015RB02.ENet.Inhibited) ,MEQ(S015RB02.ENet.ObjectStatus,61440,16384) OTE(S015RB02.ENet.CommOK) ];
				N: GSV(Module,S015RT1MIO1,EntryStatus,S015RT1MIO1.ENet.ObjectStatus)[MEQ(S015RT1MIO1.ENet.ObjectStatus,61440,24576) OTE(S015RT1MIO1.ENet.Inhibited) ,MEQ(S015RT1MIO1.ENet.ObjectStatus,61440,16384) OTE(S015RT1MIO1.ENet.CommOK) ];
				N: GSV(Module,S015RT1SIO1,EntryStatus,S015RT1SIO1.ENet.ObjectStatus)[MEQ(S015RT1SIO1.ENet.ObjectStatus,61440,24576) OTE(S015RT1SIO1.ENet.Inhibited) ,MEQ(S015RT1SIO1.ENet.ObjectStatus,61440,16384) OTE(S015RT1SIO1.ENet.CommOK) ];
				N: XIC(S015RB01.ENet.CommOK)XIC(S015RB02.ENet.CommOK)XIC(S015RT1MIO1.ENet.CommOK)XIC(S015RT1SIO1.ENet.CommOK)OTE(S015RT1.Int.AllModCommOk);
		END_ROUTINE

		ROUTINE B01_MapInputs 
				RC: "************************************************************$N"
				    "Map Devices Inputs$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Configuration Bits: 1=Active, 0=NotActive $N"
				    "Data[16].0-7 - Channels 00-07$N"
				    "Data[17].0-7 - Channels 08-15$N"
				    "************************************************************$N"
				    "Required for Turck MIO - TBEN-L4-16DXP$N"
				    "";
				N: [XIO(S015RT1MIO1.ENet.CommOK) FLL(0,S015RT1MIO1.I,1) ,XIC(S015RT1MIO1.ENet.CommOK) [COP(S015RT1MIO1:I.Data[1],S015RT1MIO1.I,1) ,MOV(2#00000000,S015RT1MIO1:C.Data[16]) MOV(2#00000000,S015RT1MIO1:C.Data[17]) ] ];
				RC: "************************************************************$N"
				    "Station Robots in Auto$N"
				    "$N"
				    "Add SxxRBxx.I1.AUTO for every Robot$N"
				    "************************************************************$N"
				    "";
				N: XIC(S015RB01.I1.Auto)OTE(S015RT1.Int.RbtsInAuto);
				RC: "************************************************************$N"
				    "Station Robots Teach off$N"
				    "$N"
				    "Add SxxRBxxSfty.Int.TeachOff for every Robot$N"
				    "************************************************************$N"
				    "";
				N: XIC(S015RB01.Int.TeachSSOff)OTE(S015RT1.Int.RbtsTeachOff);
				RC: "************************************************************$N"
				    "Station Air On$N"
				    "$N"
				    "Replace Edit.Bit with air flow switch input$N"
				    "************************************************************$N"
				    "";
				N: [XIC(Edit.Bit) MOV(1500,S015RT1.Int.AirOnTmr.PRE) TOF(S015RT1.Int.AirOnTmr,?,?) ,XIC(S015RT1.Int.AirOnTmr.DN) OTE(S015RT1.Int.AirOnOk) ];
				N: XIC(Edit.Bit)OTE(S015RT1.Int.FaultResetPB);
				RC: "************************************************************$N"
				    "Known Position$N"
				    "************************************************************";
				N: XIO(S015RT1.Int.AtHomePos)XIO(S015RT1.Int.AtWorkPos1)XIO(S015RT1.Int.AtWorkPos2)XIO(S015RT1.Int.AtWorkPos3)XIC(Edit.Bit)MOV(5000,S015RT1.Int.UnknownPosTmr.PRE)TON(S015RT1.Int.UnknownPosTmr,?,?);
				N: XIO(S015RT1.Int.UnknownPosTmr.EN)XIC(Edit.Bit)OTE(S015RT1.Int.KnownPos);
		END_ROUTINE

		ROUTINE C00_Operator 
				RC: "************************************************************$N"
				    "Operator Routine$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Operator Unload Required$N"
				    "$N"
				    "Use required Robot Safety Zone Clear, Clear of Tool, Unload Position and Conditions$N"
				    "************************************************************";
				N: XIC(S005RB01Sfty.Int.SftyZn1)XIC(S005RB01.Int.ClearOfTool1)XIC(S015RT1_LwrRck.Int.RackOpTimer.DN)XIO(S015RT1_LwrRck.Int.DryCycle)OTE(S015RT1_LwrRck.Oper.UnldReq);
				RC: "************************************************************$N"
				    "Operator Unload Required$N"
				    "$N"
				    "Use required Robot Safety Zone Clear, Clear of Tool, Unload Position and Conditions$N"
				    "************************************************************";
				N: XIC(S015RT1_LwrRck.Oper.CycleStartPB)MOV(5000,S015RT1_LwrRck.Int.RackOpTimer.PRE)TON(S015RT1_LwrRck.Int.RackOpTimer,?,?);
				N: [XIO(S015RT1_LwrRck.Oper.CycleStartPB) ,XIC(S015RT1_LwrRck.Oper.AntiTieDown) ]XIC(S015RT1_LwrRck.Oper.CycleStartReset)OTE(S015RT1_LwrRck.Oper.AntiTieDown);
				RC: "Change Edit.debug and Edit.Bit with CycleStart Signals";
				N: XIC(S015RT1_LwrRck.Int.AutoSel)[XIC(S015RT1_LwrRck.Int.AutoMode) XIC(S015RT1_LwrRck.Oper.AtWorkPos) XIC(S015RT1_LwrRck.Oper.AnyOperLdReq) [XIC(S015RT1_LwrRck.Oper.CycleStartPB) XIC(Edit.Debug) ,XIC(S015RT1_LwrRck.Int.DryCycle) XIC(S015RT1_LwrRck.Oper.DryCycStrtMem) XIC(Edit.Bit) ] XIC(Edit.Bit) ,XIC(S015RT1_LwrRck.Oper.CycleStartSetup) ]XIC(S015RT1_LwrRck.Oper.AntiTieDown)[XIC(S015RT1_LwrRck.Int.DryCycle) OTL(S015RT1_LwrRck.Oper.DryCycStrtMem) ,OTE(S015RT1_LwrRck.Oper.CycleStartSetup) ];
				N: XIO(S015RT1_LwrRck.Int.DryCycle)[XIC(S015RT1_LwrRck.Int.AtHomePos) ,XIC(Edit.Debug) ]OTU(S015RT1_LwrRck.Oper.DryCycStrtMem);
				RC: "Check Cycle Start Command. May Require Additional Cycle Start bits per load";
				N: XIC(S015RT1_LwrRck.Oper.AntiTieDown)[XIC(S015RT1_LwrRck.Oper.CycleStartSetup) ,XIC(S015RT1_LwrRck.Oper.CycleStart) XIC(Edit.Debug) XIC(Edit.Bit) ]XIC(S015RT1_LwrRck.Int.LoadComp)XIO(S015RT1_LwrRck.Oper.DisableLoad)[OTE(S015RT1_LwrRck.Oper.CycleStart) ,XIC(Edit.Debug) XIC(Edit.Bit) NOP() ];
				N: XIC(S005Sfty.StaZn1Active)XIO(S015RT1_LwrRck.Oper.CycleResetPB)XIO(S015RT1_LwrRck.Int.TaskComp)XIO(S015RT1_LwrRck.Int.CycComp)OTE(S015RT1_LwrRck.Oper.CycleStartReset);
				N: XIC(S015RT1_LwrRck.Int.AutoMode)XIC(S015RT1_LwrRck.Oper.CycleResetPB)XIO(S015RT1_LwrRck.Oper.CycleStartPB)[MOV(1000,S015RT1_LwrRck.Oper.CycleResetDlyTmr.PRE) TON(S015RT1_LwrRck.Oper.CycleResetDlyTmr,?,?) ,XIC(S015RT1_LwrRck.Oper.CycleResetDlyTmr.DN) OTE(S015RT1_LwrRck.Oper.CycleReset) ];
				N: XIO(S015RT1_LwrRck.Oper.ClrToEnter)[XIO(S015RT1Sfty.StaZn1NotBlkd) ,XIO(S015RT1Sfty.StaZn2NotBlkd) ,XIO(S015RT1Sfty.StaZn3NotBlkd) ]OTL(S015RT1_LwrRck.Oper.LtScrnFlt);
				N: [XIC(S015RT1_LwrRck.Oper.CycleStartPB) ,XIC(S015RT1_LwrRck.Oper.CycleResetPB) ]XIC(S015RT1Sfty.StaZn1NotBlkd)XIC(S015RT1Sfty.StaZn2NotBlkd)XIC(S015RT1Sfty.StaZn3NotBlkd)OTU(S015RT1_LwrRck.Oper.LtScrnFlt);
				RC: "Example Logic$N"
				    "Edit As Required";
				N: XIC(Edit.Bit)OTE(S015RT1_LwrRck.Oper.AtWorkPos);
				RC: "************************************************************$N"
				    "Operator Cycle Time$N"
				    "************************************************************";
				N: NOP();
				N: MOV(60000,S015RT1_LwrRck.Oper.CycleTime)MUL(S015RT1_LwrRck.Oper.CycleTime,0.7,S015RT1_LwrRck.Oper.CycleTime75);
				N: XIC(S015RT1_LwrRck.Int.AutoMode)XIC(S015RT1_LwrRck.Oper.ClrToEnter)XIO(S015RT1_LwrRck.Oper.DisableLoad)MOV(3600000,S015RT1_LwrRck.Oper.CycTimeTmr.PRE)RTO(S015RT1_LwrRck.Oper.CycTimeTmr,?,?);
				N: GRT(S015RT1_LwrRck.Oper.CycTimeTmr.ACC,S015RT1_LwrRck.Oper.CycleTime75)OTE(S015RT1_LwrRck.Oper.CycNearOT);
				N: GRT(S015RT1_LwrRck.Oper.CycTimeTmr.ACC,S015RT1_LwrRck.Oper.CycleTime)OTE(S015RT1_LwrRck.Oper.CycOverTime);
				N: XIC(S015RT1_LwrRck.Oper.CycleStart)ONS(S015RT1_LwrRck.Oper.CycleTimeOns)[MOV(S015RT1_LwrRck.Oper.CycTimeTmr.ACC,S015RT1_LwrRck.Oper.CycleTimeStore) ,RES(S015RT1_LwrRck.Oper.CycTimeTmr) ];
		END_ROUTINE

		ROUTINE D02_PartPresent 
				RC: "************************************************************$N"
				    "Lower Rack$N"
				    "PP Common Inputs$N"
				    "$N"
				    "Assign each PP[X] to a Part Present Load Group$N"
				    "$N"
				    "PP1_xxx - 1st Load Part Presents$N"
				    "PP2_xxx - 2nd Load Part Presents$N"
				    "************************************************************";
				N: NOP();
				N: XIO(S015RT1_LwrRck.Int.DryCycle)XIC(sZ005_040.PowerEnbld)XIC(S015RT1_LwrRck.Int.AllModCommOk)XIC(Edit.Bit)OTE(S015RT1_LwrRck.Int.PPActFltsEnbld);
				RC: "************************************************************$N"
				    "Rack Part Present Logic$N"
				    "$N"
				    "************************************************************$N"
				    "Part Present AOI Parameter Mapping";
				N: NOP();
				RC: "************************************************************$N"
				    "PartPresent$N"
				    "************************************************************$N"
				    "DryCycle Load Condition$N"
				    "If the Tool is loaded by a Robot, The Timer should be removed";
				N: XIC(S015RT1_LwrRck.Int.DryCycle)XIC(Edit.Bit)OTE(S015RT1_LwrRck.PP[1].inpPPDryCycleLoadTrgr);
				RC: "************************************************************$N"
				    "Rack PartPresent - $N"
				    "************************************************************$N"
				    "DryCycle Unload Condition";
				N: XIC(S015RT1_LwrRck.Int.DryCycle)XIC(Edit.Bit)OTE(S015RT1_LwrRck.PP[1].inpPPDryCycleUnldTrgr);
				RC: "************************************************************$N"
				    "Set Used/Installed Sensors$N"
				    "************************************************************$N"
				    "Change instruction to OTE if sensor used.$N"
				    "Change instruction to OTU if the sensor will not be used/installed";
				N: OTE(S015RT1_LwrRck.PP[1].inpPPSensorInst.0)OTU(S015RT1_LwrRck.PP[1].inpPPSensorInst.1)OTU(S015RT1_LwrRck.PP[1].inpPPSensorInst.2)OTU(S015RT1_LwrRck.PP[1].inpPPSensorInst.3)OTU(S015RT1_LwrRck.PP[1].inpPPSensorInst.4)OTU(S015RT1_LwrRck.PP[1].inpPPSensorInst.5)OTU(S015RT1_LwrRck.PP[1].inpPPSensorInst.6)OTU(S015RT1_LwrRck.PP[1].inpPPSensorInst.7);
				RC: "************************************************************$N"
				    "Add all first load Switch Inputs$N"
				    "Model Air$N"
				    "************************************************************";
				N: [[MOV(0,S015RT1_LwrRck.PP[1].inpPPSensor) ,XIC(Edit.Bit) OTE(S015RT1_LwrRck.PP[1].inpPPSensor.0) ] ,XIC(S015RT1_LwrRck.Int.DryCycle) XIC(S015RT1_LwrRck.PP[1].stsPPMem) MOV(2#0000_0001,S015RT1_LwrRck.PP[1].inpPPSensor) ];
				N: XIC(Edit.Bit)OTE(S015RT1_LwrRck.PP[1].PPAnySensor);
				RC: "************************************************************$N"
				    "Change Edit.Bit with required conditions for PP to be ON/OFF$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(S015RT1_LwrRck.PP[1].inpOnCondition);
				N: XIC(Edit.Bit)OTE(S015RT1_LwrRck.PP[1].inpOffCondition);
				RC: "Lower Rack Part Present AOIs";
				N: PartPresent(S015RT1_LwrRck.PP[1],S015RT1_LwrRck.PP[1].inpPPSensor,S015RT1_LwrRck.PP[1].inpOnCondition,S015RT1_LwrRck.PP[1].inpOffCondition,S015RT1_LwrRck.Int.DryCycle,S015RT1_LwrRck.Int.PPActFltsEnbld);
				RC: "************************************************************$N"
				    "Parts Present Fault$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S015RT1_LwrRck.PP[1].stsPPNotOK)OTE(S015RT1_LwrRck.Int.PPFault);
				RC: "*************************************************************$N"
				    "Use to avoid load parts during drycycle$N"
				    "**************************************************************";
				N: XIO(S015RT1_LwrRck.Int.PartsPresNo)OTE(S015RT1_LwrRck.Int.AnyPartPres);
		END_ROUTINE

		ROUTINE D03_RackPresent 
				RC: "************************************************************$N"
				    "Lower Rack Present Common Inputs$N"
				    "$N"
				    "Assign each PP[X] to a Part Present Load Group$N"
				    "$N"
				    "PP11_xxx - 1st Load Part Presents$N"
				    "$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Rack Present Logic$N"
				    "$N"
				    "************************************************************$N"
				    "Rack Present AOI Parameter Mapping$N"
				    "";
				N: NOP();
				RC: "************************************************************$N"
				    "Rack Present$N"
				    "************************************************************$N"
				    "DryCycle Load Condition$N"
				    "If the Tool is loaded by a Robot, The Timer should be removed$N"
				    "";
				N: XIC(S015RT1_LwrRck.Int.DryCycle)XIC(Edit.Bit)OTE(S015RT1_LwrRck.PP[11].inpPPDryCycleLoadTrgr);
				RC: "************************************************************$N"
				    "Rack Present - $N"
				    "************************************************************$N"
				    "DryCycle Unload Condition";
				N: XIC(S015RT1_LwrRck.Int.DryCycle)XIC(Edit.Bit)OTE(S015RT1_LwrRck.PP[11].inpPPDryCycleUnldTrgr);
				RC: "************************************************************$N"
				    "Set Used/Installed Sensors$N"
				    "************************************************************$N"
				    "Change instruction to OTE if sensor used.$N"
				    "Change instruction to OTU if the sensor will not be used/installed";
				N: OTE(S015RT1_LwrRck.PP[11].inpPPSensorInst.0)OTU(S015RT1_LwrRck.PP[11].inpPPSensorInst.1)OTU(S015RT1_LwrRck.PP[11].inpPPSensorInst.2)OTU(S015RT1_LwrRck.PP[11].inpPPSensorInst.3)OTU(S015RT1_LwrRck.PP[11].inpPPSensorInst.4)OTU(S015RT1_LwrRck.PP[11].inpPPSensorInst.5)OTU(S015RT1_LwrRck.PP[11].inpPPSensorInst.6)OTU(S015RT1_LwrRck.PP[11].inpPPSensorInst.7);
				RC: "************************************************************$N"
				    "Add all first load Switch Inputs$N"
				    "************************************************************";
				N: [[MOV(0,S015RT1_LwrRck.PP[11].inpPPSensor) ,XIC(Edit.Bit) OTE(S015RT1_LwrRck.PP[11].inpPPSensor.0) ] ,XIC(S015RT1_LwrRck.Int.DryCycle) XIC(S015RT1_LwrRck.PP[11].stsPPMem) MOV(2#0000_0001,S015RT1_LwrRck.PP[11].inpPPSensor) ];
				N: XIC(Edit.Bit)OTE(S015RT1_LwrRck.PP[11].PPAnySensor);
				RC: "************************************************************$N"
				    "Change Edit.Bit with required conditions for PP to be ON/OFF$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(S015RT1_LwrRck.PP[11].inpOnCondition);
				N: XIC(Edit.Bit)OTE(S015RT1_LwrRck.PP[11].inpOffCondition);
				RC: "Lower Rack Part Present AOIs";
				N: PartPresent(S015RT1_LwrRck.PP[11],S015RT1_LwrRck.PP[11].inpPPSensor,S015RT1_LwrRck.PP[11].inpOnCondition,S015RT1_LwrRck.PP[11].inpOffCondition,S015RT1_LwrRck.Int.DryCycle,S015RT1_LwrRck.Int.PPActFltsEnbld);
				RC: "************************************************************$N"
				    "Parts Present Fault$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S015RT1_LwrRck.PP[11].stsPPNotOK)OTE(S015RT1_LwrRck.Int.RackPresentFault);
				RC: "*************************************************************$N"
				    "Use to avoid load parts during drycycle$N"
				    "**************************************************************";
				N: XIC(S015RT1_LwrRck.PP[11].stsPPOff)OTE(S015RT1_LwrRck.Int.RackRemoved);
				N: XIC(S015RT1_LwrRck.PP[11].stsPPOn)OTE(S015RT1_LwrRck.Int.RackPres);
		END_ROUTINE

		ROUTINE P00_Lower_Rack 
				RC: "###########################$N"
				    "Rack$N"
				    "Standard Logic$N"
				    "$N"
				    "BiWCGlx Rev 1.0$N"
				    "###########################";
				N: NOP();
				N: XIC(S015RT1Sfty.StaZn1Active)OTE(S015RT1_LwrRck.Int.AtHomePos);
				RC: "************************************************************$N"
				    "Rack Bypass Summary$N"
				    "************************************************************$N"
				    "";
				N: NOP();
				N: XIC(S015RT1_LwrRck.Int.ManualMode)OTE(S015RT1_LwrRck.Int.RackBypass.Vis);
				N: XIC(S015RT1_LwrRck.Int.RackBypass.Vis)XIC(S015RT1_LwrRck.Int.RackBypass.PB)ONS(S015RT1_LwrRck.Int.RackBypass.Ons)[XIC(S015RT1_LwrRck.Int.RackBypass.Seld) XIC(S015RT1_UprRck.Int.RackRemoved) ONS(S015RT1_LwrRck.Int.RackBypass.OnsRst) OTU(S015RT1_LwrRck.Int.RackBypass.Seld) ,XIO(S015RT1_LwrRck.Int.RackBypass.Seld) XIO(S015RT1_LwrRck.Int.RackBypass.OnsRst) OTL(S015RT1_LwrRck.Int.RackBypass.Seld) ];
				N: XIC(S015RT1_LwrRck.Int.RackBypass.Seld)OTE(S015RT1_LwrRck.Int.RackBypass.Ind);
				RC: "************************************************************$N"
				    "Rack Part Present Summary$N"
				    "************************************************************$N"
				    "$N"
				    "OTU Bit if not used or required";
				N: NOP();
				N: XIC(S015RT1_UprRck.PP[1].stsPPOff)XIC(Edit.Bit)OTE(S015RT1_LwrRck.Int.PartsPresNo);
				N: XIC(S015RT1_LwrRck.Int.PartsPresNo)XIC(S015RT1_LwrRck.Int.RackRemoved)XIC(S015RT1_LwrRck.SR.Int.NoPart)OTE(S015RT1_LwrRck.Int.Empty);
				N: XIC(S015RT1_UprRck.PP[1].stsPPOn)XIC(Edit.Bit)OTE(S015RT1_LwrRck.Int.PartsPresAll);
				N: XIC(S015RT1_LwrRck.Int.PartsPresAll)XIC(S015RT1_LwrRck.SR.Int.Part)OTE(S015RT1_LwrRck.Int.AllPPandSR);
				N: XIC(Edit.Bit)OTE(S015RT1_LwrRck.Int.RbtsTaskComp);
				RC: "************************************************************$N"
				    "Auto Mode Selected$N"
				    "************************************************************$N"
				    "";
				N: [XIO(S015RT1_LwrRck.Int.ManualModePB) XIO(S015RT1_LwrRck.Int.NoModePB) XIO(Z005_040.NoModePB) ,XIC(S015RT1_LwrRck.Int.AutoMode) ][XIC(S015RT1_LwrRck.Int.NoMode) [XIC(S015RT1_LwrRck.Int.AutoSelPB) ,XIC(Z005_040.GlobalAutoModeSelPB) ,XIC(S015RT1_LwrRck.Int.AutoModePB) ,XIC(Z005_040.GlobalAutoModePB) ] ,XIC(S015RT1_LwrRck.Int.AutoSel) ]XIC(S015RT1_LwrRck.Int.RbtsInAuto)XIC(S015RT1_LwrRck.Int.RbtsTeachOff)OTE(S015RT1_LwrRck.Int.AutoSel);
				RC: "************************************************************$N"
				    "Station Auto Mode$N"
				    "Interlocks$N"
				    "************************************************************";
				N: [XIC(Z005_040.AutoModeSetup.Sts_IntlkOK) OTE(S015RT1_LwrRck.Int.AutoModeSetup.Inp_Intlk00) ,XIC(S015RT1_LwrRck.Int.AutoSel) OTE(S015RT1_LwrRck.Int.AutoModeSetup.Inp_Intlk01) ,XIO(S015RT1_LwrRck.Int.AutoModeStop) OTE(S015RT1_LwrRck.Int.AutoModeSetup.Inp_Intlk02) ,XIO(S015RT1_LwrRck.Int.ManualMode) OTE(S015RT1_LwrRck.Int.AutoModeSetup.Inp_Intlk03) ,XIC(S015RT1_LwrRck.Int.RbtsTeachOff) OTE(S015RT1_LwrRck.Int.AutoModeSetup.Inp_Intlk04) ,XIC(S015RT1_LwrRck.Int.RbtsInAuto) OTE(S015RT1_LwrRck.Int.AutoModeSetup.Inp_Intlk05) ,XIC(Edit.Bit) OTE(S015RT1_LwrRck.Int.AutoModeSetup.Inp_Intlk06) ,XIC(Edit.Bit) OTE(S015RT1_LwrRck.Int.AutoModeSetup.Inp_Intlk07) ,P_Intlk(S015RT1_LwrRck.Int.AutoModeSetup) ];
				RC: "************************************************************$N"
				    "Auto Mode $N"
				    "Running$N"
				    "************************************************************";
				N: XIC(S015RT1_LwrRck.Int.AutoModeSetup.Sts_IntlkOK)[[XIC(S015RT1_LwrRck.Int.AutoModePB) ,XIC(Z005_040.GlobalAutoModePB) ] ,XIC(S015RT1_LwrRck.Int.AutoMode) ][MOV(25,S015RT1_LwrRck.Int.AutoDlyTmr.PRE) TON(S015RT1_LwrRck.Int.AutoDlyTmr,?,?) ,XIC(S015RT1_LwrRck.Int.AutoDlyTmr.DN) OTE(S015RT1_LwrRck.Int.AutoMode) ];
				RC: "************************************************************$N"
				    "Auto Cycle Stop$N"
				    "************************************************************$N"
				    "";
				N: XIC(S015RT1_LwrRck.Int.AutoMode)[XIC(S015RT1_LwrRck.Int.NoModePB) ,XIC(Z005_040.AutoModeStopReq) ,XIC(S015RT1_LwrRck.Int.AutoModeStopReq) ]XIO(S015RT1_LwrRck.Int.AutoModeStop)OTE(S015RT1_LwrRck.Int.AutoModeStopReq);
				N: [XIC(S015RB01.I1.Pg_Paused) ,XIC(S015RB01.I1.RbtHeld) ,XIC(S015RB01.I1.RbtFaulted) ]OTE(S015RT1_LwrRck.Int.AutoModeStopEnable);
				N: XIC(S015RT1_LwrRck.Int.AutoMode)XIC(S015RT1_LwrRck.Int.AutoModeStopReq)XIC(S015RT1_LwrRck.Int.AutoModeStopEnable)OTE(S015RT1_LwrRck.Int.AutoModeStop);
				RC: "************************************************************$N"
				    "Manual Mode$N"
				    "************************************************************$N"
				    "";
				N: XIO(S015RT1_LwrRck.Int.NoModePB)XIO(Z005_040.NoModePB)XIO(S015RT1_LwrRck.Int.AutoSelPB)XIO(S015RT1_LwrRck.Int.AutoSel)[XIC(S015RT1_LwrRck.Int.NoMode) [XIC(S015RT1_LwrRck.Int.ManualModePB) ,XIC(Z005_040.ManualModePB) ] ,XIC(S015RT1_LwrRck.Int.ManualMode) ]XIC(S010RB01.Int.InTeach)OTE(S015RT1_LwrRck.Int.ManualMode);
				RC: "************************************************************$N"
				    "Dry Cycle$N"
				    "************************************************************$N"
				    "";
				N: XIC(Z005_040.DryCycle)OTE(S015RT1_LwrRck.Int.DryCycle);
				RC: "************************************************************$N"
				    "No Mode$N"
				    "************************************************************$N"
				    "";
				N: XIO(S015RT1_LwrRck.Int.AutoSel)XIO(S015RT1_LwrRck.Int.ManualMode)OTE(S015RT1_LwrRck.Int.NoMode);
				RC: "************************************************************$N"
				    "Rack Setup$N"
				    "************************************************************$N"
				    "";
				N: XIC(S015RT1_LwrRck.Int.AutoMode)[XIC(S015RT1_LwrRck.Oper.UnldReq) ,XIC(S015RT1_LwrRck.Int.ClrToUnld) ,XIC(S015RT1_LwrRck.Int.RackBypass.Seld) ]OTL(S015RT1_LwrRck.Int.RackReqEntry);
				N: XIC(S015RT1_LwrRck.Int.Empty)OTU(S015RT1_LwrRck.Int.RackReqEntry);
				N: XIC(S015RT1_LwrRck.Int.AutoMode)XIO(S015RT1_LwrRck.Int.TaskComp)XIO(S015RT1_LwrRck.Int.CycComp)XIC(S015RT1_LwrRck.Int.Empty)OTE(S015RT1_LwrRck.Int.ClrToLoad);
				N: XIC(S015RT1_LwrRck.Int.PartsPresAll)XIC(S015RT1_UprRck.Int.RackPres)XIO(S015RT1_LwrRck.Int.RackReqEntry)OTE(S015RT1_LwrRck.Int.Load1Comp);
				N: XIC(S015RT1_LwrRck.Int.Load1Comp)OTE(S015RT1_LwrRck.Int.LoadComp);
				RC: "########################################$N"
				    "Work Positions$N"
				    "$N"
				    "10 Work Positions Available$N"
				    "########################################";
				N: XIC(S015RT1_LwrRck.Int.AtHomePos)XIC(S015RT1_LwrRck.Int.LoadComp)XIC(Edit.Bit)OTE(S015RT1_LwrRck.Int.AtWorkPos1);
				RC: "########################################$N"
				    "Station Process Completes$N"
				    "$N"
				    "10 Process Completes Available$N"
				    "########################################";
				N: XIC(S015RT1_LwrRck.Int.AtWorkPos1)XIC(S015RT1_LwrRck.Int.LoadComp)OTE(S015RT1_LwrRck.Int.Proc1Comp);
				RC: "########################################$N"
				    "Station Tasks Complete$N"
				    "########################################";
				N: XIC(S015RT1_LwrRck.Int.CycStart)XIC(S015RT1_LwrRck.Int.Proc1Comp)XIC(Edit.Bit)OTL(S015RT1_LwrRck.Int.TaskComp);
				N: [XIC(S015RT1_LwrRck.Int.UnldComp) ,XIC(S015RT1_LwrRck.Int.RstCycComp) ]OTU(S015RT1_LwrRck.Int.TaskComp);
				N: XIC(Edit.Bit)OTL(S015RT1_LwrRck.Int.CycComp);
				N: XIC(S015RT1_LwrRck.Int.RstCycComp)OTU(S015RT1_LwrRck.Int.UnldComp)OTU(S015RT1_LwrRck.Int.CycComp);
				N: XIO(S015RT1_LwrRck.Int.DryCycle)XIO(S015RT1_LwrRck.Oper.CycleStartPB)XIC(S015RT1_LwrRck.Int.RackPres)XIC(S015RT1_LwrRck.Int.PartsPresNo)OTE(S015RT1_LwrRck.Int.ClrToUnld);
				N: XIC(S015RT1_LwrRck.Int.TaskComp)XIC(S015RT1_LwrRck.Int.CycComp)XIC(S015RT1_LwrRck.Int.Empty)XIC(Edit.Bit)OTL(S015RT1_LwrRck.Int.UnldComp);
				N: XIC(S015RT1_LwrRck.Int.AutoMode)XIC(S015RT1_LwrRck.Int.Empty)[XIC(S015RT1_LwrRck.Int.AtHomePos) ,XIC(Edit.Bit) ]XIC(Edit.Bit)OTE(S015RT1_LwrRck.Int.RstCycComp);
				RC: "########################################$N"
				    "Cycle Start Logic$N"
				    "########################################$N"
				    "$N"
				    "To be detemined how cycle start will be handled. Different Process starts may be involved.";
				N: XIC(Edit.Debug)OTE(S015RT1_LwrRck.Int.CycStart);
				RC: "########################################$N"
				    "Rack Load Unload$N"
				    "########################################";
				N: OTE(S015RT1_LwrRck.Int.RackUnldPos);
				RC: "########################################$N"
				    "Rack Load Unload$N"
				    "########################################";
				N: XIC(S015RT1_LwrRck.Int.RackReqEntry)XIC(Edit.Bit)OTE(S015RT1_LwrRck.Int.ChngRack);
				N: XIC(S015RT1_LwrRck.Int.AtWorkPos1)XIC(S015RT1_LwrRck.SR.Int.Part)XIO(S015RT1_LwrRck.Int.CycComp)OTE(S015RT1_LwrRck.Int.RackRdy);
				RC: "************************************************************$N"
				    "Station Cycle Time Logic$N"
				    "************************************************************";
				N: NOP();
				N: MOV(3600000,S015RT1_LwrRck.Int.TackTMR.PRE)RTO(S015RT1_LwrRck.Int.TackTMR,?,?);
				N: XIC(S015RT1_LwrRck.Int.AutoMode)XIC(S015RB01.Int.AutoMode)XIO(S015RB01.Int.ClearOfPick1)MOV(3600000,S015RT1_LwrRck.Int.IndexTMR.PRE)RTO(S015RT1_LwrRck.Int.IndexTMR,?,?);
				N: [XIC(S015RT1_LwrRck.Int.AutoMode) [XIC(S015RT1_LwrRck.Int.CycStart) XIO(S015RT1_LwrRck.Int.UnldComp) ,XIC(S015RT1_LwrRck.Int.TaskComp) XIO(S015RT1_LwrRck.Int.UnldPos1) XIC(Edit.Bit) ,XIC(S015RT1_LwrRck.Int.UnldComp) XIO(S015RT1_LwrRck.Int.CycComp) XIC(S015RT1_LwrRck.Int.PartsPresNo) ] ,XIC(S015RT1_LwrRck.Oper.CycTimeTmr.EN) ]XIO(S015RT1_LwrRck.Int.IndexTMR.TT)MOV(3600000,S015RT1_LwrRck.Int.CycTMR.PRE)RTO(S015RT1_LwrRck.Int.CycTMR,?,?);
				N: [XIC(S015RT1_LwrRck.Oper.CycTimeTmr.EN) ,XIC(S015RT1_LwrRck.Int.IndexTMR.EN) ,XIC(S015RT1_LwrRck.Int.CycTMR.EN) ]MOV(3600000,S015RT1_LwrRck.Int.ProcTMR.PRE)RTO(S015RT1_LwrRck.Int.ProcTMR,?,?);
				N: XIC(S015RT1_LwrRck.Int.UnldComp)[XIO(S015RT1_LwrRck.Int.CycCompONS.0) [MOV(S015RT1_LwrRck.Int.CycTMR.ACC,S015RT1_LwrRck.Int.CycTimeStore) ,RES(S015RT1_LwrRck.Int.CycTMR) ] ,OTL(S015RT1_LwrRck.Int.CycCompONS.0) ];
				N: XIC(S015RT1_LwrRck.Int.CycCompONS.0)XIO(S015RT1_LwrRck.Int.IndexTMR.EN)[XIO(S015RT1_LwrRck.Int.CycCompONS.1) [MOV(S015RT1_LwrRck.Int.TackTMR.ACC,S015RT1_LwrRck.Int.TackTimeStore) ,RES(S015RT1_LwrRck.Int.TackTMR) ,MOV(S015RT1_LwrRck.Int.IndexTMR.ACC,S015RT1_LwrRck.Int.IndexTimeStore) ,RES(S015RT1_LwrRck.Int.IndexTMR) ,MOV(S015RT1_LwrRck.Int.ProcTMR.ACC,S015RT1_LwrRck.Int.ProcTimeStore) ,RES(S015RT1_LwrRck.Int.ProcTMR) ] ,OTL(S015RT1_LwrRck.Int.CycCompONS.1) ];
				N: XIC(S015RT1_LwrRck.Int.CycStart)OTU(S015RT1_LwrRck.Int.CycCompONS.0)OTU(S015RT1_LwrRck.Int.CycCompONS.1);
				RC: "************************************************************$N"
				    "Station State$N"
				    "************************************************************";
				N: NOP();
				N: XIC(Edit.Bit)OTE(S015RT1_LwrRck.Int.Starved);
				N: XIC(Edit.Bit)OTE(S015RT1_LwrRck.Int.Blocked);
				RC: "************************************************************$N"
				    "Station Mode for HMI$N"
				    "$N"
				    "###REQUIRES UPDATE####$N"
				    "************************************************************";
				N: [MOV(0,S015RT1_LwrRck.Int.RunningMode) ,XIC(Status.AlwaysOff) XIC(Edit.Debug) MOV(1,S015RT1_LwrRck.Int.RunningMode) ,XIC(S015RT1_LwrRck.Int.HoldEndOfCycle) MOV(2,S015RT1_LwrRck.Int.RunningMode) ,XIC(S015RT1_LwrRck.Int.DryCycle) MOV(3,S015RT1_LwrRck.Int.RunningMode) ];
				RC: "************************************************************$N"
				    "Station Mode Status for HMI$N"
				    "$N"
				    "######REQUIRED UPDATE########$N"
				    "************************************************************";
				N: [XIO(HMI_FRM005.stsAnyFixtureOnFault) XIO(HMI_FRM005.stsAnyRobotOnFault) MOV(1,S015RT1_LwrRck.Int.RunningModeStatus) ,XIC(S015RT1_LwrRck.Int.Blocked) MOV(2,S015RT1_LwrRck.Int.RunningModeStatus) ,XIC(S015RT1_LwrRck.Int.Starved) MOV(3,S015RT1_LwrRck.Int.RunningModeStatus) ,[XIC(HMI_FRM005.stsAnyFixtureOnFault) ,XIC(HMI_FRM005.stsAnyRobotOnFault) ] MOV(0,S015RT1_LwrRck.Int.RunningModeStatus) ];
				RC: "************************************************************$N"
				    "Station Operation Mode for HMI$N"
				    "$N"
				    "#####REQUIRES UPDATE#####$N"
				    "************************************************************";
				N: [MOV(0,S015RT1_LwrRck.Int.OperationMode) ,XIC(S015RT1_LwrRck.Int.AutoSel) MOV(1,S015RT1_LwrRck.Int.OperationMode) ,XIC(S015RT1_LwrRck.Int.ManualMode) MOV(2,S015RT1_LwrRck.Int.OperationMode) ,XIC(S015RT1_LwrRck.Int.AutoMode) MOV(3,S015RT1_LwrRck.Int.OperationMode) ];
		END_ROUTINE

		ROUTINE P01_StationToSfty 
				RC: "************************************************************$N"
				    "Map States to Safety Tag$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S015RT1.Int.KnownPos)OTE(StdToSfty.S015RT1KnownPos);
				N: XIC(Edit.Bit)[MOV(500,S015RT1.Int.ClrToUnlockDlyTmr.PRE) TON(S015RT1.Int.ClrToUnlockDlyTmr,?,?) ,XIC(S015RT1.Int.ClrToUnlockDlyTmr.DN) OTE(StdToSfty.S015RT1ClrToUnlock) ];
		END_ROUTINE

		ROUTINE Y00_Alarms_L1 (Description := "Machine Fault Alarm Messages")
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L1$N"
				    "Machine Faults$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "Module Communication Faults$N"
				    "#######################$N"
				    "$N"
				    "Add the ENet.CommOK signal of the First upstream Ethernet Device If Daisy Chain.$N"
				    "If the First Upstream Ethernet Device is a Switch, TBD.";
				N: NOP();
				N: [XIC(S015RT1SIO1.ENet.CommOK) XIO(S015RT1MIO1.ENet.CommOK) XIO(S015RT1MIO1.ENet.Inhibited) OTE(S3.L1[1].0) ,XIC(Edit.Bit) XIO(S015RB01.ENet.CommOK) XIO(S015RB01.ENet.Inhibited) OTE(S3.L1[1].10) ];
				N: XIO(S015RT1SIO1:I.ConnectionFaulted)[XIO(S015RT1SIO1:I.RunMode) ,XIO(S010Sfty.Mod1.InputStatus) ]OTE(S3.L1[1].21);
				RC: "#######################$N"
				    "Safety Instruction Faults$N"
				    "$N"
				    "E-Stop$N"
				    "Oper Light Screens And Scanners$N"
				    "Safety Position Devices$N"
				    "InterCell Safety Devices$N"
				    "#######################";
				N: NOP();
				N: [XIC(S015RT1Sfty.IntSftyDevice.LC1.FP) OTE(S3.L1[2].20) ,XIC(S015RT1Sfty.IntSftyDevice.LC2.FP) OTE(S3.L1[2].21) ,XIC(S015RT1Sfty.IntSftyDevice.LC3.FP) OTE(S3.L1[2].22) ];
				N: [XIC(S015RT1Sfty.IntSftyDevice.SCN1_1.FP) OTE(S3.L1[2].23) ,XIC(S015RT1Sfty.IntSftyDevice.SCN1_2.FP) OTE(S3.L1[2].24) ,XIC(S015RT1Sfty.IntSftyDevice.SCN2_1.FP) OTE(S3.L1[2].25) ,XIC(S015RT1Sfty.IntSftyDevice.SCN2_2.FP) OTE(S3.L1[2].26) ];
				RC: "#######################$N"
				    "Operator Light Screen And Scanner Fault$N"
				    "#######################$N"
				    "$N"
				    "Use the correct Module Run Mode";
				N: NOP();
				RC: "#######################$N"
				    "Part Present Faults$N"
				    "#######################";
				N: NOP();
				N: XIC(S015RT1.Int.PPActFltsEnbld)[XIC(S015RT1.PP[1].stsNotONFault) [XIO(S015RT1.PP[1].inpPPSensor.0) OTE(S3.L1[10].0) ,XIO(S015RT1.PP[1].inpPPSensor.1) OTE(S3.L1[10].2) ] ,XIC(S015RT1.PP[1].stsStillONFault) [XIC(S015RT1.PP[1].inpPPSensor.0) OTE(S3.L1[10].1) ,XIC(S015RT1.PP[1].inpPPSensor.1) OTE(S3.L1[10].3) ] ];
				N: XIC(S015RT1.Int.PPActFltsEnbld)[XIC(S015RT1.PP[2].stsNotONFault) [XIO(S015RT1.PP[2].inpPPSensor.0) OTE(S3.L1[10].4) ,XIO(S015RT1.PP[2].inpPPSensor.1) OTE(S3.L1[10].6) ,XIO(S015RT1.PP[2].inpPPSensor.2) OTE(S3.L1[10].8) ] ,XIC(S015RT1.PP[2].stsStillONFault) [XIC(S015RT1.PP[2].inpPPSensor.0) OTE(S3.L1[10].5) ,XIC(S015RT1.PP[2].inpPPSensor.1) OTE(S3.L1[10].7) ,XIC(S015RT1.PP[2].inpPPSensor.2) OTE(S3.L1[10].9) ] ];
				RC: "#######################$N"
				    "Actuator Faults$N"
				    "#######################";
				N: NOP();
				RC: "#######################$N"
				    "Shift Register Data Mismatch Fault$N"
				    "#######################";
				N: NOP();
				N: XIC(S015RT1.Int.AutoMode)XIO(S015RT1.Int.DryCycle)[XIC(S015RT1.Int.AllPartsPres1) XIC(S015RT1.SR.Int.NoPart) ,XIC(S015RT1.Int.PartsPresNo) XIO(S015RT1.SR.Int.NoPart) ][MOV(5000,S015RT1.Int.FltDelayTmr[0].PRE) TON(S015RT1.Int.FltDelayTmr[0],?,?) ,XIC(S015RT1.Int.FltDelayTmr[0].DN) OTE(S3.L1[65].0) ];
		END_ROUTINE

		ROUTINE Y01_Alarms_L2 (Description := "Manual Intervention Alarm Messages")
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L2$N"
				    "Manual Interventions$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "Inhibited Modules$N"
				    "#######################";
				N: NOP();
				N: [XIC(S015RB01.ENet.Inhibited) OTE(S3.L2[2].0) ,XIC(S015RT1MIO1.ENet.Inhibited) OTE(S3.L2[2].1) ,XIC(S015RT1SIO1.ENet.Inhibited) OTE(S3.L2[2].2) ];
				RC: "#######################$N"
				    "E-Stop Activated$N"
				    "#######################";
				N: NOP();
				RC: "#######################$N"
				    "Operator Light Screen And Scanner Fault$N"
				    "#######################$N"
				    "$N"
				    "Use the correct Module Run Mode";
				N: NOP();
				RC: "#######################$N"
				    "Operator Light Screen And Scanner Fault$N"
				    "#######################$N"
				    "$N"
				    "Use the correct Module Run Mode";
				N: NOP();
				RC: "#######################$N"
				    "Station No Air$N"
				    "#######################";
				N: NOP();
				N: XIC(Edit.Bit)XIO(S015RT1.Int.AirOnOk)OTE(S3.L2[10].0);
		END_ROUTINE

		ROUTINE Y02_Alarms_L3 (Description := "Warning Alarm Messages")
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L3$N"
				    "Warnings$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "RESERVED$N"
				    "#######################";
				N: NOP();
		END_ROUTINE

		ROUTINE Z00_MapOutputs 
				RC: "************************************************************$N"
				    "Map Devices Outputs$N"
				    "************************************************************";
				N: NOP();
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S015RT1Sfty (Class := Safety,
	                     MAIN := "s_A00_Main",
	                     MODE := 0,
	                     DisableFlag := 0,
	                     UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE s_A00_Main 
				N: JSR(s_B00_ModStatus,0);
				N: JSR(s_D00_Estop,0);
				N: JSR(s_D01_LC,0);
				N: JSR(s_D02_OPR,0);
				N: JSR(s_D05_AccLC,0);
				N: JSR(s_E00_RB01,0);
				N: JSR(s_Z00_Summary,0);
		END_ROUTINE

		ROUTINE s_B00_ModStatus (Description := "Safety Module IO Status")
				RC: "************************************************************$N"
				    "FRM007 Module Status$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Module 1 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: XIC(S015RT1SIO1:I.RunMode)OTE(S015RT1Sfty.Mod1.RunMode);
				N: XIC(S015RT1SIO1:I.Pt00InputStatus)XIC(S015RT1SIO1:I.Pt01InputStatus)XIC(S015RT1SIO1:I.Pt02InputStatus)XIC(S015RT1SIO1:I.Pt03InputStatus)XIC(S015RT1SIO1:I.Pt04InputStatus)XIC(S015RT1SIO1:I.Pt05InputStatus)XIC(S015RT1SIO1:I.Pt06InputStatus)XIC(S015RT1SIO1:I.Pt07InputStatus)XIC(S015RT1SIO1:I.Pt08InputStatus)XIC(S015RT1SIO1:I.Pt09InputStatus)XIC(S015RT1SIO1:I.Pt10InputStatus)XIC(S015RT1SIO1:I.Pt11InputStatus)OTE(S015RT1Sfty.Mod1.InputStatus);
				N: XIC(S015RT1SIO1:I.Pt00OutputStatus)XIC(S015RT1SIO1:I.Pt01OutputStatus)XIC(S015RT1SIO1:I.Pt02OutputStatus)XIC(S015RT1SIO1:I.Pt03OutputStatus)OTE(S015RT1Sfty.Mod1.OutputStatus);
				RC: "************************************************************$N"
				    "Module 2 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: OTE(S015RT1Sfty.Mod2.RunMode);
				N: OTE(S015RT1Sfty.Mod2.InputStatus);
				N: OTE(S015RT1Sfty.Mod2.OutputStatus);
				RC: "************************************************************$N"
				    "Module Summary$N"
				    "************************************************************";
				N: XIC(S015RT1Sfty.Mod1.RunMode)XIC(S015RT1Sfty.Mod2.RunMode)OTE(S015RT1Sfty.AllModRunMode);
				N: XIC(S015RT1Sfty.Mod1.InputStatus)XIC(S015RT1Sfty.Mod2.InputStatus)OTE(S015RT1Sfty.AllModInStatusOk);
				N: XIC(S015RT1Sfty.Mod1.OutputStatus)XIC(S015RT1Sfty.Mod2.OutputStatus)OTE(S015RT1Sfty.AllModOutStatusOk);
		END_ROUTINE

		ROUTINE s_D00_Estop (Description := "Emergency Stop Safety Routine")
				RC: "************************************************************$N"
				    "FRM015RT1 Emergency Stop$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "E-Stop$N"
				    "FRM015RT1 E1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(sEdit.Bit)OTE(S015RT1Sfty.E1.EstpChnA);
				N: XIC(sEdit.Bit)OTE(S015RT1Sfty.E1.EstpChnB);
				N: [XIC(S015RT1Sfty.Oper1SwipeStart) ,XIC(sZ005_040.AnyGateRstPB) ]OTE(S015RT1Sfty.E1.EstpInstCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S015RT1Sfty.E1.EstpInstFltRst);
				N: XIC(S015RT1Sfty.AllModRunMode)ESTOP(S015RT1Sfty.E1.Estop,MANUAL,S015RT1Sfty.E1.EstpChnA,S015RT1Sfty.E1.EstpChnB,S015RT1Sfty.E1.EstpInstCR,S015RT1Sfty.E1.EstpInstFltRst);
		END_ROUTINE

		ROUTINE s_D01_LC (Description := "Light Screen and Safety Scanner Safety Routine")
				RC: "************************************************************$N"
				    "Safety Light Curtains and Scanners$N"
				    "************************************************************";
				N: NOP();
				N: OTE(S015RT1Sfty.OperLS.LC1Installed)OTE(S015RT1Sfty.OperLS.LC2Installed)OTU(S015RT1Sfty.OperLS.LC3Installed)OTU(S015RT1Sfty.OperLS.SCN1_1Installed)OTU(S015RT1Sfty.OperLS.SCN1_2Installed)OTU(S015RT1Sfty.OperLS.SCN2_1Installed)OTU(S015RT1Sfty.OperLS.SCN2_2Installed);
				RC: "************************************************************$N"
				    "LC Instruction$N"
				    "Input Mapping$N"
				    "************************************************************$N"
				    "Edit all required Input mapping rungs with the correct safety input$N"
				    "Edit LC Muting as required. Check Rung description for details";
				N: NOP();
				RC: "************************************************************$N"
				    "S015RT1 LC1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S015RT1SIO1:I.Pt02Data)OTE(S015RT1Sfty.OperLS.LC1ChnAInp);
				N: XIC(S015RT1SIO1:I.Pt03Data)OTE(S015RT1Sfty.OperLS.LC1ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTU(S015RT1Sfty.OperLS.LC1MuteInstalled) ,XIC(sEdit.Bit) XIC(S015RT1Sfty.OperLS.LC1MuteInstalled) OTE(S015RT1Sfty.OperLS.LC1Mute) ];
				RC: "************************************************************$N"
				    "S015RT1 LC2$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S015RT1SIO1:I.Pt04Data)OTE(S015RT1Sfty.OperLS.LC2ChnAInp);
				N: XIC(S015RT1SIO1:I.Pt05Data)OTE(S015RT1Sfty.OperLS.LC2ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTU(S015RT1Sfty.OperLS.LC2MuteInstalled) ,XIC(sEdit.Bit) XIC(S015RT1Sfty.OperLS.LC2MuteInstalled) OTE(S015RT1Sfty.OperLS.LC2Mute) ];
				RC: "************************************************************$N"
				    "LC Instruction$N"
				    "$N"
				    "DO NOT EDIT AFTER THIS POINT$N"
				    "************************************************************$N"
				    "";
				N: NOP();
				N: [XIC(S015RT1Sfty.OperLS.LC1ChnAInp) ,XIC(S015RT1Sfty.OperLS.LC1MuteInstalled) XIC(S015RT1Sfty.OperLS.LC1Mute) ]OTE(S015RT1Sfty.OperLS.LC1ChnAInst);
				N: [XIC(S015RT1Sfty.OperLS.LC1ChnBInp) ,XIC(S015RT1Sfty.OperLS.LC1MuteInstalled) XIC(S015RT1Sfty.OperLS.LC1Mute) ]OTE(S015RT1Sfty.OperLS.LC1ChnBInst);
				N: XIC(S015RT1Sfty.Oper1SwipeStart)ONS(S015RT1Sfty.OperLS.LC1InsCROns)OTE(S015RT1Sfty.OperLS.LC1InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S015RT1Sfty.OperLS.LC1FltRst);
				N: XIC(S015RT1Sfty.OperLS.LC1Installed)XIC(S015RT1Sfty.AllModRunMode)LC(S015RT1Sfty.OperLS.LC1,MANUAL,S015RT1Sfty.OperLS.LC1ChnAInst,S015RT1Sfty.OperLS.LC1ChnBInst,20,S015RT1Sfty.OperLS.LC1Mute,S015RT1Sfty.OperLS.LC1InsCR,S015RT1Sfty.OperLS.LC1FltRst);
				N: [XIC(S015RT1Sfty.OperLS.LC2ChnAInp) ,XIC(S015RT1Sfty.OperLS.LC2MuteInstalled) XIC(S015RT1Sfty.OperLS.LC2Mute) ]OTE(S015RT1Sfty.OperLS.LC2ChnAInst);
				N: [XIC(S015RT1Sfty.OperLS.LC2ChnBInp) ,XIC(S015RT1Sfty.OperLS.LC2MuteInstalled) XIC(S015RT1Sfty.OperLS.LC2Mute) ]OTE(S015RT1Sfty.OperLS.LC2ChnBInst);
				N: XIC(S015RT1Sfty.Oper1SwipeStart)OTE(S015RT1Sfty.OperLS.LC2InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S015RT1Sfty.OperLS.LC2FltRst);
				N: XIC(S015RT1Sfty.OperLS.LC2Installed)XIC(S015RT1Sfty.AllModRunMode)LC(S015RT1Sfty.OperLS.LC2,MANUAL,S015RT1Sfty.OperLS.LC2ChnAInst,S015RT1Sfty.OperLS.LC2ChnBInst,20,S015RT1Sfty.OperLS.LC2Mute,S015RT1Sfty.OperLS.LC2InsCR,S015RT1Sfty.OperLS.LC2FltRst);
		END_ROUTINE

		ROUTINE s_D02_OPR (Description := "Operator Finger Swipe Safety Routine")
				RC: "************************************************************$N"
				    "FRM015RT1 Cycle Start$N"
				    "Finger Swipe$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S015RT1Sfty.Oper1Instd)FingerSwipe(S015RT1Sfty.OPR1,S015RT1Sfty.Oper1SwipeStart);
				N: XIC(S015RT1Sfty.Oper2Instd)FingerSwipe(S015RT1Sfty.OPR2,S015RT1Sfty.Oper2SwipeStart);
		END_ROUTINE

		ROUTINE s_D05_AccLC 
				RC: "************************************************************$N"
				    "Safety Light Curtains and Scanners$N"
				    "************************************************************";
				N: NOP();
				N: OTE(S015RT1Sfty.AccessLS.LC1Installed)OTE(S015RT1Sfty.AccessLS.LC2Installed)OTU(S015RT1Sfty.AccessLS.LC3Installed)OTU(S015RT1Sfty.AccessLS.SCN1_1Installed)OTU(S015RT1Sfty.AccessLS.SCN1_2Installed)OTU(S015RT1Sfty.AccessLS.SCN2_1Installed)OTU(S015RT1Sfty.AccessLS.SCN2_2Installed);
				RC: "************************************************************$N"
				    "LC Instruction$N"
				    "Input Mapping$N"
				    "************************************************************$N"
				    "Edit all required Input mapping rungs with the correct safety input$N"
				    "Edit LC Muting as required. Check Rung description for details";
				N: NOP();
				RC: "************************************************************$N"
				    "S015RT1 ACCESS LC1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S015RT1SIO1:I.Pt06Data)OTE(S015RT1Sfty.AccessLS.LC1ChnAInp);
				N: XIC(S015RT1SIO1:I.Pt07Data)OTE(S015RT1Sfty.AccessLS.LC1ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTE(S015RT1Sfty.AccessLS.LC1MuteInstalled) ,XIC(S015RT1Sfty.StaZn1Active) XIC(S015RT1Sfty.AccessLS.LC1MuteInstalled) OTE(S015RT1Sfty.AccessLS.LC1Mute) ];
				RC: "************************************************************$N"
				    "LC Instruction$N"
				    "$N"
				    "DO NOT EDIT AFTER THIS POINT$N"
				    "************************************************************$N"
				    "";
				N: NOP();
				N: [XIC(S015RT1Sfty.AccessLS.LC1ChnAInp) ,XIC(S015RT1Sfty.AccessLS.LC1MuteInstalled) XIC(S015RT1Sfty.AccessLS.LC1Mute) ]OTE(S015RT1Sfty.AccessLS.LC1ChnAInst);
				N: [XIC(S015RT1Sfty.AccessLS.LC1ChnBInp) ,XIC(S015RT1Sfty.AccessLS.LC1MuteInstalled) XIC(S015RT1Sfty.AccessLS.LC1Mute) ]OTE(S015RT1Sfty.AccessLS.LC1ChnBInst);
				N: XIC(S015RT1Sfty.Oper1SwipeStart)ONS(S015RT1Sfty.AccessLS.LC1InsCROns)OTE(S015RT1Sfty.AccessLS.LC1InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S015RT1Sfty.AccessLS.LC1FltRst);
				N: XIC(S015RT1Sfty.AccessLS.LC1Installed)XIC(S015RT1Sfty.AllModRunMode)LC(S015RT1Sfty.AccessLS.LC1,MANUAL,S015RT1Sfty.AccessLS.LC1ChnAInst,S015RT1Sfty.AccessLS.LC1ChnBInst,20,S015RT1Sfty.AccessLS.LC1Mute,S015RT1Sfty.AccessLS.LC1InsCR,S015RT1Sfty.AccessLS.LC1FltRst);
		END_ROUTINE

		ROUTINE s_E00_RB01 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "S016 RB01$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S015RB01:SI.Input[0],S015RB01Sfty.I,1);
				N: XIC(S015RB01:SI.RunMode)OTE(S015RB01Sfty.Int.ModRunMode);
				N: XIC(S015RB01:SI.ConnectionFaulted)OTE(S015RB01Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "############################";
				N: OTE(S015RB01Sfty.Int.AreaSafe);
				N: XIC(S015RT1Sfty.StaZn1Active)OTE(S015RB01Sfty.Int.Zn1LtScrnActive);
				N: OTE(S015RB01Sfty.Int.Zn2LtScrnActive);
				N: OTE(S015RB01Sfty.Int.Zn3LtScrnActive);
				N: OTE(S015RB01Sfty.Int.Zn4LtScrnActive);
				N: OTE(S015RB01Sfty.Int.Zn5LtScrnActive);
				N: OTE(S015RB01Sfty.Int.Zn6LtScrnActive);
				N: OTE(S015RB01Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S015RB01Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S015RB01Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S015RB01Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS015RB01)OTE(S015RB01Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS015RB01)OTE(S015RB01Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR01AOI,S015RB01Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S015RB01Sfty.O,S015RB01:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_Z00_Summary (Description := "Station Safety Summary")
				N: OTE(S015RT1Sfty.Oper1Instd)OTU(S015RT1Sfty.Oper2Instd);
				N: OTU(S015RT1Sfty.LoadAssistInstld);
				N: [XIO(S015RT1Sfty.OperLS.LC1.LCB) ,XIO(S015RT1Sfty.OperLS.LC1Installed) ][XIO(S015RT1Sfty.OperLS.LC2.LCB) ,XIO(S015RT1Sfty.OperLS.LC2Installed) ][XIO(S015RT1Sfty.OperLS.LC3.LCB) ,XIO(S015RT1Sfty.OperLS.LC3Installed) ][XIO(S015RT1Sfty.OperLS.SCN1_1.LCB) ,XIO(S015RT1Sfty.OperLS.SCN1_1Installed) ][XIO(S015RT1Sfty.OperLS.SCN1_2.LCB) ,XIO(S015RT1Sfty.OperLS.SCN1_2Installed) ][XIO(S015RT1Sfty.OperLS.SCN2_1.LCB) ,XIO(S015RT1Sfty.OperLS.SCN2_1Installed) ][XIO(S015RT1Sfty.OperLS.SCN2_2.LCB) ,XIO(S015RT1Sfty.OperLS.SCN2_2Installed) ]OTE(S015RT1Sfty.StaZn1NotBlkd);
				N: [XIC(S015RT1Sfty.OperLS.LC1.O1) ,XIO(S015RT1Sfty.OperLS.LC1Installed) ][XIC(S015RT1Sfty.OperLS.LC2.O1) ,XIO(S015RT1Sfty.OperLS.LC2Installed) ][XIC(S015RT1Sfty.OperLS.LC3.O1) ,XIO(S015RT1Sfty.OperLS.LC3Installed) ][XIC(S015RT1Sfty.OperLS.SCN1_1.O1) ,XIO(S015RT1Sfty.OperLS.SCN1_1Installed) ][XIC(S015RT1Sfty.OperLS.SCN1_2.O1) ,XIO(S015RT1Sfty.OperLS.SCN1_2Installed) ][XIC(S015RT1Sfty.OperLS.SCN2_1.O1) ,XIO(S015RT1Sfty.OperLS.SCN2_1Installed) ][XIC(S015RT1Sfty.OperLS.SCN2_2.O1) ,XIO(S015RT1Sfty.OperLS.SCN2_2Installed) ]OTE(S015RT1Sfty.StaZn1Active);
				N: OTE(S015RT1Sfty.StaZn2NotBlkd);
				N: OTE(S015RT1Sfty.StaZn2Active);
				N: OTE(S015RT1Sfty.StaZn3NotBlkd);
				N: OTE(S015RT1Sfty.StaZn3Active);
				N: XIC(S015RT1Sfty.StaZn1Active)XIC(S015RT1Sfty.StaZn2Active)XIC(S015RT1Sfty.StaZn3Active)OTE(S015RT1Sfty.AllStaLtScrnOK);
				N: XIC(S015RT1Sfty.LoadAssistInstld)OTE(S015RT1Sfty.LoadAssistClear);
				N: XIC(S015RT1Sfty.LoadAssistInstld)OTE(S015RT1Sfty.LoadAssistActive);
				N: XIC(S015RT1Sfty.Oper1Instd)XIC(sEdit.Bit)OTE(S015RT1Sfty.Oper1SwipeStart);
				N: XIC(S015RT1Sfty.Oper2Instd)XIC(sEdit.Bit)OTE(S015RT1Sfty.Oper2SwipeStart);
				N: OTE(S015RT1Sfty.ClearToUnlock);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S015RT2Sfty (Class := Safety,
	                     MAIN := "s_A00_Main",
	                     MODE := 0,
	                     DisableFlag := 0,
	                     UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE s_A00_Main 
				N: JSR(s_B00_ModStatus,0);
				N: JSR(s_D00_Estop,0);
				N: JSR(s_D01_LC,0);
				N: JSR(s_D02_OPR,0);
				N: JSR(s_D05_AccLC,0);
				N: JSR(s_E00_RB02,0);
				N: JSR(s_Z00_Summary,0);
		END_ROUTINE

		ROUTINE s_B00_ModStatus (Description := "Safety Module IO Status")
				RC: "************************************************************$N"
				    "FRM007 Module Status$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Module 1 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: XIC(S015RT2SIO1:I.RunMode)OTE(S015RT2Sfty.Mod1.RunMode);
				N: XIC(S015RT2SIO1:I.Pt00InputStatus)XIC(S015RT2SIO1:I.Pt01InputStatus)XIC(S015RT2SIO1:I.Pt02InputStatus)XIC(S015RT2SIO1:I.Pt03InputStatus)XIC(S015RT2SIO1:I.Pt04InputStatus)XIC(S015RT2SIO1:I.Pt05InputStatus)XIC(S015RT2SIO1:I.Pt06InputStatus)XIC(S015RT2SIO1:I.Pt07InputStatus)XIC(S015RT2SIO1:I.Pt08InputStatus)XIC(S015RT2SIO1:I.Pt09InputStatus)XIC(S015RT2SIO1:I.Pt10InputStatus)XIC(S015RT2SIO1:I.Pt11InputStatus)OTE(S015RT2Sfty.Mod1.InputStatus);
				N: XIC(S015RT2SIO1:I.Pt00OutputStatus)XIC(S015RT2SIO1:I.Pt01OutputStatus)XIC(S015RT2SIO1:I.Pt02OutputStatus)XIC(S015RT2SIO1:I.Pt03OutputStatus)OTE(S015RT2Sfty.Mod1.OutputStatus);
				RC: "************************************************************$N"
				    "Module 2 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: OTE(S015RT2Sfty.Mod2.RunMode);
				N: OTE(S015RT2Sfty.Mod2.InputStatus);
				N: OTE(S015RT2Sfty.Mod2.OutputStatus);
				RC: "************************************************************$N"
				    "Module Summary$N"
				    "************************************************************";
				N: XIC(S015RT2Sfty.Mod1.RunMode)XIC(S015RT2Sfty.Mod2.RunMode)OTE(S015RT2Sfty.AllModRunMode);
				N: XIC(S015RT2Sfty.Mod1.InputStatus)XIC(S015RT2Sfty.Mod2.InputStatus)OTE(S015RT2Sfty.AllModInStatusOk);
				N: XIC(S015RT2Sfty.Mod1.OutputStatus)XIC(S015RT2Sfty.Mod2.OutputStatus)OTE(S015RT2Sfty.AllModOutStatusOk);
		END_ROUTINE

		ROUTINE s_D00_Estop (Description := "Emergency Stop Safety Routine")
				RC: "************************************************************$N"
				    "FRM015RT2 Emergency Stop$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "E-Stop$N"
				    "FRM015RT2 E1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S015RT2SIO1:I.Pt00Data)OTE(S015RT2Sfty.E1.EstpChnA);
				N: XIC(S015RT2SIO1:I.Pt01Data)OTE(S015RT2Sfty.E1.EstpChnB);
				N: [XIC(S015RT2Sfty.Oper1SwipeStart) ,XIC(sZ005_040.AnyGateRstPB) ]OTE(S015RT2Sfty.E1.EstpInstCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S015RT2Sfty.E1.EstpInstFltRst);
				N: XIC(S015RT2Sfty.AllModRunMode)ESTOP(S015RT2Sfty.E1.Estop,MANUAL,S015RT2Sfty.E1.EstpChnA,S015RT2Sfty.E1.EstpChnB,S015RT2Sfty.E1.EstpInstCR,S015RT2Sfty.E1.EstpInstFltRst);
		END_ROUTINE

		ROUTINE s_D01_LC (Description := "Light Screen and Safety Scanner Safety Routine")
				RC: "************************************************************$N"
				    "Safety Light Curtains and Scanners$N"
				    "************************************************************";
				N: NOP();
				N: OTE(S015RT2Sfty.OperLS.LC1Installed)OTE(S015RT2Sfty.OperLS.LC2Installed)OTU(S015RT2Sfty.OperLS.LC3Installed)OTU(S015RT2Sfty.OperLS.SCN1_1Installed)OTU(S015RT2Sfty.OperLS.SCN1_2Installed)OTU(S015RT2Sfty.OperLS.SCN2_1Installed)OTU(S015RT2Sfty.OperLS.SCN2_2Installed);
				RC: "************************************************************$N"
				    "LC Instruction$N"
				    "Input Mapping$N"
				    "************************************************************$N"
				    "Edit all required Input mapping rungs with the correct safety input$N"
				    "Edit LC Muting as required. Check Rung description for details";
				N: NOP();
				RC: "************************************************************$N"
				    "S015RT2 LC1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S015RT2SIO1:I.Pt02Data)OTE(S015RT2Sfty.OperLS.LC1ChnAInp);
				N: XIC(S015RT2SIO1:I.Pt03Data)OTE(S015RT2Sfty.OperLS.LC1ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTU(S015RT2Sfty.OperLS.LC1MuteInstalled) ,XIC(sEdit.Bit) XIC(S015RT2Sfty.OperLS.LC1MuteInstalled) OTE(S015RT2Sfty.OperLS.LC1Mute) ];
				RC: "************************************************************$N"
				    "S015RT2 LC2$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S015RT2SIO1:I.Pt04Data)OTE(S015RT2Sfty.OperLS.LC2ChnAInp);
				N: XIC(S015RT2SIO1:I.Pt05Data)OTE(S015RT2Sfty.OperLS.LC2ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTU(S015RT2Sfty.OperLS.LC2MuteInstalled) ,XIC(sEdit.Bit) XIC(S015RT2Sfty.OperLS.LC2MuteInstalled) OTE(S015RT2Sfty.OperLS.LC2Mute) ];
				RC: "************************************************************$N"
				    "LC Instruction$N"
				    "$N"
				    "DO NOT EDIT AFTER THIS POINT$N"
				    "************************************************************$N"
				    "";
				N: NOP();
				N: [XIC(S015RT2Sfty.OperLS.LC1ChnAInp) ,XIC(S015RT2Sfty.OperLS.LC1MuteInstalled) XIC(S015RT2Sfty.OperLS.LC1Mute) ]OTE(S015RT2Sfty.OperLS.LC1ChnAInst);
				N: [XIC(S015RT2Sfty.OperLS.LC1ChnBInp) ,XIC(S015RT2Sfty.OperLS.LC1MuteInstalled) XIC(S015RT2Sfty.OperLS.LC1Mute) ]OTE(S015RT2Sfty.OperLS.LC1ChnBInst);
				N: XIC(S015RT2Sfty.Oper1SwipeStart)ONS(S015RT2Sfty.OperLS.LC1InsCROns)OTE(S015RT2Sfty.OperLS.LC1InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S015RT2Sfty.OperLS.LC1FltRst);
				N: XIC(S015RT2Sfty.OperLS.LC1Installed)XIC(S015RT2Sfty.AllModRunMode)LC(S015RT2Sfty.OperLS.LC1,MANUAL,S015RT2Sfty.OperLS.LC1ChnAInst,S015RT2Sfty.OperLS.LC1ChnBInst,20,S015RT2Sfty.OperLS.LC1Mute,S015RT2Sfty.OperLS.LC1InsCR,S015RT2Sfty.OperLS.LC1FltRst);
				N: [XIC(S015RT2Sfty.OperLS.LC2ChnAInp) ,XIC(S015RT2Sfty.OperLS.LC2MuteInstalled) XIC(S015RT2Sfty.OperLS.LC2Mute) ]OTE(S015RT2Sfty.OperLS.LC2ChnAInst);
				N: [XIC(S015RT2Sfty.OperLS.LC2ChnBInp) ,XIC(S015RT2Sfty.OperLS.LC2MuteInstalled) XIC(S015RT2Sfty.OperLS.LC2Mute) ]OTE(S015RT2Sfty.OperLS.LC2ChnBInst);
				N: XIC(S015RT2Sfty.Oper1SwipeStart)OTE(S015RT2Sfty.OperLS.LC2InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S015RT2Sfty.OperLS.LC2FltRst);
				N: XIC(S015RT2Sfty.OperLS.LC2Installed)XIC(S015RT2Sfty.AllModRunMode)LC(S015RT2Sfty.OperLS.LC2,MANUAL,S015RT2Sfty.OperLS.LC2ChnAInst,S015RT2Sfty.OperLS.LC2ChnBInst,20,S015RT2Sfty.OperLS.LC2Mute,S015RT2Sfty.OperLS.LC2InsCR,S015RT2Sfty.OperLS.LC2FltRst);
		END_ROUTINE

		ROUTINE s_D02_OPR (Description := "Operator Finger Swipe Safety Routine")
				RC: "************************************************************$N"
				    "FRM015RT2 Cycle Start$N"
				    "Finger Swipe$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S015RT2Sfty.Oper1Instd)FingerSwipe(S015RT2Sfty.OPR1,S015RT2Sfty.Oper1SwipeStart);
				N: XIC(S015RT2Sfty.Oper2Instd)FingerSwipe(S015RT2Sfty.OPR2,S015RT2Sfty.Oper2SwipeStart);
		END_ROUTINE

		ROUTINE s_D05_AccLC 
				RC: "************************************************************$N"
				    "Safety Light Curtains and Scanners$N"
				    "************************************************************";
				N: NOP();
				N: OTE(S015RT2Sfty.AccessLS.LC1Installed)OTE(S015RT2Sfty.AccessLS.LC2Installed)OTU(S015RT2Sfty.AccessLS.LC3Installed)OTU(S015RT2Sfty.AccessLS.SCN1_1Installed)OTU(S015RT2Sfty.AccessLS.SCN1_2Installed)OTU(S015RT2Sfty.AccessLS.SCN2_1Installed)OTU(S015RT2Sfty.AccessLS.SCN2_2Installed);
				RC: "************************************************************$N"
				    "LC Instruction$N"
				    "Input Mapping$N"
				    "************************************************************$N"
				    "Edit all required Input mapping rungs with the correct safety input$N"
				    "Edit LC Muting as required. Check Rung description for details";
				N: NOP();
				RC: "************************************************************$N"
				    "S015RT2 ACCESS LC1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S015RT2SIO1:I.Pt06Data)OTE(S015RT2Sfty.AccessLS.LC1ChnAInp);
				N: XIC(S015RT2SIO1:I.Pt07Data)OTE(S015RT2Sfty.AccessLS.LC1ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTE(S015RT2Sfty.AccessLS.LC1MuteInstalled) ,XIC(S015RT2Sfty.StaZn1Active) XIC(S015RT2Sfty.AccessLS.LC1MuteInstalled) OTE(S015RT2Sfty.AccessLS.LC1Mute) ];
				RC: "************************************************************$N"
				    "LC Instruction$N"
				    "$N"
				    "DO NOT EDIT AFTER THIS POINT$N"
				    "************************************************************$N"
				    "";
				N: NOP();
				N: [XIC(S015RT2Sfty.AccessLS.LC1ChnAInp) ,XIC(S015RT2Sfty.AccessLS.LC1MuteInstalled) XIC(S015RT2Sfty.AccessLS.LC1Mute) ]OTE(S015RT2Sfty.AccessLS.LC1ChnAInst);
				N: [XIC(S015RT2Sfty.AccessLS.LC1ChnBInp) ,XIC(S015RT2Sfty.AccessLS.LC1MuteInstalled) XIC(S015RT2Sfty.AccessLS.LC1Mute) ]OTE(S015RT2Sfty.AccessLS.LC1ChnBInst);
				N: XIC(S015RT2Sfty.Oper1SwipeStart)ONS(S015RT2Sfty.AccessLS.LC1InsCROns)OTE(S015RT2Sfty.AccessLS.LC1InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S015RT2Sfty.AccessLS.LC1FltRst);
				N: XIC(S015RT2Sfty.AccessLS.LC1Installed)XIC(S015RT2Sfty.AllModRunMode)LC(S015RT2Sfty.AccessLS.LC1,MANUAL,S015RT2Sfty.AccessLS.LC1ChnAInst,S015RT2Sfty.AccessLS.LC1ChnBInst,20,S015RT2Sfty.AccessLS.LC1Mute,S015RT2Sfty.AccessLS.LC1InsCR,S015RT2Sfty.AccessLS.LC1FltRst);
		END_ROUTINE

		ROUTINE s_E00_RB02 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "FRM016 RB02$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S015RB02:SI.Input[0],S015RB02Sfty.I,1);
				N: XIC(S015RB02:SI.RunMode)OTE(S015RB02Sfty.Int.ModRunMode);
				N: XIC(S015RB02:SI.ConnectionFaulted)OTE(S015RB02Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "############################";
				N: OTE(S015RB02Sfty.Int.AreaSafe);
				N: XIC(S015RT2Sfty.StaZn1Active)OTE(S015RB02Sfty.Int.Zn1LtScrnActive);
				N: OTE(S015RB02Sfty.Int.Zn2LtScrnActive);
				N: OTE(S015RB02Sfty.Int.Zn3LtScrnActive);
				N: OTE(S015RB02Sfty.Int.Zn4LtScrnActive);
				N: OTE(S015RB02Sfty.Int.Zn5LtScrnActive);
				N: OTE(S015RB02Sfty.Int.Zn6LtScrnActive);
				N: OTE(S015RB02Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S015RB02Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S015RB02Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S015RB02Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS015RB02)OTE(S015RB02Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS015RB02)OTE(S015RB02Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR02AOI,S015RB02Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S015RB02Sfty.O,S015RB02:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_Z00_Summary (Description := "Station Safety Summary")
				N: OTE(S015RT2Sfty.Oper1Instd)OTU(S015RT2Sfty.Oper2Instd);
				N: OTU(S015RT2Sfty.LoadAssistInstld);
				N: [XIO(S015RT2Sfty.OperLS.LC1.LCB) ,XIO(S015RT2Sfty.OperLS.LC1Installed) ][XIO(S015RT2Sfty.OperLS.LC2.LCB) ,XIO(S015RT2Sfty.OperLS.LC2Installed) ][XIO(S015RT2Sfty.OperLS.LC3.LCB) ,XIO(S015RT2Sfty.OperLS.LC3Installed) ][XIO(S015RT2Sfty.OperLS.SCN1_1.LCB) ,XIO(S015RT2Sfty.OperLS.SCN1_1Installed) ][XIO(S015RT2Sfty.OperLS.SCN1_2.LCB) ,XIO(S015RT2Sfty.OperLS.SCN1_2Installed) ][XIO(S015RT2Sfty.OperLS.SCN2_1.LCB) ,XIO(S015RT2Sfty.OperLS.SCN2_1Installed) ][XIO(S015RT2Sfty.OperLS.SCN2_2.LCB) ,XIO(S015RT2Sfty.OperLS.SCN2_2Installed) ]OTE(S015RT2Sfty.StaZn1NotBlkd);
				N: [XIC(S015RT2Sfty.OperLS.LC1.O1) ,XIO(S015RT2Sfty.OperLS.LC1Installed) ][XIC(S015RT2Sfty.OperLS.LC2.O1) ,XIO(S015RT2Sfty.OperLS.LC2Installed) ][XIC(S015RT2Sfty.OperLS.LC3.O1) ,XIO(S015RT2Sfty.OperLS.LC3Installed) ][XIC(S015RT2Sfty.OperLS.SCN1_1.O1) ,XIO(S015RT2Sfty.OperLS.SCN1_1Installed) ][XIC(S015RT2Sfty.OperLS.SCN1_2.O1) ,XIO(S015RT2Sfty.OperLS.SCN1_2Installed) ][XIC(S015RT2Sfty.OperLS.SCN2_1.O1) ,XIO(S015RT2Sfty.OperLS.SCN2_1Installed) ][XIC(S015RT2Sfty.OperLS.SCN2_2.O1) ,XIO(S015RT2Sfty.OperLS.SCN2_2Installed) ]OTE(S015RT2Sfty.StaZn1Active);
				N: OTE(S015RT2Sfty.StaZn2NotBlkd);
				N: OTE(S015RT2Sfty.StaZn2Active);
				N: OTE(S015RT2Sfty.StaZn3NotBlkd);
				N: OTE(S015RT2Sfty.StaZn3Active);
				N: XIC(S015RT2Sfty.StaZn1Active)XIC(S015RT2Sfty.StaZn2Active)XIC(S015RT2Sfty.StaZn3Active)OTE(S015RT2Sfty.AllStaLtScrnOK);
				N: XIC(S015RT2Sfty.LoadAssistInstld)OTE(S015RT2Sfty.LoadAssistClear);
				N: XIC(S015RT2Sfty.LoadAssistInstld)OTE(S015RT2Sfty.LoadAssistActive);
				N: XIC(S015RT2Sfty.Oper1Instd)XIC(sEdit.Bit)OTE(S015RT2Sfty.Oper1SwipeStart);
				N: XIC(S015RT2Sfty.Oper2Instd)XIC(sEdit.Bit)OTE(S015RT2Sfty.Oper2SwipeStart);
				N: OTE(S015RT2Sfty.ClearToUnlock);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S017Sfty (Class := Safety,
	                  MAIN := "s_A00_Main",
	                  MODE := 0,
	                  DisableFlag := 0,
	                  UseAsFolder := 0)
		TAG
			Station : s_udt_Sfty_Smry (COMMENT.KNOWNPOSITION.0 := "FRM017 TL1$NKnown Position",
			            COMMENT.KNOWNPOSITION.1 := "FRM017 TL2$NKnown Position",
			            Usage := Public) := [[0],57,0,0,3,1,[0,0]];
		END_TAG

		ROUTINE s_A00_Main 
				N: JSR(s_B00_ModStatus,0);
				N: JSR(s_E01_TL1,0);
				N: JSR(s_E01_TL2,0);
				N: JSR(s_Z00_Summary,0);
		END_ROUTINE

		ROUTINE s_B00_ModStatus (Description := "Safety Module IO Status")
				RC: "************************************************************$N"
				    "FRM007 Module Status$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Module 1 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: OTE(S017Sfty.Mod1.RunMode);
				N: OTE(S017Sfty.Mod1.InputStatus);
				N: OTE(S017Sfty.Mod1.OutputStatus);
				RC: "************************************************************$N"
				    "Module 2 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: OTE(S017Sfty.Mod2.RunMode);
				N: OTE(S017Sfty.Mod2.InputStatus);
				N: OTE(S017Sfty.Mod2.OutputStatus);
				RC: "************************************************************$N"
				    "Module Summary$N"
				    "************************************************************";
				N: XIC(S017Sfty.Mod1.RunMode)XIC(S017Sfty.Mod2.RunMode)OTE(S017Sfty.AllModRunMode);
				N: XIC(S017Sfty.Mod1.InputStatus)XIC(S017Sfty.Mod2.InputStatus)OTE(S017Sfty.AllModInStatusOk);
				N: XIC(S017Sfty.Mod1.OutputStatus)XIC(S017Sfty.Mod2.OutputStatus)OTE(S017Sfty.AllModOutStatusOk);
		END_ROUTINE

		ROUTINE s_E01_TL1 (Description := "Station Fixture Safety Routine")
				RC: "************************************************************$N"
				    "FRM017 TL1$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Minor Motion Enable$N"
				    "************************************************************$N"
				    "$N"
				    "This feature is disabled by default.$N"
				    "Use needs to be approved by Controls Department";
				N: OTU(S017Sfty.MinorMtnEnbld);
				N: XIC(sZ005_040.AllEStopsOk)[XIC(sZ005_040.PerimeterSafe) XIC(S017Sfty.AllStaLtScrnOK) ,XIC(sZ005_040.AnyBypassSwOn) ][XIC(S017Sfty.FX1.MotionEnbl) ,XIC(S017Sfty.FX1.SoftStartPwrOn) ]OTE(S017Sfty.FX1.SoftStartPwrOn);
				N: XIC(sZ005_040.PowerEnbld)XIC(S017Sfty.AllStaLtScrnOK)OTE(S017Sfty.FX1.MotionEnbl);
				RC: "Soft Start Valve Power Output$N"
				    "************************************************************";
				N: XIC(S017Sfty.FX1.SoftStartPwrOn)XIC(sEdit.Bit)NOP();
				RC: "Valve Manifold DC Power Output$N"
				    "************************************************************";
				N: XIC(S017Sfty.FX1.MotionEnbl)[OTE(S015RT1SIO1:O.Pt02Data) ,OTE(S015RT1SIO1:O.Pt03Data) ];
		END_ROUTINE

		ROUTINE s_E01_TL2 (Description := "Station Fixture Safety Routine")
				RC: "************************************************************$N"
				    "FRM017 TL2$N"
				    "************************************************************";
				N: NOP();
				N: XIC(sZ005_040.AllEStopsOk)[XIC(sZ005_040.PerimeterSafe) XIC(S017Sfty.AllStaLtScrnOK) ,XIC(sZ005_040.AnyBypassSwOn) ][XIC(S017Sfty.FX2.MotionEnbl) ,XIC(S017Sfty.FX2.SoftStartPwrOn) ]OTE(S017Sfty.FX2.SoftStartPwrOn);
				N: XIC(sZ005_040.PowerEnbld)XIC(S017Sfty.AllStaLtScrnOK)OTE(S017Sfty.FX2.MotionEnbl);
				RC: "Soft Start Valve Power Output$N"
				    "************************************************************";
				N: XIC(S017Sfty.FX2.SoftStartPwrOn)XIC(sEdit.Bit)NOP();
				RC: "Valve Manifold DC Power Output$N"
				    "************************************************************";
				N: XIC(S017Sfty.FX2.MotionEnbl)[OTE(S015RT2SIO1:O.Pt02Data) ,OTE(S015RT2SIO1:O.Pt03Data) ];
		END_ROUTINE

		ROUTINE s_Z00_Summary (Description := "Station Safety Summary")
				N: OTU(S017Sfty.Oper1Instd)OTU(S017Sfty.Oper2Instd);
				N: OTU(S017Sfty.LoadAssistInstld);
				N: [XIO(S017Sfty.OperLS.LC1.LCB) ,XIO(S017Sfty.OperLS.LC1Installed) ][XIO(S017Sfty.OperLS.LC2.LCB) ,XIO(S017Sfty.OperLS.LC2Installed) ][XIO(S017Sfty.OperLS.LC3.LCB) ,XIO(S017Sfty.OperLS.LC3Installed) ][XIO(S017Sfty.OperLS.SCN1_1.LCB) ,XIO(S017Sfty.OperLS.SCN1_1Installed) ][XIO(S017Sfty.OperLS.SCN1_2.LCB) ,XIO(S017Sfty.OperLS.SCN1_2Installed) ][XIO(S017Sfty.OperLS.SCN2_1.LCB) ,XIO(S017Sfty.OperLS.SCN2_1Installed) ][XIO(S017Sfty.OperLS.SCN2_2.LCB) ,XIO(S017Sfty.OperLS.SCN2_2Installed) ]OTE(S017Sfty.StaZn1NotBlkd);
				N: [XIC(S017Sfty.OperLS.LC1.O1) ,XIO(S017Sfty.OperLS.LC1Installed) ][XIC(S017Sfty.OperLS.LC2.O1) ,XIO(S017Sfty.OperLS.LC2Installed) ][XIC(S017Sfty.OperLS.LC3.O1) ,XIO(S017Sfty.OperLS.LC3Installed) ][XIC(S017Sfty.OperLS.SCN1_1.O1) ,XIO(S017Sfty.OperLS.SCN1_1Installed) ][XIC(S017Sfty.OperLS.SCN1_2.O1) ,XIO(S017Sfty.OperLS.SCN1_2Installed) ][XIC(S017Sfty.OperLS.SCN2_1.O1) ,XIO(S017Sfty.OperLS.SCN2_1Installed) ][XIC(S017Sfty.OperLS.SCN2_2.O1) ,XIO(S017Sfty.OperLS.SCN2_2Installed) ]OTE(S017Sfty.StaZn1Active);
				N: OTE(S017Sfty.StaZn2NotBlkd);
				N: OTE(S017Sfty.StaZn2Active);
				N: OTE(S017Sfty.StaZn3NotBlkd);
				N: OTE(S017Sfty.StaZn3Active);
				N: XIC(S017Sfty.StaZn1Active)XIC(S017Sfty.StaZn2Active)XIC(S017Sfty.StaZn3Active)OTE(S017Sfty.AllStaLtScrnOK);
				N: XIC(S017Sfty.LoadAssistInstld)OTE(S017Sfty.LoadAssistClear);
				N: XIC(S017Sfty.LoadAssistInstld)OTE(S017Sfty.LoadAssistActive);
				N: XIC(S017Sfty.Oper1Instd)XIC(sEdit.Bit)OTE(S017Sfty.Oper1SwipeStart);
				N: XIC(S017Sfty.Oper2Instd)XIC(sEdit.Bit)OTE(S017Sfty.Oper2SwipeStart);
				N: XIC(sSftyFromStd.ClearToUnlock.6)XIC(sSftyFromStd.ClearToUnlock.7)OTE(S017Sfty.ClearToUnlock);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S018Sfty (Class := Safety,
	                  MAIN := "s_A00_Main",
	                  MODE := 0,
	                  DisableFlag := 0,
	                  UseAsFolder := 0)
		TAG
			sR01AOI : RobotSftyAOI  := [131,[0,[0,0,0],[0,0,0],0,[0,0,0,0,0,0,0,0,0],0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0],0,0,0]];
			sR02AOI : RobotSftyAOI  := [131,[0,[0,0,0],[0,0,0],0,[0,0,0,0,0,0,0,0,0],0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0],0,0,0]];
		END_TAG

		ROUTINE s_A00_Main 
				N: JSR(s_B00_ModStatus,0);
				N: JSR(s_E00_RB01,0);
				N: JSR(s_E00_RB02,0);
				N: JSR(s_Z00_Summary,0);
		END_ROUTINE

		ROUTINE s_B00_ModStatus (Description := "Safety Module IO Status")
				RC: "************************************************************$N"
				    "FRM007 Module Status$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Module 1 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: OTE(S018Sfty.Mod1.RunMode);
				N: OTE(S018Sfty.Mod1.InputStatus);
				N: OTE(S018Sfty.Mod1.OutputStatus);
				RC: "************************************************************$N"
				    "Module 2 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: OTE(S018Sfty.Mod2.RunMode);
				N: OTE(S018Sfty.Mod2.InputStatus);
				N: OTE(S018Sfty.Mod2.OutputStatus);
				RC: "************************************************************$N"
				    "Module Summary$N"
				    "************************************************************";
				N: XIC(S018Sfty.Mod1.RunMode)XIC(S018Sfty.Mod2.RunMode)OTE(S018Sfty.AllModRunMode);
				N: XIC(S018Sfty.Mod1.InputStatus)XIC(S018Sfty.Mod2.InputStatus)OTE(S018Sfty.AllModInStatusOk);
				N: XIC(S018Sfty.Mod1.OutputStatus)XIC(S018Sfty.Mod2.OutputStatus)OTE(S018Sfty.AllModOutStatusOk);
		END_ROUTINE

		ROUTINE s_E00_RB01 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "FRM018 RB01$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S018RB01:SI.Input[0],S018RB01Sfty.I,1);
				N: XIC(S018RB01:SI.RunMode)OTE(S018RB01Sfty.Int.ModRunMode);
				N: XIC(S018RB01:SI.ConnectionFaulted)OTE(S018RB01Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "############################";
				N: OTE(S018RB01Sfty.Int.AreaSafe);
				N: OTE(S018RB01Sfty.Int.Zn1LtScrnActive);
				N: OTE(S018RB01Sfty.Int.Zn2LtScrnActive);
				N: OTE(S018RB01Sfty.Int.Zn3LtScrnActive);
				N: OTE(S018RB01Sfty.Int.Zn4LtScrnActive);
				N: OTE(S018RB01Sfty.Int.Zn5LtScrnActive);
				N: OTE(S018RB01Sfty.Int.Zn6LtScrnActive);
				N: OTE(S018RB01Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S018RB01Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S018RB01Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S018RB01Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS018RB01)OTE(S018RB01Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS018RB01)OTE(S018RB01Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR01AOI,S018RB01Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S018RB01Sfty.O,S018RB01:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_E00_RB02 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "FRM018 RB02$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S018RB02:SI.Input[0],S018RB02Sfty.I,1);
				N: XIC(S018RB02:SI.RunMode)OTE(S018RB02Sfty.Int.ModRunMode);
				N: XIC(S018RB02:SI.ConnectionFaulted)OTE(S018RB02Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "############################";
				N: OTE(S018RB02Sfty.Int.AreaSafe);
				N: OTE(S018RB02Sfty.Int.Zn1LtScrnActive);
				N: OTE(S018RB02Sfty.Int.Zn2LtScrnActive);
				N: OTE(S018RB02Sfty.Int.Zn3LtScrnActive);
				N: OTE(S018RB02Sfty.Int.Zn4LtScrnActive);
				N: OTE(S018RB02Sfty.Int.Zn5LtScrnActive);
				N: OTE(S018RB02Sfty.Int.Zn6LtScrnActive);
				N: OTE(S018RB02Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S018RB02Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S018RB02Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S018RB02Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS018RB02)OTE(S018RB02Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS018RB02)OTE(S018RB02Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR02AOI,S018RB02Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S018RB02Sfty.O,S018RB02:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_Z00_Summary (Description := "Station Safety Summary")
				N: OTU(S018Sfty.Oper1Instd)OTU(S018Sfty.Oper2Instd);
				N: OTU(S018Sfty.LoadAssistInstld);
				N: [XIO(S018Sfty.OperLS.LC1.LCB) ,XIO(S018Sfty.OperLS.LC1Installed) ][XIO(S018Sfty.OperLS.LC2.LCB) ,XIO(S018Sfty.OperLS.LC2Installed) ][XIO(S018Sfty.OperLS.LC3.LCB) ,XIO(S018Sfty.OperLS.LC3Installed) ][XIO(S018Sfty.OperLS.SCN1_1.LCB) ,XIO(S018Sfty.OperLS.SCN1_1Installed) ][XIO(S018Sfty.OperLS.SCN1_2.LCB) ,XIO(S018Sfty.OperLS.SCN1_2Installed) ][XIO(S018Sfty.OperLS.SCN2_1.LCB) ,XIO(S018Sfty.OperLS.SCN2_1Installed) ][XIO(S018Sfty.OperLS.SCN2_2.LCB) ,XIO(S018Sfty.OperLS.SCN2_2Installed) ]OTE(S018Sfty.StaZn1NotBlkd);
				N: [XIC(S018Sfty.OperLS.LC1.O1) ,XIO(S018Sfty.OperLS.LC1Installed) ][XIC(S018Sfty.OperLS.LC2.O1) ,XIO(S018Sfty.OperLS.LC2Installed) ][XIC(S018Sfty.OperLS.LC3.O1) ,XIO(S018Sfty.OperLS.LC3Installed) ][XIC(S018Sfty.OperLS.SCN1_1.O1) ,XIO(S018Sfty.OperLS.SCN1_1Installed) ][XIC(S018Sfty.OperLS.SCN1_2.O1) ,XIO(S018Sfty.OperLS.SCN1_2Installed) ][XIC(S018Sfty.OperLS.SCN2_1.O1) ,XIO(S018Sfty.OperLS.SCN2_1Installed) ][XIC(S018Sfty.OperLS.SCN2_2.O1) ,XIO(S018Sfty.OperLS.SCN2_2Installed) ]OTE(S018Sfty.StaZn1Active);
				N: OTE(S018Sfty.StaZn2NotBlkd);
				N: OTE(S018Sfty.StaZn2Active);
				N: OTE(S018Sfty.StaZn3NotBlkd);
				N: OTE(S018Sfty.StaZn3Active);
				N: XIC(S018Sfty.StaZn1Active)XIC(S018Sfty.StaZn2Active)XIC(S018Sfty.StaZn3Active)OTE(S018Sfty.AllStaLtScrnOK);
				N: XIC(S018Sfty.LoadAssistInstld)OTE(S018Sfty.LoadAssistClear);
				N: XIC(S018Sfty.LoadAssistInstld)OTE(S018Sfty.LoadAssistActive);
				N: XIC(S018Sfty.Oper1Instd)XIC(sEdit.Bit)OTE(S018Sfty.Oper1SwipeStart);
				N: XIC(S018Sfty.Oper2Instd)XIC(sEdit.Bit)OTE(S018Sfty.Oper2SwipeStart);
				N: XIC(sSftyFromStd.ClearToUnlock.8)XIC(sSftyFromStd.ClearToUnlock.9)OTE(S018Sfty.ClearToUnlock);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S019Sfty (Description := "Pull In / Pull Out Cart$NTake In / Take Out Station",
	                  Class := Safety,
	                  MAIN := "s_A00_Main",
	                  MODE := 0,
	                  DisableFlag := 0,
	                  UseAsFolder := 0)
		TAG
			sR01AOI : RobotSftyAOI  := [131,[0,[0,0,0],[0,0,0],0,[0,0,0,0,0,0,0,0,0],0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0],0,0,0]];
		END_TAG

		ROUTINE s_A00_Main 
				N: JSR(s_B00_ModStatus,0);
				N: JSR(s_D00_Estop,0);
				N: JSR(s_D01_LC,0);
				N: JSR(s_D02_OPR,0);
				N: JSR(s_D03_SPD,0);
				N: JSR(s_E01_RB01,0);
				N: JSR(s_E03_TO1,0);
				N: JSR(s_Z00_Summary,0);
		END_ROUTINE

		ROUTINE s_B00_ModStatus (Description := "Safety Module IO Status")
				RC: "************************************************************$N"
				    "FRM007 Module Status$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Module 1 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: XIC(S019SIO1:I.RunMode)OTE(S019Sfty.Mod1.RunMode);
				N: XIC(S019SIO1:I.Pt00InputStatus)XIC(S019SIO1:I.Pt01InputStatus)XIC(S019SIO1:I.Pt02InputStatus)XIC(S019SIO1:I.Pt03InputStatus)XIC(S019SIO1:I.Pt04InputStatus)XIC(S019SIO1:I.Pt05InputStatus)XIC(S019SIO1:I.Pt06InputStatus)XIC(S019SIO1:I.Pt07InputStatus)XIC(S019SIO1:I.Pt08InputStatus)XIC(S019SIO1:I.Pt09InputStatus)XIC(S019SIO1:I.Pt10InputStatus)XIC(S019SIO1:I.Pt11InputStatus)OTE(S019Sfty.Mod1.InputStatus);
				N: XIC(S019SIO1:I.Pt00OutputStatus)XIC(S019SIO1:I.Pt01OutputStatus)XIC(S019SIO1:I.Pt02OutputStatus)XIC(S019SIO1:I.Pt03OutputStatus)OTE(S019Sfty.Mod1.OutputStatus);
				RC: "************************************************************$N"
				    "Module 2 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: XIC(S019SIO2:I.RunMode)OTE(S019Sfty.Mod2.RunMode);
				N: XIC(S019SIO2:I.Pt00InputStatus)XIC(S019SIO2:I.Pt01InputStatus)XIC(S019SIO2:I.Pt02InputStatus)XIC(S019SIO2:I.Pt03InputStatus)XIC(S019SIO2:I.Pt04InputStatus)XIC(S019SIO2:I.Pt05InputStatus)XIC(S019SIO2:I.Pt06InputStatus)XIC(S019SIO2:I.Pt07InputStatus)XIC(S019SIO2:I.Pt08InputStatus)XIC(S019SIO2:I.Pt09InputStatus)XIC(S019SIO2:I.Pt10InputStatus)XIC(S019SIO2:I.Pt11InputStatus)OTE(S019Sfty.Mod2.InputStatus);
				N: XIC(S019SIO2:I.Pt00OutputStatus)XIC(S019SIO2:I.Pt01OutputStatus)XIC(S019SIO2:I.Pt02OutputStatus)XIC(S019SIO2:I.Pt03OutputStatus)OTE(S019Sfty.Mod2.OutputStatus);
				RC: "************************************************************$N"
				    "Module Summary$N"
				    "************************************************************";
				N: XIC(S019Sfty.Mod1.RunMode)XIC(S019Sfty.Mod2.RunMode)OTE(S019Sfty.AllModRunMode);
				N: XIC(S019Sfty.Mod1.InputStatus)XIC(S019Sfty.Mod2.InputStatus)OTE(S019Sfty.AllModInStatusOk);
				N: XIC(S019Sfty.Mod1.OutputStatus)XIC(S019Sfty.Mod2.OutputStatus)OTE(S019Sfty.AllModOutStatusOk);
		END_ROUTINE

		ROUTINE s_D00_Estop (Description := "Emergency Stop Safety Routine")
				RC: "************************************************************$N"
				    "FRM019RT1 Emergency Stop$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "E-Stop$N"
				    "FRM019RT1 E1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S019SIO1:I.Pt00Data)OTE(S019Sfty.E1.EstpChnA);
				N: XIC(S019SIO1:I.Pt01Data)OTE(S019Sfty.E1.EstpChnB);
				N: [XIC(S019Sfty.Oper1SwipeStart) ,XIC(sZ005_040.AnyGateRstPB) ]OTE(S019Sfty.E1.EstpInstCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S019Sfty.E1.EstpInstFltRst);
				N: XIC(S019Sfty.AllModRunMode)ESTOP(S019Sfty.E1.Estop,MANUAL,S019Sfty.E1.EstpChnA,S019Sfty.E1.EstpChnB,S019Sfty.E1.EstpInstCR,S019Sfty.E1.EstpInstFltRst);
		END_ROUTINE

		ROUTINE s_D01_LC (Description := "Light Screen and Safety Scanner Safety Routine")
				RC: "************************************************************$N"
				    "Safety Light Curtains and Scanners$N"
				    "************************************************************";
				N: NOP();
				N: OTE(S019Sfty.OperLS.LC1Installed)OTU(S019Sfty.OperLS.LC2Installed)OTU(S019Sfty.OperLS.LC3Installed)OTE(S019Sfty.OperLS.SCN1_1Installed)OTE(S019Sfty.OperLS.SCN1_2Installed)OTE(S019Sfty.OperLS.SCN2_1Installed)OTE(S019Sfty.OperLS.SCN2_2Installed);
				RC: "************************************************************$N"
				    "LC Instruction$N"
				    "Input Mapping$N"
				    "************************************************************$N"
				    "Edit all required Input mapping rungs with the correct safety input$N"
				    "Edit LC Muting as required. Check Rung description for details";
				N: NOP();
				RC: "************************************************************$N"
				    "S019 LC1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S019SIO1:I.Pt02Data)OTE(S019Sfty.OperLS.LC1ChnAInp);
				N: XIC(S019SIO1:I.Pt03Data)OTE(S019Sfty.OperLS.LC1ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTU(S019Sfty.OperLS.LC1MuteInstalled) ,XIC(sEdit.Bit) XIC(S019Sfty.OperLS.LC1MuteInstalled) OTE(S019Sfty.OperLS.LC1Mute) ];
				RC: "************************************************************$N"
				    "S019 Scanner 1_1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S019SIO1:I.Pt04Data)OTE(S019Sfty.OperLS.SCN1_1ChnAInp);
				N: XIC(S019SIO1:I.Pt05Data)OTE(S019Sfty.OperLS.SCN1_1ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTE(S019Sfty.OperLS.SCN1_1MuteInstalled) ,XIC(S019Sfty.SftyPosDev.SPD1.O1) XIC(S019Sfty.OperLS.SCN1_1MuteInstalled) OTE(S019Sfty.OperLS.SCN1_1Mute) ];
				RC: "************************************************************$N"
				    "S019 Scanner 1_2$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S019SIO1:I.Pt06Data)OTE(S019Sfty.OperLS.SCN1_2ChnAInp);
				N: XIC(S019SIO1:I.Pt07Data)OTE(S019Sfty.OperLS.SCN1_2ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTU(S019Sfty.OperLS.SCN1_2MuteInstalled) ,OTU(sEdit.Bit) XIC(S019Sfty.OperLS.SCN1_2MuteInstalled) OTE(S019Sfty.OperLS.SCN1_2Mute) ];
				RC: "************************************************************$N"
				    "S019 Scanner 2_1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S019SIO2:I.Pt04Data)OTE(S019Sfty.OperLS.SCN2_1ChnAInp);
				N: XIC(S019SIO2:I.Pt05Data)OTE(S019Sfty.OperLS.SCN2_1ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTE(S019Sfty.OperLS.SCN2_1MuteInstalled) ,XIC(S019Sfty.SftyPosDev.SPD2.O1) XIC(S019Sfty.OperLS.SCN2_1MuteInstalled) OTE(S019Sfty.OperLS.SCN2_1Mute) ];
				RC: "************************************************************$N"
				    "S019 Scanner 2_2$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S019SIO2:I.Pt06Data)OTE(S019Sfty.OperLS.SCN2_2ChnAInp);
				N: XIC(S019SIO2:I.Pt07Data)OTE(S019Sfty.OperLS.SCN2_2ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTU(S019Sfty.OperLS.SCN2_2MuteInstalled) ,XIC(sEdit.Bit) XIC(S019Sfty.OperLS.SCN2_2MuteInstalled) OTE(S019Sfty.OperLS.SCN2_2Mute) ];
				RC: "************************************************************$N"
				    "LC Instruction$N"
				    "$N"
				    "DO NOT EDIT AFTER THIS POINT$N"
				    "************************************************************$N"
				    "";
				N: NOP();
				N: [XIC(S019Sfty.OperLS.LC1ChnAInp) ,XIC(S019Sfty.OperLS.LC1MuteInstalled) XIC(S019Sfty.OperLS.LC1Mute) ]OTE(S019Sfty.OperLS.LC1ChnAInst);
				N: [XIC(S019Sfty.OperLS.LC1ChnBInp) ,XIC(S019Sfty.OperLS.LC1MuteInstalled) XIC(S019Sfty.OperLS.LC1Mute) ]OTE(S019Sfty.OperLS.LC1ChnBInst);
				N: XIC(S019Sfty.Oper1SwipeStart)ONS(S019Sfty.OperLS.LC1InsCROns)OTE(S019Sfty.OperLS.LC1InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S019Sfty.OperLS.LC1FltRst);
				N: XIC(S019Sfty.OperLS.LC1Installed)XIC(S019Sfty.AllModRunMode)LC(S019Sfty.OperLS.LC1,MANUAL,S019Sfty.OperLS.LC1ChnAInst,S019Sfty.OperLS.LC1ChnBInst,20,S019Sfty.OperLS.LC1Mute,S019Sfty.OperLS.LC1InsCR,S019Sfty.OperLS.LC1FltRst);
				N: [XIC(S019Sfty.OperLS.SCN1_1ChnAInp) ,XIC(S019Sfty.OperLS.SCN1_1MuteInstalled) XIC(S019Sfty.OperLS.SCN1_1Mute) ]OTE(S019Sfty.OperLS.SCN1_1ChnAInst);
				N: [XIC(S019Sfty.OperLS.SCN1_1ChnBInp) ,XIC(S019Sfty.OperLS.SCN1_1MuteInstalled) XIC(S019Sfty.OperLS.SCN1_1Mute) ]OTE(S019Sfty.OperLS.SCN1_1ChnBInst);
				N: XIC(S019Sfty.Oper1SwipeStart)OTE(S019Sfty.OperLS.SCN1_1InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S019Sfty.OperLS.SCN1_1FltRst);
				N: XIC(S019Sfty.OperLS.SCN1_1Installed)XIC(S019Sfty.AllModRunMode)LC(S019Sfty.OperLS.SCN1_1,MANUAL,S019Sfty.OperLS.SCN1_1ChnAInst,S019Sfty.OperLS.SCN1_1ChnBInst,20,S019Sfty.OperLS.SCN1_1Mute,S019Sfty.OperLS.SCN1_1InsCR,S019Sfty.OperLS.SCN1_1FltRst);
				N: [XIC(S019Sfty.OperLS.SCN1_2ChnAInp) ,XIC(S019Sfty.OperLS.SCN1_2MuteInstalled) XIC(S019Sfty.OperLS.SCN1_2Mute) ]OTE(S019Sfty.OperLS.SCN1_2ChnAInst);
				N: [XIC(S019Sfty.OperLS.SCN1_2ChnBInp) ,XIC(S019Sfty.OperLS.SCN1_2MuteInstalled) XIC(S019Sfty.OperLS.SCN1_2Mute) ]OTE(S019Sfty.OperLS.SCN1_2ChnBInst);
				N: XIC(S019Sfty.Oper1SwipeStart)OTE(S019Sfty.OperLS.SCN1_2InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S019Sfty.OperLS.SCN1_2FltRst);
				N: XIC(S019Sfty.OperLS.SCN1_2Installed)XIC(S019Sfty.AllModRunMode)LC(S019Sfty.OperLS.SCN1_2,MANUAL,S019Sfty.OperLS.SCN1_2ChnAInst,S019Sfty.OperLS.SCN1_2ChnBInst,20,S019Sfty.OperLS.SCN1_2Mute,S019Sfty.OperLS.SCN1_2InsCR,S019Sfty.OperLS.SCN1_2FltRst);
				N: [XIC(S019Sfty.OperLS.SCN2_1ChnAInp) ,XIC(S019Sfty.OperLS.SCN2_1MuteInstalled) XIC(S019Sfty.OperLS.SCN2_1Mute) ]OTE(S019Sfty.OperLS.SCN2_1ChnAInst);
				N: [XIC(S019Sfty.OperLS.SCN2_1ChnBInp) ,XIC(S019Sfty.OperLS.SCN2_1MuteInstalled) XIC(S019Sfty.OperLS.SCN2_1Mute) ]OTE(S019Sfty.OperLS.SCN2_1ChnBInst);
				N: XIC(S019Sfty.Oper1SwipeStart)OTE(S019Sfty.OperLS.SCN2_1InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S019Sfty.OperLS.SCN2_1FltRst);
				N: XIC(S019Sfty.OperLS.SCN2_1Installed)XIC(S019Sfty.AllModRunMode)LC(S019Sfty.OperLS.SCN2_1,MANUAL,S019Sfty.OperLS.SCN2_1ChnAInst,S019Sfty.OperLS.SCN2_1ChnBInst,20,S019Sfty.OperLS.SCN2_1Mute,S019Sfty.OperLS.SCN2_1InsCR,S019Sfty.OperLS.SCN2_1FltRst);
				N: [XIC(S019Sfty.OperLS.SCN2_2ChnAInp) ,XIC(S019Sfty.OperLS.SCN2_2MuteInstalled) XIC(S019Sfty.OperLS.SCN2_2Mute) ]OTE(S019Sfty.OperLS.SCN2_2ChnAInst);
				N: [XIC(S019Sfty.OperLS.SCN2_2ChnBInp) ,XIC(S019Sfty.OperLS.SCN2_2MuteInstalled) XIC(S019Sfty.OperLS.SCN2_2Mute) ]OTE(S019Sfty.OperLS.SCN2_2ChnBInst);
				N: XIC(S019Sfty.Oper1SwipeStart)OTE(S019Sfty.OperLS.SCN2_2InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S019Sfty.OperLS.SCN2_2FltRst);
				N: XIC(S019Sfty.OperLS.SCN2_2Installed)XIC(S019Sfty.AllModRunMode)LC(S019Sfty.OperLS.SCN2_2,MANUAL,S019Sfty.OperLS.SCN2_2ChnAInst,S019Sfty.OperLS.SCN2_2ChnBInst,20,S019Sfty.OperLS.SCN2_2Mute,S019Sfty.OperLS.SCN2_2InsCR,S019Sfty.OperLS.SCN2_2FltRst);
		END_ROUTINE

		ROUTINE s_D02_OPR (Description := "Operator Finger Swipe Safety Routine")
				RC: "************************************************************$N"
				    "FRM019 RT Cycle Start$N"
				    "Finger Swipe$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S019Sfty.Oper1Instd)FingerSwipe(S019Sfty.OPR1,S019Sfty.Oper1SwipeStart);
				N: XIC(S019Sfty.Oper2Instd)FingerSwipe(S019Sfty.OPR2,S019Sfty.Oper2SwipeStart);
		END_ROUTINE

		ROUTINE s_D03_SPD (Description := "Safety Position Devices Routine")
				RC: "************************************************************$N"
				    "FRM019 Safety Position Devices$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S019SIO1:I.Pt08Data)OTE(S019Sfty.SftyPosDev.SPD1ChnA);
				N: XIC(S019SIO1:I.Pt09Data)OTE(S019Sfty.SftyPosDev.SPD1ChnB);
				N: [XIC(S019Sfty.Oper1SwipeStart) ,XIC(sZ005_040.AnyGateRstPB) ]ONS(S019Sfty.SftyPosDev.SPD1InsCROns)OTE(S019Sfty.SftyPosDev.SPD1InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S019Sfty.SftyPosDev.SPD1InsFltRst);
				N: XIC(S019Sfty.AllModRunMode)RIN(S019Sfty.SftyPosDev.SPD1,AUTOMATIC,S019Sfty.SftyPosDev.SPD1ChnA,S019Sfty.SftyPosDev.SPD1ChnB,S019Sfty.SftyPosDev.SPD1InsCR,S019Sfty.SftyPosDev.SPD1InsFltRst);
				RC: "************************************************************$N"
				    "FRM019 Safety Position Devices$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S019SIO2:I.Pt08Data)OTE(S019Sfty.SftyPosDev.SPD2ChnA);
				N: XIC(S019SIO2:I.Pt09Data)OTE(S019Sfty.SftyPosDev.SPD2ChnB);
				N: [XIC(S019Sfty.Oper1SwipeStart) ,XIC(sZ005_040.AnyGateRstPB) ]ONS(S019Sfty.SftyPosDev.SPD2InsCROns)OTE(S019Sfty.SftyPosDev.SPD2InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S019Sfty.SftyPosDev.SPD2InsFltRst);
				N: XIC(S019Sfty.AllModRunMode)RIN(S019Sfty.SftyPosDev.SPD2,AUTOMATIC,S019Sfty.SftyPosDev.SPD2ChnA,S019Sfty.SftyPosDev.SPD2ChnB,S019Sfty.SftyPosDev.SPD2InsCR,S019Sfty.SftyPosDev.SPD2InsFltRst);
		END_ROUTINE

		ROUTINE s_E01_RB01 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "FRM019 RB01$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S019RB01:SI.Input[0],S019RB01Sfty.I,1);
				N: XIC(S019RB01:SI.RunMode)OTE(S019RB01Sfty.Int.ModRunMode);
				N: XIC(S019RB01:SI.ConnectionFaulted)OTE(S019RB01Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "############################";
				N: OTE(S019RB01Sfty.Int.AreaSafe);
				N: XIC(S019Sfty.StaZn1Active)OTE(S019RB01Sfty.Int.Zn1LtScrnActive);
				N: OTE(S019RB01Sfty.Int.Zn2LtScrnActive);
				N: OTE(S019RB01Sfty.Int.Zn3LtScrnActive);
				N: OTE(S019RB01Sfty.Int.Zn4LtScrnActive);
				N: OTE(S019RB01Sfty.Int.Zn5LtScrnActive);
				N: OTE(S019RB01Sfty.Int.Zn6LtScrnActive);
				N: OTE(S019RB01Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S019RB01Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S019RB01Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S019RB01Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS019RB01)OTE(S019RB01Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS019RB01)OTE(S019RB01Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR01AOI,S019RB01Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S019RB01Sfty.O,S019RB01:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_E03_TO1 (Description := "Station Take In / Take Out Safety Routine")
				RC: "************************************************************$N"
				    "FRM019 RT1 & RT2$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Minor Motion Enable$N"
				    "************************************************************$N"
				    "$N"
				    "This feature is disabled by default.$N"
				    "Use needs to be approved by Controls Department";
				N: OTU(S019Sfty.MinorMtnEnbld);
				N: XIC(sZ005_040.AllEStopsOk)[XIC(sZ005_040.PerimeterSafe) XIC(S019Sfty.AllStaLtScrnOK) ,XIC(sZ005_040.AnyBypassSwOn) ][XIC(S019Sfty.FX1.MotionEnbl) ,XIC(S019Sfty.FX1.SoftStartPwrOn) ]OTE(S019Sfty.FX1.SoftStartPwrOn);
				N: XIC(sZ005_040.PowerEnbld)XIC(S019Sfty.AllStaLtScrnOK)OTE(S019Sfty.FX1.MotionEnbl);
				RC: "Soft Start Valve Power Output$N"
				    "************************************************************";
				N: XIC(S019Sfty.FX1.SoftStartPwrOn)[OTE(S019SIO1:O.Pt00Data) ,OTE(S019SIO1:O.Pt01Data) ];
				RC: "Valve Manifold DC Power Output$N"
				    "************************************************************";
				N: XIC(S019Sfty.FX1.MotionEnbl)[OTE(S019SIO1:O.Pt02Data) ,OTE(S019SIO1:O.Pt03Data) ,OTE(S019SIO2:O.Pt02Data) ,OTE(S019SIO2:O.Pt03Data) ];
		END_ROUTINE

		ROUTINE s_Z00_Summary (Description := "Station Safety Summary")
				RC: "***********************************************************$N"
				    "Station Status to Zone_P1$N"
				    "***********************************************************$N"
				    "";
				N: NOP();
				N: OTE(S019Sfty.Oper1Instd)OTU(S019Sfty.Oper2Instd);
				N: OTU(S019Sfty.LoadAssistInstld);
				N: [XIO(S019Sfty.OperLS.LC1.LCB) ,XIO(S019Sfty.OperLS.LC1Installed) ][XIO(S019Sfty.OperLS.LC2.LCB) ,XIO(S019Sfty.OperLS.LC2Installed) ][XIO(S019Sfty.OperLS.LC3.LCB) ,XIO(S019Sfty.OperLS.LC3Installed) ][XIO(S019Sfty.OperLS.SCN1_1.LCB) ,XIO(S019Sfty.OperLS.SCN1_1Installed) ][XIO(S019Sfty.OperLS.SCN1_2.LCB) ,XIO(S019Sfty.OperLS.SCN1_2Installed) ][XIO(S019Sfty.OperLS.SCN2_1.LCB) ,XIO(S019Sfty.OperLS.SCN2_1Installed) ][XIO(S019Sfty.OperLS.SCN2_2.LCB) ,XIO(S019Sfty.OperLS.SCN2_2Installed) ]OTE(S019Sfty.StaZn1NotBlkd);
				N: [XIC(S019Sfty.OperLS.LC1.O1) ,XIO(S019Sfty.OperLS.LC1Installed) ][XIC(S019Sfty.OperLS.LC2.O1) ,XIO(S019Sfty.OperLS.LC2Installed) ][XIC(S019Sfty.OperLS.LC3.O1) ,XIO(S019Sfty.OperLS.LC3Installed) ][XIC(S019Sfty.OperLS.SCN1_1.O1) ,XIO(S019Sfty.OperLS.SCN1_1Installed) ][XIC(S019Sfty.OperLS.SCN1_2.O1) ,XIO(S019Sfty.OperLS.SCN1_2Installed) ][XIC(S019Sfty.OperLS.SCN2_1.O1) ,XIO(S019Sfty.OperLS.SCN2_1Installed) ][XIC(S019Sfty.OperLS.SCN2_2.O1) ,XIO(S019Sfty.OperLS.SCN2_2Installed) ]OTE(S019Sfty.StaZn1Active);
				N: OTE(S019Sfty.StaZn2NotBlkd);
				N: OTE(S019Sfty.StaZn2Active);
				N: OTE(S019Sfty.StaZn3NotBlkd);
				N: OTE(S019Sfty.StaZn3Active);
				N: XIC(S019Sfty.StaZn1Active)XIC(S019Sfty.StaZn2Active)XIC(S019Sfty.StaZn3Active)OTE(S019Sfty.AllStaLtScrnOK);
				N: XIC(S019Sfty.LoadAssistInstld)OTE(S019Sfty.LoadAssistClear);
				N: XIC(S019Sfty.LoadAssistInstld)OTE(S019Sfty.LoadAssistActive);
				N: XIC(S019Sfty.Oper1Instd)XIC(sEdit.Bit)OTE(S019Sfty.Oper1SwipeStart);
				N: XIC(S019Sfty.Oper2Instd)XIC(sEdit.Bit)OTE(S019Sfty.Oper2SwipeStart);
				N: XIC(sSftyFromStd.ClearToUnlock.10)OTE(S019Sfty.ClearToUnlock);
				RC: "##########################$N"
				    "Cart in Position$N"
				    "Safety$N"
				    "##########################";
				N: XIC(S019Sfty.SftyPosDev.SPD1.O1)OTE(S019Sfty.Cart1InPos);
				N: XIC(S019Sfty.SftyPosDev.SPD2.O1)OTE(S019Sfty.Cart2InPos);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S019TO1 (Description := "Take In / Take Out Station",
	                 Class := Standard,
	                 MAIN := "A00_Main",
	                 MODE := 0,
	                 DisableFlag := 0,
	                 UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE A00_Main 
				N: JSR(B01_MapInputs,0);
				N: JSR(B00_NetworkDiag,0);
				N: JSR(C00_Operator,0);
				N: JSR(D00_Act1_Clamp1,0);
				N: JSR(D01_MotionSeq,0);
				N: JSR(D02_PartPresent,0);
				N: JSR(L00_Lights,0);
				N: JSR(P00_Station,0);
				N: JSR(P01_StationToSfty,0);
				N: JSR(S00_HMISequence,0);
				N: JSR(Y00_Alarms_L1,0);
				N: JSR(Y01_Alarms_L2,0);
				N: JSR(Y02_Alarms_L3,0);
				N: JSR(Z00_MapOutputs,0);
		END_ROUTINE

		ROUTINE B00_NetworkDiag 
				RC: "************************************************************$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "FRM005 Ethernet Devices Diagnostic$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Robot$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: GSV(Module,S019RB01,EntryStatus,S019RB01.ENet.ObjectStatus)[MEQ(S019RB01.ENet.ObjectStatus,61440,24576) OTE(S019RB01.ENet.Inhibited) ,MEQ(S019RB01.ENet.ObjectStatus,61440,16384) OTE(S019RB01.ENet.CommOK) ];
				N: GSV(Module,S019TO1VM1,EntryStatus,S019TO1VM1.ENet.ObjectStatus)[MEQ(S019TO1VM1.ENet.ObjectStatus,61440,24576) OTE(S019TO1VM1.ENet.Inhibited) ,MEQ(S019TO1VM1.ENet.ObjectStatus,61440,16384) OTE(S019TO1VM1.ENet.CommOK) ];
				N: GSV(Module,S019TO1MIO1,EntryStatus,S019TO1MIO1.ENet.ObjectStatus)[MEQ(S019TO1MIO1.ENet.ObjectStatus,61440,24576) OTE(S019TO1MIO1.ENet.Inhibited) ,MEQ(S019TO1MIO1.ENet.ObjectStatus,61440,16384) OTE(S019TO1MIO1.ENet.CommOK) ];
				N: GSV(Module,S019SIO1,EntryStatus,S019TO1SIO1.ENet.ObjectStatus)[MEQ(S019TO1SIO1.ENet.ObjectStatus,61440,24576) OTE(S019TO1SIO1.ENet.Inhibited) ,MEQ(S019TO1SIO1.ENet.ObjectStatus,61440,16384) OTE(S019TO1SIO1.ENet.CommOK) ];
				N: GSV(Module,S019SIO2,EntryStatus,S019TO1SIO2.ENet.ObjectStatus)[MEQ(S019TO1SIO2.ENet.ObjectStatus,61440,24576) OTE(S019TO1SIO2.ENet.Inhibited) ,MEQ(S019TO1SIO2.ENet.ObjectStatus,61440,16384) OTE(S019TO1SIO2.ENet.CommOK) ];
				N: XIC(S019RB01.ENet.CommOK)XIC(S019TO1VM1.ENet.CommOK)XIC(S019TO1MIO1.ENet.CommOK)XIC(S019TO1SIO1.ENet.CommOK)XIC(S019TO1SIO2.ENet.CommOK)OTE(S019TO1.Int.AllModCommOk);
		END_ROUTINE

		ROUTINE B01_MapInputs 
				RC: "************************************************************$N"
				    "Map Devices Inputs$N"
				    "************************************************************";
				N: NOP();
				N: [XIO(S019TO1VM1.ENet.CommOK) FLL(0,S019TO1VM1.I1,4) ,XIC(S019TO1VM1.ENet.CommOK) COP(S019TO1VM1:I.Data[0],S019TO1VM1.I1,1) ];
				RC: "************************************************************$N"
				    "Configuration Bits: 1=Active, 0=NotActive $N"
				    "Data[16].0-7 - Channels 00-07$N"
				    "Data[17].0-7 - Channels 08-15$N"
				    "************************************************************$N"
				    "Required for Turck MIO - TBEN-L4-16DXP$N"
				    "";
				N: [XIO(S019TO1MIO1.ENet.CommOK) FLL(0,S019TO1MIO1.I,1) ,XIC(S019TO1MIO1.ENet.CommOK) [COP(S019TO1MIO1:I.Data[1],S019TO1MIO1.I,1) ,MOV(2#00000000,S019TO1MIO1:C.Data[16]) MOV(2#00000000,S019TO1MIO1:C.Data[17]) ] ];
				RC: "************************************************************$N"
				    "Station Robots in Auto$N"
				    "$N"
				    "Add SxxRBxx.I1.AUTO for every Robot$N"
				    "************************************************************$N"
				    "";
				N: XIC(S019RB01.I1.Auto)OTE(S019TO1.Int.RbtsInAuto);
				RC: "************************************************************$N"
				    "Station Robots Teach off$N"
				    "$N"
				    "Add SxxRBxxSfty.Int.TeachOff for every Robot$N"
				    "************************************************************$N"
				    "";
				N: XIC(S019RB01.Int.TeachSSOff)OTE(S019TO1.Int.RbtsTeachOff);
				RC: "************************************************************$N"
				    "Station Air On$N"
				    "$N"
				    "Replace Edit.Bit with air flow switch input$N"
				    "************************************************************$N"
				    "";
				N: [XIC(Edit.Bit) MOV(1500,S019TO1.Int.AirOnTmr.PRE) TOF(S019TO1.Int.AirOnTmr,?,?) ,XIC(S019TO1.Int.AirOnTmr.DN) OTE(S019TO1.Int.AirOnOk) ];
				N: XIC(Edit.Bit)OTE(S019TO1.Int.FaultResetPB);
				RC: "************************************************************$N"
				    "Known Position$N"
				    "************************************************************";
				N: XIO(S019TO1.Int.AtHomePos)XIO(S019TO1.Int.AtWorkPos1)XIO(S019TO1.Int.AtWorkPos2)XIO(S019TO1.Int.AtWorkPos3)XIC(Edit.Bit)MOV(5000,S019TO1.Int.UnknownPosTmr.PRE)TON(S019TO1.Int.UnknownPosTmr,?,?);
				N: XIO(S019TO1.Int.UnknownPosTmr.EN)XIC(Edit.Bit)OTE(S019TO1.Int.KnownPos);
		END_ROUTINE

		ROUTINE C00_Operator 
				RC: "************************************************************$N"
				    "Operator Routine$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Operator Load Required$N"
				    "$N"
				    "Use required Robot Safety Zone Clear, Clear of Tool, Load Position and Conditions$N"
				    "************************************************************";
				N: XIC(S019RB01Sfty.Int.SftyZn1)XIC(S019RB01.Int.ClearOfTool1)XIC(S019TO1.Int.LoadPos1)XIC(S019TO1.Int.ReqEntry)XIC(S019TO1.Int.TakeInReq)XIC(Edit.Bit)XIO(S019TO1.Int.DryCycle)XIO(S019TO1.Oper.DisableLoad)OTE(S019TO1.Oper.Load1Req);
				N: XIC(S019TO1.Oper.Load1Req)OTE(S019TO1.Oper.AnyOperLdReq);
				RC: "************************************************************$N"
				    "Operator Unload Required$N"
				    "$N"
				    "Use required Robot Safety Zone Clear, Clear of Tool, Unload Position and Conditions$N"
				    "************************************************************";
				N: XIC(S019RB01Sfty.Int.SftyZn1)XIC(S019RB01.Int.ClearOfTool1)XIC(S019TO1.Int.ClrToUnld)XIC(S019TO1.Int.TakeOutReq)XIC(Edit.Bit)XIO(S019TO1.Int.DryCycle)OTE(S019TO1.Oper.UnldReq);
				N: [XIO(S019TO1.Oper.CycleStartPB) ,XIC(S019TO1.Oper.AntiTieDown) ]XIC(S019TO1.Oper.CycleStartReset)OTE(S019TO1.Oper.AntiTieDown);
				RC: "Change Edit.debug and Edit.Bit with CycleStart Signals";
				N: XIC(S019TO1.Int.AutoSel)[XIC(S019TO1.Int.AutoMode) XIC(S019TO1.Oper.AtWorkPos) XIC(S019TO1.Oper.AnyOperLdReq) [XIC(S019TO1.Oper.CycleStartPB) ,XIC(S019TO1.Int.DryCycle) XIC(S019TO1.Oper.DryCycStrtMem) XIC(Edit.Bit) ] XIC(Edit.Debug) XIC(Edit.Bit) ,XIC(S019TO1.Oper.CycleStartSetup) ]XIC(S019TO1.Oper.AntiTieDown)[XIC(S019TO1.Int.DryCycle) OTL(S019TO1.Oper.DryCycStrtMem) ,OTE(S019TO1.Oper.CycleStartSetup) ];
				N: XIO(S019TO1.Int.DryCycle)[XIC(S019TO1.Int.AtHomePos) ,XIC(Edit.Debug) ]OTU(S019TO1.Oper.DryCycStrtMem);
				RC: "Check Cycle Start Command. May Require Additional Cycle Start bits per load";
				N: XIC(S019TO1.Oper.AntiTieDown)[XIC(S019TO1.Oper.CycleStartSetup) ,XIC(S019TO1.Oper.CycleStart) XIC(Edit.Debug) XIC(Edit.Bit) ]XIC(S019TO1.Int.LoadComp)XIO(S019TO1.Oper.DisableLoad)[OTE(S019TO1.Oper.CycleStart) ,XIC(Edit.Debug) XIC(Edit.Bit) NOP() ];
				N: XIC(S019Sfty.AllStaLtScrnOK)XIO(S019TO1.Oper.CycleResetPB)XIO(S019TO1.Int.TaskComp)XIO(S019TO1.Int.CycComp)OTE(S019TO1.Oper.CycleStartReset);
				N: XIC(S019TO1.Int.AutoMode)XIC(S019TO1.Oper.CycleResetPB)XIO(S019TO1.Oper.CycleStartPB)[MOV(1000,S019TO1.Oper.CycleResetDlyTmr.PRE) TON(S019TO1.Oper.CycleResetDlyTmr,?,?) ,XIC(S019TO1.Oper.CycleResetDlyTmr.DN) OTE(S019TO1.Oper.CycleReset) ];
				N: XIO(S019TO1.Oper.ClrToEnter)[XIO(S019Sfty.StaZn1NotBlkd) ,XIO(S019Sfty.StaZn2NotBlkd) ,XIO(S019Sfty.StaZn3NotBlkd) ]OTL(S019TO1.Oper.LtScrnFlt);
				N: [XIC(S019TO1.Oper.CycleStartPB) ,XIC(S019TO1.Oper.CycleResetPB) ]XIC(S019Sfty.StaZn1NotBlkd)XIC(S019Sfty.StaZn2NotBlkd)XIC(S019Sfty.StaZn3NotBlkd)OTU(S019TO1.Oper.LtScrnFlt);
				RC: "Example Logic$N"
				    "Edit As Required";
				N: XIC(Edit.Bit)[XIC(S019TO1.SR.Int.Model1) [XIO(S019TO1.Int.Proc1Comp) XIO(S019TO1.Int.Proc2Comp) XIC(S019TO1.Int.LoadPos1) ,XIC(S019TO1.Int.Proc2Comp) XIO(S019TO1.Int.Proc3Comp) XIC(S019TO1.Int.LoadPos2) ] ,XIC(S019TO1.SR.Int.Model2) XIO(S019TO1.Int.Proc1Comp) XIC(S019TO1.Int.LoadPos3) ]OTE(S019TO1.Oper.AtWorkPos);
				RC: "************************************************************$N"
				    "Operator Cycle Time$N"
				    "************************************************************";
				N: NOP();
				N: MOV(60000,S019TO1.Oper.CycleTime)MUL(S019TO1.Oper.CycleTime,0.7,S019TO1.Oper.CycleTime75);
				N: XIC(S019TO1.Int.AutoMode)XIC(S019TO1.Oper.ClrToEnter)XIO(S019TO1.Oper.DisableLoad)MOV(3600000,S019TO1.Oper.CycTimeTmr.PRE)RTO(S019TO1.Oper.CycTimeTmr,?,?);
				N: GRT(S019TO1.Oper.CycTimeTmr.ACC,S019TO1.Oper.CycleTime75)OTE(S019TO1.Oper.CycNearOT);
				N: GRT(S019TO1.Oper.CycTimeTmr.ACC,S019TO1.Oper.CycleTime)OTE(S019TO1.Oper.CycOverTime);
				N: XIC(S019TO1.Oper.CycleStart)ONS(S019TO1.Oper.CycleTimeOns)[MOV(S019TO1.Oper.CycTimeTmr.ACC,S019TO1.Oper.CycleTimeStore) ,RES(S019TO1.Oper.CycTimeTmr) ];
		END_ROUTINE

		ROUTINE D00_Act1_Clamp1 (Description := "Actuator Standard Routine")
				RC: "########################$N"
				    "Actuator Standard Logic$N"
				    "########################$N"
				    "$N"
				    "Add Control for every used Actuator$N"
				    "Edit Only Work and Home Descriptions$N"
				    "Do Not edit Work/Home Control Logic";
				N: NOP();
				RC: "########################$N"
				    "Actuator[1]$N"
				    "Clamp 1$N"
				    "Cart Lock$N"
				    "CL1, CL2$N"
				    "########################";
				N: NOP();
				N: MOV('Close',S019TO1.Act[1].WorkCmdDesc)MOV('Open',S019TO1.Act[1].HomeCmdDesc);
				RC: "########################$N"
				    "Work Control Logic$N"
				    "########################";
				N: [XIC(S019TO1.Act[1].Home.AutoCmd) ,XIC(S019TO1.Act[1].Home.ManualCmdPB) ]XIC(S019TO1.Act[1].Home.Clr)OTE(S019TO1.Act[1].Work.SealRst);
				N: [XIC(S019TO1.Int.AutoMode) XIC(S019TO1.Act[1].Work.AutoCmd) ,XIC(S019TO1.Int.ManualMode) XIC(S019TO1.Act[1].Work.ManualCmdPB) ,XIC(S019TO1.Act[1].Work.Out) XIC(S019TO1.Act[1].Work.Seal) ]XIC(S019TO1.Act[1].Work.Clr)XIO(S019TO1.Act[1].Work.SealRst)XIC(S019TO1.Act[1].ActMtnEnbld)OTE(S019TO1.Act[1].Work.Out);
				N: XIC(S019TO1.Act[1].Work.Out)OTL(S019TO1.Act[1].Work.Mem);
				N: XIC(S019TO1.Act[1].Home.Out)OTU(S019TO1.Act[1].Work.Mem);
				N: [XIC(S019TO1.Act[1].Work.Pxs.0) XIO(S019TO1.Act[1].Home.Pxs.0) ,XIO(S019TO1.Act[1].Installed.0) ][XIC(S019TO1.Act[1].Work.Pxs.1) XIO(S019TO1.Act[1].Home.Pxs.1) ,XIO(S019TO1.Act[1].Installed.1) ][XIC(S019TO1.Act[1].Work.Pxs.2) XIO(S019TO1.Act[1].Home.Pxs.2) ,XIO(S019TO1.Act[1].Installed.2) ][XIC(S019TO1.Act[1].Work.Pxs.3) XIO(S019TO1.Act[1].Home.Pxs.3) ,XIO(S019TO1.Act[1].Installed.3) ][XIC(S019TO1.Act[1].Work.Pxs.4) XIO(S019TO1.Act[1].Home.Pxs.4) ,XIO(S019TO1.Act[1].Installed.4) ][XIC(S019TO1.Act[1].Work.Pxs.5) XIO(S019TO1.Act[1].Home.Pxs.5) ,XIO(S019TO1.Act[1].Installed.5) ][XIC(S019TO1.Act[1].Work.Pxs.6) XIO(S019TO1.Act[1].Home.Pxs.6) ,XIO(S019TO1.Act[1].Installed.6) ][XIC(S019TO1.Act[1].Work.Pxs.7) XIO(S019TO1.Act[1].Home.Pxs.7) ,XIO(S019TO1.Act[1].Installed.7) ]OTE(S019TO1.Act[1].Work.Comp);
				N: [XIC(S019TO1.Act[1].Work.Out) [RTO(S019TO1.Act[1].Work.FltTmr,?,?) ,XIC(S019TO1.Act[1].Work.Comp) OTL(S019TO1.Act[1].Work.FltTmr.DN) ] ,XIC(S019TO1.Act[1].Home.Out) RES(S019TO1.Act[1].Work.FltTmr) ,XIC(S019TO1.Act[1].Work.FltTmr.DN) XIO(S019TO1.Act[1].Work.Comp) XIC(S019TO1.Int.PPActFltsEnbld) [OTE(S019TO1.Act[1].Work.MtnFlt) ,XIC(S019TO1.Act[1].Home.Comp) OTE(S019TO1.Act[1].Work.VlvFlt) ] ];
				RC: "########################$N"
				    "Home Control Logic$N"
				    "########################";
				N: [XIC(S019TO1.Act[1].Work.AutoCmd) ,XIC(S019TO1.Act[1].Work.ManualCmdPB) ]XIC(S019TO1.Act[1].Work.Clr)OTE(S019TO1.Act[1].Home.SealRst);
				N: [XIC(S019TO1.Int.AutoMode) XIC(S019TO1.Act[1].Home.AutoCmd) ,XIC(S019TO1.Int.ManualMode) XIC(S019TO1.Act[1].Home.ManualCmdPB) ,XIC(S019TO1.Act[1].Home.Out) XIC(S019TO1.Act[1].Home.Seal) ]XIC(S019TO1.Act[1].Home.Clr)XIO(S019TO1.Act[1].Home.SealRst)XIC(S019TO1.Act[1].ActMtnEnbld)OTE(S019TO1.Act[1].Home.Out);
				N: XIC(S019TO1.Act[1].Home.Out)OTL(S019TO1.Act[1].Home.Mem);
				N: XIC(S019TO1.Act[1].Work.Out)OTU(S019TO1.Act[1].Home.Mem);
				N: [XIC(S019TO1.Act[1].Home.Pxs.0) XIO(S019TO1.Act[1].Work.Pxs.0) ,XIO(S019TO1.Act[1].Installed.0) ][XIC(S019TO1.Act[1].Home.Pxs.1) XIO(S019TO1.Act[1].Work.Pxs.1) ,XIO(S019TO1.Act[1].Installed.1) ][XIC(S019TO1.Act[1].Home.Pxs.2) XIO(S019TO1.Act[1].Work.Pxs.2) ,XIO(S019TO1.Act[1].Installed.2) ][XIC(S019TO1.Act[1].Home.Pxs.3) XIO(S019TO1.Act[1].Work.Pxs.3) ,XIO(S019TO1.Act[1].Installed.3) ][XIC(S019TO1.Act[1].Home.Pxs.4) XIO(S019TO1.Act[1].Work.Pxs.4) ,XIO(S019TO1.Act[1].Installed.4) ][XIC(S019TO1.Act[1].Home.Pxs.5) XIO(S019TO1.Act[1].Work.Pxs.5) ,XIO(S019TO1.Act[1].Installed.5) ][XIC(S019TO1.Act[1].Home.Pxs.6) XIO(S019TO1.Act[1].Work.Pxs.6) ,XIO(S019TO1.Act[1].Installed.6) ][XIC(S019TO1.Act[1].Home.Pxs.7) XIO(S019TO1.Act[1].Work.Pxs.7) ,XIO(S019TO1.Act[1].Installed.7) ]OTE(S019TO1.Act[1].Home.Comp);
				N: [XIC(S019TO1.Act[1].Home.Out) [RTO(S019TO1.Act[1].Home.FltTmr,?,?) ,XIC(S019TO1.Act[1].Home.Comp) OTL(S019TO1.Act[1].Home.FltTmr.DN) ] ,XIC(S019TO1.Act[1].Work.Out) RES(S019TO1.Act[1].Home.FltTmr) ,XIC(S019TO1.Act[1].Home.FltTmr.DN) XIO(S019TO1.Act[1].Home.Comp) XIC(S019TO1.Int.PPActFltsEnbld) [OTE(S019TO1.Act[1].Home.MtnFlt) ,XIC(S019TO1.Act[1].Work.Comp) OTE(S019TO1.Act[1].Home.VlvFlt) ] ];
				RC: "########################$N"
				    "Actuator Fault$N"
				    "########################";
				N: [XIC(S019TO1.Act[1].Home.MtnFlt) ,XIC(S019TO1.Act[1].Home.VlvFlt) ,XIC(S019TO1.Act[1].Work.MtnFlt) ,XIC(S019TO1.Act[1].Work.VlvFlt) ]OTE(S019TO1.Act[1].Faulted);
		END_ROUTINE

		ROUTINE D01_MotionSeq (Description := "Actuator Motion and Sequence Control")
				RC: "************************************************************$N"
				    "STATION ACTUATOR$N"
				    "MOTION AND SEQUENCE$N"
				    "LOGIC$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Actuator 1 Mapping$N"
				    "$N"
				    "Clamp 1$N"
				    "Cart Lock$N"
				    "CL1, CL2$N"
				    "************************************************************";
				N: [OTE(S019TO1.Act[1].Installed.0) ,XIC(Edit.Bit) OTE(S019TO1.Act[1].Work.Pxs.0) ,XIC(Edit.Bit) OTE(S019TO1.Act[1].Home.Pxs.0) ][OTE(S019TO1.Act[1].Installed.1) ,XIC(Edit.Bit) OTE(S019TO1.Act[1].Work.Pxs.1) ,XIC(Edit.Bit) OTE(S019TO1.Act[1].Home.Pxs.1) ];
				RC: "************************************************************$N"
				    "Actuator Motion Interlock$N"
				    "************************************************************$N"
				    "$N"
				    "Edit.Bit May be used for Safety Manual Motion Enable$N"
				    "Future";
				N: [XIC(S019Sfty.FX1.MotionEnbl) OTE(S019TO1.Act[1].ActMtnIntlk.Inp_Intlk00) ,XIC(Edit.Bit) OTE(S019TO1.Act[1].ActMtnIntlk.Inp_Intlk01) ,XIC(Edit.Bit) OTE(S019TO1.Act[1].ActMtnIntlk.Inp_Intlk02) ,P_Intlk(S019TO1.Act[1].ActMtnIntlk) ,XIC(S019TO1.Act[1].ActMtnIntlk.Sts_IntlkOK) OTE(S019TO1.Act[1].ActMtnEnbld) ];
				RC: "#############################$N"
				    "S019TO1$N"
				    "Sequence Control$N"
				    "#############################$N"
				    "$N"
				    "Add Logic for all Actuators (Act[X]) in the tool sequence of operation.$N"
				    "$N"
				    "Example:$N"
				    "Act[1] to Work$N"
				    "Act[2] To Work$N"
				    "Act[1] To Home$N"
				    "Act[2] To Home";
				N: NOP();
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S019RB01.Int.ClearOfPick1)OTE(S019TO1.Act[1].Work.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S019TO1.Act[1].Work.FltTmr.PRE)XIC(S019TO1.Int.AutoMode)XIC(S019TO1.Int.Load1Comp)XIC(S019TO1.Int.CycStart)OTE(S019TO1.Act[1].Work.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S019TO1.Int.ManualMode)XIC(Edit.Bit)OTE(S019TO1.Act[1].Work.ManualCmdPB);
				N: XIC(S019TO1.Act[1].Work.Comp)OTE(S019TO1.Act[1].Work.Seal);
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S019RB01.Int.ClearOfPick1)OTE(S019TO1.Act[1].Home.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S019TO1.Act[1].Home.FltTmr.PRE)XIC(S019TO1.Int.AutoMode)XIC(S019TO1.Int.TaskComp)OTE(S019TO1.Act[1].Home.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S019TO1.Int.ManualMode)XIC(Edit.Bit)OTE(S019TO1.Act[1].Home.ManualCmdPB);
				N: XIC(S019TO1.Act[1].Home.Comp)OTE(S019TO1.Act[1].Home.Seal);
		END_ROUTINE

		ROUTINE D02_PartPresent 
				RC: "************************************************************$N"
				    "PP Common Inputs$N"
				    "$N"
				    "Assign each PP[X] to a Part Present Load Group$N"
				    "$N"
				    "PP1_xxx - 1st Load Part Presents$N"
				    "PP2_xxx - 2nd Load Part Presents$N"
				    "PP3_xxx - 3rd Load Part Presents$N"
				    "PP4_xxx - 4th Load Part Presents$N"
				    "************************************************************";
				N: NOP();
				N: XIO(S019TO1.Int.DryCycle)XIC(sZ005_040.PowerEnbld)XIC(S019TO1.Int.AirOnOk)XIC(S019TO1.Int.AllModCommOk)XIC(Edit.Bit)OTE(S019TO1.Int.PPActFltsEnbld);
				RC: "************************************************************$N"
				    "Part Present Logic$N"
				    "$N"
				    "************************************************************$N"
				    "Part Present AOI Parameter Mapping";
				N: NOP();
				RC: "************************************************************$N"
				    "PartPresent$N"
				    "************************************************************$N"
				    "DryCycle Load Condition$N"
				    "If the Tool is loaded by a Robot, The Timer should be removed";
				N: XIC(S019TO1.Int.DryCycle)XIC(S019TO1.Oper.DryCycStrtMem)XIC(S019TO1.Int.ClrToLoad)XIO(S019TO1.Int.ClrToUnld)XIO(S019TO1.Int.CycComp)XIC(S019RB01Sfty.Int.SftyZn1)XIO(S019TO1.Oper.DisableLoad)[MOV(10000,S019TO1.Oper.DryCycLd1DlyTmr.PRE) TON(S019TO1.Oper.DryCycLd1DlyTmr,?,?) ,[OTE(S019TO1.PP[1].inpPPDryCycleLoadTrgr) ,OTE(S019TO1.PP[2].inpPPDryCycleLoadTrgr) ] ];
				RC: "************************************************************$N"
				    "PartPresent - AIR$N"
				    "************************************************************$N"
				    "DryCycle Unload Condition";
				N: XIC(S019TO1.Int.DryCycle)XIC(S019RB01.Int.EOATWorkPos1)XIC(S019RB01.I1.Auto)XIO(S019RB01.Int.AbortPickSeld)XIC(Edit.Bit)[OTE(S019TO1.PP[1].inpPPDryCycleUnldTrgr) ,OTE(S019TO1.PP[2].inpPPDryCycleUnldTrgr) ];
				RC: "************************************************************$N"
				    "Set Used/Installed Sensors$N"
				    "************************************************************$N"
				    "Change instruction to OTE if sensor used.$N"
				    "Change instruction to OTU if the sensor will not be used/installed";
				N: OTE(S019TO1.PP[1].inpPPSensorInst.0)OTU(S019TO1.PP[1].inpPPSensorInst.1)OTU(S019TO1.PP[1].inpPPSensorInst.2)OTU(S019TO1.PP[1].inpPPSensorInst.3)OTU(S019TO1.PP[1].inpPPSensorInst.4)OTU(S019TO1.PP[1].inpPPSensorInst.5)OTU(S019TO1.PP[1].inpPPSensorInst.6)OTU(S019TO1.PP[1].inpPPSensorInst.7);
				RC: "************************************************************$N"
				    "Add all first load Switch Inputs$N"
				    "Model Air$N"
				    "************************************************************";
				N: [[MOV(0,S019TO1.PP[1].inpPPSensor) ,XIC(Edit.Bit) OTE(S019TO1.PP[1].inpPPSensor.0) ] ,XIC(S019TO1.Int.DryCycle) XIC(S019TO1.PP[1].stsPPMem) MOV(2#0000_0001,S019TO1.PP[1].inpPPSensor) ];
				N: XIC(Edit.Bit)OTE(S019TO1.PP[1].PPAnySensor);
				RC: "************************************************************$N"
				    "Change Edit.Bit with required conditions for PP to be ON/OFF$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(S019TO1.PP[1].inpOnCondition);
				N: XIC(Edit.Bit)OTE(S019TO1.PP[1].inpOffCondition);
				RC: "************************************************************$N"
				    "Set Used/Installed Sensors$N"
				    "************************************************************$N"
				    "Change instruction to OTE if sensor used.$N"
				    "Change instruction to OTU if the sensor will not be used/installed";
				N: OTE(S019TO1.PP[2].inpPPSensorInst.0)OTU(S019TO1.PP[2].inpPPSensorInst.1)OTU(S019TO1.PP[2].inpPPSensorInst.2)OTU(S019TO1.PP[2].inpPPSensorInst.3)OTU(S019TO1.PP[2].inpPPSensorInst.4)OTU(S019TO1.PP[2].inpPPSensorInst.5)OTU(S019TO1.PP[2].inpPPSensorInst.6)OTU(S019TO1.PP[2].inpPPSensorInst.7);
				RC: "************************************************************$N"
				    "Add all second load Switch Inputs$N"
				    "Model Air$N"
				    "************************************************************";
				N: [[MOV(0,S019TO1.PP[2].inpPPSensor) ,XIC(Edit.Bit) OTE(S019TO1.PP[2].inpPPSensor.0) ] ,XIC(S019TO1.Int.DryCycle) XIC(S019TO1.PP[2].stsPPMem) MOV(2#0000_0001,S019TO1.PP[2].inpPPSensor) ];
				N: XIC(Edit.Bit)OTE(S019TO1.PP[2].PPAnySensor);
				RC: "************************************************************$N"
				    "Change Edit.Bit with required conditions for PP to be ON/OFF$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(S019TO1.PP[2].inpOnCondition);
				N: XIC(Edit.Bit)OTE(S019TO1.PP[2].inpOffCondition);
				RC: "Model 1 Part Present AOIs$N"
				    "Lucid AIR";
				N: PartPresent(S019TO1.PP[1],S019TO1.PP[1].inpPPSensor,S019TO1.PP[1].inpOnCondition,S019TO1.PP[1].inpOffCondition,S019TO1.Int.DryCycle,S019TO1.Int.PPActFltsEnbld)PartPresent(S019TO1.PP[2],S019TO1.PP[2].inpPPSensor,S019TO1.PP[2].inpOnCondition,S019TO1.PP[2].inpOffCondition,S019TO1.Int.DryCycle,S019TO1.Int.PPActFltsEnbld);
				RC: "************************************************************$N"
				    "Parts Present Fault$N"
				    "************************************************************";
				N: NOP();
				N: [XIC(S019TO1.PP[1].stsPPNotOK) ,XIC(S019TO1.PP[2].stsPPNotOK) ]OTE(S019TO1.Int.PPFault);
				RC: "*************************************************************$N"
				    "Use to avoid load parts during drycycle$N"
				    "**************************************************************";
				N: XIO(S019TO1.Int.PartsPresNo)OTE(S019TO1.Int.AnyPartPres);
		END_ROUTINE

		ROUTINE L00_Lights 
				RC: "************************************************************$N"
				    "Operator Stack Light$N"
				    "Logic$N"
				    "************************************************************";
				N: NOP();
				RC: "######################$N"
				    "Operator Clear To Enter$N"
				    "$N"
				    "GREEN Light$N"
				    "Steady - Clear To Enter$N"
				    "Flash - No Auto Or Lightscreen Fault$N"
				    "######################";
				N: XIC(sZ005_040.PowerEnbld)[XIC(S019TO1.Int.AutoMode) [[XIC(S019TO1.Oper.Load1Req) ,XIC(S019TO1.Oper.Load2Req) ,XIC(S019TO1.Oper.Load3Req) ,XIC(S019TO1.Oper.Load4Req) ,XIC(S019TO1.Oper.UnldReq) ] XIO(S019TO1.Oper.LtScrnFlt) ,XIC(S019TO1.Oper.LtScrnFlt) XIO(Status.FlasherHigh) ] ,XIO(S019TO1.Int.AutoMode) XIO(Status.FlasherHigh) ]OTE(S019TO1.Oper.ClrToEnter);
				RC: "######################$N"
				    "Operator Parts Loaded$N"
				    "$N"
				    "WHITE Light$N"
				    "Steady - All required parts loaded$N"
				    "Flash - Any Part Loaded, Not All$N"
				    "######################";
				N: XIC(sZ005_040.PowerEnbld)XIC(S019TO1.Int.AutoMode)XIO(S019TO1.Int.DryCycle)[[XIC(S019TO1.Int.Load1Comp) XIC(Edit.Bit) ,XIC(S019TO1.Int.Load2Comp) XIC(Edit.Bit) ,XIC(S019TO1.Int.Load3Comp) XIC(Edit.Bit) ,XIC(S019TO1.Int.Load4Comp) XIC(Edit.Bit) ] ,[XIC(S019TO1.Int.AnyPartPres1) XIO(S019TO1.Int.Load1Comp) ,XIC(S019TO1.Int.AnyPartPres2) XIO(S019TO1.Int.Load2Comp) ,XIC(S019TO1.Int.AnyPartPres3) XIO(S019TO1.Int.Load3Comp) ,XIC(S019TO1.Int.AnyPartPres4) XIO(S019TO1.Int.Load4Comp) ] XIC(Status.FlasherHigh) ]OTE(S019TO1.Oper.PartsLoaded);
				RC: "######################$N"
				    "Operator NOT Clear to Enter$N"
				    "$N"
				    "Red Light$N"
				    "Steady - Do not Enter$N"
				    "Flash - Station Not in Auto$N"
				    "######################";
				N: XIC(sZ005_040.PowerEnbld)[XIC(S019TO1.Int.AutoMode) XIO(S019TO1.Oper.ClrToEnter) ,XIO(S019TO1.Int.AutoMode) XIO(Status.FlasherHigh) ]OTE(S019TO1.Oper.NotClrToEnter);
				N: XIC(S019TO1.Oper.ClrToEnter)OTE(S019TO1.Oper.SL.O.Segment.Segment_5.Green);
				N: XIC(S019TO1.Oper.PartsLoaded)OTE(S019TO1.Oper.SL.O.Segment.Segment_5.White);
				N: XIC(S019TO1.Oper.NotClrToEnter)OTE(S019TO1.Oper.SL.O.Segment.Segment_5.Red);
				N: XIC(S019TO1.Oper.ClrToEnter)[XIC(S019TO1.Oper.CycOverTime) OTE(S019TO1.Oper.SL.O.Buzzer.Continuous) ,XIC(S019TO1.Oper.CycNearOT) OTE(S019TO1.Oper.SL.O.Buzzer.Beep_1Hz) ];
				N: BMC_AOI_PROC_BNI0085(ZoneAOIs.OpSL[1],S019TO1IOL1.Port1,S019TO1.Oper.SL);
		END_ROUTINE

		ROUTINE P00_Station 
				RC: "###########################$N"
				    "Station$N"
				    "Standard Logic$N"
				    "$N"
				    "BiWCGlx Rev 1.0$N"
				    "###########################";
				N: NOP();
				RC: "########################################$N"
				    "Home Position$N"
				    "########################################";
				N: XIC(S019TO1.Act[1].Home.Comp)OTE(S019TO1.Int.AtHomePos);
				RC: "************************************************************$N"
				    "Station Part Present Summary$N"
				    "************************************************************$N"
				    "$N"
				    "OTU Bit if not used or required";
				N: NOP();
				N: XIC(S019TO1.PP[1].stsPPOff)XIC(S019TO1.PP[2].stsPPOff)OTE(S019TO1.Int.PartsPresNo);
				N: XIC(S019TO1.Int.PartsPresNo)XIC(S019TO1.SR.Int.NoPart)OTE(S019TO1.Int.Empty);
				N: XIC(S019TO1.PP[1].stsPPOn)XIC(S019TO1.PP[2].stsPPOn)OTE(S019TO1.Int.AllPartsPres1);
				N: [XIC(S019TO1.PP[1].PPAnySensor) ,XIC(S019TO1.PP[2].PPAnySensor) ]OTE(S019TO1.Int.AnyPartPres1);
				N: OTU(S019TO1.Int.AllPartsPres2);
				N: OTU(S019TO1.Int.AnyPartPres2);
				N: OTU(S019TO1.Int.AllPartsPres3);
				N: OTU(S019TO1.Int.AnyPartPres3);
				N: XIC(Edit.Bit)OTE(S019TO1.Int.AllPPandSR);
				N: XIC(Edit.Bit)OTE(S019TO1.Int.RbtsTaskComp);
				RC: "************************************************************$N"
				    "Auto Mode Selected$N"
				    "************************************************************$N"
				    "";
				N: [XIO(S019TO1.Int.ManualModePB) XIO(S019TO1.Int.NoModePB) XIO(Z005_040.NoModePB) ,XIC(S019TO1.Int.AutoMode) ][XIC(S019TO1.Int.NoMode) [XIC(S019TO1.Int.AutoSelPB) ,XIC(Z005_040.GlobalAutoModeSelPB) ,XIC(S019TO1.Int.AutoModePB) ,XIC(Z005_040.GlobalAutoModePB) ] ,XIC(S019TO1.Int.AutoSel) ]XIC(S019TO1.Int.RbtsInAuto)XIC(S019TO1.Int.RbtsTeachOff)OTE(S019TO1.Int.AutoSel);
				RC: "************************************************************$N"
				    "Station Auto Mode$N"
				    "Interlocks$N"
				    "************************************************************";
				N: [XIC(Z005_040.AutoModeSetup.Sts_IntlkOK) OTE(S019TO1.Int.AutoModeSetup.Inp_Intlk00) ,XIC(S019TO1.Int.AutoSel) OTE(S019TO1.Int.AutoModeSetup.Inp_Intlk01) ,XIO(S019TO1.Int.AutoModeStop) OTE(S019TO1.Int.AutoModeSetup.Inp_Intlk02) ,XIO(S019TO1.Int.ManualMode) OTE(S019TO1.Int.AutoModeSetup.Inp_Intlk03) ,XIC(S019TO1.Int.RbtsTeachOff) OTE(S019TO1.Int.AutoModeSetup.Inp_Intlk04) ,XIC(S019TO1.Int.RbtsInAuto) OTE(S019TO1.Int.AutoModeSetup.Inp_Intlk05) ,XIC(S019TO1.Int.AirOnOk) OTE(S019TO1.Int.AutoModeSetup.Inp_Intlk06) ,XIC(Edit.Bit) OTE(S019TO1.Int.AutoModeSetup.Inp_Intlk07) ,XIC(Edit.Bit) OTE(S019TO1.Int.AutoModeSetup.Inp_Intlk08) ,P_Intlk(S019TO1.Int.AutoModeSetup) ];
				RC: "************************************************************$N"
				    "Auto Mode $N"
				    "Running$N"
				    "************************************************************";
				N: XIC(S019TO1.Int.AutoModeSetup.Sts_IntlkOK)[[XIC(S019TO1.Int.AutoModePB) ,XIC(Z005_040.GlobalAutoModePB) ] ,XIC(S019TO1.Int.AutoMode) ][MOV(25,S019TO1.Int.AutoDlyTmr.PRE) TON(S019TO1.Int.AutoDlyTmr,?,?) ,XIC(S019TO1.Int.AutoDlyTmr.DN) OTE(S019TO1.Int.AutoMode) ];
				RC: "************************************************************$N"
				    "Auto Cycle Stop$N"
				    "************************************************************$N"
				    "";
				N: XIC(S019TO1.Int.AutoMode)[XIC(S019TO1.Int.NoModePB) ,XIC(Z005_040.AutoModeStopReq) ,XIC(S019TO1.Int.AutoModeStopReq) ]XIO(S019TO1.Int.AutoModeStop)OTE(S019TO1.Int.AutoModeStopReq);
				N: [XIC(S019RB01.I1.Pg_Paused) ,XIC(S019RB01.I1.RbtHeld) ,XIC(S019RB01.I1.RbtFaulted) ]OTE(S019TO1.Int.AutoModeStopEnable);
				N: XIC(S019TO1.Int.AutoMode)XIC(S019TO1.Int.AutoModeStopReq)XIC(S019TO1.Int.AutoModeStopEnable)OTE(S019TO1.Int.AutoModeStop);
				RC: "************************************************************$N"
				    "Manual Mode$N"
				    "************************************************************$N"
				    "";
				N: XIO(S019TO1.Int.NoModePB)XIO(Z005_040.NoModePB)XIO(S019TO1.Int.AutoSelPB)XIO(S019TO1.Int.AutoSel)[XIC(S019TO1.Int.NoMode) [XIC(S019TO1.Int.ManualModePB) ,XIC(Z005_040.ManualModePB) ] ,XIC(S019TO1.Int.ManualMode) ]XIC(S005RB01.Int.InTeach)OTE(S019TO1.Int.ManualMode);
				RC: "************************************************************$N"
				    "Dry Cycle$N"
				    "************************************************************$N"
				    "";
				N: XIC(Z005_040.DryCycle)OTE(S019TO1.Int.DryCycle);
				RC: "************************************************************$N"
				    "No Mode$N"
				    "************************************************************$N"
				    "";
				N: XIO(S019TO1.Int.AutoSel)XIO(S019TO1.Int.ManualMode)OTE(S019TO1.Int.NoMode);
				RC: "########################################$N"
				    "Load Setups$N"
				    "########################################";
				N: XIC(S019TO1.Int.AtHomePos)OTE(S019TO1.Int.LoadPos1);
				N: XIC(Edit.Bit)OTE(S019TO1.Int.LoadPos2);
				N: XIC(Edit.Bit)OTE(S019TO1.Int.LoadPos3);
				N: XIC(Edit.Bit)OTE(S019TO1.Int.LoadPos4);
				N: XIC(S019TO1.Int.AutoMode)[XIC(S019TO1.Int.LoadPos1) XIC(Edit.Bit) ,XIC(S019TO1.Int.LoadPos2) XIC(Edit.Bit) ,XIC(S019TO1.Int.LoadPos3) XIC(Edit.Bit) ,XIC(S019TO1.Int.LoadPos4) XIC(Edit.Bit) ]XIO(S019TO1.Int.TaskComp)XIO(S019TO1.Int.CycComp)XIC(S019Sfty.AllStaLtScrnOK)OTE(S019TO1.Int.ClrToLoad);
				N: XIC(Edit.Bit)OTE(S019TO1.Int.Load1Comp);
				N: XIC(Edit.Bit)OTE(S019TO1.Int.Load2Comp);
				N: XIC(Edit.Bit)OTE(S019TO1.Int.Load3Comp);
				N: XIC(Edit.Bit)OTE(S019TO1.Int.Load4Comp);
				N: XIC(Edit.Bit)OTE(S019TO1.Int.LoadComp);
				RC: "########################################$N"
				    "Work Positions$N"
				    "$N"
				    "10 Work Positions Available$N"
				    "########################################";
				N: XIC(S019Sfty.Cart1InPos)XIC(S019TO1.Act[1].Work.Comp)OTE(S019TO1.Int.AtWorkPos1);
				N: XIC(Edit.Bit)OTE(S019TO1.Int.AtWorkPos2);
				N: XIC(Edit.Bit)OTE(S019TO1.Int.AtWorkPos3);
				RC: "########################################$N"
				    "Station Process Completes$N"
				    "$N"
				    "10 Process Completes Available$N"
				    "########################################";
				N: XIC(Edit.Bit)OTE(S019TO1.Int.Proc1Comp);
				N: XIC(Edit.Bit)OTE(S019TO1.Int.Proc2Comp);
				N: XIC(Edit.Bit)OTE(S019TO1.Int.Proc3Comp);
				RC: "########################################$N"
				    "Station Tasks Complete$N"
				    "########################################";
				N: XIC(S019TO1.Int.CycStart)XIC(Edit.Bit)OTL(S019TO1.Int.TaskComp);
				N: [XIC(S019TO1.Int.UnldComp) ,XIC(S019TO1.Int.RstCycComp) ]OTU(S019TO1.Int.TaskComp);
				RC: "########################################$N"
				    "Unload Setups$N"
				    "########################################";
				N: XIC(S019TO1.Act[1].Home.Comp)OTE(S019TO1.Int.UnldPos1);
				N: XIC(Edit.Bit)OTE(S019TO1.Int.UnldPos2);
				N: XIC(Edit.Bit)OTE(S019TO1.Int.UnldPos3);
				N: XIC(S019TO1.Int.TaskComp)XIC(S019TO1.Int.UnldPos1)XIC(Edit.Bit)OTL(S019TO1.Int.CycComp);
				N: XIC(S019TO1.Int.RstCycComp)OTU(S019TO1.Int.UnldComp)OTU(S019TO1.Int.CycComp);
				N: XIC(S019TO1.Int.AutoMode)XIC(S019TO1.Int.AllPPandSR)XIC(S019TO1.Int.UnldPos1)XIC(S019TO1.Int.TaskComp)XIC(S019TO1.Int.CycComp)XIC(Edit.Bit)OTE(S019TO1.Int.ClrToUnld);
				N: XIC(S019TO1.Int.TaskComp)XIC(S019TO1.Int.CycComp)XIC(S019TO1.Int.Empty)XIC(Edit.Bit)OTL(S019TO1.Int.UnldComp);
				N: XIC(S019TO1.Int.AutoMode)XIC(S019TO1.Int.Empty)[XIC(S019TO1.Int.AtHomePos) ,XIC(Edit.Bit) ]XIC(Edit.Bit)OTE(S019TO1.Int.RstCycComp);
				RC: "########################################$N"
				    "Cycle Start Logic$N"
				    "########################################$N"
				    "$N"
				    "To be detemined how cycle start will be handled. Different Process starts may be involved.";
				N: XIC(Edit.Debug)OTE(S019TO1.Int.CycStart);
				RC: "************************************************************$N"
				    "Station Cycle Time Logic$N"
				    "************************************************************";
				N: NOP();
				N: MOV(3600000,S019TO1.Int.TackTMR.PRE)RTO(S019TO1.Int.TackTMR,?,?);
				N: XIC(S019TO1.Int.AutoMode)XIC(S005RB02.Int.AutoMode)XIC(S005RB01.Int.ClearOfPick1)MOV(3600000,S019TO1.Int.IndexTMR.PRE)RTO(S019TO1.Int.IndexTMR,?,?);
				N: [XIC(S019TO1.Int.AutoMode) [XIC(S019TO1.Int.CycStart) XIO(S019TO1.Int.UnldComp) ,XIC(S019TO1.Int.TaskComp) XIO(S019TO1.Int.UnldPos1) XIC(Edit.Bit) ,XIC(S019TO1.Int.UnldComp) XIO(S019TO1.Int.CycComp) XIC(S019TO1.Int.PartsPresNo) ] ,XIC(S019TO1.Oper.CycTimeTmr.EN) ]XIO(S019TO1.Int.IndexTMR.TT)MOV(3600000,S019TO1.Int.CycTMR.PRE)RTO(S019TO1.Int.CycTMR,?,?);
				N: [XIC(S019TO1.Oper.CycTimeTmr.EN) ,XIC(S019TO1.Int.IndexTMR.EN) ,XIC(S019TO1.Int.CycTMR.EN) ]MOV(3600000,S019TO1.Int.ProcTMR.PRE)RTO(S019TO1.Int.ProcTMR,?,?);
				N: XIC(S019TO1.Int.UnldComp)[XIO(S019TO1.Int.CycCompONS.0) [MOV(S019TO1.Int.CycTMR.ACC,S019TO1.Int.CycTimeStore) ,RES(S019TO1.Int.CycTMR) ] ,OTL(S019TO1.Int.CycCompONS.0) ];
				N: XIC(S019TO1.Int.CycCompONS.0)XIO(S019TO1.Int.IndexTMR.EN)[XIO(S019TO1.Int.CycCompONS.1) [MOV(S019TO1.Int.TackTMR.ACC,S019TO1.Int.TackTimeStore) ,RES(S019TO1.Int.TackTMR) ,MOV(S019TO1.Int.IndexTMR.ACC,S019TO1.Int.IndexTimeStore) ,RES(S019TO1.Int.IndexTMR) ,MOV(S019TO1.Int.ProcTMR.ACC,S019TO1.Int.ProcTimeStore) ,RES(S019TO1.Int.ProcTMR) ] ,OTL(S019TO1.Int.CycCompONS.1) ];
				N: XIC(S019TO1.Int.CycStart)OTU(S019TO1.Int.CycCompONS.0)OTU(S019TO1.Int.CycCompONS.1);
				RC: "************************************************************$N"
				    "Station State$N"
				    "************************************************************";
				N: NOP();
				N: XIC(Edit.Bit)OTE(S019TO1.Int.Starved);
				N: XIC(Edit.Bit)OTE(S019TO1.Int.Blocked);
				RC: "************************************************************$N"
				    "Station Mode for HMI$N"
				    "$N"
				    "###REQUIRES UPDATE####$N"
				    "************************************************************";
				N: [MOV(0,S019TO1.Int.RunningMode) ,XIC(Status.AlwaysOff) XIC(Edit.Debug) MOV(1,S019TO1.Int.RunningMode) ,XIC(S019TO1.Int.HoldEndOfCycle) MOV(2,S019TO1.Int.RunningMode) ,XIC(S019TO1.Int.DryCycle) MOV(3,S019TO1.Int.RunningMode) ];
				RC: "************************************************************$N"
				    "Station Mode Status for HMI$N"
				    "$N"
				    "######REQUIRED UPDATE########$N"
				    "************************************************************";
				N: [XIO(HMI_FRM005.stsAnyFixtureOnFault) XIO(HMI_FRM005.stsAnyRobotOnFault) MOV(1,S019TO1.Int.RunningModeStatus) ,XIC(S019TO1.Int.Blocked) MOV(2,S019TO1.Int.RunningModeStatus) ,XIC(S019TO1.Int.Starved) MOV(3,S019TO1.Int.RunningModeStatus) ,[XIC(HMI_FRM005.stsAnyFixtureOnFault) ,XIC(HMI_FRM005.stsAnyRobotOnFault) ] MOV(0,S019TO1.Int.RunningModeStatus) ];
				RC: "************************************************************$N"
				    "Station Operation Mode for HMI$N"
				    "$N"
				    "#####REQUIRES UPDATE#####$N"
				    "************************************************************";
				N: [MOV(0,S019TO1.Int.OperationMode) ,XIC(S019TO1.Int.AutoSel) MOV(1,S019TO1.Int.OperationMode) ,XIC(S019TO1.Int.ManualMode) MOV(2,S019TO1.Int.OperationMode) ,XIC(S019TO1.Int.AutoMode) MOV(3,S019TO1.Int.OperationMode) ];
		END_ROUTINE

		ROUTINE P01_StationToSfty 
				RC: "************************************************************$N"
				    "Map States to Safety Tag$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S019TO1.Int.KnownPos)OTE(StdToSfty.S019KnownPos);
				N: XIC(Edit.Bit)[MOV(500,S019TO1.Int.ClrToUnlockDlyTmr.PRE) TON(S019TO1.Int.ClrToUnlockDlyTmr,?,?) ,XIC(S019TO1.Int.ClrToUnlockDlyTmr.DN) OTE(StdToSfty.S019ClrToUnlock) ];
				N: XIC(Edit.Bit)OTE(StdToSfty.S019OprSw);
		END_ROUTINE

		ROUTINE S00_HMISequence 
				RC: "############################$N"
				    "Station Sequence List$N"
				    "############################$N"
				    "$N"
				    "Map Station Sequence";
				N: NOP();
				RC: "############################$N"
				    "Robots Clear for Motion Indicator$N"
				    "############################";
				N: OTE(S019TO1.Seq.RbtsClr);
				RC: "############################$N"
				    "Sequence of Operation$N"
				    "############################$N"
				    "$N"
				    "Operation = STRING$N"
				    "WorkPBText / HomePBText = STRING$N"
				    "WorkInd / HomeInd = DINT$N"
				    "$N"
				    "1 - Work = $'IN CYCLE$' / Home = $'COMPLETE$'$N"
				    "2 - Work = $'WELD IN CYCLE$' / Home = $'COMPLETE$'$N"
				    "3 - Work = $'SEAL IN CYCLE$' / Home = $'COMPLETE$'$N"
				    "4 - Work = $'CLOSED$' / Home = $'OPENED$'$N"
				    "5 - Work = $'ADVANCE$' / Home = $'RETURN$'$N"
				    "6 - Work = $'RETRACT$' / Home = $'EXTEND$'";
				N: NOP();
				N: [XIC(S019TO1.SR.Int.Model1) MOV('Operator 1st Load',S019TO1.Seq.Operation[1]) MOV(1,S019TO1.Seq.WorkInd[1]) MOV(1,S019TO1.Seq.HomeInd[1]) ,XIC(S019TO1.SR.Int.Model2) ]NOP();
		END_ROUTINE

		ROUTINE Y00_Alarms_L1 (Description := "Machine Fault Alarm Messages")
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L1$N"
				    "Machine Faults$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "Module Communication Faults$N"
				    "#######################$N"
				    "$N"
				    "Add the ENet.CommOK signal of the First upstream Ethernet Device If Daisy Chain.$N"
				    "If the First Upstream Ethernet Device is a Switch, TBD.";
				N: NOP();
				N: [XIC(S019TO1SIO1.ENet.CommOK) XIO(S019TO1SIO2.ENet.CommOK) XIO(S019TO1SIO2.ENet.Inhibited) OTE(S4.L1[1].0) ,XIC(S019TO1SIO2.ENet.CommOK) XIO(S019TO1MIO1.ENet.CommOK) XIO(S019TO1MIO1.ENet.Inhibited) OTE(S4.L1[1].1) ,XIC(S019TO1MIO1.ENet.CommOK) XIO(S019TO1VM1.ENet.CommOK) XIO(S019TO1VM1.ENet.Inhibited) OTE(S4.L1[1].2) ,XIC(Edit.Bit) XIO(S019RB01.ENet.CommOK) XIO(S019RB01.ENet.Inhibited) OTE(S4.L1[1].10) ];
				N: [XIO(S019SIO1:I.ConnectionFaulted) [XIO(S019SIO1:I.RunMode) ,XIO(S019Sfty.Mod1.InputStatus) ] OTE(S4.L1[1].21) ,XIO(S019SIO2:I.ConnectionFaulted) [XIO(S019SIO2:I.RunMode) ,XIO(S019Sfty.Mod2.InputStatus) ] OTE(S4.L1[1].22) ];
				RC: "#######################$N"
				    "Safety Instruction Faults$N"
				    "$N"
				    "E-Stop$N"
				    "Oper Light Screens And Scanners$N"
				    "Safety Position Devices$N"
				    "InterCell Safety Devices$N"
				    "#######################";
				N: NOP();
				N: [XIC(S019Sfty.E1.Estop.FP) OTE(S4.L1[2].0) ,XIC(S019Sfty.E2.Estop.FP) OTE(S4.L1[2].1) ,XIC(S019Sfty.E3.Estop.FP) OTE(S4.L1[2].2) ];
				N: [XIC(S019Sfty.OperLS.LC1.FP) OTE(S4.L1[2].10) ,XIC(S019Sfty.OperLS.LC2.FP) OTE(S4.L1[2].11) ,XIC(S019Sfty.OperLS.LC3.FP) OTE(S4.L1[2].12) ];
				N: [XIC(S019Sfty.OperLS.SCN1_1.FP) OTE(S4.L1[2].13) ,XIC(S019Sfty.OperLS.SCN1_2.FP) OTE(S4.L1[2].14) ,XIC(S019Sfty.OperLS.SCN2_1.FP) OTE(S4.L1[2].15) ,XIC(S019Sfty.OperLS.SCN2_2.FP) OTE(S4.L1[2].16) ];
				N: [XIC(S019Sfty.SftyPosDev.SPD1.FP) OTE(S4.L1[3].0) ,XIC(S019Sfty.SftyPosDev.SPD2.FP) OTE(S4.L1[3].1) ,XIC(S019Sfty.SftyPosDev.SPD3.FP) OTE(S4.L1[3].2) ,XIC(S019Sfty.SftyPosDev.SPD4.FP) OTE(S4.L1[3].3) ];
				N: [XIC(S019Sfty.IntSftyDevice.LC1.FP) OTE(S4.L1[2].20) ,XIC(S019Sfty.IntSftyDevice.LC2.FP) OTE(S4.L1[2].21) ,XIC(S019Sfty.IntSftyDevice.LC3.FP) OTE(S4.L1[2].22) ];
				N: [XIC(S019Sfty.IntSftyDevice.SCN1_1.FP) OTE(S4.L1[2].23) ,XIC(S019Sfty.IntSftyDevice.SCN1_2.FP) OTE(S4.L1[2].24) ,XIC(S019Sfty.IntSftyDevice.SCN2_1.FP) OTE(S4.L1[2].25) ,XIC(S019Sfty.IntSftyDevice.SCN2_2.FP) OTE(S4.L1[2].26) ];
				RC: "#######################$N"
				    "Part Present Faults$N"
				    "#######################";
				N: NOP();
				N: XIC(S019TO1.Int.PPActFltsEnbld)[XIC(S019TO1.PP[1].stsNotONFault) [XIO(S019TO1.PP[1].inpPPSensor.0) OTE(S4.L1[10].0) ,XIO(S019TO1.PP[1].inpPPSensor.1) OTE(S4.L1[10].2) ] ,XIC(S019TO1.PP[1].stsStillONFault) [XIC(S019TO1.PP[1].inpPPSensor.0) OTE(S4.L1[10].1) ,XIC(S019TO1.PP[1].inpPPSensor.1) OTE(S4.L1[10].3) ] ];
				N: XIC(S019TO1.Int.PPActFltsEnbld)[XIC(S019TO1.PP[2].stsNotONFault) [XIO(S019TO1.PP[2].inpPPSensor.0) OTE(S4.L1[10].4) ,XIO(S019TO1.PP[2].inpPPSensor.1) OTE(S4.L1[10].6) ,XIO(S019TO1.PP[2].inpPPSensor.2) OTE(S4.L1[10].8) ] ,XIC(S019TO1.PP[2].stsStillONFault) [XIC(S019TO1.PP[2].inpPPSensor.0) OTE(S4.L1[10].5) ,XIC(S019TO1.PP[2].inpPPSensor.1) OTE(S4.L1[10].7) ,XIC(S019TO1.PP[2].inpPPSensor.2) OTE(S4.L1[10].9) ] ];
				RC: "#######################$N"
				    "Actuator Faults$N"
				    "#######################";
				N: NOP();
				N: [XIC(S019TO1.Act[1].Work.VlvFlt) OTE(S4.L1[15].0) ,XIC(S019TO1.Act[1].Home.VlvFlt) OTE(S4.L1[15].1) ];
				N: XIC(S019TO1.Act[1].Work.MtnFlt)XIO(S019TO1.Act[1].Work.VlvFlt)[[XIC(S019TO1.Act[1].Installed.0) XIO(S019TO1.Act[1].Work.Pxs.0) OTE(S4.L1[15].2) ,XIC(S019TO1.Act[1].Work.Pxs.0) XIC(S019TO1.Act[1].Home.Pxs.0) OTE(S4.L1[15].4) ] ,[XIC(S019TO1.Act[1].Installed.1) XIO(S019TO1.Act[1].Work.Pxs.1) OTE(S4.L1[15].6) ,XIC(S019TO1.Act[1].Work.Pxs.1) XIC(S019TO1.Act[1].Home.Pxs.1) OTE(S4.L1[15].8) ] ];
				N: XIC(S019TO1.Act[1].Home.MtnFlt)XIO(S019TO1.Act[1].Home.VlvFlt)[[XIC(S019TO1.Act[1].Installed.0) XIO(S019TO1.Act[1].Home.Pxs.0) OTE(S4.L1[15].3) ,XIC(S019TO1.Act[1].Home.Pxs.0) XIC(S019TO1.Act[1].Work.Pxs.0) OTE(S4.L1[15].5) ] ,[XIC(S019TO1.Act[1].Installed.1) XIO(S019TO1.Act[1].Home.Pxs.1) OTE(S4.L1[15].7) ,XIC(S019TO1.Act[1].Home.Pxs.1) XIC(S019TO1.Act[1].Work.Pxs.1) OTE(S4.L1[15].9) ] ,[XIC(S019TO1.Act[1].Installed.2) XIO(S019TO1.Act[1].Home.Pxs.2) OTE(S4.L1[15].11) ,XIC(S019TO1.Act[1].Home.Pxs.2) XIC(S019TO1.Act[1].Work.Pxs.2) OTE(S4.L1[15].13) ] ];
				RC: "#######################$N"
				    "Shift Register Data Mismatch Fault$N"
				    "#######################";
				N: NOP();
				N: XIC(S019TO1.Int.AutoMode)XIO(S019TO1.Int.DryCycle)[XIC(S019TO1.Int.AllPartsPres1) XIC(S019TO1.SR.Int.NoPart) ,XIC(S019TO1.Int.PartsPresNo) XIO(S019TO1.SR.Int.NoPart) ][MOV(5000,S019TO1.Int.FltDelayTmr[0].PRE) TON(S019TO1.Int.FltDelayTmr[0],?,?) ,XIC(S019TO1.Int.FltDelayTmr[0].DN) OTE(S4.L1[65].0) ];
		END_ROUTINE

		ROUTINE Y01_Alarms_L2 (Description := "Manual Intervention Alarm Messages")
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L2$N"
				    "Manual Interventions$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "Inhibited Modules$N"
				    "#######################";
				N: NOP();
				N: [XIC(S019RB01.ENet.Inhibited) OTE(S4.L2[2].0) ,XIC(S019TO1MIO1.ENet.Inhibited) OTE(S4.L2[2].1) ,XIC(S019TO1SIO1.ENet.Inhibited) OTE(S4.L2[2].2) ,XIC(S019TO1SIO2.ENet.Inhibited) OTE(S4.L2[2].3) ,XIC(S019TO1VM1.ENet.Inhibited) OTE(S4.L2[2].4) ];
				RC: "#######################$N"
				    "E-Stop Activated$N"
				    "#######################";
				N: NOP();
				N: XIC(S019Sfty.Mod1.RunMode)XIO(S019Sfty.E1.EstpChnA)XIO(S019Sfty.E1.EstpChnB)OTE(S4.L2[3].0);
				N: XIC(S019Sfty.Mod1.RunMode)XIO(S019Sfty.E2.EstpChnA)XIO(S019Sfty.E2.EstpChnB)OTE(S4.L2[3].1);
				N: XIC(S019Sfty.Mod2.RunMode)XIO(S019Sfty.E3.EstpChnA)XIO(S019Sfty.E3.EstpChnB)OTE(S4.L2[3].2);
				RC: "#######################$N"
				    "Operator Light Screen And Scanner Fault$N"
				    "#######################$N"
				    "$N"
				    "Use the correct Module Run Mode";
				N: NOP();
				RC: "#######################$N"
				    "Operator Light Screen And Scanner Fault$N"
				    "#######################$N"
				    "$N"
				    "Use the correct Module Run Mode";
				N: NOP();
				RC: "#######################$N"
				    "Station No Air$N"
				    "#######################";
				N: NOP();
				N: XIC(S019TO1.Int.AllModCommOk)XIO(S019TO1.Int.AirOnOk)OTE(S4.L2[10].0);
		END_ROUTINE

		ROUTINE Y02_Alarms_L3 (Description := "Warning Alarm Messages")
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L3$N"
				    "Warnings$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "RESERVED$N"
				    "#######################";
				N: NOP();
		END_ROUTINE

		ROUTINE Z00_MapOutputs 
				RC: "************************************************************$N"
				    "Map Devices Outputs$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S019TO1.Act[1].Work.Out)XIO(S019TO1.Act[1].Home.Out)OTE(S019TO1VM1.O.0);
				N: XIC(S019TO1.Act[1].Home.Out)XIO(S019TO1.Act[1].Work.Out)OTE(S019TO1VM1.O.1);
				N: [XIO(S019TO1VM1.ENet.CommOK) [CLR(S019TO1VM1.O) ,FLL(0,S019TO1VM1:O.Data[0],2) ] ,XIC(S019TO1VM1.ENet.CommOK) COP(S019TO1VM1.O,S019TO1VM1:O.Data[0],2) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S020RB01 (Description := "Material Handler with Self Pierce Rivet Ped Or Tool Changer",
	                  Class := Standard,
	                  MAIN := "A00_Main",
	                  MODE := 0,
	                  DisableFlag := 0,
	                  UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE A00_Main 
				N: JSR(D00_RB_MapInputs,0);
				N: JSR(B00_ToolChange,0);
				N: JSR(D01_RB_Zones,0);
				N: JSR(D02_RB,0);
				N: JSR(D02_RB_Edit,0);
				N: JSR(D03_RB_PNs,0);
				N: JSR(D04_RB_MapOutpus,0);
				N: JSR(Y00_Alarms_L1,0);
				N: JSR(Y01_Alarms_L2,0);
				N: JSR(Y02_Alarms_L3,0);
		END_ROUTINE

		ROUTINE B00_ToolChange 
				RC: "############################$N"
				    "$N"
				    "Robot Tool Change Application$N"
				    "$N"
				    "############################";
				N: NOP();
				N: [XIC(S020RB01.I1.ToolID1) OTE(S020RB01TC.CoupledToolID.0) ,XIC(S020RB01.I1.ToolID2) OTE(S020RB01TC.CoupledToolID.1) ,XIC(S020RB01.I1.ToolID3) OTE(S020RB01TC.CoupledToolID.2) ,XIC(S020RB01.I1.ToolID4) OTE(S020RB01TC.CoupledToolID.3) ];
				N: XIC(S020RB01TC.ENet.CommOK)XIO(S020RB01.I1.TCPwrOn)EQU(S020RB01TC.CoupledToolID,15)OTE(S020RB01TC.NoTool);
				N: XIC(S020RB01TC.ENet.CommOK)XIC(S020RB01.I1.TCPwrOn)[NEQ(S020RB01TC.CoupledToolID,15) MOV(1500,S020RB01TC.CoupledToolTmr.PRE) TON(S020RB01TC.CoupledToolTmr,?,?) ,[EQU(S020RB01TC.CoupledToolID,1) OTE(S020RB01TC.Tool1) ,EQU(S020RB01TC.CoupledToolID,2) OTE(S020RB01TC.Tool2) ,EQU(S020RB01TC.CoupledToolID,4) OTE(S020RB01TC.Tool3) ,EQU(S020RB01TC.CoupledToolID,8) OTE(S020RB01TC.Tool4) ] ];
				N: XIC(S020RB01.I1.ToolChangeActive)[[EQU(S020RB01TC.CoupledToolID,15) ,XIC(S020RB01TC.InhibitTCComp) ] OTE(S020RB01TC.InhibitTCComp) ,XIO(S020RB01TC.InhibitTCComp) OTE(S020RB01TC.InhibitTC) ];
		END_ROUTINE

		ROUTINE D00_RB_MapInputs 
				RC: "############################$N"
				    "Self Pierce Rivet$N"
				    "Input Mapping$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Self Pierce Rivet$N"
				    "Input Mapping$N"
				    "############################";
				N: [XIO(S020RB01.ENet.CommOK) FLL(0,S020RB01.I1,1) ,XIC(S020RB01.ENet.CommOK) COP(S020RB01:I1.Input[0],S020RB01.I1,1) ];
				N: [XIC(S020TL1.Sta.AutoMode) OTE(S020RB01.Int.AutoMode) ,XIC(S020TL1.Sta.ManualMode) OTE(S020RB01.Int.ManualMode) ];
				N: XIC(S020TL1.Sta.DryCycle)OTE(S020RB01.Int.DryCycle);
				N: [XIC(S020TL1.Sta.AutoModeStopReq) ,XIC(Z005_040.AutoModeStopReq) ]OTE(S020RB01.Int.AutoModeStopReq);
				N: [XIC(Edit.Bit) MOV(1500,S020RB01.Int.AirOnDelayTmr.PRE) TOF(S020RB01.Int.AirOnDelayTmr,?,?) ,XIC(S020RB01.Int.AirOnDelayTmr.DN) OTE(S020RB01.Int.AirOn) ];
				N: XIC(Edit.Bit)OTU(S020RB01.Int.DisableDrives);
				N: XIC(S020TL1.Sta.RstCycComp)OTE(S020RB01.Int.ToolRst);
				N: [XIC(S020TL1.Sta.FaultResetPB) XIC(sZ005_040.AllGatesOk) ,XIC(sZ005_040.StaPowerEnblPB) ,XIC(S020RB01.Int.ExtMotorOn) ]OTE(S020RB01.Int.FltReset);
				N: XIC(S020RB01.Int.SetCycleCompPB.PB)OTE(S020RB01.Int.SetCycleComp);
		END_ROUTINE

		ROUTINE D01_RB_Zones 
				RC: "******************************************************************$N"
				    "Robot Standard$N"
				    "Zones$N"
				    "$N"
				    "Zn1 = Pick$N"
				    "Zn2 = Drop$N"
				    "Zn3 = Maintenance Position$N"
				    "$N"
				    "Zn4-10 TBD$N"
				    "******************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "RobotStdZone AOI Setup$N"
				    "$N"
				    "1. OTE Zn#Used to Enable. If Zone not used OTU$N"
				    "$N"
				    "2. Add All Adjacent Zone.outRbtZnClrMem -]/[- $N"
				    "$N"
				    "3. Add all required tool Pick/Drop Setup Conditions$N"
				    "******************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Zone 1$N"
				    "******************************************************************";
				N: [OTE(S020RB01.Int.Zn1Used) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn1ClrMem) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn1ToolCond) ,RobotStdZone(S020RB01.AOIs.Zone[1],S020RB01.Int.Zn1Used,S020RB01.Int.Zn1ClrMem,S020RB01.Int.Zn1ToolCond,S020RB01.I1.ClrIntfZn1,S020RB01.O1.ZnClear1) ];
				RC: "******************************************************************$N"
				    "Zone 2$N"
				    "******************************************************************";
				N: [OTE(S020RB01.Int.Zn2Used) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn2ClrMem) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn2ToolCond) ,RobotStdZone(S020RB01.AOIs.Zone[2],S020RB01.Int.Zn2Used,S020RB01.Int.Zn2ClrMem,S020RB01.Int.Zn2ToolCond,S020RB01.I1.ClrIntfZn2,S020RB01.O1.ZnClear2) ];
				RC: "******************************************************************$N"
				    "Zone 3$N"
				    "******************************************************************";
				N: [OTU(S020RB01.Int.Zn3Used) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn3ClrMem) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn3ToolCond) ,RobotStdZone(S020RB01.AOIs.Zone[3],S020RB01.Int.Zn3Used,S020RB01.Int.Zn3ClrMem,S020RB01.Int.Zn3ToolCond,S020RB01.I1.ClrIntfZn3,S020RB01.O1.ZnClear3) ];
				RC: "******************************************************************$N"
				    "Zone 4$N"
				    "******************************************************************";
				N: [OTU(S020RB01.Int.Zn4Used) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn4ClrMem) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn4ToolCond) ,RobotStdZone(S020RB01.AOIs.Zone[4],S020RB01.Int.Zn4Used,S020RB01.Int.Zn4ClrMem,S020RB01.Int.Zn4ToolCond,S020RB01.I1.ClrIntfZn4,S020RB01.O1.ZnClear4) ];
				RC: "******************************************************************$N"
				    "Zone 5$N"
				    "******************************************************************";
				N: [OTU(S020RB01.Int.Zn5Used) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn5ClrMem) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn5ToolCond) ,RobotStdZone(S020RB01.AOIs.Zone[5],S020RB01.Int.Zn5Used,S020RB01.Int.Zn5ClrMem,S020RB01.Int.Zn5ToolCond,S020RB01.I1.ClrIntfZn5,S020RB01.O1.ZnClear5) ];
				RC: "******************************************************************$N"
				    "Zone 6$N"
				    "******************************************************************";
				N: [OTU(S020RB01.Int.Zn6Used) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn6ClrMem) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn6ToolCond) ,RobotStdZone(S020RB01.AOIs.Zone[6],S020RB01.Int.Zn6Used,S020RB01.Int.Zn6ClrMem,S020RB01.Int.Zn6ToolCond,S020RB01.I1.ClrIntfZn6,S020RB01.O1.ZnClear6) ];
				RC: "******************************************************************$N"
				    "Zone 7$N"
				    "******************************************************************";
				N: [OTU(S020RB01.Int.Zn7Used) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn7ClrMem) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn7ToolCond) ,RobotStdZone(S020RB01.AOIs.Zone[7],S020RB01.Int.Zn7Used,S020RB01.Int.Zn7ClrMem,S020RB01.Int.Zn7ToolCond,S020RB01.I1.ClrIntfZn7,S020RB01.O1.ZnClear7) ];
				RC: "******************************************************************$N"
				    "Zone 8$N"
				    "******************************************************************";
				N: [OTU(S020RB01.Int.Zn8Used) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn8ClrMem) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn8ToolCond) ,RobotStdZone(S020RB01.AOIs.Zone[8],S020RB01.Int.Zn8Used,S020RB01.Int.Zn8ClrMem,S020RB01.Int.Zn8ToolCond,S020RB01.I1.ClrIntfZn8,S020RB01.O1.ZnClear8) ];
				RC: "******************************************************************$N"
				    "Zone 9$N"
				    "******************************************************************";
				N: [OTU(S020RB01.Int.Zn9Used) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn9ClrMem) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn9ToolCond) ,RobotStdZone(S020RB01.AOIs.Zone[9],S020RB01.Int.Zn9Used,S020RB01.Int.Zn9ClrMem,S020RB01.Int.Zn9ToolCond,S020RB01.I1.ClrIntfZn9,S020RB01.O1.ZnClear9) ];
				RC: "******************************************************************$N"
				    "Zone 10$N"
				    "******************************************************************";
				N: [OTU(S020RB01.Int.Zn10Used) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn10ClrMem) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn10ToolCond) ,RobotStdZone(S020RB01.AOIs.Zone[10],S020RB01.Int.Zn10Used,S020RB01.Int.Zn10ClrMem,S020RB01.Int.Zn10ToolCond,S020RB01.I1.ClrIntfZn10,S020RB01.O1.ZnClear10) ];
				RC: "******************************************************************$N"
				    "Zone 11$N"
				    "******************************************************************";
				N: [OTU(S020RB01.Int.Zn11Used) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn11ClrMem) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn11ToolCond) ,RobotStdZone(S020RB01.AOIs.Zone[11],S020RB01.Int.Zn11Used,S020RB01.Int.Zn11ClrMem,S020RB01.Int.Zn11ToolCond,S020RB01.I1.ClrIntfZn11,S020RB01.O1.ZnClear11) ];
				RC: "******************************************************************$N"
				    "Zone 12$N"
				    "******************************************************************";
				N: [OTU(S020RB01.Int.Zn12Used) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn12ClrMem) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn12ToolCond) ,RobotStdZone(S020RB01.AOIs.Zone[12],S020RB01.Int.Zn12Used,S020RB01.Int.Zn12ClrMem,S020RB01.Int.Zn12ToolCond,S020RB01.I1.ClrIntfZn12,S020RB01.O1.ZnClear12) ];
				RC: "******************************************************************$N"
				    "Zone 13$N"
				    "******************************************************************";
				N: [OTU(S020RB01.Int.Zn13Used) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn13ClrMem) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn13ToolCond) ,RobotStdZone(S020RB01.AOIs.Zone[13],S020RB01.Int.Zn13Used,S020RB01.Int.Zn13ClrMem,S020RB01.Int.Zn13ToolCond,S020RB01.I1.ClrIntfZn13,S020RB01.O1.ZnClear13) ];
				RC: "******************************************************************$N"
				    "Zone 14$N"
				    "******************************************************************";
				N: [OTU(S020RB01.Int.Zn14Used) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn14ClrMem) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn14ToolCond) ,RobotStdZone(S020RB01.AOIs.Zone[14],S020RB01.Int.Zn14Used,S020RB01.Int.Zn14ClrMem,S020RB01.Int.Zn14ToolCond,S020RB01.I1.ClrIntfZn14,S020RB01.O1.ZnClear14) ];
				RC: "******************************************************************$N"
				    "Zone 15$N"
				    "******************************************************************";
				N: [OTU(S020RB01.Int.Zn15Used) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn15ClrMem) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn15ToolCond) ,RobotStdZone(S020RB01.AOIs.Zone[15],S020RB01.Int.Zn15Used,S020RB01.Int.Zn15ClrMem,S020RB01.Int.Zn15ToolCond,S020RB01.I1.ClrIntfZn15,S020RB01.O1.ZnClear15) ];
				RC: "******************************************************************$N"
				    "Zone 16$N"
				    "******************************************************************";
				N: [OTU(S020RB01.Int.Zn16Used) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn16ClrMem) ,XIC(Edit.Bit) OTE(S020RB01.Int.Zn16ToolCond) ,RobotStdZone(S020RB01.AOIs.Zone[16],S020RB01.Int.Zn16Used,S020RB01.Int.Zn16ClrMem,S020RB01.Int.Zn16ToolCond,S020RB01.I1.ClrIntfZn16,S020RB01.O1.ZnClear16) ];
				N: [XIO(S020RB01.AOIs.Zone[1].outRbtZnClrMem) ,XIC(S020RB01.I1.AtHome) ]OTE(S020RB01.Int.ClearOfTool1);
				N: [XIC(Edit.Bit) ,XIC(S020RB01.I1.AtHome) ]OTE(S020RB01.Int.ClearOfTool2);
				N: [XIC(Edit.Bit) ,XIC(S020RB01.I1.AtHome) ]OTE(S020RB01.Int.ClearOfTool3);
				N: [XIC(Edit.Bit) ,XIC(S020RB01.I1.AtHome) ]OTE(S020RB01.Int.ClearOfTool4);
				N: [XIC(Edit.Bit) ,XIC(S020RB01.I1.AtHome) ]OTE(S020RB01.Int.ClearOfTool5);
				N: [XIO(S020RB01.AOIs.Zone[1].outRbtZnClrMem) ,XIC(S020RB01.I1.AtHome) ]OTE(S020RB01.Int.ClearOfPick1);
				N: [XIC(Edit.Bit) ,XIC(S020RB01.I1.AtHome) ]OTE(S020RB01.Int.ClearOfPick2);
				N: [XIO(S020RB01.AOIs.Zone[2].outRbtZnClrMem) ,XIC(S020RB01.I1.AtHome) ]OTE(S020RB01.Int.ClearOfDrop1);
				N: [XIC(Edit.Bit) ,XIC(S020RB01.I1.AtHome) ]OTE(S020RB01.Int.ClearOfDrop2);
				N: XIC(S020RB01.Int.ClearOfPick1)XIC(S020RB01.Int.ClearOfPick2)XIC(S020RB01.Int.ClearOfPick3)XIC(S020RB01.Int.ClearOfPick4)XIC(S020RB01.Int.ClearOfPick5)OTE(S020RB01.Int.ClearOfAllPicks);
				N: XIC(S020RB01.Int.ClearOfDrop1)XIC(S020RB01.Int.ClearOfDrop2)XIC(S020RB01.Int.ClearOfDrop3)OTE(S020RB01.Int.ClearOfAllDrops);
		END_ROUTINE

		ROUTINE D02_RB 
				RC: "############################$N"
				    "S020RB01$N"
				    "Fanuc Robot Material Handler $N"
				    "Self Pierce Rivet Application$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Rung to check which PN is Active$N"
				    "############################";
				N: NEQ(S020RB01.AOIs.PN.stsPN,0)NOP();
				N: [XIO(S020RB01.I1.PendEnbld) XIC(S020RB01Sfty.Int.TeachOff) OTE(S020RB01.Int.TeachSSOff) ,XIC(S020RB01.I1.PendEnbld) XIC(S020RB01Sfty.Int.TeachSeld) OTE(S020RB01.Int.InTeach) ];
				N: XIC(sZ005_040.PowerEnbld)XIC(sZ005_040.PerimeterSafe)XIC(S020RB01Sfty.Int.EnblRbt)XIC(S020RB01Sfty.Int.TeachOff)XIC(S020RB01Sfty.Int.AdjRbtsTeachOff)XIO(S020RB01Sfty.Int.DisableDrives)XIO(S020RB01.I1.Auto)[XIC(Z005_040.GlobalAutoModePB) ,XIC(S020RB01.Int.SrvoOnDwlTmr.TT) ]XIC(Z005_040.AirOn)XIC(Z005_040.AllModCommOk)[MOV(3000,S020RB01.Int.SrvoOnDwlTmr.PRE) TON(S020RB01.Int.SrvoOnDwlTmr,?,?) ,XIC(S020RB01.Int.SrvoOnDwlTmr.EN) XIO(S020RB01.Int.SrvoOnDwlTmr.DN) OTE(S020RB01.Int.ExtMotorOn) ];
				RC: "############################$N"
				    "External Run Enable$N"
				    "############################";
				N: [XIO(S020RB01.Int.DisableDrives) [XIC(S020RB01.Int.AutoMode) XIC(S020RB01.I1.Auto) ,XIC(S020RB01.Int.ManualMode) ] ,XIC(S020RB01.Int.InTeach) ]MOV(1000,S020RB01.Int.RunEnableDelayTmr.PRE)TON(S020RB01.Int.RunEnableDelayTmr,?,?);
				N: XIC(S020RB01.Int.RunEnableDelayTmr.DN)[XIC(S020RB01.Int.AutoMode) XIC(S020RB01.I1.Auto) ,XIC(S020RB01.Int.InTeach) XIO(S020RB01.I1.Auto) ]XIC(sZ005_040.PowerEnbld)OTE(S020RB01.Int.ExtRunEnable);
				RC: "############################$N"
				    "Robot Ready Status$N"
				    "############################";
				N: XIC(S020RB01.I1.Cmd_Enbl)XIC(S020RB01.I1.Sys_Rdy)XIO(S020RB01.I1.RbtFaulted)XIO(S020RB01.I1.PendEnbld)XIC(S020RB01.I1.Auto)OTE(S020RB01.Int.RbtRdySU);
				N: XIC(S020RB01.Int.RbtRdySU)XIC(S020RB01.I1.AtHome)XIO(S020RB01.I1.Pg_Running)XIO(S020RB01.I1.Pg_Paused)XIO(S020RB01.I1.RbtHeld)OTE(S020RB01.Int.RbtRdy);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S020RB01.Int.RetFromMaintSeld) ,XIC(S020RB01.Int.MaintPosNoToolSeld) ,XIC(S020RB01.Int.MaintPosTool2Seld) ,XIC(S020RB01.Int.MaintPosTool3Seld) ,XIC(S020RB01.Int.MaintPosTool4Seld) ]OTU(S020RB01.Int.MaintPosTool1Seld);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S020RB01.Int.RetFromMaintSeld) ,XIC(S020RB01.Int.MaintPosNoToolSeld) ,XIC(S020RB01.Int.MaintPosTool1Seld) ,XIC(S020RB01.Int.MaintPosTool3Seld) ,XIC(S020RB01.Int.MaintPosTool4Seld) ]OTU(S020RB01.Int.MaintPosTool2Seld);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S020RB01.Int.RetFromMaintSeld) ,XIC(S020RB01.Int.MaintPosNoToolSeld) ,XIC(S020RB01.Int.MaintPosTool1Seld) ,XIC(S020RB01.Int.MaintPosTool2Seld) ,XIC(S020RB01.Int.MaintPosTool4Seld) ]OTU(S020RB01.Int.MaintPosTool3Seld);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S020RB01.Int.RetFromMaintSeld) ,XIC(S020RB01.Int.MaintPosNoToolSeld) ,XIC(S020RB01.Int.MaintPosTool1Seld) ,XIC(S020RB01.Int.MaintPosTool2Seld) ,XIC(S020RB01.Int.MaintPosTool3Seld) ]OTU(S020RB01.Int.MaintPosTool4Seld);
				N: [XIC(S020RB01.Int.RetFromMaintSeld) ,XIC(S020RB01.Int.MaintPosTool1Seld) ,XIC(S020RB01.Int.MaintPosTool2Seld) ,XIC(S020RB01.Int.MaintPosTool3Seld) ,XIC(S020RB01.Int.MaintPosTool4Seld) ]OTU(S020RB01.Int.MaintPosNoToolSeld);
				N: XIC(S020RB01.Int.AutoMode)[XIC(S020RB01.Int.GoToMaintPosTool1PB.PB) OTL(S020RB01.Int.MaintPosTool1Seld) ,XIC(S020RB01.Int.GoToMaintPosTool2PB.PB) OTL(S020RB01.Int.MaintPosTool2Seld) ,XIC(S020RB01.Int.GoToMaintPosTool3PB.PB) OTL(S020RB01.Int.MaintPosTool3Seld) ,XIC(S020RB01.Int.GoToMaintPosTool4PB.PB) OTL(S020RB01.Int.MaintPosTool4Seld) ];
				N: XIC(S020RB01.Int.AutoMode)XIC(S020RB01.Int.GoToMaintPosNoToolPB.PB)OTL(S020RB01.Int.MaintPosNoToolSeld);
				N: [XIC(S020RB01.Int.MaintPosTool1Seld) ,XIC(S020RB01.Int.MaintPosTool2Seld) ,XIC(S020RB01.Int.MaintPosTool3Seld) ,XIC(S020RB01.Int.MaintPosTool4Seld) ,XIC(S020RB01.Int.MaintPosNoToolSeld) ][XIC(S020RB01.I1.Clrtransfer) OTE(S020RB01.Int.Maintenance) ,OTE(S020RB01.Int.MaintenanceSetup) ];
				RC: "############################$N"
				    "Robot Initiate Permissives$N"
				    "$N"
				    "Do not Edit Permissives$N"
				    "Lucid Motors Controls Dpt.$N"
				    "############################";
				N: [XIC(S020RB01.Int.AirOn) OTE(S020RB01.Int.InitPerm1.Inp_Perm00) ,XIO(S020RB01.Int.CycleComp) OTE(S020RB01.Int.InitPerm1.Inp_Perm01) ,XIO(S020RB01.Int.RetHome) OTE(S020RB01.Int.InitPerm1.Inp_Perm02) ,XIO(S020RB01.I1.RvtAuto) OTE(S020RB01.Int.InitPerm1.Inp_Perm03) ,XIO(S020RB01.I1.RvtClrAtNose) OTE(S020RB01.Int.InitPerm1.Inp_Perm04) ,P_Perm(S020RB01.Int.InitPerm1) ];
				N: [XIC(S020RB01.I1.Auto) OTE(S020RB01.Int.InitPerm2.Inp_Perm00) ,XIC(S020RB01.Int.TeachSSOff) OTE(S020RB01.Int.InitPerm2.Inp_Perm01) ,XIO(S020RB01.Int.CycEndSeld) OTE(S020RB01.Int.InitPerm2.Inp_Perm02) ,XIO(S020RB01.Int.RetFromPounceSeld) OTE(S020RB01.Int.InitPerm2.Inp_Perm03) ,XIO(S020RB01.Int.AutoModeStopReq) OTE(S020RB01.Int.InitPerm2.Inp_Perm04) ,XIO(S020RB01.Int.FixtInPosHold) OTE(S020RB01.Int.InitPerm2.Inp_Perm05) ,[XIO(S020RB01.I1.RvtInCycle) ,XIC(S020RB01.Int.InitRdy) ] OTE(S020RB01.Int.InitPerm2.Inp_Perm06) ,[XIO(S020RB01.I1.RvtProc1Welded) ,XIC(S020RB01.Int.InitRdy) ] OTE(S020RB01.Int.InitPerm2.Inp_Perm07) ,[XIC(S020RB01.I1.RvtRdyToOp) ,XIC(S020RB01.Int.Maintenance) ] OTE(S020RB01.Int.InitPerm2.Inp_Perm08) ,P_Perm(S020RB01.Int.InitPerm2) ];
				N: XIC(S020RB01.Int.AutoMode)[XIC(S020RB01.Int.SprSetup.Sts_PermOK) XIC(S020RB01.Int.PickUpSetup.Sts_PermOK) XIC(S020RB01.Int.InitPerm1.Sts_PermOK) ,XIC(S020RB01.Int.Maintenance) ]XIC(S020RB01.Int.InitPerm2.Sts_PermOK)OTE(S020RB01.Int.InitRdy);
				RC: "############################$N"
				    "Robot Style Selection Outputs$N"
				    "############################";
				N: XIC(S020RB01.Int.InitRdy)[XIC(S020RB01.Int.PgmReq.0) OTE(S020RB01.O1.Style1) ,XIC(S020RB01.Int.PgmReq.1) OTE(S020RB01.O1.Style2) ,XIC(S020RB01.Int.PgmReq.2) OTE(S020RB01.O1.Style3) ,XIC(S020RB01.Int.PgmReq.3) OTE(S020RB01.O1.Style4) ,XIC(S020RB01.Int.PgmReq.4) OTE(S020RB01.O1.Style5) ,XIC(S020RB01.Int.PgmReq.5) OTE(S020RB01.O1.Style6) ,XIC(S020RB01.Int.PgmReq.6) OTE(S020RB01.O1.Style7) ,XIC(S020RB01.Int.PgmReq.7) OTE(S020RB01.O1.Style8) ];
				N: [XIC(S020RB01.Int.RetFromPounceSeld) ,XIC(S020RB01.Int.AbortPickSeld) ,XIC(S020RB01.Int.MaintPosTool1Seld) ,XIC(S020RB01.Int.MaintPosTool2Seld) ,XIC(S020RB01.Int.MaintPosTool3Seld) ,XIC(S020RB01.Int.MaintPosTool4Seld) ,XIC(S020RB01.Int.MaintPosNoToolSeld) ]OTE(S020RB01.Int.RetHome);
				N: XIC(S020RB01.Int.AutoMode)XIC(S020RB01.Int.InitRdy)XIC(S020RB01.Int.StartCycleSU)OTE(S020RB01.Int.StartCycle);
				N: [XIC(S020RB01.Int.TaskComp) XIC(S020RB01.Int.LastDropComp) XIC(S020RB01.Int.EOATHome) XIC(S020RB01.Int.NoPartPres) ,XIC(S020RB01.Int.SetCycleComp) [XIC(S020RB01.I1.AtHome) ,XIC(S020RB01.I1.ClrUnclamp) XIC(S020RB01.I1.Clrtransfer) ] ]OTL(S020RB01.Int.CycleComp);
				N: [XIC(S020RB01.Int.RstCycleComp) ,XIC(S020RB01.Int.ManualMode) XIC(S020RB01.Int.ToolRst) ]OTU(S020RB01.Int.CycleComp);
				RC: "############################$N"
				    "Outputs$N"
				    "############################";
				N: OTE(S020RB01.O1.Stop)OTE(S020RB01.O1.SafeSpeed)OTE(S020RB01.O1.MtnEnable);
				N: XIC(S020RB01.Int.ExtRunEnable)OTE(S020RB01.O1.Hold);
				N: XIC(S020RB01.Int.FltReset)OTE(S020RB01.O1.FaultRst);
				N: XIC(S020RB01.Int.DryCycle)OTE(S020RB01.O1.DryCycle);
				N: XIC(S020RB01Sfty.Int.EnblRbt)XIC(S020RB01.Int.AutoMode)[XIC(S020RB01.Int.RbtRdySU) XIC(S020RB01.O1.PdnStart) XIC(S020RB01.I1.Auto) XIO(S020RB01.I1.Pg_Running) XIO(S020RB01.I1.Pg_Paused) XIC(S020RB01.I1.AtHome) ,XIC(S020RB01.I1.Auto) XIC(S020RB01.I1.Pg_Paused) XIO(S020RB01.I1.Pg_Running) ]XIO(S020RB01.I1.RbtHeld)OTE(S020RB01.O1.UOPStart);
				N: GRT(S020RB01.Int.PgmReq,0)XIO(S020RB01.Int.Maintenance)XIC(S020RB01.Int.InitRdy)OTE(S020RB01.O1.PdnStart);
				N: XIC(S020RB01.Int.RetHome)OTE(S020RB01.O1.RetHome);
				RC: "############################$N"
				    "Robot AOIs$N"
				    "$N"
				    "RobotStdPNSelect$N"
				    "RobotStdSpeedSelect$N"
				    "############################";
				N: RobotStdPNSelect(S020RB01.AOIs.PN,S020RB01.Int.PNPerm1,S020RB01.Int.PNPerm2,S020RB01.I1,S020RB01.O1,S020RB01.Int.DecisionPermHMI)RobotStdSpeedSelect(S020RB01.AOIs.Speed,S020RB01.I1,S020RB01.O1);
				RC: "############################$N"
				    "Robot Standard$N"
				    "Cycle Time$N"
				    "############################";
				N: NOP();
				N: XIC(S020RB01.Int.AutoMode)XIO(S020RB01.I1.RbtHeld)XIO(S020RB01.I1.Pg_Paused)XIO(S020RB01.I1.AtHome)XIO(S020RB01.I1.WaitingOnInput)XIO(S020RB01.Int.Maintenance)MOV(3600000,S020RB01.Int.CycleTimeTmr.PRE)RTO(S020RB01.Int.CycleTimeTmr,?,?);
				N: MOV(3600000,S020RB01.Int.TackTimeTmr.PRE)RTO(S020RB01.Int.TackTimeTmr,?,?);
				N: GRT(S020RB01.Int.CycleTimeTmr.ACC,S020RB01.Int.CycleTime)OTE(S020RB01.Int.Overtime);
				N: XIC(S020RB01.I1.AtHome)XIO(S020RB01.I1.Pg_Running)[XIO(S020RB01.Int.CycleTimeOns) [MOV(S020RB01.Int.CycleTimeTmr.ACC,S020RB01.Int.CycleTimeStore) ,RES(S020RB01.Int.CycleTimeTmr) ,MOV(S020RB01.Int.TackTimeTmr.ACC,S020RB01.Int.TackTimeStore) ,RES(S020RB01.Int.TackTimeTmr) ] ,OTL(S020RB01.Int.CycleTimeOns) ];
				N: XIC(S020RB01.Int.TaskComp)OTU(S020RB01.Int.CycleTimeOns);
		END_ROUTINE

		ROUTINE D02_RB_Edit 
				RC: "############################$N"
				    "Robot Editable Routine$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Robot Motion and Part Present Logic$N"
				    "Editable Routine$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Robot Motion and Part Present Logic$N"
				    "############################";
				N: NOP();
				N: XIO(S020RB01.I1.MH1_PP1)XIO(S020RB01.I1.MH1_PP2)XIO(S020RB01.I1.MH1_PP3)XIO(S020RB01.I1.MH1_PP4)OTE(S020RB01.Int.NoPartPres);
				N: XIC(S020RB01.Int.NoPartPres)XIC(S020RB01.SR.Int.NoPart)OTE(S020RB01.Int.Empty);
				N: XIC(S020RB01.I1.MH1_PP1)XIC(S020RB01.I1.MH1_PP2)OTE(S020RB01.Int.PartPres1);
				N: XIC(S020RB01.I1.MH1_PP3)XIC(S020RB01.I1.MH1_PP4)OTE(S020RB01.Int.PartPres2);
				N: [XIC(S020RB01.Int.PartPres1) XIC(S020RB01.SR.Int.Model1) ,XIC(S020RB01.Int.PartPres2) XIC(S020RB01.SR.Int.Model2) ]OTE(S020RB01.Int.AllPPAndSR);
				RC: "############################$N"
				    "All Tasks Complete$N"
				    "############################";
				N: XIC(S020RB01.Int.Spr1Comp)OTE(S020RB01.Int.TaskComp);
				RC: "############################$N"
				    "Reset Cycle Complete$N"
				    "############################";
				N: [XIC(S020RB01.Int.CycleComp) XIC(S020RB01.Int.ToolRst) XIC(S020RB01.Int.Empty) XIC(S020RB01.Int.ClearOfAllPicks) XIC(S020RB01.Int.ClearOfAllDrops) XIC(S020RB01.Int.EOATHome) XIC(Edit.Bit) ,XIC(S020RB01.Int.RstCycleCompPB.PB) ]OTE(S020RB01.Int.RstCycleComp);
				RC: "############################$N"
				    "Material Handler Pick Process Setup$N"
				    "$N"
				    "Editable Setup$N"
				    "############################";
				N: XIC(Edit.Bit)[XIC(S020RB01.Int.Empty) OTE(S020RB01.Int.PickUpSetup.Inp_Perm00) ,[XIC(S020RB01.Int.Pick1Setup) ,XIC(S020RB01.Int.Pick2Setup) ,XIC(S020RB01.Int.Pick3Setup) ,XIC(S020RB01.Int.Pick4Setup) ] OTE(S020RB01.Int.PickUpSetup.Inp_Perm01) ,[XIC(S020RB01.Int.EOATHome) ,XIC(S020RB01.Int.NoTool) ] OTE(S020RB01.Int.PickUpSetup.Inp_Perm02) ,P_Perm(S020RB01.Int.PickUpSetup) ];
				RC: "############################$N"
				    "Self Pierce Rivet Process Setup$N"
				    "$N"
				    "Editable Setup$N"
				    "############################";
				N: XIC(Edit.Bit)[[XIC(S020RB01.I1.RvtOnOff) ,XIC(S020RB01.Int.DryCycle) XIO(S020RB01.I1.RvtOnOff) ] OTE(S020RB01.Int.SprSetup.Inp_Perm00) ,[XIO(S020RB01.I1.RvtFault) ,XIC(S020RB01.Int.DryCycle) ,XIC(S020RB01.Int.InitRdy) ,XIC(S020RB01.Int.DryCycle) XIO(S020RB01.I1.RvtOnOff) ] OTE(S020RB01.Int.SprSetup.Inp_Perm01) ,XIC(S020RB01.Int.ToolSprPos1) OTE(S020RB01.Int.SprSetup.Inp_Perm02) ,XIC(Edit.Bit) OTE(S020RB01.Int.SprSetup.Inp_Perm03) ,P_Perm(S020RB01.Int.SprSetup) ];
				RC: "############################$N"
				    "Robot Style Selection$N"
				    "$N"
				    "31 - Air GT Glass Roof$N"
				    "41 - Air Pure Metal Roof$N"
				    "############################";
				N: MOV(0,S020RB01.Int.PgmReq);
				N: XIO(S020RB01.Int.Maintenance)XIC(S020TL1.SR.Int.Part)[XIC(S020RB01.Int.EOATHome) ,XIC(S020RB01.Int.NoTool) ]XIO(S020RB01.SR.Int.NoPart)[XIC(Edit.Bit) XIC(S020TL1.SR.Int.Model1) XIC(S020TL1.SR.Data.Options.CarModel.0) XIC(S020TL1.SR.Data.Options.CanRoofPack.0) MOV(31,S020RB01.Int.PgmReq) ,XIC(Edit.Bit) XIC(S020TL1.SR.Int.Model2) XIC(S020TL1.SR.Data.Options.CarModel.0) XIC(S020TL1.SR.Data.Options.CanRoofPack.1) MOV(41,S020RB01.Int.PgmReq) ];
				N: XIC(S020RB01.Int.Maintenance)MOV(6,S020RB01.Int.PgmReq);
				RC: "############################$N"
				    "Pick Process Setup$N"
				    "$N"
				    "Add Required Conditions to Enable Robot Pick$N"
				    "############################";
				N: NOP();
				N: XIC(S020RB01.Int.AutoMode)XIC(S020RB01.Int.Empty)XIC(S020RB01.Int.EOATHome)XIC(S020TL1.Sta.ClrToUnld)XIO(S020RB01.Int.AbortPickSeld)OTE(S020RB01.Int.Pick1Setup);
				N: XIC(S020RB01.Int.AutoMode)XIC(Edit.Bit)XIO(S020RB01.Int.AbortPickSeld)OTE(S020RB01.Int.Pick2Setup);
				N: XIC(S020RB01.Int.AutoMode)XIC(Edit.Bit)XIO(S020RB01.Int.AbortPickSeld)OTE(S020RB01.Int.Pick3Setup);
				RC: "############################$N"
				    "Drop Process Setup$N"
				    "$N"
				    "Add Required Conditions to Enable Robot Drop$N"
				    "############################";
				N: NOP();
				N: XIC(S020TL1.Sta.LoadPos1)XIC(S020TL1.Sta.ClrToLoad)XIC(Edit.Bit)OTE(S020RB01.Int.Drop1Setup);
				N: XIC(S020TL1.Sta.LoadPos1)XIC(Edit.Bit)OTE(S020RB01.Int.Drop2Setup);
				N: XIC(S020TL1.Sta.LoadPos2)XIC(Edit.Bit)OTE(S020RB01.Int.Drop3Setup);
				RC: "############################$N"
				    "Robot Functions Control Mapping$N"
				    "############################";
				N: XIC(S020RB01.Int.AutoMode)XIC(S020RB01.Int.RetFromPouncePB.PB)OTL(S020RB01.Int.RetFromPounceSeld);
				N: XIC(S020RB01.Int.RetFromPounceCancelPB.PB)OTU(S020RB01.Int.RetFromPounceSeld);
				N: [XIC(S020RB01.Int.RetFromMaintPosPB.PB) ,XIC(S020RB01.Int.MaintCompPB.PB) ]OTE(S020RB01.Int.RetFromMaintSeld);
				N: XIC(S020RB01.Int.AutoMode)XIO(S020RB01.Int.DryCycle)XIO(S020RB01.Int.Pick1Comp)XIO(S020RB01.Int.Pick2Comp)XIO(S020RB01.Int.Pick3Comp)XIO(S020RB01.Int.Pick4Comp)XIO(S020RB01.Int.Pick5Comp)XIC(S020RB01.Int.AbortPickPB.PB)OTL(S020RB01.Int.AbortPickSeld);
				N: [XIC(S020RB01.Int.AutoMode) ,XIC(S020RB01.Int.ManualMode) ]XIC(S020RB01.I1.AtHome)XIC(S020RB01.Int.AbortPickCancelPB.PB)OTU(S020RB01.Int.AbortPickSeld);
				RC: "############################$N"
				    "Pick Up Process Completes Logic$N"
				    "$N"
				    "Add the required Part Present, EOAT Work Position, Tool Zone, and PN$N"
				    "############################";
				N: NOP();
				N: [XIC(S020RB01.I1.Auto) ,XIC(S020RB01.Int.InTeach) ,XIC(S020RB01.Int.ManualMode) XIC(S020RB01.Int.SetPick1CompPB.PB) ][XIC(S020RB01.Int.PartPres1) ,XIC(S020RB01.Int.DryCycle) ]XIC(S020RB01.Int.EOATWorkPos1)XIO(S020RB01.Int.ClearOfPick1)XIC(S020RB01.Int.ClearOfAllDrops)XIO(S020RB01.Int.AbortPickSeld)[XIC(S020RB01.AOIs.PN.stsPN51) ,XIC(Edit.Debug) ]OTL(S020RB01.Int.Pick1Comp);
				N: [XIC(S020RB01.Int.CycleComp) XIC(S020RB01.Int.ClearOfPick1) ,XIC(S020RB01.Int.InTeach) XIO(S020RB01.Int.AnyPartPres1) XIC(S020RB01.Int.EOATHome) XIC(Edit.Bit) ,XIC(S020RB01.Int.ManualMode) XIC(S020RB01.Int.RstPick1CompPB.PB) ]OTU(S020RB01.Int.Pick1Comp);
				N: [XIC(S020RB01.I1.Auto) ,XIC(S020RB01.Int.InTeach) ,XIC(S020RB01.Int.ManualMode) XIC(S020RB01.Int.SetPick2CompPB.PB) ][XIC(S020RB01.Int.PartPres2) ,XIC(S020RB01.Int.DryCycle) ]XIC(S020RB01.Int.EOATWorkPos2)XIO(S020RB01.Int.ClearOfPick2)XIC(S020RB01.Int.ClearOfAllDrops)XIO(S020RB01.Int.AbortPickSeld)[XIC(S020RB01.AOIs.PN.stsPN52) ,XIC(Edit.Debug) ]XIC(Edit.Bit)OTL(S020RB01.Int.Pick2Comp);
				N: [XIC(S020RB01.Int.CycleComp) XIC(S020RB01.Int.ClearOfPick2) ,XIC(S020RB01.Int.InTeach) XIO(S020RB01.Int.AnyPartPres2) XIC(S020RB01.Int.EOATHome) XIC(Edit.Bit) ,XIC(S020RB01.Int.ManualMode) XIC(S020RB01.Int.RstPick2CompPB.PB) ]OTU(S020RB01.Int.Pick2Comp);
				N: [XIC(S020RB01.I1.Auto) ,XIC(S020RB01.Int.InTeach) ,XIC(S020RB01.Int.ManualMode) XIC(S020RB01.Int.SetPick3CompPB.PB) ][XIC(S020RB01.Int.PartPres3) ,XIC(S020RB01.Int.DryCycle) ]XIC(S020RB01.Int.EOATWorkPos3)XIO(S020RB01.Int.ClearOfPick3)XIC(S020RB01.Int.ClearOfAllDrops)XIO(S020RB01.Int.AbortPickSeld)[XIC(S020RB01.AOIs.PN.stsPN53) ,XIC(Edit.Debug) ]XIC(Edit.Bit)OTL(S020RB01.Int.Pick3Comp);
				N: [XIC(S020RB01.Int.CycleComp) XIC(S020RB01.Int.ClearOfPick3) ,XIC(S020RB01.Int.InTeach) XIO(S020RB01.Int.AnyPartPres3) XIC(S020RB01.Int.EOATHome) XIC(Edit.Bit) ,XIC(S020RB01.Int.ManualMode) XIC(S020RB01.Int.RstPick3CompPB.PB) ]OTU(S020RB01.Int.Pick3Comp);
				RC: "############################$N"
				    "Drop Off Process Completes Logic$N"
				    "$N"
				    "Add the required Part Present, EOAT Work Position, Tool Zone, and PN$N"
				    "############################";
				N: NOP();
				N: XIC(S020RB01.I1.AtDrop1)[XIC(S020TL1.Sta.AllPartsPres1) ,XIC(S020RB01.Int.ManualMode) XIC(S020RB01.Int.SetDrop1CompPB.PB) ]XIC(S020RB01.Int.EOATHome)XIO(S020RB01.Int.ClearOfDrop1)OTL(S020RB01.Int.Drop1Comp);
				N: XIC(S020RB01.I1.AtDrop2)[XIC(S020TL1.Sta.AllPartsPres1) ,XIC(S020RB01.Int.ManualMode) XIC(S020RB01.Int.SetDrop2CompPB.PB) ]XIC(S020RB01.Int.EOATHome)XIO(S020RB01.Int.ClearOfDrop2)XIC(Edit.Bit)OTL(S020RB01.Int.Drop2Comp);
				N: XIC(S020RB01.I1.AtDrop3)[XIC(S020TL1.Sta.AllPartsPres2) ,XIC(S020RB01.Int.ManualMode) XIC(S020RB01.Int.SetDrop3CompPB.PB) ]XIC(S020RB01.Int.EOATHome)XIO(S020RB01.Int.ClearOfDrop3)XIC(Edit.Bit)OTL(S020RB01.Int.Drop3Comp);
				N: XIC(S020RB01.Int.Drop1Comp)OTE(S020RB01.Int.LastDropComp);
				N: [XIC(S020RB01.Int.CycleComp) XIC(S020RB01.Int.ClearOfAllDrops) ,XIC(S020RB01.Int.RstCycleComp) ,XIC(S020RB01.Int.ManualMode) XIC(S020RB01.Int.RstDrop1CompPB.PB) ]XIC(Edit.Bit)[OTU(S020RB01.Int.Drop1Comp) ,OTU(S020RB01.Int.Drop2Comp) ,OTU(S020RB01.Int.Drop3Comp) ,OTU(S020RB01.Int.Drop4Comp) ,OTU(S020RB01.Int.Drop5Comp) ];
				RC: "############################$N"
				    "Rvt SPR Process Completes Logic$N"
				    "$N"
				    "Add the required Part Present, Rvt Completes, Tool Zone, and PN$N"
				    "############################";
				N: NOP();
				N: XIC(S020RB01.Int.AutoMode)XIO(S020RB01.Int.Maintenance)XIC(S020RB01.I1.RvtProc1Welded)XIO(S020RB01.I1.Clrtransfer)XIO(S020RB01.I1.ClrUnclamp)OTL(S020RB01.Int.Spr1Rvtd);
				N: XIC(S020RB01.Int.AutoMode)XIO(S020RB01.Int.Maintenance)XIC(S020RB01.I1.RvtProc2Welded)XIO(S020RB01.I1.Clrtransfer)XIO(S020RB01.I1.ClrUnclamp)OTL(S020RB01.Int.Spr2Rvtd);
				N: [XIC(S020RB01.Int.CycleComp) ,XIC(S020RB01.I1.RvtSkipAll) ,XIC(S020RB01.I1.RvtFault) ,XIC(S020RB01.Int.RstCycleComp) ,XIC(Edit.Bit) ][OTU(S020RB01.Int.Spr1Rvtd) ,OTU(S020RB01.Int.Spr2Rvtd) ];
				N: [XIC(S020RB01.Int.Spr1Rvtd) XIC(S020RB01.I1.RvtSeqComp) ,XIC(S020RB01.Int.ManualMode) XIC(S020RB01.Int.SetSpr1CompPB.PB) ]OTL(S020RB01.Int.Spr1Comp);
				N: [XIC(S020RB01.Int.Spr2Rvtd) XIC(S020RB01.I1.RvtSeqComp) ,XIC(S020RB01.Int.ManualMode) XIC(S020RB01.Int.SetSpr2CompPB.PB) ]OTL(S020RB01.Int.Spr2Comp);
				N: [XIC(S020RB01.Int.CycleComp) ,XIC(S020RB01.Int.RstCycleComp) ,XIC(S020RB01.Int.ManualMode) XIC(S020RB01.Int.RstSpr1CompPB.PB) ]XIC(Edit.Bit)[OTU(S020RB01.Int.Spr1Comp) ,OTU(S020RB01.Int.Spr2Comp) ];
				N: XIC(S020RB01.Int.AutoMode)XIO(S020RB01.Int.DryCycle)XIC(S020RB01.I1.RvtInCycle)XIC(S020RB01.I1.RvtFault)XIO(S020RB01.I1.Clrtransfer)OTL(S020RB01.Int.SprFault);
				N: [XIO(S020RB01.I1.RvtFault) XIC(S020RB01.I1.RvtOnOff) ,XIC(S020RB01.Int.DryCycle) XIO(S020RB01.I1.RvtOnOff) ]OTU(S020RB01.Int.SprFault);
				RC: "############################$N"
				    "Robot Cycle Complete$N"
				    "############################";
				N: OTU(S020RB01.Int.SetCycleCompPB.Vis)OTU(S020RB01.Int.RstCycleCompPB.Vis);
				RC: "############################$N"
				    "Maintenance Functions$N"
				    "############################";
				N: OTU(S020RB01.Int.GlobalMaintPosPB.Vis)OTU(S020RB01.Int.GoToMaintPosTool1PB.Vis)OTU(S020RB01.Int.GoToMaintPosTool2PB.Vis)OTU(S020RB01.Int.GoToMaintPosTool3PB.Vis)OTU(S020RB01.Int.GoToMaintPosTool4PB.Vis)OTU(S020RB01.Int.GoToMaintPosNoToolPB.Vis)OTU(S020RB01.Int.RetFromMaintPosPB.Vis)OTU(S020RB01.Int.MaintCompPB.Vis);
				RC: "############################$N"
				    "Material Handling Functions$N"
				    "############################";
				N: [OTU(S020RB01.Int.RetFromPouncePB.Vis) ,OTU(S020RB01.Int.RetFromPounceCancelPB.Vis) ][OTU(S020RB01.Int.AbortPickPB.Vis) ,OTU(S020RB01.Int.AbortPickCancelPB.Vis) ][OTU(S020RB01.Int.SetPick1CompPB.Vis) OTU(S020RB01.Int.SetPick2CompPB.Vis) OTU(S020RB01.Int.SetPick3CompPB.Vis) OTU(S020RB01.Int.SetPick4CompPB.Vis) OTU(S020RB01.Int.SetPick5CompPB.Vis) ,OTU(S020RB01.Int.RstPick1CompPB.Vis) OTU(S020RB01.Int.RstPick2CompPB.Vis) OTU(S020RB01.Int.RstPick3CompPB.Vis) OTU(S020RB01.Int.RstPick4CompPB.Vis) OTU(S020RB01.Int.RstPick5CompPB.Vis) ][OTU(S020RB01.Int.SetDrop1CompPB.Vis) OTU(S020RB01.Int.SetDrop2CompPB.Vis) OTU(S020RB01.Int.SetDrop3CompPB.Vis) OTU(S020RB01.Int.SetDrop4CompPB.Vis) OTU(S020RB01.Int.SetDrop5CompPB.Vis) ,OTU(S020RB01.Int.RstDrop1CompPB.Vis) OTU(S020RB01.Int.RstDrop2CompPB.Vis) OTU(S020RB01.Int.RstDrop3CompPB.Vis) OTU(S020RB01.Int.RstDrop4CompPB.Vis) OTU(S020RB01.Int.RstDrop5CompPB.Vis) ];
				RC: "############################$N"
				    "Self Pierce Rivet Functions$N"
				    "############################";
				N: [OTU(S020RB01.Int.SetSpr1CompPB.Vis) ,OTU(S020RB01.Int.RstSpr1CompPB.Vis) ][OTU(S020RB01.Int.SetSpr2CompPB.Vis) ,OTU(S020RB01.Int.RstSpr2CompPB.Vis) ][OTU(S020RB01.Int.SetSpr3CompPB.Vis) ,OTU(S020RB01.Int.RstSpr3CompPB.Vis) ][OTU(S020RB01.Int.SetSpr4CompPB.Vis) ,OTU(S020RB01.Int.RstSpr4CompPB.Vis) ][OTU(S020RB01.Int.SetSpr5CompPB.Vis) ,OTU(S020RB01.Int.RstSpr5CompPB.Vis) ];
		END_ROUTINE

		ROUTINE D03_RB_PNs 
				RC: "############################$N"
				    "Process Numbers Logic$N"
				    "$N"
				    "PN Control$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Maintenance Position$N"
				    "############################";
				N: XIC(S020RB01.AOIs.PN.stsPN3)OTE(S020RB01.Int.AtMaint);
				RC: "############################$N"
				    "Maintenance Position Clear$N"
				    "############################";
				N: XIC(S020RB01.AOIs.PN.stsPN3)[XIC(S020RB01.Int.AutoMode) OTE(S020RB01.PNPerm.PN3Perm1.Inp_Perm00) ,XIO(S020RB01.Int.MaintPosTool1Seld) XIO(S020RB01.Int.MaintPosTool2Seld) XIO(S020RB01.Int.MaintPosTool3Seld) XIO(S020RB01.Int.MaintPosTool4Seld) XIO(S020RB01.Int.MaintPosNoToolSeld) OTE(S020RB01.PNPerm.PN3Perm1.Inp_Perm01) ,XIC(S020RB01.Int.RetFromMaintSeld) OTE(S020RB01.PNPerm.PN3Perm1.Inp_Perm02) ,XIC(S020RB01.I1.AtMaintPos) OTE(S020RB01.PNPerm.PN3Perm1.Inp_Perm03) ,P_Perm(S020RB01.PNPerm.PN3Perm1) ]COP(S020RB01.PNPerm.PN3Perm1,S020RB01.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S020RB01.Int.PNPerm2,1);
		END_ROUTINE

		ROUTINE D04_RB_MapOutpus 
				RC: "############################$N"
				    "Robot Standard Output Mapping$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Output Mapping$N"
				    "############################";
				N: [XIO(S020RB01.ENet.CommOK) FLL(0,S020RB01.O1,1) ,XIC(S020RB01.ENet.CommOK) COP(S020RB01.O1,S020RB01:O1,1) ];
		END_ROUTINE

		ROUTINE Y00_Alarms_L1 
				RC: "******************************************************************$N"
				    "Robot Alarms$N"
				    "****************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Machine Faults$N"
				    "******************************************************************";
				N: NOP();
		END_ROUTINE

		ROUTINE Y01_Alarms_L2 
				RC: "******************************************************************$N"
				    "Robot Alarms$N"
				    "****************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Manual Interventions$N"
				    "******************************************************************";
				N: NOP();
		END_ROUTINE

		ROUTINE Y02_Alarms_L3 
				RC: "******************************************************************$N"
				    "Robot Alarms$N"
				    "****************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Warnings$N"
				    "******************************************************************";
				N: NOP();
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S020RB02 (Description := "Carry Gun Sealer Robot",
	                  Class := Standard,
	                  MAIN := "A00_Main",
	                  MODE := 0,
	                  DisableFlag := 0,
	                  UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE A00_Main 
				N: JSR(D00_RB_MapInputs,0);
				N: JSR(D01_RB_Zones,0);
				N: JSR(D02_RB,0);
				N: JSR(D02_RB_Edit,0);
				N: JSR(D03_RB_PNs,0);
				N: JSR(D04_RB_MapOutpus,0);
				N: JSR(Y00_Alarms_L1,0);
				N: JSR(Y01_Alarms_L2,0);
				N: JSR(Y02_Alarms_L3,0);
		END_ROUTINE

		ROUTINE D00_RB_MapInputs 
				RC: "############################$N"
				    "Carry Gun Sealer  Application$N"
				    "Input Mapping$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Carry Gun Sealer Robot$N"
				    "Input Mapping$N"
				    "############################";
				N: [XIO(S020RB02.ENet.CommOK) FLL(0,S020RB02.I1,1) ,XIC(S020RB02.ENet.CommOK) COP(S020RB02:I1.Input[0],S020RB02.I1,1) ];
				N: [XIC(S020TL1.Sta.AutoMode) OTE(S020RB02.Int.AutoMode) ,XIC(S020TL1.Sta.ManualMode) OTE(S020RB02.Int.ManualMode) ];
				N: XIC(S020TL1.Sta.DryCycle)XIO(S020RB02.I1.Seal1InCycle)OTE(S020RB02.Int.DryCycle);
				N: [XIC(S020TL1.Sta.AutoModeStopReq) ,XIC(Z005_040.AutoModeStopReq) ]OTE(S020RB02.Int.AutoModeStopReq);
				N: [XIC(Edit.Bit) MOV(1500,S020RB02.Int.AirOnDelayTmr.PRE) TOF(S020RB02.Int.AirOnDelayTmr,?,?) ,XIC(S020RB02.Int.AirOnDelayTmr.DN) OTE(S020RB02.Int.AirOn) ];
				N: XIC(Edit.Bit)OTU(S020RB02.Int.DisableDrives);
				N: XIC(S020TL1.Sta.RstCycComp)OTE(S020RB02.Int.ToolRst);
				N: [XIC(S020TL1.Sta.FaultResetPB) XIC(sZ005_040.AllGatesOk) ,XIC(sZ005_040.StaPowerEnblPB) ,XIC(S020RB02.Int.ExtMotorOn) ]OTE(S020RB02.Int.FltReset);
				N: XIC(S020RB02.Int.SetCycleCompPB.PB)OTE(S020RB02.Int.SetCycleComp);
		END_ROUTINE

		ROUTINE D01_RB_Zones 
				RC: "******************************************************************$N"
				    "Robot Standard$N"
				    "Zones$N"
				    "$N"
				    "Zn1 = Pick$N"
				    "Zn2 = Drop$N"
				    "Zn3 = Maintenance Position$N"
				    "$N"
				    "Zn4-10 TBD$N"
				    "******************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "RobotStdZone AOI Setup$N"
				    "$N"
				    "1. OTE Zn#Used to Enable. If Zone not used OTU$N"
				    "$N"
				    "2. Add All Adjacent Zone.outRbtZnClrMem -]/[- $N"
				    "$N"
				    "3. Add all required tool Pick/Drop Setup Conditions$N"
				    "******************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Zone 1$N"
				    "$N"
				    "S020RB02 Zone 1 with S020RB02 Zone 3$N"
				    "S020RB02 Pick$N"
				    "******************************************************************";
				N: [OTE(S020RB02.Int.Zn1Used) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn1ClrMem) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn1ToolCond) ,RobotStdZone(S020RB02.AOIs.Zone[1],S020RB02.Int.Zn1Used,S020RB02.Int.Zn1ClrMem,S020RB02.Int.Zn1ToolCond,S020RB02.I1.ClrIntfZn1,S020RB02.O1.ZnClear1) ];
				RC: "******************************************************************$N"
				    "Zone 2$N"
				    "******************************************************************";
				N: [OTE(S020RB02.Int.Zn2Used) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn2ClrMem) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn2ToolCond) ,RobotStdZone(S020RB02.AOIs.Zone[2],S020RB02.Int.Zn2Used,S020RB02.Int.Zn2ClrMem,S020RB02.Int.Zn2ToolCond,S020RB02.I1.ClrIntfZn2,S020RB02.O1.ZnClear2) ];
				RC: "******************************************************************$N"
				    "Zone 3$N"
				    "******************************************************************";
				N: [OTU(S020RB02.Int.Zn3Used) ,XIO(S020RB01.AOIs.Zone[1].outRbtZnClrMem) OTE(S020RB02.Int.Zn3ClrMem) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn3ToolCond) ,RobotStdZone(S020RB02.AOIs.Zone[3],S020RB02.Int.Zn3Used,S020RB02.Int.Zn3ClrMem,S020RB02.Int.Zn3ToolCond,S020RB02.I1.ClrIntfZn3,S020RB02.O1.ZnClear3) ];
				RC: "******************************************************************$N"
				    "Zone 4$N"
				    "******************************************************************";
				N: [OTU(S020RB02.Int.Zn4Used) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn4ClrMem) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn4ToolCond) ,RobotStdZone(S020RB02.AOIs.Zone[4],S020RB02.Int.Zn4Used,S020RB02.Int.Zn4ClrMem,S020RB02.Int.Zn4ToolCond,S020RB02.I1.ClrIntfZn4,S020RB02.O1.ZnClear4) ];
				RC: "******************************************************************$N"
				    "Zone 5$N"
				    "******************************************************************";
				N: [OTU(S020RB02.Int.Zn5Used) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn5ClrMem) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn5ToolCond) ,RobotStdZone(S020RB02.AOIs.Zone[5],S020RB02.Int.Zn5Used,S020RB02.Int.Zn5ClrMem,S020RB02.Int.Zn5ToolCond,S020RB02.I1.ClrIntfZn5,S020RB02.O1.ZnClear5) ];
				RC: "******************************************************************$N"
				    "Zone 6$N"
				    "******************************************************************";
				N: [OTU(S020RB02.Int.Zn6Used) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn6ClrMem) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn6ToolCond) ,RobotStdZone(S020RB02.AOIs.Zone[6],S020RB02.Int.Zn6Used,S020RB02.Int.Zn6ClrMem,S020RB02.Int.Zn6ToolCond,S020RB02.I1.ClrIntfZn6,S020RB02.O1.ZnClear6) ];
				RC: "******************************************************************$N"
				    "Zone 7$N"
				    "******************************************************************";
				N: [OTU(S020RB02.Int.Zn7Used) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn7ClrMem) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn7ToolCond) ,RobotStdZone(S020RB02.AOIs.Zone[7],S020RB02.Int.Zn7Used,S020RB02.Int.Zn7ClrMem,S020RB02.Int.Zn7ToolCond,S020RB02.I1.ClrIntfZn7,S020RB02.O1.ZnClear7) ];
				RC: "******************************************************************$N"
				    "Zone 8$N"
				    "******************************************************************";
				N: [OTU(S020RB02.Int.Zn8Used) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn8ClrMem) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn8ToolCond) ,RobotStdZone(S020RB02.AOIs.Zone[8],S020RB02.Int.Zn8Used,S020RB02.Int.Zn8ClrMem,S020RB02.Int.Zn8ToolCond,S020RB02.I1.ClrIntfZn8,S020RB02.O1.ZnClear8) ];
				RC: "******************************************************************$N"
				    "Zone 9$N"
				    "******************************************************************";
				N: [OTU(S020RB02.Int.Zn9Used) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn9ClrMem) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn9ToolCond) ,RobotStdZone(S020RB02.AOIs.Zone[9],S020RB02.Int.Zn9Used,S020RB02.Int.Zn9ClrMem,S020RB02.Int.Zn9ToolCond,S020RB02.I1.ClrIntfZn9,S020RB02.O1.ZnClear9) ];
				RC: "******************************************************************$N"
				    "Zone 10$N"
				    "******************************************************************";
				N: [OTU(S020RB02.Int.Zn10Used) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn10ClrMem) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn10ToolCond) ,RobotStdZone(S020RB02.AOIs.Zone[10],S020RB02.Int.Zn10Used,S020RB02.Int.Zn10ClrMem,S020RB02.Int.Zn10ToolCond,S020RB02.I1.ClrIntfZn10,S020RB02.O1.ZnClear10) ];
				RC: "******************************************************************$N"
				    "Zone 11$N"
				    "******************************************************************";
				N: [OTU(S020RB02.Int.Zn11Used) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn11ClrMem) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn11ToolCond) ,RobotStdZone(S020RB02.AOIs.Zone[11],S020RB02.Int.Zn11Used,S020RB02.Int.Zn11ClrMem,S020RB02.Int.Zn11ToolCond,S020RB02.I1.ClrIntfZn11,S020RB02.O1.ZnClear11) ];
				RC: "******************************************************************$N"
				    "Zone 12$N"
				    "******************************************************************";
				N: [OTU(S020RB02.Int.Zn12Used) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn12ClrMem) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn12ToolCond) ,RobotStdZone(S020RB02.AOIs.Zone[12],S020RB02.Int.Zn12Used,S020RB02.Int.Zn12ClrMem,S020RB02.Int.Zn12ToolCond,S020RB02.I1.ClrIntfZn12,S020RB02.O1.ZnClear12) ];
				RC: "******************************************************************$N"
				    "Zone 13$N"
				    "******************************************************************";
				N: [OTU(S020RB02.Int.Zn13Used) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn13ClrMem) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn13ToolCond) ,RobotStdZone(S020RB02.AOIs.Zone[13],S020RB02.Int.Zn13Used,S020RB02.Int.Zn13ClrMem,S020RB02.Int.Zn13ToolCond,S020RB02.I1.ClrIntfZn13,S020RB02.O1.ZnClear13) ];
				RC: "******************************************************************$N"
				    "Zone 14$N"
				    "******************************************************************";
				N: [OTU(S020RB02.Int.Zn14Used) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn14ClrMem) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn14ToolCond) ,RobotStdZone(S020RB02.AOIs.Zone[14],S020RB02.Int.Zn14Used,S020RB02.Int.Zn14ClrMem,S020RB02.Int.Zn14ToolCond,S020RB02.I1.ClrIntfZn14,S020RB02.O1.ZnClear14) ];
				RC: "******************************************************************$N"
				    "Zone 15$N"
				    "******************************************************************";
				N: [OTU(S020RB02.Int.Zn15Used) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn15ClrMem) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn15ToolCond) ,RobotStdZone(S020RB02.AOIs.Zone[15],S020RB02.Int.Zn15Used,S020RB02.Int.Zn15ClrMem,S020RB02.Int.Zn15ToolCond,S020RB02.I1.ClrIntfZn15,S020RB02.O1.ZnClear15) ];
				RC: "******************************************************************$N"
				    "Zone 16$N"
				    "******************************************************************";
				N: [OTU(S020RB02.Int.Zn16Used) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn16ClrMem) ,XIC(Edit.Bit) OTE(S020RB02.Int.Zn16ToolCond) ,RobotStdZone(S020RB02.AOIs.Zone[16],S020RB02.Int.Zn16Used,S020RB02.Int.Zn16ClrMem,S020RB02.Int.Zn16ToolCond,S020RB02.I1.ClrIntfZn16,S020RB02.O1.ZnClear16) ];
				N: [XIO(S020RB02.AOIs.Zone[1].outRbtZnClrMem) ,XIC(S020RB02.I1.AtHome) ]OTE(S020RB02.Int.ClearOfTool1);
				N: [XIC(Edit.Bit) ,XIC(S020RB02.I1.AtHome) ]OTE(S020RB02.Int.ClearOfTool2);
				N: [XIC(Edit.Bit) ,XIC(S020RB02.I1.AtHome) ]OTE(S020RB02.Int.ClearOfTool3);
				N: [XIC(Edit.Bit) ,XIC(S020RB02.I1.AtHome) ]OTE(S020RB02.Int.ClearOfTool4);
				N: [XIC(Edit.Bit) ,XIC(S020RB02.I1.AtHome) ]OTE(S020RB02.Int.ClearOfTool5);
		END_ROUTINE

		ROUTINE D02_RB 
				RC: "############################$N"
				    "S020 RB01$N"
				    "Fanuc Robot Carry Gun Sealer Application$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Rung to see which PN is Active$N"
				    "############################";
				N: NEQ(S020RB02.AOIs.PN.stsPN,0)NOP();
				N: [XIO(S020RB02.I1.PendEnbld) XIC(S020RB02Sfty.Int.TeachOff) OTE(S020RB02.Int.TeachSSOff) ,XIC(S020RB02.I1.PendEnbld) XIC(S020RB02Sfty.Int.TeachSeld) OTE(S020RB02.Int.InTeach) ];
				N: XIC(sZ005_040.PowerEnbld)XIC(sZ005_040.PerimeterSafe)XIC(S020RB02Sfty.Int.EnblRbt)XIC(S020RB02Sfty.Int.TeachOff)XIC(S020RB02Sfty.Int.AdjRbtsTeachOff)XIO(S020RB02Sfty.Int.DisableDrives)XIO(S020RB02.I1.Auto)[XIC(Z005_040.GlobalAutoModePB) ,XIC(S020RB02.Int.SrvoOnDwlTmr.TT) ]XIC(Z005_040.AirOn)XIC(Z005_040.AllModCommOk)[MOV(3000,S020RB02.Int.SrvoOnDwlTmr.PRE) TON(S020RB02.Int.SrvoOnDwlTmr,?,?) ,XIC(S020RB02.Int.SrvoOnDwlTmr.EN) XIO(S020RB02.Int.SrvoOnDwlTmr.DN) OTE(S020RB02.Int.ExtMotorOn) ];
				RC: "############################$N"
				    "External Run Enable$N"
				    "############################";
				N: [XIO(S020RB02.Int.DisableDrives) [XIC(S020RB02.Int.AutoMode) XIC(S020RB02.I1.Auto) ,XIC(S020RB02.Int.ManualMode) ] ,XIC(S020RB02.Int.InTeach) ]MOV(1000,S020RB02.Int.RunEnableDelayTmr.PRE)TON(S020RB02.Int.RunEnableDelayTmr,?,?);
				N: XIC(S020RB02.Int.RunEnableDelayTmr.DN)[XIC(S020RB02.Int.AutoMode) XIC(S020RB02.I1.Auto) ,XIC(S020RB02.Int.InTeach) XIO(S020RB02.I1.Auto) ]OTE(S020RB02.Int.ExtRunEnable);
				RC: "############################$N"
				    "Robot Ready Status$N"
				    "############################";
				N: XIC(S020RB02.I1.Cmd_Enbl)XIC(S020RB02.I1.Sys_Rdy)XIO(S020RB02.I1.RbtFaulted)XIO(S020RB02.I1.PendEnbld)XIC(S020RB02.I1.Auto)OTE(S020RB02.Int.RbtRdySU);
				N: XIC(S020RB02.Int.RbtRdySU)XIC(S020RB02.I1.AtHome)XIO(S020RB02.I1.Pg_Running)XIO(S020RB02.I1.Pg_Paused)XIO(S020RB02.I1.RbtHeld)OTE(S020RB02.Int.RbtRdy);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S020RB02.Int.RetFromMaintSeld) ,XIC(S020RB02.Int.MaintPosNoToolSeld) ,XIC(S020RB02.Int.MaintPosTool2Seld) ,XIC(S020RB02.Int.MaintPosTool3Seld) ,XIC(S020RB02.Int.MaintPosTool4Seld) ]OTU(S020RB02.Int.MaintPosTool1Seld);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S020RB02.Int.RetFromMaintSeld) ,XIC(S020RB02.Int.MaintPosNoToolSeld) ,XIC(S020RB02.Int.MaintPosTool1Seld) ,XIC(S020RB02.Int.MaintPosTool3Seld) ,XIC(S020RB02.Int.MaintPosTool4Seld) ]OTU(S020RB02.Int.MaintPosTool2Seld);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S020RB02.Int.RetFromMaintSeld) ,XIC(S020RB02.Int.MaintPosNoToolSeld) ,XIC(S020RB02.Int.MaintPosTool1Seld) ,XIC(S020RB02.Int.MaintPosTool2Seld) ,XIC(S020RB02.Int.MaintPosTool4Seld) ]OTU(S020RB02.Int.MaintPosTool3Seld);
				RC: "############################$N"
				    "Maintenance Position Functions$N"
				    "############################";
				N: [XIC(S020RB02.Int.RetFromMaintSeld) ,XIC(S020RB02.Int.MaintPosNoToolSeld) ,XIC(S020RB02.Int.MaintPosTool1Seld) ,XIC(S020RB02.Int.MaintPosTool2Seld) ,XIC(S020RB02.Int.MaintPosTool3Seld) ]OTU(S020RB02.Int.MaintPosTool4Seld);
				N: [XIC(S020RB02.Int.RetFromMaintSeld) ,XIC(S020RB02.Int.MaintPosTool1Seld) ,XIC(S020RB02.Int.MaintPosTool2Seld) ,XIC(S020RB02.Int.MaintPosTool3Seld) ,XIC(S020RB02.Int.MaintPosTool4Seld) ]OTU(S020RB02.Int.MaintPosNoToolSeld);
				N: XIC(S020RB02.Int.AutoMode)[XIC(S020RB02.Int.GoToMaintPosTool1PB.PB) OTL(S020RB02.Int.MaintPosTool1Seld) ,XIC(S020RB02.Int.GoToMaintPosTool2PB.PB) OTL(S020RB02.Int.MaintPosTool2Seld) ,XIC(S020RB02.Int.GoToMaintPosTool3PB.PB) OTL(S020RB02.Int.MaintPosTool3Seld) ,XIC(S020RB02.Int.GoToMaintPosTool4PB.PB) OTL(S020RB02.Int.MaintPosTool4Seld) ];
				N: XIC(S020RB02.Int.AutoMode)XIC(S020RB02.Int.GoToMaintPosNoToolPB.PB)OTL(S020RB02.Int.MaintPosNoToolSeld);
				N: [XIC(S020RB02.Int.MaintPosTool1Seld) ,XIC(S020RB02.Int.MaintPosTool2Seld) ,XIC(S020RB02.Int.MaintPosTool3Seld) ,XIC(S020RB02.Int.MaintPosTool4Seld) ,XIC(S020RB02.Int.MaintPosNoToolSeld) ,XIC(S020RB02.Int.AutoPurgeDisp1Strtd) ,XIC(S020RB02.Int.AutoPurgeDisp2Strtd) ,XIC(S020RB02.Int.Nozzle1NOK) ,XIC(S020RB02.Int.Nozzle2NOK) ,XIC(S020RB02.Int.Nozzle1ChkStrtd) ,XIC(S020RB02.Int.Nozzle2ChkStrtd) ,XIC(S020RB02.Int.SealInspectReq) ][XIC(S020RB02.I1.Clrtransfer) OTE(S020RB02.Int.Maintenance) ,OTE(S020RB02.Int.MaintenanceSetup) ];
				RC: "############################$N"
				    "Robot Initiate Permissives$N"
				    "$N"
				    "Do not Edit Permissives$N"
				    "BIW Lucid Motors Controls Dpt.$N"
				    "############################";
				N: [XIC(S020RB02.Int.AirOn) OTE(S020RB02.Int.InitPerm1.Inp_Perm00) ,XIO(S020RB02.Int.CycleComp) OTE(S020RB02.Int.InitPerm1.Inp_Perm01) ,XIO(S020RB02.Int.RetHome) OTE(S020RB02.Int.InitPerm1.Inp_Perm02) ,XIO(S020RB02.Int.SealProc1Started) OTE(S020RB02.Int.InitPerm1.Inp_Perm03) ,P_Perm(S020RB02.Int.InitPerm1) ];
				N: [XIC(S020RB02.I1.Auto) OTE(S020RB02.Int.InitPerm2.Inp_Perm00) ,XIC(S020RB02.Int.TeachSSOff) OTE(S020RB02.Int.InitPerm2.Inp_Perm01) ,XIO(S020RB02.Int.CycEndSeld) OTE(S020RB02.Int.InitPerm2.Inp_Perm02) ,XIO(S020RB02.Int.RetFromPounceSeld) OTE(S020RB02.Int.InitPerm2.Inp_Perm03) ,XIO(S020RB02.Int.AutoModeStopReq) OTE(S020RB02.Int.InitPerm2.Inp_Perm04) ,[XIO(S020RB02.I1.Seal1InCycle) ,XIC(S020RB02.Int.InitRdy) ] OTE(S020RB02.Int.InitPerm2.Inp_Perm05) ,P_Perm(S020RB02.Int.InitPerm2) ];
				N: XIC(S020RB02.Int.AutoMode)[XIC(S020RB02.Int.SealSetup.Sts_PermOK) XIC(S020RB02.Int.InitPerm1.Sts_PermOK) ,XIC(S020RB02.Int.Maintenance) ]XIC(S020RB02.Int.InitPerm2.Sts_PermOK)OTE(S020RB02.Int.InitRdy);
				RC: "############################$N"
				    "Robot Style Selection Outputs$N"
				    "############################";
				N: XIC(S020RB02.Int.InitRdy)[XIC(S020RB02.Int.PgmReq.0) OTE(S020RB02.O1.Style1) ,XIC(S020RB02.Int.PgmReq.1) OTE(S020RB02.O1.Style2) ,XIC(S020RB02.Int.PgmReq.2) OTE(S020RB02.O1.Style3) ,XIC(S020RB02.Int.PgmReq.3) OTE(S020RB02.O1.Style4) ,XIC(S020RB02.Int.PgmReq.4) OTE(S020RB02.O1.Style5) ,XIC(S020RB02.Int.PgmReq.5) OTE(S020RB02.O1.Style6) ,XIC(S020RB02.Int.PgmReq.6) OTE(S020RB02.O1.Style7) ,XIC(S020RB02.Int.PgmReq.7) OTE(S020RB02.O1.Style8) ];
				N: [XIC(S020RB02.Int.RetFromPounceSeld) ,XIC(S020RB02.Int.MaintPosTool1Seld) ,XIC(S020RB02.Int.MaintPosTool2Seld) ,XIC(S020RB02.Int.MaintPosTool3Seld) ,XIC(S020RB02.Int.MaintPosTool4Seld) ,XIC(S020RB02.Int.MaintPosNoToolSeld) ,XIC(S020RB02.Int.SealProc1Interrupted) ,XIC(S020RB02.Int.Nozzle1NOK) ,XIC(S020RB02.Int.Nozzle2NOK) ,XIC(S020RB02.Int.AutoPurgeDisp1Strtd) ,XIC(S020RB02.Int.AutoPurgeDisp2Strtd) ]OTE(S020RB02.Int.RetHome);
				N: XIC(S020RB02.Int.AutoMode)XIC(S020RB02.Int.InitRdy)XIC(S020RB02.Int.StartCycleSU)OTE(S020RB02.Int.StartCycle);
				N: [XIC(S020RB02.Int.TaskComp) ,XIC(S020RB02.Int.SetCycleComp) [XIC(S020RB02.I1.AtHome) ,XIC(S020RB02.I1.ClrUnclamp) XIC(S020RB02.I1.Clrtransfer) ] ]OTL(S020RB02.Int.CycleComp);
				N: [XIC(S020RB02.Int.RstCycleComp) ,XIC(S020RB02.Int.ManualMode) XIC(S020RB02.Int.ToolRst) ]OTU(S020RB02.Int.CycleComp);
				RC: "############################$N"
				    "Outputs$N"
				    "############################";
				N: OTE(S020RB02.O1.Stop)OTE(S020RB02.O1.SafeSpeed)OTE(S020RB02.O1.MtnEnable);
				N: XIC(S020RB02.Int.ExtRunEnable)OTE(S020RB02.O1.Hold);
				N: XIC(S020RB02.Int.FltReset)OTE(S020RB02.O1.FaultRst);
				N: XIC(S020RB02.Int.DryCycle)OTE(S020RB02.O1.DryCycle);
				N: XIC(S020RB02Sfty.Int.EnblRbt)XIC(S020RB02.Int.AutoMode)[XIC(S020RB02.Int.RbtRdySU) XIC(S020RB02.O1.PdnStart) XIC(S020RB02.I1.Auto) XIO(S020RB02.I1.Pg_Running) XIO(S020RB02.I1.Pg_Paused) XIC(S020RB02.I1.AtHome) ,XIC(S020RB02.I1.Auto) XIC(S020RB02.I1.Pg_Paused) XIO(S020RB02.I1.Pg_Running) ]XIO(S020RB02.I1.RbtHeld)OTE(S020RB02.O1.UOPStart);
				N: GRT(S020RB02.Int.PgmReq,0)XIO(S020RB02.Int.Maintenance)XIC(S020RB02.Int.InitRdy)OTE(S020RB02.O1.PdnStart);
				N: XIC(S020RB02.Int.RetHome)OTE(S020RB02.O1.RetHome);
				RC: "############################$N"
				    "Robot AOIs$N"
				    "$N"
				    "RobotStdPNSelect$N"
				    "RobotStdSpeedSelect$N"
				    "############################";
				N: RobotStdPNSelect(S020RB02.AOIs.PN,S020RB02.Int.PNPerm1,S020RB02.Int.PNPerm2,S020RB02.I1,S020RB02.O1,S020RB02.Int.DecisionPermHMI)RobotStdSpeedSelect(S020RB02.AOIs.Speed,S020RB02.I1,S020RB02.O1);
				RC: "############################$N"
				    "Robot Standard$N"
				    "Cycle Time$N"
				    "############################";
				N: NOP();
				RC: "Change Value To Design Cycle Time";
				N: MOV(360000,S020RB02.Int.CycleTime);
				N: XIC(S020RB02.Int.AutoMode)XIO(S020RB02.I1.RbtHeld)XIO(S020RB02.I1.Pg_Paused)XIO(S020RB02.I1.AtHome)XIO(S020RB02.I1.WaitingOnInput)XIO(S020RB02.Int.Maintenance)MOV(3600000,S020RB02.Int.CycleTimeTmr.PRE)RTO(S020RB02.Int.CycleTimeTmr,?,?);
				N: MOV(3600000,S020RB02.Int.TackTimeTmr.PRE)RTO(S020RB02.Int.TackTimeTmr,?,?);
				N: GRT(S020RB02.Int.CycleTimeTmr.ACC,S020RB02.Int.CycleTime)OTE(S020RB02.Int.Overtime);
				N: XIC(S020RB02.I1.AtHome)XIO(S020RB02.I1.Pg_Running)[XIO(S020RB02.Int.CycleTimeOns) [MOV(S020RB02.Int.CycleTimeTmr.ACC,S020RB02.Int.CycleTimeStore) ,RES(S020RB02.Int.CycleTimeTmr) ,MOV(S020RB02.Int.TackTimeTmr.ACC,S020RB02.Int.TackTimeStore) ,RES(S020RB02.Int.TackTimeTmr) ] ,OTL(S020RB02.Int.CycleTimeOns) ];
				N: XIC(S020RB02.Int.TaskComp)OTU(S020RB02.Int.CycleTimeOns);
		END_ROUTINE

		ROUTINE D02_RB_Edit 
				RC: "############################$N"
				    "Robot Motion and Part Present Logic$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "All Tasks Complete$N"
				    "############################";
				N: XIC(S020RB02.Int.SealProc1Comp)XIC(S020RB02.Int.SealProc2Comp)XIC(S020RB02.Int.SealProc3Comp)XIO(S020RB02.Int.SealProc1Interrupted)OTE(S020RB02.Int.TaskComp);
				RC: "############################$N"
				    "Reset Cycle Complete$N"
				    "############################";
				N: [XIC(S020RB02.Int.ClearOfTool1) XIC(S020RB02.Int.ClearOfTool2) XIC(S020RB02.Int.ClearOfTool3) XIC(S020RB02.Int.ClearOfTool4) XIC(S020RB02.Int.ClearOfTool5) XIC(S020RB02.Int.CycleComp) XIC(S020RB02.Int.ToolRst) ,XIC(S020RB02.Int.RstCycleCompPB.PB) ]OTE(S020RB02.Int.RstCycleComp);
				RC: "############################$N"
				    "Robot Style Selection$N"
				    "$N"
				    "31 - Air GT Glass Roof$N"
				    "41 - Air Pure Metal Roof$N"
				    "############################";
				N: MOV(0,S020RB02.Int.PgmReq);
				N: XIO(S020RB02.Int.Maintenance)XIC(S020TL1.SR.Int.Part)[XIC(Edit.Bit) XIC(S020TL1.SR.Int.Model1) XIC(S020TL1.SR.Data.Options.CarModel.0) XIC(S020TL1.SR.Data.Options.CanRoofPack.0) MOV(31,S020RB02.Int.PgmReq) ,XIC(Edit.Bit) XIC(S020TL1.SR.Int.Model2) XIC(S020TL1.SR.Data.Options.CarModel.0) XIC(S020TL1.SR.Data.Options.CanRoofPack.1) MOV(41,S020RB02.Int.PgmReq) ];
				RC: "############################$N"
				    "Robot Maintenance Style$N"
				    "$N"
				    "6 - Maintenance$N"
				    "############################";
				N: XIC(S020RB02.Int.Maintenance)MOV(6,S020RB02.Int.PgmReq);
				RC: "############################$N"
				    "Robot Style Selection$N"
				    "Dispense Maintenance Programs$N"
				    "$N"
				    "8 - Auto Purge Dispense System 1$N"
				    "9 - Auto Purge Dispense System 2$N"
				    "10 - Nozzle 1 Check$N"
				    "11 - Nozzle 2 Check$N"
				    "############################";
				N: XIO(S020RB02.Int.DryCycle)[XIC(S020RB02.Int.AutoPurgeDisp1Strtd) MOV(8,S020RB02.Int.PgmReq) ,XIC(S020RB02.Int.AutoPurgeDisp2Strtd) MOV(9,S020RB02.Int.PgmReq) ];
				N: XIC(S020RB02.Int.Maintenance)[XIC(S020RB02.Int.Nozzle1ChkStrtd) MOV(10,S020RB02.Int.PgmReq) ,XIC(S020RB02.Int.Nozzle1ChkStrtd) MOV(11,S020RB02.Int.PgmReq) ];
				RC: "############################$N"
				    "Sealer Robot Ready Permissive$N"
				    "$N"
				    "Editable Setup$N"
				    "############################";
				N: XIC(Edit.Bit)[[XIC(S020RB02.I1.Seal1Ready) ,XIC(S020RB02.Int.DryCycle) ,XIC(S020RB02.Int.InitRdy) ] OTE(S020RB02.Int.SealSetup.Inp_Perm00) ,[XIO(S020RB02.I1.Seal1NoMjrFlt) ,XIC(S020RB02.Int.DryCycle) ,XIC(S020RB02.Int.InitRdy) ] OTE(S020RB02.Int.SealSetup.Inp_Perm01) ,[XIO(S020RB02.I1.Seal1NoMnrFlt) ,XIC(S020RB02.Int.DryCycle) ,XIC(S020RB02.Int.InitRdy) ] OTE(S020RB02.Int.SealSetup.Inp_Perm02) ,XIC(Edit.Bit) OTE(S020RB02.Int.SealSetup.Inp_Perm03) ,P_Perm(S020RB02.Int.SealSetup) ];
				RC: "############################$N"
				    "Robot Functions Control Mapping$N"
				    "############################";
				N: XIC(S020RB02.Int.AutoMode)XIC(S020RB02.Int.RetFromPouncePB.PB)OTL(S020RB02.Int.RetFromPounceSeld);
				N: XIC(S020RB02.Int.RetFromPounceCancelPB.PB)OTU(S020RB02.Int.RetFromPounceSeld);
				N: [XIC(S020RB02.Int.RetFromMaintPosPB.PB) ,XIC(S020RB02.Int.MaintCompPB.PB) ]OTE(S020RB02.Int.RetFromMaintSeld);
				RC: "############################$N"
				    "Dispense Sealer$N"
				    "Process Logic$N"
				    "############################";
				N: NOP();
				N: [XIC(S020RB02.Int.AutoMode) [XIC(S020RB02.I1.Seal1InCycle) XIC(S020RB02.I1.Seal1Ready) XIO(S020RB02.I1.Seal1VolumeOK) ,XIC(S020RB02.Int.DryCycle) ] XIO(S020RB02.Int.ClearOfTool1) ,XIC(S020RB02.Int.SealProc1Started) ]XIO(S020RB02.Int.InTeach)XIO(S020RB02.Int.SealProc1Comp)XIO(S020RB02.Int.CycleComp)XIC(S020RB02.Int.ToolInSealPos)OTE(S020RB02.Int.SealProc1Started);
				N: XIC(S020RB02.Int.SealProc1Started)[XIC(S020RB02.Int.Seal1VolumeFlt) ,XIO(S020RB02.Int.ExtRunEnable) ]XIO(S020RB02.Int.SealProc1Comp)OTL(S020RB02.Int.SealProc1Interrupted);
				N: XIC(S020RB02.Int.ContinueSeal1Proc)OTU(S020RB02.Int.SealProc1Interrupted);
				N: [XIC(S020RB02.Int.SealProc1Started) [XIC(S020RB02.Int.ClearOfTool1) XIC(S020RB02.I1.Seal1VolumeOK) XIO(S020RB02.Int.Seal1VolumeFlt) ,XIC(S020RB02.Int.DryCycle) XIO(S020RB02.Int.ClearOfTool1) ] ,XIC(S020RB02.Int.ManualMode) XIC(S020RB02.Int.SetSealProc1CompPB.PB) ]OTL(S020RB02.Int.SealProc1Comp);
				N: [XIC(S020RB02.Int.CycleComp) ,XIC(S020RB02.Int.RstCycleComp) ,XIC(S020RB02.Int.ManualMode) XIC(S020RB02.Int.RstSealProc1CompPB.PB) ]OTU(S020RB02.Int.SealProc1Comp);
				N: XIC(S020RB02.Int.AutoMode)XIO(S020RB02.Int.DryCycle)XIC(S020RB02.Int.SealProc1Started)XIC(S020RB02.Int.ClearOfTool1)XIO(S020RB02.I1.Seal1VolumeOK)XIO(S020RB02.Int.SealProc1Comp)[MOV(5000,S020RB02.Int.Seal1VolumeFltDly.PRE) TON(S020RB02.Int.Seal1VolumeFltDly,?,?) ,XIC(S020RB02.Int.Seal1VolumeFltDly.DN) XIO(S020RB02.Int.Seal1VolumeFltOns) [OTL(S020RB02.Int.Seal1VolumeFlt) ,OTL(S020RB02.Int.Seal1VolumeFltOns) ] ];
				N: [XIC(S020RB02.Int.AutoMode) [XIC(S020RB02.Int.CycleComp) ,XIC(S020RB02.Int.ContinueSeal1Proc) ] ,XIC(Edit.Bit) ][OTU(S020RB02.Int.Seal1VolumeFlt) ,OTU(S020RB02.Int.Seal1VolumeFltOns) ];
				RC: "############################$N"
				    "Robot Cycle Complete$N"
				    "############################";
				N: OTU(S020RB02.Int.SetCycleCompPB.Vis)OTU(S020RB02.Int.RstCycleCompPB.Vis);
				RC: "############################$N"
				    "Maintenance Functions$N"
				    "############################";
				N: OTU(S020RB02.Int.GlobalMaintPosPB.Vis)OTU(S020RB02.Int.GoToMaintPosTool1PB.Vis)OTU(S020RB02.Int.GoToMaintPosTool2PB.Vis)OTU(S020RB02.Int.GoToMaintPosTool3PB.Vis)OTU(S020RB02.Int.GoToMaintPosTool4PB.Vis)OTU(S020RB02.Int.GoToMaintPosNoToolPB.Vis)OTU(S020RB02.Int.RetFromMaintPosPB.Vis)OTU(S020RB02.Int.MaintCompPB.Vis);
				RC: "############################$N"
				    "Dispense Functions$N"
				    "############################";
				N: [OTU(S020RB02.Int.SetSealProc1CompPB.Vis) ,OTU(S020RB02.Int.RstSealProc1CompPB.Vis) ][OTU(S020RB02.Int.SetSealProc2CompPB.Vis) ,OTU(S020RB02.Int.RstSealProc2CompPB.Vis) ][OTU(S020RB02.Int.SetSealProc3CompPB.Vis) ,OTU(S020RB02.Int.RstSealProc3CompPB.Vis) ]OTU(S020RB02.Int.AutoPurgeDisp1PB.Vis)OTU(S020RB02.Int.AutoPurgeDisp2PB.Vis)OTU(S020RB02.Int.Nozzle1ChkPB.Vis)OTU(S020RB02.Int.Nozzle2ChkPB.Vis);
		END_ROUTINE

		ROUTINE D03_RB_PNs 
				N: NOP();
				RC: "############################$N"
				    "Process Numbers Logic$N"
				    "$N"
				    "PN Control$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Maintenance Position$N"
				    "############################";
				N: XIC(S020RB02.AOIs.PN.stsPN3)OTE(S020RB02.Int.AtMaint);
				RC: "############################$N"
				    "Pounce Position$N"
				    "$N"
				    "Waiting For Start Cycle Command To Continue$N"
				    "############################";
				N: XIC(S020RB02.AOIs.PN.stsPN9)[XIC(S020RB02.Int.StartCycle) OTE(S020RB02.PNPerm.PN9Perm1.Inp_Perm00) ,XIC(Edit.Bit) OTE(S020RB02.PNPerm.PN9Perm1.Inp_Perm01) ,XIC(Edit.Bit) OTE(S020RB02.PNPerm.PN9Perm1.Inp_Perm02) ,XIC(Edit.Bit) OTE(S020RB02.PNPerm.PN9Perm1.Inp_Perm03) ,XIC(Edit.Bit) OTE(S020RB02.PNPerm.PN9Perm1.Inp_Perm04) ,XIC(Edit.Bit) OTE(S020RB02.PNPerm.PN9Perm1.Inp_Perm05) ,P_Perm(S020RB02.PNPerm.PN9Perm1) ]COP(S020RB02.PNPerm.PN9Perm1,S020RB02.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S020RB02.Int.PNPerm2,1);
				RC: "############################$N"
				    "Maintenance Position Clear$N"
				    "############################";
				N: XIC(S020RB02.AOIs.PN.stsPN3)[XIC(S020RB02.Int.AutoMode) OTE(S020RB02.PNPerm.PN3Perm1.Inp_Perm00) ,XIO(S020RB02.Int.MaintPosTool1Seld) XIO(S020RB02.Int.MaintPosTool2Seld) XIO(S020RB02.Int.MaintPosTool3Seld) XIO(S020RB02.Int.MaintPosTool4Seld) XIO(S020RB02.Int.MaintPosNoToolSeld) OTE(S020RB02.PNPerm.PN3Perm1.Inp_Perm01) ,XIC(S020RB02.Int.RetFromMaintSeld) OTE(S020RB02.PNPerm.PN3Perm1.Inp_Perm02) ,XIC(S020RB02.I1.AtMaintPos) OTE(S020RB02.PNPerm.PN3Perm1.Inp_Perm03) ,P_Perm(S020RB02.PNPerm.PN3Perm1) ]COP(S020RB02.PNPerm.PN3Perm1,S020RB02.Int.PNPerm1,1)COP(Status.P_Perm_AlwaysOn,S020RB02.Int.PNPerm2,1);
		END_ROUTINE

		ROUTINE D04_RB_MapOutpus 
				RC: "############################$N"
				    "Robot Standard Output Mapping$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Carry Gun Seal Robot$N"
				    "Output Mapping$N"
				    "############################";
				N: [XIO(S020RB02.ENet.CommOK) FLL(0,S020RB02.O1,1) ,XIC(S020RB02.ENet.CommOK) COP(S020RB02.O1,S020RB02:O1,1) ];
		END_ROUTINE

		ROUTINE Y00_Alarms_L1 
				RC: "******************************************************************$N"
				    "Robot Alarms$N"
				    "****************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Machine Faults$N"
				    "******************************************************************";
				N: NOP();
		END_ROUTINE

		ROUTINE Y01_Alarms_L2 
				RC: "******************************************************************$N"
				    "Robot Alarms$N"
				    "****************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Manual Interventions$N"
				    "******************************************************************";
				N: NOP();
		END_ROUTINE

		ROUTINE Y02_Alarms_L3 
				RC: "******************************************************************$N"
				    "Robot Alarms$N"
				    "****************************************************************";
				N: NOP();
				RC: "******************************************************************$N"
				    "Warnings$N"
				    "******************************************************************";
				N: NOP();
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S020Sfty (Class := Safety,
	                  MAIN := "s_A00_Main",
	                  MODE := 0,
	                  DisableFlag := 0,
	                  UseAsFolder := 0)
		TAG
			sR01AOI : RobotSftyAOI  := [131,[0,[0,0,0],[0,0,0],0,[0,0,0,0,0,0,0,0,0],0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0],0,0,0]];
			sR02AOI : RobotSftyAOI  := [131,[0,[0,0,0],[0,0,0],0,[0,0,0,0,0,0,0,0,0],0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0],0,0,0]];
			sR03AOI : RobotSftyAOI  := [131,[0,[0,0,0],[0,0,0],0,[0,0,0,0,0,0,0,0,0],0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0],0,0,0]];
			sR04AOI : RobotSftyAOI  := [131,[0,[0,0,0],[0,0,0],0,[0,0,0,0,0,0,0,0,0],0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0],0,0,0]];
			sR05AOI : RobotSftyAOI  := [131,[0,[0,0,0],[0,0,0],0,[0,0,0,0,0,0,0,0,0],0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0],0,0,0]];
			sR06AOI : RobotSftyAOI  := [131,[0,[0,0,0],[0,0,0],0,[0,0,0,0,0,0,0,0,0],0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0],0,0,0]];
		END_TAG

		ROUTINE s_A00_Main 
				N: JSR(s_B00_ModStatus,0);
				N: JSR(s_E00_RB01,0);
				N: JSR(s_E00_RB02,0);
				N: JSR(s_E00_RB03,0);
				N: JSR(s_E00_RB04,0);
				N: JSR(s_E00_RB05,0);
				N: JSR(s_E00_RB06,0);
				N: JSR(s_E01_TL1,0);
				N: JSR(s_Z00_Summary,0);
		END_ROUTINE

		ROUTINE s_B00_ModStatus (Description := "Safety Module IO Status")
				RC: "************************************************************$N"
				    "FRM007 Module Status$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Module 1 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: OTE(S020Sfty.Mod1.RunMode);
				N: OTE(S020Sfty.Mod1.InputStatus);
				N: OTE(S020Sfty.Mod1.OutputStatus);
				RC: "************************************************************$N"
				    "Module 2 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: OTE(S020Sfty.Mod2.RunMode);
				N: OTE(S020Sfty.Mod2.InputStatus);
				N: OTE(S020Sfty.Mod2.OutputStatus);
				RC: "************************************************************$N"
				    "Module Summary$N"
				    "************************************************************";
				N: XIC(S020Sfty.Mod1.RunMode)XIC(S020Sfty.Mod2.RunMode)OTE(S020Sfty.AllModRunMode);
				N: XIC(S020Sfty.Mod1.InputStatus)XIC(S020Sfty.Mod2.InputStatus)OTE(S020Sfty.AllModInStatusOk);
				N: XIC(S020Sfty.Mod1.OutputStatus)XIC(S020Sfty.Mod2.OutputStatus)OTE(S020Sfty.AllModOutStatusOk);
		END_ROUTINE

		ROUTINE s_E00_RB01 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "FRM020 RB01$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S020RB01:SI.Input[0],S020RB01Sfty.I,1);
				N: XIC(S020RB01:SI.RunMode)OTE(S020RB01Sfty.Int.ModRunMode);
				N: XIC(S020RB01:SI.ConnectionFaulted)OTE(S020RB01Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "############################";
				N: OTE(S020RB01Sfty.Int.AreaSafe);
				N: OTE(S020RB01Sfty.Int.Zn1LtScrnActive);
				N: OTE(S020RB01Sfty.Int.Zn2LtScrnActive);
				N: OTE(S020RB01Sfty.Int.Zn3LtScrnActive);
				N: OTE(S020RB01Sfty.Int.Zn4LtScrnActive);
				N: OTE(S020RB01Sfty.Int.Zn5LtScrnActive);
				N: OTE(S020RB01Sfty.Int.Zn6LtScrnActive);
				N: OTE(S020RB01Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S020RB01Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S020RB01Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S020RB01Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS020RB01)OTE(S020RB01Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS020RB01)OTE(S020RB01Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR01AOI,S020RB01Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S020RB01Sfty.O,S020RB01:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_E00_RB02 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "FRM020 RB02$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S020RB02:SI.Input[0],S020RB02Sfty.I,1);
				N: XIC(S020RB02:SI.RunMode)OTE(S020RB02Sfty.Int.ModRunMode);
				N: XIC(S020RB02:SI.ConnectionFaulted)OTE(S020RB02Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "############################";
				N: OTE(S020RB02Sfty.Int.AreaSafe);
				N: OTE(S020RB02Sfty.Int.Zn1LtScrnActive);
				N: OTE(S020RB02Sfty.Int.Zn2LtScrnActive);
				N: OTE(S020RB02Sfty.Int.Zn3LtScrnActive);
				N: OTE(S020RB02Sfty.Int.Zn4LtScrnActive);
				N: OTE(S020RB02Sfty.Int.Zn5LtScrnActive);
				N: OTE(S020RB02Sfty.Int.Zn6LtScrnActive);
				N: OTE(S020RB02Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S020RB02Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S020RB02Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S020RB02Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS020RB02)OTE(S020RB02Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS020RB02)OTE(S020RB02Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR02AOI,S020RB02Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S020RB02Sfty.O,S020RB02:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_E00_RB03 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "FRM020 RB03$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S020RB03:SI.Input[0],S020RB03Sfty.I,1);
				N: XIC(S020RB03:SI.RunMode)OTE(S020RB03Sfty.Int.ModRunMode);
				N: XIC(S020RB03:SI.ConnectionFaulted)OTE(S020RB03Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "############################";
				N: OTE(S020RB03Sfty.Int.AreaSafe);
				N: OTE(S020RB03Sfty.Int.Zn1LtScrnActive);
				N: OTE(S020RB03Sfty.Int.Zn2LtScrnActive);
				N: OTE(S020RB03Sfty.Int.Zn3LtScrnActive);
				N: OTE(S020RB03Sfty.Int.Zn4LtScrnActive);
				N: OTE(S020RB03Sfty.Int.Zn5LtScrnActive);
				N: OTE(S020RB03Sfty.Int.Zn6LtScrnActive);
				N: OTE(S020RB03Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S020RB03Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S020RB03Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S020RB03Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS020RB03)OTE(S020RB03Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS020RB03)OTE(S020RB03Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR03AOI,S020RB03Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S020RB03Sfty.O,S020RB03:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_E00_RB04 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "FRM020 RB04$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S020RB04:SI.Input[0],S020RB04Sfty.I,1);
				N: XIC(S020RB04:SI.RunMode)OTE(S020RB04Sfty.Int.ModRunMode);
				N: XIC(S020RB04:SI.ConnectionFaulted)OTE(S020RB04Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "############################";
				N: OTE(S020RB04Sfty.Int.AreaSafe);
				N: OTE(S020RB04Sfty.Int.Zn1LtScrnActive);
				N: OTE(S020RB04Sfty.Int.Zn2LtScrnActive);
				N: OTE(S020RB04Sfty.Int.Zn3LtScrnActive);
				N: OTE(S020RB04Sfty.Int.Zn4LtScrnActive);
				N: OTE(S020RB04Sfty.Int.Zn5LtScrnActive);
				N: OTE(S020RB04Sfty.Int.Zn6LtScrnActive);
				N: OTE(S020RB04Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S020RB04Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S020RB04Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S020RB04Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS020RB04)OTE(S020RB04Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS020RB04)OTE(S020RB04Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR04AOI,S020RB04Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S020RB04Sfty.O,S020RB04:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_E00_RB05 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "FRM020 RB05$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S020RB05:SI.Input[0],S020RB05Sfty.I,1);
				N: XIC(S020RB05:SI.RunMode)OTE(S020RB05Sfty.Int.ModRunMode);
				N: XIC(S020RB05:SI.ConnectionFaulted)OTE(S020RB05Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "############################";
				N: OTE(S020RB05Sfty.Int.AreaSafe);
				N: OTE(S020RB05Sfty.Int.Zn1LtScrnActive);
				N: OTE(S020RB05Sfty.Int.Zn2LtScrnActive);
				N: OTE(S020RB05Sfty.Int.Zn3LtScrnActive);
				N: OTE(S020RB05Sfty.Int.Zn4LtScrnActive);
				N: OTE(S020RB05Sfty.Int.Zn5LtScrnActive);
				N: OTE(S020RB05Sfty.Int.Zn6LtScrnActive);
				N: OTE(S020RB05Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S020RB05Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S020RB05Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S020RB05Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS020RB05)OTE(S020RB05Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS020RB05)OTE(S020RB05Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR05AOI,S020RB05Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S020RB05Sfty.O,S020RB05:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_E00_RB06 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "FRM020 RB06$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S020RB06:SI.Input[0],S020RB06Sfty.I,1);
				N: XIC(S020RB06:SI.RunMode)OTE(S020RB06Sfty.Int.ModRunMode);
				N: XIC(S020RB06:SI.ConnectionFaulted)OTE(S020RB06Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "############################";
				N: OTE(S020RB06Sfty.Int.AreaSafe);
				N: OTE(S020RB06Sfty.Int.Zn1LtScrnActive);
				N: OTE(S020RB06Sfty.Int.Zn2LtScrnActive);
				N: OTE(S020RB06Sfty.Int.Zn3LtScrnActive);
				N: OTE(S020RB06Sfty.Int.Zn4LtScrnActive);
				N: OTE(S020RB06Sfty.Int.Zn5LtScrnActive);
				N: OTE(S020RB06Sfty.Int.Zn6LtScrnActive);
				N: OTE(S020RB06Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S020RB06Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S020RB06Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S020RB06Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS020RB06)OTE(S020RB06Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS020RB06)OTE(S020RB06Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR06AOI,S020RB06Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S020RB06Sfty.O,S020RB06:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_E01_TL1 (Description := "Station Fixture Safety Routine")
				RC: "************************************************************$N"
				    "FRM020 TL1$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Minor Motion Enable$N"
				    "************************************************************$N"
				    "$N"
				    "This feature is disabled by default.$N"
				    "Use needs to be approved by Controls Department";
				N: OTU(S020Sfty.MinorMtnEnbld);
				N: XIC(sZ005_040.AllEStopsOk)[XIC(sZ005_040.PerimeterSafe) XIC(S020Sfty.AllStaLtScrnOK) ,XIC(sZ005_040.AnyBypassSwOn) ][XIC(S020Sfty.FX1.MotionEnbl) ,XIC(S020Sfty.FX1.SoftStartPwrOn) ]OTE(S020Sfty.FX1.SoftStartPwrOn);
				N: XIC(sZ005_040.PowerEnbld)XIC(S020Sfty.AllStaLtScrnOK)OTE(S020Sfty.FX1.MotionEnbl);
				RC: "Soft Start Valve Power Output$N"
				    "************************************************************";
				N: XIC(S020Sfty.FX1.SoftStartPwrOn)[OTE(S020TL1SIO1:O.Pt00Data) ,OTE(S020TL1SIO1:O.Pt01Data) ];
				RC: "Valve Manifold DC Power Output$N"
				    "************************************************************";
				N: XIC(S020Sfty.FX1.MotionEnbl)[OTE(S020TL1SIO1:O.Pt02Data) ,OTE(S020TL1SIO1:O.Pt03Data) ,OTE(S020TL1SIO1:O.Pt04Data) ,OTE(S020TL1SIO1:O.Pt05Data) ,OTE(S020TL1SIO1:O.Pt06Data) ,OTE(S020TL1SIO1:O.Pt07Data) ,OTE(S020TL1SIO2:O.Pt00Data) ,OTE(S020TL1SIO2:O.Pt01Data) ];
		END_ROUTINE

		ROUTINE s_Z00_Summary (Description := "Station Safety Summary")
				N: OTU(S020Sfty.Oper1Instd)OTU(S020Sfty.Oper2Instd);
				N: OTU(S020Sfty.LoadAssistInstld);
				N: [XIO(S020Sfty.OperLS.LC1.LCB) ,XIO(S020Sfty.OperLS.LC1Installed) ][XIO(S020Sfty.OperLS.LC2.LCB) ,XIO(S020Sfty.OperLS.LC2Installed) ][XIO(S020Sfty.OperLS.LC3.LCB) ,XIO(S020Sfty.OperLS.LC3Installed) ][XIO(S020Sfty.OperLS.SCN1_1.LCB) ,XIO(S020Sfty.OperLS.SCN1_1Installed) ][XIO(S020Sfty.OperLS.SCN1_2.LCB) ,XIO(S020Sfty.OperLS.SCN1_2Installed) ][XIO(S020Sfty.OperLS.SCN2_1.LCB) ,XIO(S020Sfty.OperLS.SCN2_1Installed) ][XIO(S020Sfty.OperLS.SCN2_2.LCB) ,XIO(S020Sfty.OperLS.SCN2_2Installed) ]OTE(S020Sfty.StaZn1NotBlkd);
				N: [XIC(S020Sfty.OperLS.LC1.O1) ,XIO(S020Sfty.OperLS.LC1Installed) ][XIC(S020Sfty.OperLS.LC2.O1) ,XIO(S020Sfty.OperLS.LC2Installed) ][XIC(S020Sfty.OperLS.LC3.O1) ,XIO(S020Sfty.OperLS.LC3Installed) ][XIC(S020Sfty.OperLS.SCN1_1.O1) ,XIO(S020Sfty.OperLS.SCN1_1Installed) ][XIC(S020Sfty.OperLS.SCN1_2.O1) ,XIO(S020Sfty.OperLS.SCN1_2Installed) ][XIC(S020Sfty.OperLS.SCN2_1.O1) ,XIO(S020Sfty.OperLS.SCN2_1Installed) ][XIC(S020Sfty.OperLS.SCN2_2.O1) ,XIO(S020Sfty.OperLS.SCN2_2Installed) ]OTE(S020Sfty.StaZn1Active);
				N: OTE(S020Sfty.StaZn2NotBlkd);
				N: OTE(S020Sfty.StaZn2Active);
				N: OTE(S020Sfty.StaZn3NotBlkd);
				N: OTE(S020Sfty.StaZn3Active);
				N: XIC(S020Sfty.StaZn1Active)XIC(S020Sfty.StaZn2Active)XIC(S020Sfty.StaZn3Active)OTE(S020Sfty.AllStaLtScrnOK);
				N: XIC(S020Sfty.LoadAssistInstld)OTE(S020Sfty.LoadAssistClear);
				N: XIC(S020Sfty.LoadAssistInstld)OTE(S020Sfty.LoadAssistActive);
				N: XIC(S020Sfty.Oper1Instd)XIC(sEdit.Bit)OTE(S020Sfty.Oper1SwipeStart);
				N: XIC(S020Sfty.Oper2Instd)XIC(sEdit.Bit)OTE(S020Sfty.Oper2SwipeStart);
				N: XIC(sSftyFromStd.ClearToUnlock.11)OTE(S020Sfty.ClearToUnlock);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S030Sfty (Class := Safety,
	                  MAIN := "s_A00_Main",
	                  MODE := 0,
	                  DisableFlag := 0,
	                  UseAsFolder := 0)
		TAG
			sR01AOI : RobotSftyAOI  := [131,[0,[0,0,0],[0,0,0],0,[0,0,0,0,0,0,0,0,0],0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0],0,0,0]];
			sR02AOI : RobotSftyAOI  := [131,[0,[0,0,0],[0,0,0],0,[0,0,0,0,0,0,0,0,0],0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0],0,0,0]];
		END_TAG

		ROUTINE s_A00_Main 
				N: JSR(s_B00_ModStatus,0);
				N: JSR(s_E00_RB01,0);
				N: JSR(s_E00_RB02,0);
				N: JSR(s_E01_TL1,0);
				N: JSR(s_Z00_Summary,0);
		END_ROUTINE

		ROUTINE s_B00_ModStatus (Description := "Safety Module IO Status")
				RC: "************************************************************$N"
				    "FRM007 Module Status$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Module 1 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: OTE(S030Sfty.Mod1.RunMode);
				N: OTE(S030Sfty.Mod1.InputStatus);
				N: OTE(S030Sfty.Mod1.OutputStatus);
				RC: "************************************************************$N"
				    "Module 2 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: OTE(S030Sfty.Mod2.RunMode);
				N: OTE(S030Sfty.Mod2.InputStatus);
				N: OTE(S030Sfty.Mod2.OutputStatus);
				RC: "************************************************************$N"
				    "Module Summary$N"
				    "************************************************************";
				N: XIC(S030Sfty.Mod1.RunMode)XIC(S030Sfty.Mod2.RunMode)OTE(S030Sfty.AllModRunMode);
				N: XIC(S030Sfty.Mod1.InputStatus)XIC(S030Sfty.Mod2.InputStatus)OTE(S030Sfty.AllModInStatusOk);
				N: XIC(S030Sfty.Mod1.OutputStatus)XIC(S030Sfty.Mod2.OutputStatus)OTE(S030Sfty.AllModOutStatusOk);
		END_ROUTINE

		ROUTINE s_E00_RB01 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "FRM030 RB01$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S030RB01:SI.Input[0],S030RB01Sfty.I,1);
				N: XIC(S030RB01:SI.RunMode)OTE(S030RB01Sfty.Int.ModRunMode);
				N: XIC(S030RB01:SI.ConnectionFaulted)OTE(S030RB01Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "############################";
				N: OTE(S030RB01Sfty.Int.AreaSafe);
				N: OTE(S030RB01Sfty.Int.Zn1LtScrnActive);
				N: OTE(S030RB01Sfty.Int.Zn2LtScrnActive);
				N: OTE(S030RB01Sfty.Int.Zn3LtScrnActive);
				N: OTE(S030RB01Sfty.Int.Zn4LtScrnActive);
				N: OTE(S030RB01Sfty.Int.Zn5LtScrnActive);
				N: OTE(S030RB01Sfty.Int.Zn6LtScrnActive);
				N: OTE(S030RB01Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S030RB01Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S030RB01Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S030RB01Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS030RB01)OTE(S030RB01Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS030RB01)OTE(S030RB01Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR01AOI,S030RB01Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S030RB01Sfty.O,S030RB01:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_E00_RB02 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "FRM030 RB02$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S030RB02:SI.Input[0],S030RB02Sfty.I,1);
				N: XIC(S030RB02:SI.RunMode)OTE(S030RB02Sfty.Int.ModRunMode);
				N: XIC(S030RB02:SI.ConnectionFaulted)OTE(S030RB02Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "############################";
				N: OTE(S030RB02Sfty.Int.AreaSafe);
				N: OTE(S030RB02Sfty.Int.Zn1LtScrnActive);
				N: OTE(S030RB02Sfty.Int.Zn2LtScrnActive);
				N: OTE(S030RB02Sfty.Int.Zn3LtScrnActive);
				N: OTE(S030RB02Sfty.Int.Zn4LtScrnActive);
				N: OTE(S030RB02Sfty.Int.Zn5LtScrnActive);
				N: OTE(S030RB02Sfty.Int.Zn6LtScrnActive);
				N: OTE(S030RB02Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S030RB02Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S030RB02Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S030RB02Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS030RB02)OTE(S030RB02Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS030RB02)OTE(S030RB02Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR02AOI,S030RB02Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S030RB02Sfty.O,S030RB02:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_E01_TL1 (Description := "Station Fixture Safety Routine")
				RC: "************************************************************$N"
				    "FRM020 TL1$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Minor Motion Enable$N"
				    "************************************************************$N"
				    "$N"
				    "This feature is disabled by default.$N"
				    "Use needs to be approved by Controls Department";
				N: OTU(S030Sfty.MinorMtnEnbld);
				N: XIC(sZ005_040.AllEStopsOk)[XIC(sZ005_040.PerimeterSafe) XIC(S030Sfty.AllStaLtScrnOK) ,XIC(sZ005_040.AnyBypassSwOn) ][XIC(S030Sfty.FX1.MotionEnbl) ,XIC(S030Sfty.FX1.SoftStartPwrOn) ]OTE(S030Sfty.FX1.SoftStartPwrOn);
				N: XIC(sZ005_040.PowerEnbld)XIC(S030Sfty.AllStaLtScrnOK)OTE(S030Sfty.FX1.MotionEnbl);
				RC: "Soft Start Valve Power Output$N"
				    "************************************************************";
				N: XIC(S030Sfty.FX1.SoftStartPwrOn)[OTE(S030TL1SIO1:O.Pt00Data) ,OTE(S030TL1SIO1:O.Pt01Data) ];
				RC: "Valve Manifold DC Power Output$N"
				    "************************************************************";
				N: XIC(S030Sfty.FX1.MotionEnbl)[OTE(S030TL1SIO1:O.Pt02Data) ,OTE(S030TL1SIO1:O.Pt03Data) ];
		END_ROUTINE

		ROUTINE s_Z00_Summary (Description := "Station Safety Summary")
				N: OTU(S030Sfty.Oper1Instd)OTU(S030Sfty.Oper2Instd);
				N: OTU(S030Sfty.LoadAssistInstld);
				N: [XIO(S030Sfty.OperLS.LC1.LCB) ,XIO(S030Sfty.OperLS.LC1Installed) ][XIO(S030Sfty.OperLS.LC2.LCB) ,XIO(S030Sfty.OperLS.LC2Installed) ][XIO(S030Sfty.OperLS.LC3.LCB) ,XIO(S030Sfty.OperLS.LC3Installed) ][XIO(S030Sfty.OperLS.SCN1_1.LCB) ,XIO(S030Sfty.OperLS.SCN1_1Installed) ][XIO(S030Sfty.OperLS.SCN1_2.LCB) ,XIO(S030Sfty.OperLS.SCN1_2Installed) ][XIO(S030Sfty.OperLS.SCN2_1.LCB) ,XIO(S030Sfty.OperLS.SCN2_1Installed) ][XIO(S030Sfty.OperLS.SCN2_2.LCB) ,XIO(S030Sfty.OperLS.SCN2_2Installed) ]OTE(S030Sfty.StaZn1NotBlkd);
				N: [XIC(S030Sfty.OperLS.LC1.O1) ,XIO(S030Sfty.OperLS.LC1Installed) ][XIC(S030Sfty.OperLS.LC2.O1) ,XIO(S030Sfty.OperLS.LC2Installed) ][XIC(S030Sfty.OperLS.LC3.O1) ,XIO(S030Sfty.OperLS.LC3Installed) ][XIC(S030Sfty.OperLS.SCN1_1.O1) ,XIO(S030Sfty.OperLS.SCN1_1Installed) ][XIC(S030Sfty.OperLS.SCN1_2.O1) ,XIO(S030Sfty.OperLS.SCN1_2Installed) ][XIC(S030Sfty.OperLS.SCN2_1.O1) ,XIO(S030Sfty.OperLS.SCN2_1Installed) ][XIC(S030Sfty.OperLS.SCN2_2.O1) ,XIO(S030Sfty.OperLS.SCN2_2Installed) ]OTE(S030Sfty.StaZn1Active);
				N: OTE(S030Sfty.StaZn2NotBlkd);
				N: OTE(S030Sfty.StaZn2Active);
				N: OTE(S030Sfty.StaZn3NotBlkd);
				N: OTE(S030Sfty.StaZn3Active);
				N: XIC(S030Sfty.StaZn1Active)XIC(S030Sfty.StaZn2Active)XIC(S030Sfty.StaZn3Active)OTE(S030Sfty.AllStaLtScrnOK);
				N: XIC(S030Sfty.LoadAssistInstld)OTE(S030Sfty.LoadAssistClear);
				N: XIC(S030Sfty.LoadAssistInstld)OTE(S030Sfty.LoadAssistActive);
				N: XIC(S030Sfty.Oper1Instd)XIC(sEdit.Bit)OTE(S030Sfty.Oper1SwipeStart);
				N: XIC(S030Sfty.Oper2Instd)XIC(sEdit.Bit)OTE(S030Sfty.Oper2SwipeStart);
				N: XIC(sSftyFromStd.ClearToUnlock.12)OTE(S030Sfty.ClearToUnlock);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S040Sfty (Class := Safety,
	                  MAIN := "s_A00_Main",
	                  MODE := 0,
	                  DisableFlag := 0,
	                  UseAsFolder := 0)
		TAG
			sR01AOI : RobotSftyAOI  := [131,[0,[0,0,0],[0,0,0],0,[0,0,0,0,0,0,0,0,0],0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0],0,0,0]];
			sR02AOI : RobotSftyAOI  := [131,[0,[0,0,0],[0,0,0],0,[0,0,0,0,0,0,0,0,0],0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0],0,0,0]];
		END_TAG

		ROUTINE s_A00_Main 
				N: JSR(s_B00_ModStatus,0);
				N: JSR(s_D04_ICSD1,0);
				N: JSR(s_E00_RB01,0);
				N: JSR(s_E00_RB02,0);
				N: JSR(s_E01_TL1,0);
				N: JSR(s_Z00_Summary,0);
		END_ROUTINE

		ROUTINE s_B00_ModStatus (Description := "Safety Module IO Status")
				RC: "************************************************************$N"
				    "FRM007 Module Status$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Module 1 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: OTE(S040Sfty.Mod1.RunMode);
				N: OTE(S040Sfty.Mod1.InputStatus);
				N: OTE(S040Sfty.Mod1.OutputStatus);
				RC: "************************************************************$N"
				    "Module 2 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: OTE(S040Sfty.Mod2.RunMode);
				N: OTE(S040Sfty.Mod2.InputStatus);
				N: OTE(S040Sfty.Mod2.OutputStatus);
				RC: "************************************************************$N"
				    "Module Summary$N"
				    "************************************************************";
				N: XIC(S040Sfty.Mod1.RunMode)XIC(S040Sfty.Mod2.RunMode)OTE(S040Sfty.AllModRunMode);
				N: XIC(S040Sfty.Mod1.InputStatus)XIC(S040Sfty.Mod2.InputStatus)OTE(S040Sfty.AllModInStatusOk);
				N: XIC(S040Sfty.Mod1.OutputStatus)XIC(S040Sfty.Mod2.OutputStatus)OTE(S040Sfty.AllModOutStatusOk);
		END_ROUTINE

		ROUTINE s_D04_ICSD1 (Description := "InterCell Safety Devices Routine$N(Migration Lightscreens, Scanners, other)")
				RC: "************************************************************$N"
				    "Intercell Safety Devices$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "LC Instruction$N"
				    "Input Mapping$N"
				    "************************************************************$N"
				    "Edit all required Input mapping rungs with the correct safety input$N"
				    "Edit LC Muting as required. Check Rung description for details";
				N: NOP();
				RC: "************************************************************$N"
				    "S040 ICSD LC1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S040TL1SIO1:I.Pt10Data)OTE(S040Sfty.IntSftyDevice.LC1ChnAInp);
				N: XIC(S040TL1SIO1:I.Pt11Data)OTE(S040Sfty.IntSftyDevice.LC1ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTE(S040Sfty.IntSftyDevice.LC1MuteInstalled) ,XIC(sZ005_040.PerimeterSafe) XIC(S040Sfty.IntSftyDevice.LC1MuteInstalled) OTE(S040Sfty.IntSftyDevice.LC1Mute) ];
				RC: "************************************************************$N"
				    "LC Instruction$N"
				    "$N"
				    "DO NOT EDIT AFTER THIS POINT$N"
				    "************************************************************$N"
				    "";
				N: NOP();
				N: [XIC(S040Sfty.IntSftyDevice.LC1ChnAInp) ,XIC(S040Sfty.IntSftyDevice.LC1MuteInstalled) XIC(S040Sfty.IntSftyDevice.LC1Mute) ]OTE(S040Sfty.IntSftyDevice.LC1ChnAInst);
				N: [XIC(S040Sfty.IntSftyDevice.LC1ChnBInp) ,XIC(S040Sfty.IntSftyDevice.LC1MuteInstalled) XIC(S040Sfty.IntSftyDevice.LC1Mute) ]OTE(S040Sfty.IntSftyDevice.LC1ChnBInst);
				N: [XIC(S040Sfty.Oper1SwipeStart) ,XIC(sZ005_040.AnyGateRstPB) ]ONS(S040Sfty.IntSftyDevice.LC1InsCROns)XIC(sZ005_040.PerimeterSafe)OTE(S040Sfty.IntSftyDevice.LC1InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S040Sfty.IntSftyDevice.LC1FltRst);
				N: XIC(S040Sfty.AllModRunMode)LC(S040Sfty.IntSftyDevice.LC1,MANUAL,S040Sfty.IntSftyDevice.LC1ChnAInst,S040Sfty.IntSftyDevice.LC1ChnBInst,20,S040Sfty.IntSftyDevice.LC1Mute,S040Sfty.IntSftyDevice.LC1InsCR,S040Sfty.IntSftyDevice.LC1FltRst);
		END_ROUTINE

		ROUTINE s_E00_RB01 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "FRM040 RB01$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S040RB01:SI.Input[0],S040RB01Sfty.I,1);
				N: XIC(S040RB01:SI.RunMode)OTE(S040RB01Sfty.Int.ModRunMode);
				N: XIC(S040RB01:SI.ConnectionFaulted)OTE(S040RB01Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "############################";
				N: XIC(NextSftyIn.AllGatesOk)OTE(S040RB01Sfty.Int.AreaSafe);
				N: OTE(S040RB01Sfty.Int.Zn1LtScrnActive);
				N: OTE(S040RB01Sfty.Int.Zn2LtScrnActive);
				N: OTE(S040RB01Sfty.Int.Zn3LtScrnActive);
				N: OTE(S040RB01Sfty.Int.Zn4LtScrnActive);
				N: OTE(S040RB01Sfty.Int.Zn5LtScrnActive);
				N: OTE(S040RB01Sfty.Int.Zn6LtScrnActive);
				N: OTE(S040RB01Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S040RB01Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S040RB01Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S040RB01Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS040RB01)OTE(S040RB01Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS040RB01)OTE(S040RB01Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR01AOI,S040RB01Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S040RB01Sfty.O,S040RB01:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_E00_RB02 (Description := "Robot Safety Standard Routine")
				RC: "############################$N"
				    "FRM040 RB02$N"
				    "Fanuc Robot Enet Safety$N"
				    "############################";
				N: COP(S040RB02:SI.Input[0],S040RB02Sfty.I,1);
				N: XIC(S040RB02:SI.RunMode)OTE(S040RB02Sfty.Int.ModRunMode);
				N: XIC(S040RB02:SI.ConnectionFaulted)OTE(S040RB02Sfty.Int.ModConnFltd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Edit$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "If Robot needs to be stopped when the Operator Safety zone is not Active, $N"
				    "add the station(s) safety devices.$N"
				    "############################";
				N: XIC(NextSftyIn.AllGatesOk)OTE(S040RB02Sfty.Int.AreaSafe);
				N: OTE(S040RB02Sfty.Int.Zn1LtScrnActive);
				N: OTE(S040RB02Sfty.Int.Zn2LtScrnActive);
				N: OTE(S040RB02Sfty.Int.Zn3LtScrnActive);
				N: OTE(S040RB02Sfty.Int.Zn4LtScrnActive);
				N: OTE(S040RB02Sfty.Int.Zn5LtScrnActive);
				N: OTE(S040RB02Sfty.Int.Zn6LtScrnActive);
				N: OTE(S040RB02Sfty.Int.Zn7LtScrnActive);
				N: XIC(sEdit.Bit)OTE(S040RB02Sfty.Int.AutoOrMan);
				N: XIC(sEdit.Bit)OTE(S040RB02Sfty.Int.AdjRbtsTeachOff);
				N: XIC(sEdit.Bit)OTE(S040RB02Sfty.Int.TeachPerm);
				N: XIC(sSftyFromStd.DisblDrvsS040RB02)OTE(S040RB02Sfty.Int.DisableDrives);
				N: XIC(sSftyFromStd.RstDcsChngS040RB02)OTE(S040RB02Sfty.Int.RstSftyChange);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety AOI$N"
				    "############################";
				N: RobotSftyAOI(sR02AOI,S040RB02Sfty,sZ005_040,sSftyFromStd);
				RC: "############################$N"
				    "BIW Controls$N"
				    "Robot Safety Output Map$N"
				    "############################";
				N: COP(S040RB02Sfty.O,S040RB02:SO.Output[0],8);
		END_ROUTINE

		ROUTINE s_E01_TL1 (Description := "Station Fixture Safety Routine")
				RC: "************************************************************$N"
				    "FRM020 TL1$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Minor Motion Enable$N"
				    "************************************************************$N"
				    "$N"
				    "This feature is disabled by default.$N"
				    "Use needs to be approved by Controls Department";
				N: OTU(S040Sfty.MinorMtnEnbld);
				N: XIC(sZ005_040.AllEStopsOk)[XIC(sZ005_040.PerimeterSafe) XIC(S040Sfty.AllStaLtScrnOK) ,XIC(sZ005_040.AnyBypassSwOn) ][XIC(S040Sfty.FX1.MotionEnbl) ,XIC(S040Sfty.FX1.SoftStartPwrOn) ]OTE(S040Sfty.FX1.SoftStartPwrOn);
				N: XIC(sZ005_040.PowerEnbld)XIC(S040Sfty.AllStaLtScrnOK)OTE(S040Sfty.FX1.MotionEnbl);
				RC: "Soft Start Valve Power Output$N"
				    "************************************************************";
				N: XIC(S040Sfty.FX1.SoftStartPwrOn)[OTE(S040TL1SIO1:O.Pt00Data) ,OTE(S040TL1SIO1:O.Pt01Data) ];
				RC: "Valve Manifold DC Power Output$N"
				    "************************************************************";
				N: XIC(S040Sfty.FX1.MotionEnbl)[OTE(S040TL1SIO1:O.Pt02Data) ,OTE(S040TL1SIO1:O.Pt03Data) ];
		END_ROUTINE

		ROUTINE s_Z00_Summary (Description := "Station Safety Summary")
				N: OTU(S040Sfty.Oper1Instd)OTU(S040Sfty.Oper2Instd);
				N: OTU(S040Sfty.LoadAssistInstld);
				N: [XIO(S040Sfty.OperLS.LC1.LCB) ,XIO(S040Sfty.OperLS.LC1Installed) ][XIO(S040Sfty.OperLS.LC2.LCB) ,XIO(S040Sfty.OperLS.LC2Installed) ][XIO(S040Sfty.OperLS.LC3.LCB) ,XIO(S040Sfty.OperLS.LC3Installed) ][XIO(S040Sfty.OperLS.SCN1_1.LCB) ,XIO(S040Sfty.OperLS.SCN1_1Installed) ][XIO(S040Sfty.OperLS.SCN1_2.LCB) ,XIO(S040Sfty.OperLS.SCN1_2Installed) ][XIO(S040Sfty.OperLS.SCN2_1.LCB) ,XIO(S040Sfty.OperLS.SCN2_1Installed) ][XIO(S040Sfty.OperLS.SCN2_2.LCB) ,XIO(S040Sfty.OperLS.SCN2_2Installed) ]OTE(S040Sfty.StaZn1NotBlkd);
				N: [XIC(S040Sfty.OperLS.LC1.O1) ,XIO(S040Sfty.OperLS.LC1Installed) ][XIC(S040Sfty.OperLS.LC2.O1) ,XIO(S040Sfty.OperLS.LC2Installed) ][XIC(S040Sfty.OperLS.LC3.O1) ,XIO(S040Sfty.OperLS.LC3Installed) ][XIC(S040Sfty.OperLS.SCN1_1.O1) ,XIO(S040Sfty.OperLS.SCN1_1Installed) ][XIC(S040Sfty.OperLS.SCN1_2.O1) ,XIO(S040Sfty.OperLS.SCN1_2Installed) ][XIC(S040Sfty.OperLS.SCN2_1.O1) ,XIO(S040Sfty.OperLS.SCN2_1Installed) ][XIC(S040Sfty.OperLS.SCN2_2.O1) ,XIO(S040Sfty.OperLS.SCN2_2Installed) ]OTE(S040Sfty.StaZn1Active);
				N: OTE(S040Sfty.StaZn2NotBlkd);
				N: OTE(S040Sfty.StaZn2Active);
				N: OTE(S040Sfty.StaZn3NotBlkd);
				N: OTE(S040Sfty.StaZn3Active);
				N: XIC(S040Sfty.StaZn1Active)XIC(S040Sfty.StaZn2Active)XIC(S040Sfty.StaZn3Active)OTE(S040Sfty.AllStaLtScrnOK);
				N: XIC(S040Sfty.LoadAssistInstld)OTE(S040Sfty.LoadAssistClear);
				N: XIC(S040Sfty.LoadAssistInstld)OTE(S040Sfty.LoadAssistActive);
				N: XIC(S040Sfty.Oper1Instd)XIC(sEdit.Bit)OTE(S040Sfty.Oper1SwipeStart);
				N: XIC(S040Sfty.Oper2Instd)XIC(sEdit.Bit)OTE(S040Sfty.Oper2SwipeStart);
				N: XIC(sSftyFromStd.ClearToUnlock.13)OTE(S040Sfty.ClearToUnlock);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S050TL1 (Description := "TurnTable TL1 Weld Fixture",
	                 Class := Standard,
	                 MAIN := "A00_Main",
	                 MODE := 0,
	                 DisableFlag := 0,
	                 UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE A00_Main 
				N: JSR(B01_MapInputs,0);
				N: JSR(B00_NetworkDiag,0);
				N: JSR(D00_Act1_Clamp1,0);
				N: JSR(D00_Act2_Clamp2,0);
				N: JSR(D00_Act3_Clamp3,0);
				N: JSR(D00_Act4_Slide1,0);
				N: JSR(D01_MotionSeq,0);
				N: JSR(D02_PartPresent,0);
				N: JSR(P00_Station,0);
				N: JSR(P01_StationToSfty,0);
				N: JSR(Y00_Alarms_L1,0);
				N: JSR(Y01_Alarms_L2,0);
				N: JSR(Y02_Alarms_L3,0);
				N: JSR(Z00_MapOutputs,0);
		END_ROUTINE

		ROUTINE B00_NetworkDiag 
				RC: "************************************************************$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "S010 TL1 Ethernet Devices Diagnostic$N"
				    "************************************************************";
				N: NOP();
				N: GSV(Module,S050TL1VM1,EntryStatus,S050TL1VM1.ENet.ObjectStatus)[MEQ(S050TL1VM1.ENet.ObjectStatus,61440,24576) OTE(S050TL1VM1.ENet.Inhibited) ,MEQ(S050TL1VM1.ENet.ObjectStatus,61440,16384) OTE(S050TL1VM1.ENet.CommOK) ];
				N: GSV(Module,S050TL1MIO1,EntryStatus,S050TL1MIO1.ENet.ObjectStatus)[MEQ(S050TL1MIO1.ENet.ObjectStatus,61440,24576) OTE(S050TL1MIO1.ENet.Inhibited) ,MEQ(S050TL1MIO1.ENet.ObjectStatus,61440,16384) OTE(S050TL1MIO1.ENet.CommOK) ];
				N: XIC(S050TL1VM1.ENet.CommOK)XIC(S050TL1MIO1.ENet.CommOK)OTE(S050TL1.Int.AllModCommOk);
		END_ROUTINE

		ROUTINE B01_MapInputs 
				RC: "************************************************************$N"
				    "Map Devices Inputs$N"
				    "************************************************************";
				N: NOP();
				N: [XIO(S050TL1VM1.ENet.CommOK) FLL(0,S050TL1VM1.I1,4) ,XIC(S050TL1VM1.ENet.CommOK) COP(S050TL1VM1:I.Data[0],S050TL1VM1.I1,1) COP(S050TL1VM1:I.Data[2],S050TL1VM1.I2,1) ];
				RC: "************************************************************$N"
				    "Configuration Bits: 1=Active, 0=NotActive $N"
				    "Data[16].0-7 - Channels 00-07$N"
				    "Data[17].0-7 - Channels 08-15$N"
				    "************************************************************$N"
				    "Required for Turck MIO - TBEN-L4-16DXP$N"
				    "";
				N: [XIO(S050TL1MIO1.ENet.CommOK) FLL(0,S050TL1MIO1.I,1) ,XIC(S050TL1MIO1.ENet.CommOK) [COP(S050TL1MIO1:I.Data[1],S050TL1MIO1.I,1) ,MOV(2#00000000,S050TL1MIO1:C.Data[16]) MOV(2#00000000,S050TL1MIO1:C.Data[17]) ] ];
				RC: "************************************************************$N"
				    "Station Robots in Auto$N"
				    "$N"
				    "Add SxxRBxx.I1.AUTO for every Robot$N"
				    "************************************************************$N"
				    "";
				N: XIC(S010RB01.I1.Auto)XIC(S010RB02.I1.Auto)OTE(S050TL1.Int.RbtsInAuto);
				RC: "************************************************************$N"
				    "Station Robots Teach off$N"
				    "$N"
				    "Add SxxRBxxSfty.Int.TeachOff for every Robot$N"
				    "************************************************************$N"
				    "";
				N: XIC(S010RB01.Int.TeachSSOff)XIC(S010RB02.Int.TeachSSOff)OTE(S050TL1.Int.RbtsTeachOff);
				RC: "************************************************************$N"
				    "Station Air On$N"
				    "$N"
				    "Replace Edit.Bit with air flow switch input$N"
				    "************************************************************$N"
				    "";
				N: [XIC(Edit.Bit) MOV(1500,S050TL1.Int.AirOnTmr.PRE) TOF(S050TL1.Int.AirOnTmr,?,?) ,XIC(S050TL1.Int.AirOnTmr.DN) OTE(S050TL1.Int.AirOnOk) ];
				N: XIC(S050TT1.Int.FaultResetPB)OTE(S050TL1.Int.FaultResetPB);
				RC: "************************************************************$N"
				    "Known Position$N"
				    "************************************************************";
				N: XIO(S050TL1.Int.AtHomePos)XIO(S050TL1.Int.AtWorkPos1)XIO(S050TL1.Int.AtWorkPos2)XIO(S050TL1.Int.AtWorkPos3)XIC(Edit.Bit)MOV(5000,S050TL1.Int.UnknownPosTmr.PRE)TON(S050TL1.Int.UnknownPosTmr,?,?);
				N: XIO(S050TL1.Int.UnknownPosTmr.EN)[XIC(S010RB01.I1.Pg_Paused) ,XIC(S010RB01.I1.RbtHeld) ,XIC(S010RB01.I1.RbtFaulted) ][XIC(S010RB02.I1.Pg_Paused) ,XIC(S010RB02.I1.RbtHeld) ,XIC(S010RB02.I1.RbtFaulted) ]OTE(S050TL1.Int.KnownPos);
		END_ROUTINE

		ROUTINE D00_Act1_Clamp1 (Description := "Actuator Standard Routine")
				RC: "########################$N"
				    "Actuator Standard Logic$N"
				    "########################$N"
				    "$N"
				    "Add Control for every used Actuator$N"
				    "Edit Only Work and Home Descriptions$N"
				    "Do Not edit Work/Home Control Logic";
				N: NOP();
				RC: "########################$N"
				    "Actuator[1]$N"
				    "Clamp 1$N"
				    "*Description*$N"
				    "CL1, CL2, CL3$N"
				    "########################";
				N: NOP();
				N: MOV('Close',S050TL1.Act[1].WorkCmdDesc)MOV('Open',S050TL1.Act[1].HomeCmdDesc);
				RC: "########################$N"
				    "Work Control Logic$N"
				    "########################";
				N: [XIC(S050TL1.Act[1].Home.AutoCmd) ,XIC(S050TL1.Act[1].Home.ManualCmdPB) ]XIC(S050TL1.Act[1].Home.Clr)OTE(S050TL1.Act[1].Work.SealRst);
				N: [XIC(S050TL1.Int.AutoMode) XIC(S050TL1.Act[1].Work.AutoCmd) ,XIC(S050TL1.Int.ManualMode) XIC(S050TL1.Act[1].Work.ManualCmdPB) ,XIC(S050TL1.Act[1].Work.Out) XIC(S050TL1.Act[1].Work.Seal) ]XIC(S050TL1.Act[1].Work.Clr)XIO(S050TL1.Act[1].Work.SealRst)XIC(S050TL1.Act[1].ActMtnEnbld)OTE(S050TL1.Act[1].Work.Out);
				N: XIC(S050TL1.Act[1].Work.Out)OTL(S050TL1.Act[1].Work.Mem);
				N: XIC(S050TL1.Act[1].Home.Out)OTU(S050TL1.Act[1].Work.Mem);
				N: [XIC(S050TL1.Act[1].Work.Pxs.0) XIO(S050TL1.Act[1].Home.Pxs.0) ,XIO(S050TL1.Act[1].Installed.0) ][XIC(S050TL1.Act[1].Work.Pxs.1) XIO(S050TL1.Act[1].Home.Pxs.1) ,XIO(S050TL1.Act[1].Installed.1) ][XIC(S050TL1.Act[1].Work.Pxs.2) XIO(S050TL1.Act[1].Home.Pxs.2) ,XIO(S050TL1.Act[1].Installed.2) ][XIC(S050TL1.Act[1].Work.Pxs.3) XIO(S050TL1.Act[1].Home.Pxs.3) ,XIO(S050TL1.Act[1].Installed.3) ][XIC(S050TL1.Act[1].Work.Pxs.4) XIO(S050TL1.Act[1].Home.Pxs.4) ,XIO(S050TL1.Act[1].Installed.4) ][XIC(S050TL1.Act[1].Work.Pxs.5) XIO(S050TL1.Act[1].Home.Pxs.5) ,XIO(S050TL1.Act[1].Installed.5) ][XIC(S050TL1.Act[1].Work.Pxs.6) XIO(S050TL1.Act[1].Home.Pxs.6) ,XIO(S050TL1.Act[1].Installed.6) ][XIC(S050TL1.Act[1].Work.Pxs.7) XIO(S050TL1.Act[1].Home.Pxs.7) ,XIO(S050TL1.Act[1].Installed.7) ]OTE(S050TL1.Act[1].Work.Comp);
				N: [XIC(S050TL1.Act[1].Work.Out) [RTO(S050TL1.Act[1].Work.FltTmr,?,?) ,XIC(S050TL1.Act[1].Work.Comp) OTL(S050TL1.Act[1].Work.FltTmr.DN) ] ,XIC(S050TL1.Act[1].Home.Out) RES(S050TL1.Act[1].Work.FltTmr) ,XIC(S050TL1.Act[1].Work.FltTmr.DN) XIO(S050TL1.Act[1].Work.Comp) XIC(S050TL1.Int.PPActFltsEnbld) [OTE(S050TL1.Act[1].Work.MtnFlt) ,XIC(S050TL1.Act[1].Home.Comp) OTE(S050TL1.Act[1].Work.VlvFlt) ] ];
				RC: "########################$N"
				    "Home Control Logic$N"
				    "########################";
				N: [XIC(S050TL1.Act[1].Work.AutoCmd) ,XIC(S050TL1.Act[1].Work.ManualCmdPB) ]XIC(S050TL1.Act[1].Work.Clr)OTE(S050TL1.Act[1].Home.SealRst);
				N: [XIC(S050TL1.Int.AutoMode) XIC(S050TL1.Act[1].Home.AutoCmd) ,XIC(S050TL1.Int.ManualMode) XIC(S050TL1.Act[1].Home.ManualCmdPB) ,XIC(S050TL1.Act[1].Home.Out) XIC(S050TL1.Act[1].Home.Seal) ]XIC(S050TL1.Act[1].Home.Clr)XIO(S050TL1.Act[1].Home.SealRst)XIC(S050TL1.Act[1].ActMtnEnbld)OTE(S050TL1.Act[1].Home.Out);
				N: XIC(S050TL1.Act[1].Home.Out)OTL(S050TL1.Act[1].Home.Mem);
				N: XIC(S050TL1.Act[1].Work.Out)OTU(S050TL1.Act[1].Home.Mem);
				N: [XIC(S050TL1.Act[1].Home.Pxs.0) XIO(S050TL1.Act[1].Work.Pxs.0) ,XIO(S050TL1.Act[1].Installed.0) ][XIC(S050TL1.Act[1].Home.Pxs.1) XIO(S050TL1.Act[1].Work.Pxs.1) ,XIO(S050TL1.Act[1].Installed.1) ][XIC(S050TL1.Act[1].Home.Pxs.2) XIO(S050TL1.Act[1].Work.Pxs.2) ,XIO(S050TL1.Act[1].Installed.2) ][XIC(S050TL1.Act[1].Home.Pxs.3) XIO(S050TL1.Act[1].Work.Pxs.3) ,XIO(S050TL1.Act[1].Installed.3) ][XIC(S050TL1.Act[1].Home.Pxs.4) XIO(S050TL1.Act[1].Work.Pxs.4) ,XIO(S050TL1.Act[1].Installed.4) ][XIC(S050TL1.Act[1].Home.Pxs.5) XIO(S050TL1.Act[1].Work.Pxs.5) ,XIO(S050TL1.Act[1].Installed.5) ][XIC(S050TL1.Act[1].Home.Pxs.6) XIO(S050TL1.Act[1].Work.Pxs.6) ,XIO(S050TL1.Act[1].Installed.6) ][XIC(S050TL1.Act[1].Home.Pxs.7) XIO(S050TL1.Act[1].Work.Pxs.7) ,XIO(S050TL1.Act[1].Installed.7) ]OTE(S050TL1.Act[1].Home.Comp);
				N: [XIC(S050TL1.Act[1].Home.Out) [RTO(S050TL1.Act[1].Home.FltTmr,?,?) ,XIC(S050TL1.Act[1].Home.Comp) OTL(S050TL1.Act[1].Home.FltTmr.DN) ] ,XIC(S050TL1.Act[1].Work.Out) RES(S050TL1.Act[1].Home.FltTmr) ,XIC(S050TL1.Act[1].Home.FltTmr.DN) XIO(S050TL1.Act[1].Home.Comp) XIC(S010TL1.Int.PPActFltsEnbld) [OTE(S050TL1.Act[1].Home.MtnFlt) ,XIC(S050TL1.Act[1].Work.Comp) OTE(S050TL1.Act[1].Home.VlvFlt) ] ];
				RC: "########################$N"
				    "Actuator Fault$N"
				    "########################";
				N: [XIC(S050TL1.Act[1].Home.MtnFlt) ,XIC(S050TL1.Act[1].Home.VlvFlt) ,XIC(S050TL1.Act[1].Work.MtnFlt) ,XIC(S050TL1.Act[1].Work.VlvFlt) ]OTE(S050TL1.Act[1].Faulted);
		END_ROUTINE

		ROUTINE D00_Act2_Clamp2 (Description := "Actuator Standard Routine")
				RC: "########################$N"
				    "Actuator Standard Logic$N"
				    "########################$N"
				    "$N"
				    "Add Control for every used Actuator$N"
				    "Edit Only Work and Home Descriptions$N"
				    "Do Not edit Work/Home Control Logic";
				N: NOP();
				RC: "########################$N"
				    "Actuator[2]$N"
				    "Clamp 2$N"
				    "*Description*$N"
				    "CL4, CL5, CL6$N"
				    "########################";
				N: NOP();
				N: MOV('Close',S050TL1.Act[2].WorkCmdDesc)MOV('Open',S050TL1.Act[2].HomeCmdDesc);
				RC: "########################$N"
				    "Work Control Logic$N"
				    "########################";
				N: [XIC(S050TL1.Act[2].Home.AutoCmd) ,XIC(S050TL1.Act[2].Home.ManualCmdPB) ]XIC(S050TL1.Act[2].Home.Clr)OTE(S050TL1.Act[2].Work.SealRst);
				N: [XIC(S050TL1.Int.AutoMode) XIC(S050TL1.Act[2].Work.AutoCmd) ,XIC(S050TL1.Int.ManualMode) XIC(S050TL1.Act[2].Work.ManualCmdPB) ,XIC(S050TL1.Act[2].Work.Out) XIC(S050TL1.Act[2].Work.Seal) ]XIC(S050TL1.Act[2].Work.Clr)XIO(S050TL1.Act[2].Work.SealRst)XIC(S050TL1.Act[2].ActMtnEnbld)OTE(S050TL1.Act[2].Work.Out);
				N: XIC(S050TL1.Act[2].Work.Out)OTL(S050TL1.Act[2].Work.Mem);
				N: XIC(S050TL1.Act[2].Home.Out)OTU(S050TL1.Act[2].Work.Mem);
				N: [XIC(S050TL1.Act[2].Work.Pxs.0) XIO(S050TL1.Act[2].Home.Pxs.0) ,XIO(S050TL1.Act[2].Installed.0) ][XIC(S050TL1.Act[2].Work.Pxs.1) XIO(S050TL1.Act[2].Home.Pxs.1) ,XIO(S050TL1.Act[2].Installed.1) ][XIC(S050TL1.Act[2].Work.Pxs.2) XIO(S050TL1.Act[2].Home.Pxs.2) ,XIO(S050TL1.Act[2].Installed.2) ][XIC(S050TL1.Act[2].Work.Pxs.3) XIO(S050TL1.Act[2].Home.Pxs.3) ,XIO(S050TL1.Act[2].Installed.3) ][XIC(S050TL1.Act[2].Work.Pxs.4) XIO(S050TL1.Act[2].Home.Pxs.4) ,XIO(S050TL1.Act[2].Installed.4) ][XIC(S050TL1.Act[2].Work.Pxs.5) XIO(S050TL1.Act[2].Home.Pxs.5) ,XIO(S050TL1.Act[2].Installed.5) ][XIC(S050TL1.Act[2].Work.Pxs.6) XIO(S050TL1.Act[2].Home.Pxs.6) ,XIO(S050TL1.Act[2].Installed.6) ][XIC(S050TL1.Act[2].Work.Pxs.7) XIO(S050TL1.Act[2].Home.Pxs.7) ,XIO(S050TL1.Act[2].Installed.7) ]OTE(S050TL1.Act[2].Work.Comp);
				N: [XIC(S050TL1.Act[2].Work.Out) [RTO(S050TL1.Act[2].Work.FltTmr,?,?) ,XIC(S050TL1.Act[2].Work.Comp) OTL(S050TL1.Act[2].Work.FltTmr.DN) ] ,XIC(S050TL1.Act[2].Home.Out) RES(S050TL1.Act[2].Work.FltTmr) ,XIC(S050TL1.Act[2].Work.FltTmr.DN) XIO(S050TL1.Act[2].Work.Comp) XIC(S050TL1.Int.PPActFltsEnbld) [OTE(S050TL1.Act[2].Work.MtnFlt) ,XIC(S050TL1.Act[2].Home.Comp) OTE(S050TL1.Act[2].Work.VlvFlt) ] ];
				RC: "########################$N"
				    "Home Control Logic$N"
				    "########################";
				N: [XIC(S050TL1.Act[2].Work.AutoCmd) ,XIC(S050TL1.Act[2].Work.ManualCmdPB) ]XIC(S050TL1.Act[2].Work.Clr)OTE(S050TL1.Act[2].Home.SealRst);
				N: [XIC(S050TL1.Int.AutoMode) XIC(S050TL1.Act[2].Home.AutoCmd) ,XIC(S050TL1.Int.ManualMode) XIC(S050TL1.Act[2].Home.ManualCmdPB) ,XIC(S050TL1.Act[2].Home.Out) XIC(S050TL1.Act[2].Home.Seal) ]XIC(S050TL1.Act[2].Home.Clr)XIO(S050TL1.Act[2].Home.SealRst)XIC(S050TL1.Act[2].ActMtnEnbld)OTE(S050TL1.Act[2].Home.Out);
				N: XIC(S050TL1.Act[2].Home.Out)OTL(S050TL1.Act[2].Home.Mem);
				N: XIC(S050TL1.Act[2].Work.Out)OTU(S050TL1.Act[2].Home.Mem);
				N: [XIC(S050TL1.Act[2].Home.Pxs.0) XIO(S050TL1.Act[2].Work.Pxs.0) ,XIO(S050TL1.Act[2].Installed.0) ][XIC(S050TL1.Act[2].Home.Pxs.1) XIO(S050TL1.Act[2].Work.Pxs.1) ,XIO(S050TL1.Act[2].Installed.1) ][XIC(S050TL1.Act[2].Home.Pxs.2) XIO(S050TL1.Act[2].Work.Pxs.2) ,XIO(S050TL1.Act[2].Installed.2) ][XIC(S050TL1.Act[2].Home.Pxs.3) XIO(S050TL1.Act[2].Work.Pxs.3) ,XIO(S050TL1.Act[2].Installed.3) ][XIC(S050TL1.Act[2].Home.Pxs.4) XIO(S050TL1.Act[2].Work.Pxs.4) ,XIO(S050TL1.Act[2].Installed.4) ][XIC(S050TL1.Act[2].Home.Pxs.5) XIO(S050TL1.Act[2].Work.Pxs.5) ,XIO(S050TL1.Act[2].Installed.5) ][XIC(S050TL1.Act[2].Home.Pxs.6) XIO(S050TL1.Act[2].Work.Pxs.6) ,XIO(S050TL1.Act[2].Installed.6) ][XIC(S050TL1.Act[2].Home.Pxs.7) XIO(S050TL1.Act[2].Work.Pxs.7) ,XIO(S050TL1.Act[2].Installed.7) ]OTE(S050TL1.Act[2].Home.Comp);
				N: [XIC(S050TL1.Act[2].Home.Out) [RTO(S050TL1.Act[2].Home.FltTmr,?,?) ,XIC(S050TL1.Act[2].Home.Comp) OTL(S050TL1.Act[2].Home.FltTmr.DN) ] ,XIC(S050TL1.Act[2].Work.Out) RES(S050TL1.Act[2].Home.FltTmr) ,XIC(S050TL1.Act[2].Home.FltTmr.DN) XIO(S050TL1.Act[2].Home.Comp) XIC(S050TL1.Int.PPActFltsEnbld) [OTE(S050TL1.Act[2].Home.MtnFlt) ,XIC(S050TL1.Act[2].Work.Comp) OTE(S050TL1.Act[2].Home.VlvFlt) ] ];
				N: [XIC(S050TL1.Act[2].Home.MtnFlt) ,XIC(S050TL1.Act[2].Home.VlvFlt) ,XIC(S050TL1.Act[2].Work.MtnFlt) ,XIC(S050TL1.Act[2].Work.VlvFlt) ]OTE(S050TL1.Act[2].Faulted);
		END_ROUTINE

		ROUTINE D00_Act3_Clamp3 (Description := "Actuator Standard Routine")
				RC: "########################$N"
				    "Actuator Standard Logic$N"
				    "########################$N"
				    "$N"
				    "Add Control for every used Actuator$N"
				    "Edit Only Work and Home Descriptions$N"
				    "Do Not edit Work/Home Control Logic";
				N: NOP();
				RC: "########################$N"
				    "Actuator[3]$N"
				    "Clamp 3$N"
				    "*Description*$N"
				    "CL7, CL8$N"
				    "########################";
				N: NOP();
				N: MOV('Advance',S050TL1.Act[3].WorkCmdDesc)MOV('Retract',S050TL1.Act[3].HomeCmdDesc);
				RC: "########################$N"
				    "Work Control Logic$N"
				    "########################";
				N: [XIC(S050TL1.Act[3].Home.AutoCmd) ,XIC(S050TL1.Act[3].Home.ManualCmdPB) ]XIC(S050TL1.Act[3].Home.Clr)OTE(S050TL1.Act[3].Work.SealRst);
				N: [XIC(S050TT1.Int.AutoMode) XIC(S050TL1.Act[3].Work.AutoCmd) ,XIC(S050TT1.Int.ManualMode) XIC(S050TL1.Act[3].Work.ManualCmdPB) ,XIC(S050TL1.Act[3].Work.Out) XIC(S050TL1.Act[3].Work.Seal) ]XIC(S050TL1.Act[3].Work.Clr)XIO(S050TL1.Act[3].Work.SealRst)XIC(S050TL1.Act[3].ActMtnEnbld)OTE(S050TL1.Act[3].Work.Out);
				N: XIC(S050TL1.Act[3].Work.Out)OTL(S050TL1.Act[3].Work.Mem);
				N: XIC(S050TL1.Act[3].Home.Out)OTU(S050TL1.Act[3].Work.Mem);
				N: [XIC(S050TL1.Act[3].Work.Pxs.0) XIO(S050TL1.Act[3].Home.Pxs.0) ,XIO(S050TL1.Act[3].Installed.0) ][XIC(S050TL1.Act[3].Work.Pxs.1) XIO(S050TL1.Act[3].Home.Pxs.1) ,XIO(S050TL1.Act[3].Installed.1) ][XIC(S050TL1.Act[3].Work.Pxs.2) XIO(S050TL1.Act[3].Home.Pxs.2) ,XIO(S050TL1.Act[3].Installed.2) ][XIC(S050TL1.Act[3].Work.Pxs.3) XIO(S050TL1.Act[3].Home.Pxs.3) ,XIO(S050TL1.Act[3].Installed.3) ][XIC(S050TL1.Act[3].Work.Pxs.4) XIO(S050TL1.Act[3].Home.Pxs.4) ,XIO(S050TL1.Act[3].Installed.4) ][XIC(S050TL1.Act[3].Work.Pxs.5) XIO(S050TL1.Act[3].Home.Pxs.5) ,XIO(S050TL1.Act[3].Installed.5) ][XIC(S050TL1.Act[3].Work.Pxs.6) XIO(S050TL1.Act[3].Home.Pxs.6) ,XIO(S050TL1.Act[3].Installed.6) ][XIC(S050TL1.Act[3].Work.Pxs.7) XIO(S050TL1.Act[3].Home.Pxs.7) ,XIO(S050TL1.Act[3].Installed.7) ]OTE(S050TL1.Act[3].Work.Comp);
				N: [XIC(S050TL1.Act[3].Work.Out) [RTO(S050TL1.Act[3].Work.FltTmr,?,?) ,XIC(S050TL1.Act[3].Work.Comp) OTL(S050TL1.Act[3].Work.FltTmr.DN) ] ,XIC(S050TL1.Act[3].Home.Out) RES(S050TL1.Act[3].Work.FltTmr) ,XIC(S050TL1.Act[3].Work.FltTmr.DN) XIO(S050TL1.Act[3].Work.Comp) XIC(S050TL1.Int.PPActFltsEnbld) [OTE(S050TL1.Act[3].Work.MtnFlt) ,XIC(S050TL1.Act[3].Home.Comp) OTE(S050TL1.Act[3].Work.VlvFlt) ] ];
				RC: "########################$N"
				    "Home Control Logic$N"
				    "########################";
				N: [XIC(S050TL1.Act[3].Work.AutoCmd) ,XIC(S050TL1.Act[3].Work.ManualCmdPB) ]XIC(S050TL1.Act[3].Work.Clr)OTE(S050TL1.Act[3].Home.SealRst);
				N: [XIC(S050TT1.Int.AutoMode) XIC(S050TL1.Act[3].Home.AutoCmd) ,XIC(S050TT1.Int.ManualMode) XIC(S050TL1.Act[3].Home.ManualCmdPB) ,XIC(S050TL1.Act[3].Home.Out) XIC(S050TL1.Act[3].Home.Seal) ]XIC(S050TL1.Act[3].Home.Clr)XIO(S050TL1.Act[3].Home.SealRst)XIC(S050TL1.Act[3].ActMtnEnbld)OTE(S050TL1.Act[3].Home.Out);
				N: XIC(S050TL1.Act[3].Home.Out)OTL(S050TL1.Act[3].Home.Mem);
				N: XIC(S050TL1.Act[3].Work.Out)OTU(S050TL1.Act[3].Home.Mem);
				N: [XIC(S050TL1.Act[3].Home.Pxs.0) XIO(S050TL1.Act[3].Work.Pxs.0) ,XIO(S050TL1.Act[3].Installed.0) ][XIC(S050TL1.Act[3].Home.Pxs.1) XIO(S050TL1.Act[3].Work.Pxs.1) ,XIO(S050TL1.Act[3].Installed.1) ][XIC(S050TL1.Act[3].Home.Pxs.2) XIO(S050TL1.Act[3].Work.Pxs.2) ,XIO(S050TL1.Act[3].Installed.2) ][XIC(S050TL1.Act[3].Home.Pxs.3) XIO(S050TL1.Act[3].Work.Pxs.3) ,XIO(S050TL1.Act[3].Installed.3) ][XIC(S050TL1.Act[3].Home.Pxs.4) XIO(S050TL1.Act[3].Work.Pxs.4) ,XIO(S050TL1.Act[3].Installed.4) ][XIC(S050TL1.Act[3].Home.Pxs.5) XIO(S050TL1.Act[3].Work.Pxs.5) ,XIO(S050TL1.Act[3].Installed.5) ][XIC(S050TL1.Act[3].Home.Pxs.6) XIO(S050TL1.Act[3].Work.Pxs.6) ,XIO(S050TL1.Act[3].Installed.6) ][XIC(S050TL1.Act[3].Home.Pxs.7) XIO(S050TL1.Act[3].Work.Pxs.7) ,XIO(S050TL1.Act[3].Installed.7) ]OTE(S050TL1.Act[3].Home.Comp);
				N: [XIC(S050TL1.Act[3].Home.Out) [RTO(S050TL1.Act[3].Home.FltTmr,?,?) ,XIC(S050TL1.Act[3].Home.Comp) OTL(S050TL1.Act[3].Home.FltTmr.DN) ] ,XIC(S050TL1.Act[3].Work.Out) RES(S050TL1.Act[3].Home.FltTmr) ,XIC(S050TL1.Act[3].Home.FltTmr.DN) XIO(S050TL1.Act[3].Home.Comp) XIC(S050TL1.Int.PPActFltsEnbld) [OTE(S050TL1.Act[3].Home.MtnFlt) ,XIC(S050TL1.Act[3].Work.Comp) OTE(S050TL1.Act[3].Home.VlvFlt) ] ];
				N: [XIC(S050TL1.Act[3].Home.MtnFlt) ,XIC(S050TL1.Act[3].Home.VlvFlt) ,XIC(S050TL1.Act[3].Work.MtnFlt) ,XIC(S050TL1.Act[3].Work.VlvFlt) ]OTE(S050TL1.Act[3].Faulted);
		END_ROUTINE

		ROUTINE D00_Act4_Slide1 (Description := "Actuator Standard Routine")
				RC: "########################$N"
				    "Actuator Standard Logic$N"
				    "########################$N"
				    "$N"
				    "Add Control for every used Actuator$N"
				    "Edit Only Work and Home Descriptions$N"
				    "Do Not edit Work/Home Control Logic";
				N: NOP();
				RC: "########################$N"
				    "Actuator[4]$N"
				    "Slide 1$N"
				    "*Description*$N"
				    "CL9$N"
				    "########################";
				N: NOP();
				N: MOV('Advance',S050TL1.Act[4].WorkCmdDesc)MOV('Retract',S050TL1.Act[4].HomeCmdDesc);
				RC: "########################$N"
				    "Work Control Logic$N"
				    "########################";
				N: [XIC(S050TL1.Act[4].Home.AutoCmd) ,XIC(S050TL1.Act[4].Home.ManualCmdPB) ]XIC(S050TL1.Act[4].Home.Clr)OTE(S050TL1.Act[4].Work.SealRst);
				N: [XIC(S050TT1.Int.AutoMode) XIC(S050TL1.Act[4].Work.AutoCmd) ,XIC(S050TT1.Int.ManualMode) XIC(S050TL1.Act[4].Work.ManualCmdPB) ,XIC(S050TL1.Act[4].Work.Out) XIC(S050TL1.Act[4].Work.Seal) ]XIC(S050TL1.Act[4].Work.Clr)XIO(S050TL1.Act[4].Work.SealRst)XIC(S050TL1.Act[4].ActMtnEnbld)OTE(S050TL1.Act[4].Work.Out);
				N: XIC(S050TL1.Act[4].Work.Out)OTL(S050TL1.Act[4].Work.Mem);
				N: XIC(S050TL1.Act[4].Home.Out)OTU(S050TL1.Act[4].Work.Mem);
				N: [XIC(S050TL1.Act[4].Work.Pxs.0) XIO(S050TL1.Act[4].Home.Pxs.0) ,XIO(S050TL1.Act[4].Installed.0) ][XIC(S050TL1.Act[4].Work.Pxs.1) XIO(S050TL1.Act[4].Home.Pxs.1) ,XIO(S050TL1.Act[4].Installed.1) ][XIC(S050TL1.Act[4].Work.Pxs.2) XIO(S050TL1.Act[4].Home.Pxs.2) ,XIO(S050TL1.Act[4].Installed.2) ][XIC(S050TL1.Act[4].Work.Pxs.3) XIO(S050TL1.Act[4].Home.Pxs.3) ,XIO(S050TL1.Act[4].Installed.3) ][XIC(S050TL1.Act[4].Work.Pxs.4) XIO(S050TL1.Act[4].Home.Pxs.4) ,XIO(S050TL1.Act[4].Installed.4) ][XIC(S050TL1.Act[4].Work.Pxs.5) XIO(S050TL1.Act[4].Home.Pxs.5) ,XIO(S050TL1.Act[4].Installed.5) ][XIC(S050TL1.Act[4].Work.Pxs.6) XIO(S050TL1.Act[4].Home.Pxs.6) ,XIO(S050TL1.Act[4].Installed.6) ][XIC(S050TL1.Act[4].Work.Pxs.7) XIO(S050TL1.Act[4].Home.Pxs.7) ,XIO(S050TL1.Act[4].Installed.7) ]OTE(S050TL1.Act[4].Work.Comp);
				N: [XIC(S050TL1.Act[4].Work.Out) [RTO(S050TL1.Act[4].Work.FltTmr,?,?) ,XIC(S050TL1.Act[4].Work.Comp) OTL(S050TL1.Act[4].Work.FltTmr.DN) ] ,XIC(S050TL1.Act[4].Home.Out) RES(S050TL1.Act[4].Work.FltTmr) ,XIC(S050TL1.Act[4].Work.FltTmr.DN) XIO(S050TL1.Act[4].Work.Comp) XIC(S050TL1.Int.PPActFltsEnbld) [OTE(S050TL1.Act[4].Work.MtnFlt) ,XIC(S050TL1.Act[4].Home.Comp) OTE(S050TL1.Act[4].Work.VlvFlt) ] ];
				RC: "########################$N"
				    "Home Control Logic$N"
				    "########################";
				N: [XIC(S050TL1.Act[4].Work.AutoCmd) ,XIC(S050TL1.Act[4].Work.ManualCmdPB) ]XIC(S050TL1.Act[4].Work.Clr)OTE(S050TL1.Act[4].Home.SealRst);
				N: [XIC(S050TT1.Int.AutoMode) XIC(S050TL1.Act[4].Home.AutoCmd) ,XIC(S050TT1.Int.ManualMode) XIC(S050TL1.Act[4].Home.ManualCmdPB) ,XIC(S050TL1.Act[4].Home.Out) XIC(S050TL1.Act[4].Home.Seal) ]XIC(S050TL1.Act[4].Home.Clr)XIO(S050TL1.Act[4].Home.SealRst)XIC(S050TL1.Act[4].ActMtnEnbld)OTE(S050TL1.Act[4].Home.Out);
				N: XIC(S050TL1.Act[4].Home.Out)OTL(S050TL1.Act[4].Home.Mem);
				N: XIC(S050TL1.Act[4].Work.Out)OTU(S050TL1.Act[4].Home.Mem);
				N: [XIC(S050TL1.Act[4].Home.Pxs.0) XIO(S050TL1.Act[4].Work.Pxs.0) ,XIO(S050TL1.Act[4].Installed.0) ][XIC(S050TL1.Act[4].Home.Pxs.1) XIO(S050TL1.Act[4].Work.Pxs.1) ,XIO(S050TL1.Act[4].Installed.1) ][XIC(S050TL1.Act[4].Home.Pxs.2) XIO(S050TL1.Act[4].Work.Pxs.2) ,XIO(S050TL1.Act[4].Installed.2) ][XIC(S050TL1.Act[4].Home.Pxs.3) XIO(S050TL1.Act[4].Work.Pxs.3) ,XIO(S050TL1.Act[4].Installed.3) ][XIC(S050TL1.Act[4].Home.Pxs.4) XIO(S050TL1.Act[4].Work.Pxs.4) ,XIO(S050TL1.Act[4].Installed.4) ][XIC(S050TL1.Act[4].Home.Pxs.5) XIO(S050TL1.Act[4].Work.Pxs.5) ,XIO(S050TL1.Act[4].Installed.5) ][XIC(S050TL1.Act[4].Home.Pxs.6) XIO(S050TL1.Act[4].Work.Pxs.6) ,XIO(S050TL1.Act[4].Installed.6) ][XIC(S050TL1.Act[4].Home.Pxs.7) XIO(S050TL1.Act[4].Work.Pxs.7) ,XIO(S050TL1.Act[4].Installed.7) ]OTE(S050TL1.Act[4].Home.Comp);
				N: [XIC(S050TL1.Act[4].Home.Out) [RTO(S050TL1.Act[4].Home.FltTmr,?,?) ,XIC(S050TL1.Act[4].Home.Comp) OTL(S050TL1.Act[4].Home.FltTmr.DN) ] ,XIC(S050TL1.Act[4].Work.Out) RES(S050TL1.Act[4].Home.FltTmr) ,XIC(S050TL1.Act[4].Home.FltTmr.DN) XIO(S050TL1.Act[4].Home.Comp) XIC(S050TL1.Int.PPActFltsEnbld) [OTE(S050TL1.Act[4].Home.MtnFlt) ,XIC(S050TL1.Act[4].Work.Comp) OTE(S050TL1.Act[4].Home.VlvFlt) ] ];
				N: [XIC(S050TL1.Act[4].Home.MtnFlt) ,XIC(S050TL1.Act[4].Home.VlvFlt) ,XIC(S050TL1.Act[4].Work.MtnFlt) ,XIC(S050TL1.Act[4].Work.VlvFlt) ]OTE(S050TL1.Act[4].Faulted);
		END_ROUTINE

		ROUTINE D01_MotionSeq (Description := "Actuator Motion and Sequence Control")
				RC: "************************************************************$N"
				    "STATION ACTUATOR$N"
				    "MOTION AND SEQUENCE$N"
				    "LOGIC$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Actuator 1 Mapping$N"
				    "$N"
				    "Clamp 1$N"
				    "*Description*$N"
				    "CL1, CL2, CL3$N"
				    "************************************************************";
				N: [OTE(S050TL1.Act[1].Installed.0) ,XIC(Edit.Bit) OTE(S050TL1.Act[1].Work.Pxs.0) ,XIC(Edit.Bit) OTE(S050TL1.Act[1].Home.Pxs.0) ][OTE(S050TL1.Act[1].Installed.1) ,XIC(Edit.Bit) OTE(S050TL1.Act[1].Work.Pxs.1) ,XIC(Edit.Bit) OTE(S050TL1.Act[1].Home.Pxs.1) ][OTE(S050TL1.Act[1].Installed.2) ,XIC(Edit.Bit) OTE(S050TL1.Act[1].Work.Pxs.2) ,XIC(Edit.Bit) OTE(S050TL1.Act[1].Home.Pxs.2) ];
				RC: "************************************************************$N"
				    "Actuator Motion Interlock$N"
				    "************************************************************$N"
				    "$N"
				    "Edit.Bit May be used for Safety Manual Motion Enable$N"
				    "Future";
				N: [XIC(S010Sfty.FX1.MotionEnbl) OTE(S050TL1.Act[1].ActMtnIntlk.Inp_Intlk00) ,XIC(Edit.Bit) OTE(S050TL1.Act[1].ActMtnIntlk.Inp_Intlk01) ,XIC(Edit.Bit) OTE(S050TL1.Act[1].ActMtnIntlk.Inp_Intlk02) ,P_Intlk(S050TL1.Act[1].ActMtnIntlk) ,XIC(S050TL1.Act[1].ActMtnIntlk.Sts_IntlkOK) OTE(S050TL1.Act[1].ActMtnEnbld) ];
				RC: "************************************************************$N"
				    "Actuator 2 Mapping$N"
				    "$N"
				    "Clamp 2$N"
				    "*Description*$N"
				    "CL4, CL5, CL6$N"
				    "************************************************************";
				N: [OTE(S050TL1.Act[2].Installed.0) ,XIC(Edit.Bit) OTE(S050TL1.Act[2].Work.Pxs.0) ,XIC(Edit.Bit) OTE(S050TL1.Act[2].Home.Pxs.0) ][OTE(S050TL1.Act[2].Installed.1) ,XIC(Edit.Bit) OTE(S050TL1.Act[2].Work.Pxs.1) ,XIC(Edit.Bit) OTE(S050TL1.Act[2].Home.Pxs.1) ][OTE(S050TL1.Act[2].Installed.2) ,XIC(Edit.Bit) OTE(S050TL1.Act[2].Work.Pxs.2) ,XIC(Edit.Bit) OTE(S050TL1.Act[2].Home.Pxs.2) ];
				RC: "************************************************************$N"
				    "Actuator Motion Interlock$N"
				    "************************************************************$N"
				    "$N"
				    "Edit.Bit May be used for Safety Manual Motion Enable$N"
				    "Future";
				N: [XIC(S010Sfty.FX1.MotionEnbl) OTE(S050TL1.Act[2].ActMtnIntlk.Inp_Intlk00) ,XIC(Edit.Bit) OTE(S050TL1.Act[2].ActMtnIntlk.Inp_Intlk01) ,XIC(Edit.Bit) OTE(S050TL1.Act[2].ActMtnIntlk.Inp_Intlk02) ,P_Intlk(S050TL1.Act[2].ActMtnIntlk) ,XIC(S050TL1.Act[2].ActMtnIntlk.Sts_IntlkOK) OTE(S050TL1.Act[2].ActMtnEnbld) ];
				RC: "************************************************************$N"
				    "Actuator 3 Mapping$N"
				    "$N"
				    "Clamp 3$N"
				    "*Description*$N"
				    "CL7, CL8$N"
				    "************************************************************";
				N: [OTE(S050TL1.Act[3].Installed.0) ,XIC(Edit.Bit) OTE(S050TL1.Act[3].Work.Pxs.0) ,XIC(Edit.Bit) OTE(S050TL1.Act[3].Home.Pxs.0) ][OTE(S050TL1.Act[3].Installed.1) ,XIC(Edit.Bit) OTE(S050TL1.Act[3].Work.Pxs.1) ,XIC(Edit.Bit) OTE(S050TL1.Act[3].Home.Pxs.1) ];
				RC: "************************************************************$N"
				    "Actuator Motion Interlock$N"
				    "************************************************************$N"
				    "$N"
				    "Edit.Bit May be used for Safety Manual Motion Enable$N"
				    "Future";
				N: [XIC(S010Sfty.FX1.MotionEnbl) OTE(S050TL1.Act[3].ActMtnIntlk.Inp_Intlk00) ,XIC(Edit.Bit) OTE(S050TL1.Act[3].ActMtnIntlk.Inp_Intlk01) ,XIC(Edit.Bit) OTE(S050TL1.Act[3].ActMtnIntlk.Inp_Intlk02) ,P_Intlk(S050TL1.Act[3].ActMtnIntlk) ,XIC(S050TL1.Act[3].ActMtnIntlk.Sts_IntlkOK) OTE(S050TL1.Act[3].ActMtnEnbld) ];
				RC: "************************************************************$N"
				    "Actuator 4 Mapping$N"
				    "$N"
				    "Slide 1$N"
				    "*Description*$N"
				    "CL9$N"
				    "************************************************************";
				N: [OTE(S050TL1.Act[4].Installed.0) ,XIC(Edit.Bit) OTE(S050TL1.Act[4].Work.Pxs.0) ,XIC(Edit.Bit) OTE(S050TL1.Act[4].Home.Pxs.0) ][OTE(S050TL1.Act[4].Installed.1) ,XIC(Edit.Bit) OTE(S050TL1.Act[4].Work.Pxs.1) ,XIC(Edit.Bit) OTE(S050TL1.Act[4].Home.Pxs.1) ];
				RC: "************************************************************$N"
				    "Actuator Motion Interlock$N"
				    "************************************************************$N"
				    "$N"
				    "Edit.Bit May be used for Safety Manual Motion Enable$N"
				    "Future";
				N: [XIC(S010Sfty.FX1.MotionEnbl) OTE(S050TL1.Act[4].ActMtnIntlk.Inp_Intlk00) ,XIC(Edit.Bit) OTE(S050TL1.Act[4].ActMtnIntlk.Inp_Intlk01) ,XIC(Edit.Bit) OTE(S050TL1.Act[4].ActMtnIntlk.Inp_Intlk02) ,P_Intlk(S050TL1.Act[4].ActMtnIntlk) ,XIC(S050TL1.Act[4].ActMtnIntlk.Sts_IntlkOK) OTE(S050TL1.Act[4].ActMtnEnbld) ];
				RC: "#############################$N"
				    "S010TL1$N"
				    "Sequence Control$N"
				    "#############################$N"
				    "$N"
				    "Add Logic for all Actuators (Act[X]) in the tool sequence of operation.$N"
				    "$N"
				    "Example:$N"
				    "Act[1] to Work$N"
				    "Act[2] To Work$N"
				    "Act[1] To Home$N"
				    "Act[2] To Home";
				N: NOP();
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S005RB01.Int.ClearOfDrop1)XIC(S010RB01.Int.ClearOfTool1)XIC(S010RB02.Int.ClearOfTool1)XIC(S020RB01.Int.ClearOfPick1)OTE(S050TL1.Act[1].Work.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S050TL1.Act[1].Work.FltTmr.PRE)XIC(S050TT1.Int.AutoMode)XIC(Edit.Bit)OTE(S050TL1.Act[1].Work.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S050TT1.Int.ManualMode)XIC(Edit.Bit)OTE(S050TL1.Act[1].Work.ManualCmdPB);
				N: XIC(S050TL1.Act[1].Work.Comp)OTE(S050TL1.Act[1].Work.Seal);
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S005RB01.Int.ClearOfDrop1)XIC(S010RB01.Int.ClearOfTool1)XIC(S010RB02.Int.ClearOfTool1)XIC(S020RB01.Int.ClearOfPick1)OTE(S050TL1.Act[2].Work.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S050TL1.Act[1].Work.FltTmr.PRE)XIC(S050TT1.Int.AutoMode)XIC(Edit.Bit)OTE(S050TL1.Act[2].Work.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S050TT1.Int.ManualMode)XIC(Edit.Bit)OTE(S050TL1.Act[2].Work.ManualCmdPB);
				N: XIC(S050TL1.Act[2].Work.Comp)OTE(S050TL1.Act[2].Work.Seal);
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S005RB01.Int.ClearOfDrop1)XIC(S010RB01.Int.ClearOfTool1)XIC(S010RB02.Int.ClearOfTool1)XIC(S020RB01.Int.ClearOfPick1)OTE(S050TL1.Act[2].Home.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S050TL1.Act[1].Home.FltTmr.PRE)XIC(S050TT1.Int.AutoMode)XIC(Edit.Bit)OTE(S050TL1.Act[2].Home.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S050TT1.Int.ManualMode)XIC(Edit.Bit)OTE(S050TL1.Act[2].Home.ManualCmdPB);
				N: XIC(S050TL1.Act[2].Home.Comp)OTE(S050TL1.Act[2].Home.Seal);
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S005RB01.Int.ClearOfDrop1)XIC(S010RB01.Int.ClearOfTool1)XIC(S010RB02.Int.ClearOfTool1)XIC(S020RB01.Int.ClearOfPick1)OTE(S050TL1.Act[1].Home.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S050TL1.Act[1].Home.FltTmr.PRE)XIC(S050TT1.Int.AutoMode)XIC(Edit.Bit)OTE(S050TL1.Act[1].Home.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S050TT1.Int.ManualMode)XIC(Edit.Bit)OTE(S050TL1.Act[1].Home.ManualCmdPB);
				N: XIC(S050TL1.Act[1].Home.Comp)OTE(S050TL1.Act[1].Home.Seal);
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S005RB01.Int.ClearOfDrop1)XIC(S010RB01.Int.ClearOfTool1)XIC(S010RB02.Int.ClearOfTool1)XIC(S020RB01.Int.ClearOfPick1)OTE(S050TL1.Act[3].Work.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S050TL1.Act[1].Work.FltTmr.PRE)XIC(S050TT1.Int.AutoMode)XIC(Edit.Bit)OTE(S050TL1.Act[3].Work.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S050TT1.Int.ManualMode)XIC(Edit.Bit)OTE(S050TL1.Act[3].Work.ManualCmdPB);
				N: XIC(S050TL1.Act[3].Work.Comp)OTE(S050TL1.Act[3].Work.Seal);
				RC: "#############################$N"
				    "Actuator Clear$N"
				    "#############################$N"
				    "$N"
				    "Add all conditions that ensure physical clearance for the actuator move";
				N: XIC(S005RB01.Int.ClearOfDrop1)XIC(S010RB01.Int.ClearOfTool1)XIC(S010RB02.Int.ClearOfTool1)XIC(S020RB01.Int.ClearOfPick1)OTE(S050TL1.Act[3].Home.Clr);
				RC: "#############################$N"
				    "Actuator Auto Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit will all required conditions to trigger the automatic command based on the sequence.";
				N: MOV(1000,S050TL1.Act[1].Home.FltTmr.PRE)XIC(S050TT1.Int.AutoMode)XIC(Edit.Bit)OTE(S050TL1.Act[3].Home.AutoCmd);
				RC: "#############################$N"
				    "Actuator Manual Command$N"
				    "#############################$N"
				    "$N"
				    "Replace Edit.Bit with HMI Manual Command PB function";
				N: XIC(S050TT1.Int.ManualMode)XIC(Edit.Bit)OTE(S050TL1.Act[3].Home.ManualCmdPB);
				N: XIC(S050TL1.Act[3].Home.Comp)OTE(S050TL1.Act[3].Home.Seal);
		END_ROUTINE

		ROUTINE D02_PartPresent 
				RC: "************************************************************$N"
				    "PP Common Inputs$N"
				    "$N"
				    "Assign each PP[X] to a Part Present Load Group$N"
				    "$N"
				    "PP1_xxx - 1st Load Part Presents$N"
				    "PP2_xxx - 2nd Load Part Presents$N"
				    "PP3_xxx - 3rd Load Part Presents$N"
				    "PP4_xxx - 4th Load Part Presents$N"
				    "************************************************************";
				N: NOP();
				N: XIO(S050TL1.Int.DryCycle)XIC(sZ050_080.PowerEnbld)XIC(S050TL1.Int.AirOnOk)XIC(S050TL1.Int.AllModCommOk)XIC(Edit.Bit)OTE(S050TL1.Int.PPActFltsEnbld);
				RC: "************************************************************$N"
				    "Part Present Logic$N"
				    "$N"
				    "************************************************************$N"
				    "Part Present AOI Parameter Mapping";
				N: NOP();
				RC: "************************************************************$N"
				    "PartPresent$N"
				    "************************************************************$N"
				    "DryCycle Load Condition$N"
				    "If the Tool is loaded by a Robot, The Timer should be removed";
				N: XIC(S050TL1.Int.DryCycle)XIC(Edit.Bit)[OTE(S050TL1.PP[1].inpPPDryCycleLoadTrgr) ,OTE(S050TL1.PP[2].inpPPDryCycleLoadTrgr) ,OTE(S050TL1.PP[3].inpPPDryCycleLoadTrgr) ,OTE(S050TL1.PP[4].inpPPDryCycleLoadTrgr) ];
				RC: "************************************************************$N"
				    "PartPresent - AIR$N"
				    "************************************************************$N"
				    "DryCycle Unload Condition";
				N: XIC(S050TL1.Int.DryCycle)XIC(Edit.Bit)[OTE(S050TL1.PP[1].inpPPDryCycleUnldTrgr) ,OTE(S050TL1.PP[2].inpPPDryCycleUnldTrgr) ];
				RC: "************************************************************$N"
				    "PartPresent  - GRAVITY$N"
				    "************************************************************$N"
				    "DryCycle Unload Condition";
				N: XIC(S050TL1.Int.DryCycle)XIC(Edit.Bit)[OTE(S050TL1.PP[3].inpPPDryCycleUnldTrgr) ,OTE(S050TL1.PP[4].inpPPDryCycleUnldTrgr) ];
				RC: "************************************************************$N"
				    "Set Used/Installed Sensors$N"
				    "************************************************************$N"
				    "Change instruction to OTE if sensor used.$N"
				    "Change instruction to OTU if the sensor will not be used/installed";
				N: OTE(S050TL1.PP[1].inpPPSensorInst.0)OTE(S050TL1.PP[1].inpPPSensorInst.1)OTU(S050TL1.PP[1].inpPPSensorInst.2)OTU(S050TL1.PP[1].inpPPSensorInst.3)OTU(S050TL1.PP[1].inpPPSensorInst.4)OTU(S050TL1.PP[1].inpPPSensorInst.5)OTU(S050TL1.PP[1].inpPPSensorInst.6)OTU(S050TL1.PP[1].inpPPSensorInst.7);
				RC: "************************************************************$N"
				    "Add all first load Switch Inputs$N"
				    "Model Air$N"
				    "************************************************************";
				N: [MOV(0,S050TL1.PP[1].inpPPSensor) ,[XIC(S050TL1VM1.I1.0) OTE(S050TL1.PP[1].inpPPSensor.0) ,XIC(S050TL1VM1.I1.1) OTE(S050TL1.PP[1].inpPPSensor.1) ] ,XIC(S050TL1.Int.DryCycle) XIC(S050TL1.PP[1].stsPPMem) MOV(2#0000_0011,S050TL1.PP[1].inpPPSensor) ];
				N: [XIC(S050TL1VM1.I1.0) ,XIC(S050TL1VM1.I1.1) ]OTE(S050TL1.PP[1].PPAnySensor);
				RC: "************************************************************$N"
				    "Change Edit.Bit with required conditions for PP to be ON/OFF$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(S050TL1.PP[1].inpOnCondition);
				N: XIC(Edit.Bit)OTE(S050TL1.PP[1].inpOffCondition);
				RC: "************************************************************$N"
				    "Set Used/Installed Sensors$N"
				    "************************************************************$N"
				    "Change instruction to OTE if sensor used.$N"
				    "Change instruction to OTU if the sensor will not be used/installed";
				N: OTE(S050TL1.PP[2].inpPPSensorInst.0)OTE(S050TL1.PP[2].inpPPSensorInst.1)OTU(S050TL1.PP[2].inpPPSensorInst.2)OTU(S050TL1.PP[2].inpPPSensorInst.3)OTU(S050TL1.PP[2].inpPPSensorInst.4)OTU(S050TL1.PP[2].inpPPSensorInst.5)OTU(S050TL1.PP[2].inpPPSensorInst.6)OTU(S050TL1.PP[2].inpPPSensorInst.7);
				RC: "************************************************************$N"
				    "Add all second load Switch Inputs$N"
				    "Model Air$N"
				    "************************************************************";
				N: [MOV(0,S050TL1.PP[2].inpPPSensor) ,[XIC(S050TL1VM1.I1.2) OTE(S050TL1.PP[2].inpPPSensor.0) ,XIC(S050TL1VM1.I1.3) OTE(S050TL1.PP[2].inpPPSensor.1) ,XIC(S050TL1VM1.I1.4) OTE(S050TL1.PP[2].inpPPSensor.2) ] ,XIC(S050TL1.Int.DryCycle) XIC(S050TL1.PP[2].stsPPMem) MOV(2#0000_0111,S050TL1.PP[2].inpPPSensor) ];
				N: [XIC(S050TL1VM1.I1.2) ,XIC(S050TL1VM1.I1.3) ,XIC(S050TL1VM1.I1.4) ]OTE(S050TL1.PP[2].PPAnySensor);
				RC: "************************************************************$N"
				    "Change Edit.Bit with required conditions for PP to be ON/OFF$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(S050TL1.PP[2].inpOnCondition);
				N: XIC(Edit.Bit)OTE(S050TL1.PP[2].inpOffCondition);
				RC: "Model 1 Part Present AOIs$N"
				    "Lucid AIR";
				N: PartPresent(S050TL1.PP[1],S050TL1.PP[1].inpPPSensor,S050TL1.PP[1].inpOnCondition,S050TL1.PP[1].inpOffCondition,S050TL1.Int.DryCycle,S050TL1.Int.PPActFltsEnbld)PartPresent(S050TL1.PP[2],S050TL1.PP[2].inpPPSensor,S050TL1.PP[2].inpOnCondition,S050TL1.PP[2].inpOffCondition,S050TL1.Int.DryCycle,S050TL1.Int.PPActFltsEnbld);
				RC: "************************************************************$N"
				    "Parts Present Fault$N"
				    "************************************************************";
				N: NOP();
				N: [XIC(S050TL1.PP[1].stsPPNotOK) ,XIC(S050TL1.PP[2].stsPPNotOK) ]OTE(S050TL1.Int.PPFault);
				RC: "*************************************************************$N"
				    "Use to avoid load parts during drycycle$N"
				    "**************************************************************";
				N: XIO(S050TL1.Int.PartsPresNo)OTE(S050TL1.Int.AnyPartPres);
		END_ROUTINE

		ROUTINE P00_Station 
				RC: "###########################$N"
				    "Station$N"
				    "Standard Logic$N"
				    "$N"
				    "BiWCGlx Rev 1.0$N"
				    "###########################";
				N: NOP();
				RC: "########################################$N"
				    "Home Position$N"
				    "########################################";
				N: XIC(S050TL1.Act[1].Home.Comp)XIC(S050TL1.Act[2].Home.Comp)XIC(S050TL1.Act[3].Home.Comp)OTE(S050TL1.Int.AtHomePos);
				RC: "************************************************************$N"
				    "Station Part Present Summary$N"
				    "************************************************************$N"
				    "$N"
				    "OTU Bit if not used or required";
				N: NOP();
				N: XIC(S050TL1.PP[1].stsPPOff)XIC(S050TL1.PP[2].stsPPOff)XIC(S050TL1.PP[3].stsPPOff)XIC(S050TL1.PP[4].stsPPOff)OTE(S050TL1.Int.PartsPresNo);
				N: XIC(S050TL1.Int.PartsPresNo)XIC(S050TL1.SR.Int.NoPart)OTE(S050TL1.Int.Empty);
				N: [XIC(S050TL1.PP[1].stsPPOn) XIC(S050TL1.PP[2].stsPPOff) ,XIC(S050TL1.PP[3].stsPPOn) XIC(S050TL1.PP[4].stsPPOff) ]OTE(S050TL1.Int.AllPartsPres1);
				N: [XIC(S050TL1.PP[1].PPAnySensor) ,XIC(S050TL1.PP[3].PPAnySensor) ]OTE(S050TL1.Int.AnyPartPres1);
				N: [XIC(S050TL1.PP[1].stsPPOn) XIC(S050TL1.PP[2].stsPPOn) ,XIC(S050TL1.PP[3].stsPPOn) XIC(S050TL1.PP[4].stsPPOn) ]OTE(S050TL1.Int.AllPartsPres2);
				N: [XIC(S050TL1.PP[2].PPAnySensor) ,XIC(S050TL1.PP[4].PPAnySensor) ]OTE(S050TL1.Int.AnyPartPres2);
				N: OTU(S050TL1.Int.AllPartsPres3);
				N: OTU(S050TL1.Int.AnyPartPres3);
				N: [XIC(S050TL1.SR.Int.Model1) XIC(S050TL1.PP[1].stsPPOn) XIC(S050TL1.PP[2].stsPPOn) ,XIC(S050TL1.SR.Int.Model2) XIC(S050TL1.PP[3].stsPPOn) XIC(S050TL1.PP[4].stsPPOn) ]XIC(Edit.Bit)OTE(S050TL1.Int.AllPPandSR);
				N: XIC(S010RB01.Int.Sta1TaskComp)XIC(S010RB02.Int.Sta1TaskComp)OTE(S050TL1.Int.RbtsTaskComp);
				RC: "************************************************************$N"
				    "Auto Mode Selected$N"
				    "************************************************************$N"
				    "";
				N: XIC(S050TT1.Int.AutoSel)OTE(S050TL1.Int.AutoSel);
				RC: "************************************************************$N"
				    "Auto Mode $N"
				    "Running$N"
				    "************************************************************";
				N: XIC(S050TT1.Int.AutoMode)OTE(S050TL1.Int.AutoMode);
				RC: "************************************************************$N"
				    "Auto Cycle Stop$N"
				    "************************************************************$N"
				    "";
				N: XIO(S050TT1.Int.AutoModeStopReq)OTE(S050TL1.Int.AutoModeStopReq);
				N: XIC(S050TT1.Int.AutoModeStopEnable)OTE(S050TL1.Int.AutoModeStopEnable);
				N: XIC(S050TT1.Int.AutoModeStop)OTE(S050TL1.Int.AutoModeStop);
				RC: "************************************************************$N"
				    "Manual Mode$N"
				    "************************************************************$N"
				    "";
				N: XIC(S050TT1.Int.ManualMode)OTE(S050TL1.Int.ManualMode);
				RC: "************************************************************$N"
				    "Dry Cycle$N"
				    "************************************************************$N"
				    "";
				N: XIC(S050TT1.Int.DryCycle)OTE(S050TL1.Int.DryCycle);
				RC: "************************************************************$N"
				    "No Mode$N"
				    "************************************************************$N"
				    "";
				N: XIC(S050TT1.Int.NoMode)OTE(S050TL1.Int.NoMode);
				RC: "########################################$N"
				    "Load Setups$N"
				    "########################################";
				N: XIC(S050TL1.Int.AtHomePos)OTE(S050TL1.Int.LoadPos1);
				N: XIC(Edit.Bit)OTE(S050TL1.Int.LoadPos2);
				N: XIC(Edit.Bit)OTE(S050TL1.Int.LoadPos3);
				N: XIC(Edit.Bit)OTE(S050TL1.Int.LoadPos4);
				N: XIC(S050TL1.Int.AutoMode)XIC(S050TT1.Drive.TL1AtLoadPos)[XIC(S050TL1.Int.LoadPos1) XIC(Edit.Bit) ,XIC(S050TL1.Int.LoadPos2) XIC(Edit.Bit) ,XIC(S050TL1.Int.LoadPos3) XIC(Edit.Bit) ,XIC(S050TL1.Int.LoadPos4) XIC(Edit.Bit) ]XIO(S050TL1.Int.TaskComp)XIO(S050TL1.Int.CycComp)XIC(S010Sfty.AllStaLtScrnOK)OTE(S050TL1.Int.ClrToLoad);
				N: XIC(Edit.Bit)OTE(S050TL1.Int.Load1Comp);
				N: XIC(Edit.Bit)OTE(S050TL1.Int.Load2Comp);
				N: XIC(Edit.Bit)OTE(S050TL1.Int.Load3Comp);
				N: XIC(Edit.Bit)OTE(S050TL1.Int.Load4Comp);
				N: XIC(Edit.Bit)OTE(S050TL1.Int.LoadComp);
				RC: "########################################$N"
				    "Work Positions$N"
				    "$N"
				    "10 Work Positions Available$N"
				    "########################################";
				N: XIC(S050TL1.Act[1].Work.Comp)XIC(S050TL1.Act[2].Work.Comp)XIC(S050TL1.Act[3].Work.Comp)OTE(S050TL1.Int.AtWorkPos1);
				N: XIC(Edit.Bit)OTE(S050TL1.Int.AtWorkPos2);
				N: XIC(Edit.Bit)OTE(S050TL1.Int.AtWorkPos3);
				RC: "########################################$N"
				    "Station Process Completes$N"
				    "$N"
				    "10 Process Completes Available$N"
				    "########################################";
				N: XIC(Edit.Bit)OTE(S050TL1.Int.Proc1Comp);
				N: XIC(S050TL1.Int.RbtsTaskComp)XIC(Edit.Bit)OTE(S050TL1.Int.Proc2Comp);
				N: XIC(Edit.Bit)OTE(S050TL1.Int.Proc3Comp);
				RC: "########################################$N"
				    "Station Tasks Complete$N"
				    "########################################";
				N: XIC(S050TL1.Int.CycStart)XIC(S050TL1.Int.Proc2Comp)XIC(S050TL1.Int.RbtsTaskComp)XIC(Edit.Bit)OTL(S050TL1.Int.TaskComp);
				N: [XIC(S050TL1.Int.UnldComp) ,XIC(S050TL1.Int.RstCycComp) ]OTU(S050TL1.Int.TaskComp);
				RC: "########################################$N"
				    "Unload Setups$N"
				    "########################################";
				N: XIC(S050TL1.Act[1].Home.Comp)XIC(S050TL1.Act[2].Home.Comp)XIC(S050TL1.Act[3].Work.Comp)OTE(S050TL1.Int.UnldPos1);
				N: XIC(Edit.Bit)OTE(S050TL1.Int.UnldPos2);
				N: XIC(Edit.Bit)OTE(S050TL1.Int.UnldPos3);
				N: XIC(S050TL1.Int.TaskComp)XIC(S050TL1.Int.UnldPos3)XIC(Edit.Bit)OTL(S050TL1.Int.CycComp);
				N: XIC(S050TL1.Int.RstCycComp)OTU(S050TL1.Int.UnldComp)OTU(S050TL1.Int.CycComp);
				N: XIC(S050TL1.Int.AutoMode)XIC(S050TT1.Drive.TL1AtUnldPos)XIC(S050TL1.Int.AllPPandSR)XIC(S050TL1.Int.UnldPos1)XIC(S050TL1.Int.TaskComp)XIC(S050TL1.Int.CycComp)XIC(Edit.Bit)OTE(S050TL1.Int.ClrToUnld);
				N: XIC(S050TT1.Drive.TL1AtUnldPos)XIC(S050TL1.Int.TaskComp)XIC(S050TL1.Int.CycComp)XIC(S050TL1.Int.Empty)XIC(Edit.Bit)OTL(S050TL1.Int.UnldComp);
				N: XIC(S050TL1.Int.AutoMode)XIO(S050TT1.Drive.TL1AtLoadPos)XIO(S050TT1.Drive.TL1AtUnldPos)XIC(S050TL1.Int.Empty)[XIC(S050TL1.Int.AtHomePos) ,XIC(Edit.Bit) ]XIC(Edit.Bit)OTE(S050TL1.Int.RstCycComp);
				RC: "########################################$N"
				    "Cycle Start Logic$N"
				    "########################################$N"
				    "$N"
				    "To be detemined how cycle start will be handled. Different Process starts may be involved.";
				N: XIC(Edit.Debug)OTE(S050TL1.Int.CycStart);
				RC: "************************************************************$N"
				    "Station Cycle Time Logic$N"
				    "************************************************************";
				N: NOP();
				N: MOV(3600000,S050TL1.Int.TackTMR.PRE)RTO(S050TL1.Int.TackTMR,?,?);
				N: XIC(S050TL1.Int.AutoMode)[XIC(S005RB01.Int.AutoMode) XIO(S005RB01.Int.ClearOfDrop1) ,XIC(S020RB05.Int.AutoMode) XIC(S020RB05.Int.ClearOfPick1) ]MOV(3600000,S050TL1.Int.IndexTMR.PRE)RTO(S050TL1.Int.IndexTMR,?,?);
				N: [XIC(S050TL1.Int.AutoMode) [XIC(S050TL1.Int.CycStart) XIO(S050TL1.Int.UnldComp) ,XIC(S050TL1.Int.TaskComp) XIO(S050TL1.Int.UnldPos1) XIC(Edit.Bit) ,XIC(S050TL1.Int.UnldComp) XIO(S050TL1.Int.CycComp) XIC(S050TL1.Int.PartsPresNo) ] ,XIC(S050TT1.Oper.CycTimeTmr.EN) ]XIO(S050TL1.Int.IndexTMR.TT)MOV(3600000,S050TL1.Int.CycTMR.PRE)RTO(S050TL1.Int.CycTMR,?,?);
				N: [XIC(S050TT1.Oper.CycTimeTmr.EN) ,XIC(S050TL1.Int.IndexTMR.EN) ,XIC(S050TL1.Int.CycTMR.EN) ]MOV(3600000,S050TL1.Int.ProcTMR.PRE)RTO(S050TL1.Int.ProcTMR,?,?);
				N: XIC(S050TL1.Int.UnldComp)[XIO(S050TL1.Int.CycCompONS.0) [MOV(S050TL1.Int.CycTMR.ACC,S050TL1.Int.CycTimeStore) ,RES(S050TL1.Int.CycTMR) ] ,OTL(S050TL1.Int.CycCompONS.0) ];
				N: XIC(S050TL1.Int.CycCompONS.0)XIO(S050TL1.Int.IndexTMR.EN)[XIO(S050TL1.Int.CycCompONS.1) [MOV(S050TL1.Int.TackTMR.ACC,S050TL1.Int.TackTimeStore) ,RES(S050TL1.Int.TackTMR) ,MOV(S050TL1.Int.IndexTMR.ACC,S050TL1.Int.IndexTimeStore) ,RES(S050TL1.Int.IndexTMR) ,MOV(S050TL1.Int.ProcTMR.ACC,S050TL1.Int.ProcTimeStore) ,RES(S050TL1.Int.ProcTMR) ] ,OTL(S050TL1.Int.CycCompONS.1) ];
				N: XIC(S050TL1.Int.CycStart)OTU(S050TL1.Int.CycCompONS.0)OTU(S050TL1.Int.CycCompONS.1);
				RC: "************************************************************$N"
				    "Station State$N"
				    "************************************************************";
				N: NOP();
				N: XIC(Edit.Bit)OTE(S050TL1.Int.Starved);
				N: XIC(Edit.Bit)OTE(S050TL1.Int.Blocked);
				RC: "************************************************************$N"
				    "Station Mode for HMI$N"
				    "$N"
				    "###REQUIRES UPDATE####$N"
				    "************************************************************";
				N: [MOV(0,S050TL1.Int.RunningMode) ,XIC(Status.AlwaysOff) XIC(Edit.Debug) MOV(1,S050TL1.Int.RunningMode) ,XIC(S050TL1.Int.HoldEndOfCycle) MOV(2,S050TL1.Int.RunningMode) ,XIC(S050TL1.Int.DryCycle) MOV(3,S050TL1.Int.RunningMode) ];
				RC: "************************************************************$N"
				    "Station Mode Status for HMI$N"
				    "$N"
				    "######REQUIRED UPDATE########$N"
				    "************************************************************";
				N: [XIO(HMI_FRM005.stsAnyFixtureOnFault) XIO(HMI_FRM005.stsAnyRobotOnFault) MOV(1,S050TL1.Int.RunningModeStatus) ,XIC(S050TL1.Int.Blocked) MOV(2,S050TL1.Int.RunningModeStatus) ,XIC(S050TL1.Int.Starved) MOV(3,S050TL1.Int.RunningModeStatus) ,[XIC(HMI_FRM050.stsAnyFixtureOnFault) ,XIC(HMI_FRM050.stsAnyRobotOnFault) ] MOV(0,S050TL1.Int.RunningModeStatus) ];
				RC: "************************************************************$N"
				    "Station Operation Mode for HMI$N"
				    "$N"
				    "#####REQUIRES UPDATE#####$N"
				    "************************************************************";
				N: [MOV(0,S050TL1.Int.OperationMode) ,XIC(S050TL1.Int.AutoSel) MOV(1,S050TL1.Int.OperationMode) ,XIC(S050TL1.Int.ManualMode) MOV(2,S050TL1.Int.OperationMode) ,XIC(S050TL1.Int.AutoMode) MOV(3,S050TL1.Int.OperationMode) ];
		END_ROUTINE

		ROUTINE P01_StationToSfty 
				RC: "************************************************************$N"
				    "Map States to Safety Tag$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S050TL1.Int.KnownPos)OTE(StdToSfty.S050TL1KnownPos);
				N: XIC(Edit.Bit)[MOV(500,S050TL1.Int.ClrToUnlockDlyTmr.PRE) TON(S050TL1.Int.ClrToUnlockDlyTmr,?,?) ,XIC(S050TL1.Int.ClrToUnlockDlyTmr.DN) OTE(StdToSfty.S050TL1ClrToUnlock) ];
		END_ROUTINE

		ROUTINE Y00_Alarms_L1 (Description := "Machine Fault Alarm Messages")
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L1$N"
				    "Machine Faults$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "Module Communication Faults$N"
				    "#######################$N"
				    "$N"
				    "Add the ENet.CommOK signal of the First upstream Ethernet Device If Daisy Chain.$N"
				    "If the First Upstream Ethernet Device is a Switch, TBD.";
				N: NOP();
				N: [XIC(S010TL1MIO1.ENet.CommOK) XIO(S050TL1VM1.ENet.CommOK) XIO(S050TL1VM1.ENet.Inhibited) OTE(S5.L1[1].2) ,XIC(S050TL1VM1.ENet.CommOK) XIO(S050TL1MIO1.ENet.CommOK) XIO(S050TL1VM1.ENet.Inhibited) OTE(S5.L1[1].3) ];
				RC: "#######################$N"
				    "Safety Instruction Faults$N"
				    "$N"
				    "E-Stop$N"
				    "Oper Light Screens And Scanners$N"
				    "Safety Position Devices$N"
				    "InterCell Safety Devices$N"
				    "#######################";
				N: NOP();
				RC: "#######################$N"
				    "Part Present Faults$N"
				    "#######################";
				N: NOP();
				N: XIC(S050TL1.Int.PPActFltsEnbld)[XIC(S050TL1.PP[1].stsNotONFault) [XIO(S050TL1.PP[1].inpPPSensor.0) OTE(S5.L1[10].0) ,XIO(S050TL1.PP[1].inpPPSensor.1) OTE(S5.L1[10].2) ] ,XIC(S050TL1.PP[1].stsStillONFault) [XIC(S050TL1.PP[1].inpPPSensor.0) OTE(S5.L1[10].1) ,XIC(S050TL1.PP[1].inpPPSensor.1) OTE(S5.L1[10].3) ] ];
				N: XIC(S050TL1.Int.PPActFltsEnbld)[XIC(S050TL1.PP[2].stsNotONFault) [XIO(S050TL1.PP[2].inpPPSensor.0) OTE(S5.L1[10].4) ,XIO(S050TL1.PP[2].inpPPSensor.1) OTE(S5.L1[10].6) ,XIO(S050TL1.PP[2].inpPPSensor.2) OTE(S5.L1[10].8) ] ,XIC(S050TL1.PP[2].stsStillONFault) [XIC(S050TL1.PP[2].inpPPSensor.0) OTE(S5.L1[10].5) ,XIC(S050TL1.PP[2].inpPPSensor.1) OTE(S5.L1[10].7) ,XIC(S050TL1.PP[2].inpPPSensor.2) OTE(S5.L1[10].9) ] ];
				N: XIC(S050TL1.Int.PPActFltsEnbld)[XIC(S050TL1.PP[3].stsNotONFault) [XIO(S050TL1.PP[3].inpPPSensor.0) OTE(S5.L1[10].10) ,XIO(S050TL1.PP[3].inpPPSensor.1) OTE(S5.L1[10].12) ] ,XIC(S050TL1.PP[3].stsStillONFault) [XIC(S050TL1.PP[3].inpPPSensor.0) OTE(S5.L1[10].11) ,XIC(S050TL1.PP[3].inpPPSensor.1) OTE(S5.L1[10].13) ] ];
				N: XIC(S050TL1.Int.PPActFltsEnbld)[XIC(S050TL1.PP[4].stsNotONFault) [XIO(S050TL1.PP[4].inpPPSensor.0) OTE(S5.L1[10].14) ,XIO(S050TL1.PP[4].inpPPSensor.1) OTE(S5.L1[10].16) ,XIO(S050TL1.PP[4].inpPPSensor.2) OTE(S5.L1[10].18) ] ,XIC(S050TL1.PP[4].stsStillONFault) [XIC(S050TL1.PP[4].inpPPSensor.0) OTE(S5.L1[10].15) ,XIC(S050TL1.PP[4].inpPPSensor.1) OTE(S5.L1[10].17) ,XIC(S050TL1.PP[4].inpPPSensor.2) OTE(S5.L1[10].19) ] ];
				RC: "#######################$N"
				    "Actuator Faults$N"
				    "#######################";
				N: NOP();
				N: [XIC(S050TL1.Act[1].Work.VlvFlt) OTE(S5.L1[15].0) ,XIC(S050TL1.Act[1].Home.VlvFlt) OTE(S5.L1[15].1) ];
				N: XIC(S050TL1.Act[1].Work.MtnFlt)XIO(S050TL1.Act[1].Work.VlvFlt)[[XIC(S050TL1.Act[1].Installed.0) XIO(S050TL1.Act[1].Work.Pxs.0) OTE(S5.L1[15].2) ,XIC(S050TL1.Act[1].Work.Pxs.0) XIC(S050TL1.Act[1].Home.Pxs.0) OTE(S5.L1[15].4) ] ,[XIC(S050TL1.Act[1].Installed.1) XIO(S050TL1.Act[1].Work.Pxs.1) OTE(S5.L1[15].6) ,XIC(S050TL1.Act[1].Work.Pxs.1) XIC(S050TL1.Act[1].Home.Pxs.1) OTE(S5.L1[15].8) ] ,[XIC(S050TL1.Act[1].Installed.2) XIO(S050TL1.Act[1].Work.Pxs.2) OTE(S5.L1[15].10) ,XIC(S050TL1.Act[1].Work.Pxs.2) XIC(S050TL1.Act[1].Home.Pxs.2) OTE(S5.L1[15].12) ] ];
				N: XIC(S050TL1.Act[1].Home.MtnFlt)XIO(S050TL1.Act[1].Home.VlvFlt)[[XIC(S050TL1.Act[1].Installed.0) XIO(S050TL1.Act[1].Home.Pxs.0) OTE(S5.L1[15].3) ,XIC(S050TL1.Act[1].Home.Pxs.0) XIC(S050TL1.Act[1].Work.Pxs.0) OTE(S5.L1[15].5) ] ,[XIC(S050TL1.Act[1].Installed.1) XIO(S050TL1.Act[1].Home.Pxs.1) OTE(S5.L1[15].7) ,XIC(S050TL1.Act[1].Home.Pxs.1) XIC(S050TL1.Act[1].Work.Pxs.1) OTE(S5.L1[15].9) ] ,[XIC(S050TL1.Act[1].Installed.2) XIO(S050TL1.Act[1].Home.Pxs.2) OTE(S5.L1[15].11) ,XIC(S050TL1.Act[1].Home.Pxs.2) XIC(S050TL1.Act[1].Work.Pxs.2) OTE(S5.L1[15].13) ] ];
				N: [XIC(S050TL1.Act[2].Work.VlvFlt) OTE(S5.L1[15].16) ,XIC(S050TL1.Act[2].Home.VlvFlt) OTE(S5.L1[15].17) ];
				N: XIC(S050TL1.Act[2].Work.MtnFlt)XIO(S050TL1.Act[2].Work.VlvFlt)[[XIC(S050TL1.Act[2].Installed.0) XIO(S050TL1.Act[2].Work.Pxs.0) OTE(S5.L1[15].18) ,XIC(S050TL1.Act[2].Work.Pxs.0) XIC(S050TL1.Act[2].Home.Pxs.0) OTE(S5.L1[15].20) ] ,[XIC(S050TL1.Act[2].Installed.1) XIO(S050TL1.Act[2].Work.Pxs.1) OTE(S5.L1[15].22) ,XIC(S050TL1.Act[2].Work.Pxs.1) XIC(S050TL1.Act[2].Home.Pxs.1) OTE(S5.L1[15].24) ] ,[XIC(S050TL1.Act[2].Installed.2) XIO(S050TL1.Act[2].Work.Pxs.2) OTE(S5.L1[15].26) ,XIC(S050TL1.Act[2].Work.Pxs.2) XIC(S050TL1.Act[2].Home.Pxs.2) OTE(S5.L1[15].28) ] ];
				N: XIC(S050TL1.Act[2].Home.MtnFlt)XIO(S050TL1.Act[2].Home.VlvFlt)[[XIC(S050TL1.Act[2].Installed.0) XIO(S050TL1.Act[2].Home.Pxs.0) OTE(S5.L1[15].19) ,XIC(S050TL1.Act[2].Home.Pxs.0) XIC(S050TL1.Act[2].Work.Pxs.0) OTE(S5.L1[15].21) ] ,[XIC(S050TL1.Act[2].Installed.1) XIO(S050TL1.Act[2].Home.Pxs.1) OTE(S5.L1[15].23) ,XIC(S050TL1.Act[2].Home.Pxs.1) XIC(S050TL1.Act[2].Work.Pxs.1) OTE(S5.L1[15].25) ] ,[XIC(S050TL1.Act[2].Installed.2) XIO(S050TL1.Act[2].Home.Pxs.2) OTE(S5.L1[15].27) ,XIC(S050TL1.Act[2].Home.Pxs.2) XIC(S050TL1.Act[2].Work.Pxs.2) OTE(S5.L1[15].29) ] ];
				N: [XIC(S050TL1.Act[3].Work.VlvFlt) OTE(S5.L1[16].0) ,XIC(S050TL1.Act[3].Home.VlvFlt) OTE(S5.L1[16].1) ];
				N: XIC(S050TL1.Act[3].Work.MtnFlt)XIO(S050TL1.Act[3].Work.VlvFlt)[[XIC(S050TL1.Act[3].Installed.0) XIO(S050TL1.Act[3].Work.Pxs.0) OTE(S5.L1[16].2) ,XIC(S050TL1.Act[3].Work.Pxs.0) XIC(S050TL1.Act[3].Home.Pxs.0) OTE(S5.L1[16].4) ] ,[XIC(S050TL1.Act[3].Installed.1) XIO(S050TL1.Act[3].Work.Pxs.1) OTE(S5.L1[16].6) ,XIC(S050TL1.Act[3].Work.Pxs.1) XIC(S050TL1.Act[3].Home.Pxs.1) OTE(S5.L1[16].8) ] ];
				N: XIC(S050TL1.Act[3].Home.MtnFlt)XIO(S050TL1.Act[3].Home.VlvFlt)[[XIC(S050TL1.Act[3].Installed.0) XIO(S050TL1.Act[3].Home.Pxs.0) OTE(S5.L1[16].3) ,XIC(S050TL1.Act[3].Home.Pxs.0) XIC(S050TL1.Act[3].Work.Pxs.0) OTE(S5.L1[16].5) ] ,[XIC(S050TL1.Act[3].Installed.1) XIO(S050TL1.Act[3].Home.Pxs.1) OTE(S5.L1[16].7) ,XIC(S050TL1.Act[3].Home.Pxs.1) XIC(S050TL1.Act[3].Work.Pxs.1) OTE(S5.L1[16].9) ] ];
				N: [XIC(S050TL1.Act[4].Work.VlvFlt) OTE(S5.L1[16].12) ,XIC(S050TL1.Act[4].Home.VlvFlt) OTE(S5.L1[16].13) ];
				N: XIC(S050TL1.Act[4].Work.MtnFlt)XIO(S050TL1.Act[4].Work.VlvFlt)[[XIC(S050TL1.Act[4].Installed.0) XIO(S050TL1.Act[4].Work.Pxs.0) OTE(S5.L1[16].14) ,XIC(S050TL1.Act[4].Work.Pxs.0) XIC(S050TL1.Act[4].Home.Pxs.0) OTE(S5.L1[16].16) ] ,[XIC(S050TL1.Act[4].Installed.1) XIO(S050TL1.Act[4].Work.Pxs.1) OTE(S5.L1[16].18) ,XIC(S050TL1.Act[4].Work.Pxs.1) XIC(S050TL1.Act[4].Home.Pxs.1) OTE(S5.L1[16].20) ] ];
				N: XIC(S050TL1.Act[4].Home.MtnFlt)XIO(S050TL1.Act[4].Home.VlvFlt)[[XIC(S050TL1.Act[4].Installed.0) XIO(S050TL1.Act[4].Home.Pxs.0) OTE(S5.L1[16].15) ,XIC(S050TL1.Act[4].Home.Pxs.0) XIC(S050TL1.Act[4].Work.Pxs.0) OTE(S5.L1[16].17) ] ,[XIC(S050TL1.Act[4].Installed.1) XIO(S050TL1.Act[4].Home.Pxs.1) OTE(S5.L1[16].19) ,XIC(S050TL1.Act[4].Home.Pxs.1) XIC(S050TL1.Act[4].Work.Pxs.1) OTE(S5.L1[16].21) ] ];
				RC: "#######################$N"
				    "Shift Register Data Mismatch Fault$N"
				    "#######################";
				N: NOP();
				N: XIC(S050TT1.Int.AutoMode)XIO(S050TL1.Int.DryCycle)[XIC(S050TL1.Int.AllPartsPres5) XIC(S050TL1.SR.Int.NoPart) ,XIC(S050TL1.Int.PartsPresNo) XIO(S050TL1.SR.Int.NoPart) ][MOV(5000,S050TL1.Int.FltDelayTmr[0].PRE) TON(S050TL1.Int.FltDelayTmr[0],?,?) ,XIC(S050TL1.Int.FltDelayTmr[0].DN) OTE(S5.L1[65].0) ];
		END_ROUTINE

		ROUTINE Y01_Alarms_L2 (Description := "Manual Intervention Alarm Messages")
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L2$N"
				    "Manual Interventions$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "Inhibited Modules$N"
				    "#######################";
				N: NOP();
				N: [XIC(S050TL1MIO1.ENet.Inhibited) OTE(S5.L2[2].0) ,XIC(S050TL1VM1.ENet.Inhibited) OTE(S5.L2[2].1) ];
				RC: "#######################$N"
				    "E-Stop Activated$N"
				    "#######################";
				N: NOP();
				RC: "#######################$N"
				    "Operator Light Screen And Scanner Fault$N"
				    "#######################$N"
				    "$N"
				    "Use the correct Module Run Mode";
				N: NOP();
				RC: "#######################$N"
				    "Operator Light Screen And Scanner Fault$N"
				    "#######################$N"
				    "$N"
				    "Use the correct Module Run Mode";
				N: NOP();
				RC: "#######################$N"
				    "Station No Air$N"
				    "#######################";
				N: NOP();
				N: XIC(Edit.Bit)XIO(S050TL1.Int.AirOnOk)OTE(S5.L2[10].0);
		END_ROUTINE

		ROUTINE Y02_Alarms_L3 (Description := "Warning Alarm Messages")
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L3$N"
				    "Warnings$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "RESERVED$N"
				    "#######################";
				N: NOP();
		END_ROUTINE

		ROUTINE Z00_MapOutputs 
				RC: "************************************************************$N"
				    "Map Devices Outputs$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S050TL1.Act[1].Work.Out)XIO(S050TL1.Act[1].Home.Out)OTE(S050TL1VM1.O.0);
				N: XIC(S050TL1.Act[1].Home.Out)XIO(S050TL1.Act[1].Work.Out)OTE(S050TL1VM1.O.1);
				N: XIC(S050TL1.Act[2].Work.Out)XIO(S050TL1.Act[2].Home.Out)OTE(S050TL1VM1.O.2);
				N: XIC(S050TL1.Act[2].Home.Out)XIO(S050TL1.Act[2].Work.Out)OTE(S050TL1VM1.O.3);
				N: XIC(S050TL1.Act[3].Work.Out)XIO(S050TL1.Act[3].Home.Out)OTE(S050TL1VM1.O.4);
				N: XIC(S050TL1.Act[3].Home.Out)XIO(S050TL1.Act[3].Work.Out)OTE(S050TL1VM1.O.5);
				N: [XIO(S050TL1VM1.ENet.CommOK) [CLR(S050TL1VM1.O) ,FLL(0,S050TL1VM1:O.Data[0],2) ] ,XIC(S050TL1VM1.ENet.CommOK) COP(S050TL1VM1.O,S050TL1VM1:O.Data[0],2) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S050TT1 (Class := Standard,
	                 MAIN := "Main",
	                 MODE := 0,
	                 DisableFlag := 0,
	                 UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE B00_NetworkDiag 
				RC: "************************************************************$N"
				    "S050 TT Ethernet Devices Diagnostic$N"
				    "************************************************************";
				N: NOP();
				N: GSV(Module,S050TT1SRV1,EntryStatus,S050TT1SRV_ENet.ObjectStatus)[MEQ(S050TT1SRV_ENet.ObjectStatus,61440,24576) OTE(S050TT1SRV_ENet.Inhibited) ,MEQ(S050TT1SRV_ENet.ObjectStatus,61440,16384) OTE(S050TT1SRV_ENet.CommOK) ];
				N: GSV(Module,S050TT1SIO1,EntryStatus,S050TT1SIO1_ENet.ObjectStatus)[MEQ(S050TT1SIO1_ENet.ObjectStatus,61440,24576) OTE(S050TT1SIO1_ENet.Inhibited) ,MEQ(S050TT1SIO1_ENet.ObjectStatus,61440,16384) OTE(S050TT1SIO1_ENet.CommOK) ];
				N: XIC(S050TT1SRV_ENet.CommOK)XIC(S050TT1SIO1_ENet.CommOK)XIC(S050TT1SIO2_ENet.CommOK)OTE(S050TT1.Int.AllModCommOk);
		END_ROUTINE

		ROUTINE B01_MapInputs 
				RC: "************************************************************$N"
				    "Setup Hardware Overtravel Installed$N"
				    " $N"
				    "$N"
				    "************************************************************";
				N: OTU(S050TT1.Drive.OvrtrvlFwdHdwInst)OTU(S050TT1.Drive.OvrtrvlRevHdwInst);
				RC: "************************************************************$N"
				    "Conveyor$N"
				    "Setup Load and Unload PwrEnld depent if both is in the same safety zone$N"
				    " $N"
				    "$N"
				    "************************************************************";
				N: [XIC(S050TTSfty.Enable) OTE(S050TT1.Drive.DriveEnbl) ,XIC(S050TTSfty.All_DiscSwitch_OK) OTE(S050TT1.Drive.DiscOn) ,XIC(S050TTSfty.SftyPinsOk) OTE(S050TT1.Drive.SftyPinsOk) ,XIC(S050TTSfty.AllStaLtScrnOK) OTE(S050TT1.Int.AllStaLtScrnOK) ,XIC(S050TTSfty.LoadAssistClear) OTE(S050TT1.Int.LoadAssistClear) ,XIC(S050TTSfty.OPR1.stsCycleStartOSF) OTE(S050TT1.Oper.CycleStartPB) ];
				N: [XIC(S050TTSfty.SftyPosDev.SPD1.O1) OTE(S050TT1.Drive.TL1InPos) ,XIC(S050TTSfty.SftyPosDev.SPD2.O1) OTE(S050TT1.Drive.TL2InPos) ,XIC(S050TTSfty.SftyPosDev.SPD3.O1) OTE(S050TT1.Drive.TL3InPos) ,XIC(S050TTSfty.SftyPosDev.SPD4.O1) OTE(S050TT1.Drive.TL4InPos) ];
				N: [EQU(S050TT1SRV.CIPAxisState,2) OTE(S050TT1.Drive.DriveStoped) ,EQU(S050TT1SRV.CIPAxisState,4) OTE(S050TT1.Drive.DriveRunning) ,LIM(7,S050TT1SRV.CIPAxisState,8) OTE(S050TT1.Drive.DriveFault) ,[EQU(S050TT1SRV.CIPAxisState,9) ,EQU(S050TT1SRV.CIPAxisState,11) ] OTE(S050TT1.Drive.DriveInhibited) ,EQU(S050TT1SRV.CIPAxisState,10) OTE(S050TT1.Drive.DriveShutdown) ,EQU(S050TT1SRV.VelocityFeedback,0) OTE(S050TT1.Drive.AtZeroSpeed) ];
				RC: "************************************************************$N"
				    "Conveyor$N"
				    "OverTravel Feedback Setup $N"
				    " *Replace -l l- edit.bit for the real overtravel feedback*$N"
				    "$N"
				    "************************************************************";
				N: XIC(S050TT1.Drive.OvrtrvlFwdHdwInst)XIC(Edit.Bit)OTE(S050TT1.Drive.OvrtrvlFwdHdw);
				N: XIC(S050TT1.Drive.OvrtrvlRevHdwInst)XIC(Edit.Bit)OTE(S050TT1.Drive.OvrtrvlRevHdw);
				N: [XIC(Z005_040.AnyFltResetPB) ,XIC(Edit.Bit) ]OTE(S050TT1.Int.FaultResetPB);
		END_ROUTINE

		ROUTINE C00_Operator 
				RC: "************************************************************$N"
				    "Operator Routine$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Operator Load Required$N"
				    "$N"
				    "Use required Robot Safety Zone Clear, Clear of Tool, Load Position and Conditions$N"
				    "************************************************************";
				N: XIC(S005RB01Sfty.Int.SftyZn1)XIC(S005RB01.Int.ClearOfTool1)XIO(S050TT1.Int.DryCycle)XIO(S050TT1.Oper.DisableLoad)[XIC(S050TT1.Drive.TL1Installed) XIC(S050TT1.Drive.TL1InPos) XIC(S050TL1.Int.LoadPos1) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL2Installed) XIC(S050TT1.Drive.TL2InPos) XIC(S050TL2.Int.LoadPos1) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL3Installed) XIC(S050TT1.Drive.TL3InPos) XIC(S050TL3.Int.LoadPos1) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL4Installed) XIC(S050TT1.Drive.TL4InPos) XIC(S050TL4.Int.LoadPos1) XIC(Edit.Bit) ]OTE(S050TT1.Oper.Load1Req);
				N: XIC(S005RB01Sfty.Int.SftyZn1)XIC(S005RB01.Int.ClearOfTool1)XIO(S050TT1.Int.DryCycle)XIO(S050TT1.Oper.DisableLoad)[XIC(S050TT1.Drive.TL1Installed) XIC(S050TT1.Drive.TL1InPos) XIC(S050TL1.Int.LoadPos2) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL2Installed) XIC(S050TT1.Drive.TL2InPos) XIC(S050TL2.Int.LoadPos2) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL3Installed) XIC(S050TT1.Drive.TL3InPos) XIC(S050TL3.Int.LoadPos2) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL4Installed) XIC(S050TT1.Drive.TL4InPos) XIC(S050TL4.Int.LoadPos2) XIC(Edit.Bit) ]OTE(S050TT1.Oper.Load2Req);
				N: XIC(S005RB01Sfty.Int.SftyZn1)XIC(S005RB01.Int.ClearOfTool1)XIO(S050TT1.Int.DryCycle)XIO(S050TT1.Oper.DisableLoad)[XIC(S050TT1.Drive.TL1Installed) XIC(S050TT1.Drive.TL1InPos) XIC(S050TL1.Int.LoadPos3) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL2Installed) XIC(S050TT1.Drive.TL2InPos) XIC(S050TL2.Int.LoadPos3) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL3Installed) XIC(S050TT1.Drive.TL3InPos) XIC(S050TL3.Int.LoadPos3) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL4Installed) XIC(S050TT1.Drive.TL4InPos) XIC(S050TL4.Int.LoadPos3) XIC(Edit.Bit) ]OTE(S050TT1.Oper.Load3Req);
				N: XIC(S005RB01Sfty.Int.SftyZn1)XIC(S005RB01.Int.ClearOfTool1)XIO(S050TT1.Int.DryCycle)XIO(S050TT1.Oper.DisableLoad)[XIC(S050TT1.Drive.TL1Installed) XIC(S050TT1.Drive.TL1InPos) XIC(S050TL1.Int.LoadPos4) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL2Installed) XIC(S050TT1.Drive.TL2InPos) XIC(S050TL2.Int.LoadPos4) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL3Installed) XIC(S050TT1.Drive.TL3InPos) XIC(S050TL3.Int.LoadPos4) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL4Installed) XIC(S050TT1.Drive.TL4InPos) XIC(S050TL4.Int.LoadPos4) XIC(Edit.Bit) ]OTE(S050TT1.Oper.Load4Req);
				N: [XIC(S050TT1.Oper.Load1Req) ,XIC(S050TT1.Oper.Load2Req) ,XIC(S050TT1.Oper.Load3Req) ,XIC(S050TT1.Oper.Load4Req) ]OTE(S050TT1.Oper.AnyOperLdReq);
				RC: "************************************************************$N"
				    "Operator Unload Required$N"
				    "$N"
				    "Use required Robot Safety Zone Clear, Clear of Tool, Unload Position and Conditions$N"
				    "************************************************************";
				N: XIC(S005RB01Sfty.Int.SftyZn1)XIC(S005RB01.Int.ClearOfTool1)XIC(S050TT1.Int.ClrToUnld)XIC(Edit.Bit)XIO(S050TT1.Int.DryCycle)OTE(S050TT1.Oper.UnldReq);
				N: [XIO(S050TT1.Oper.CycleStartPB) ,XIC(S050TT1.Oper.AntiTieDown) ]XIC(S050TT1.Oper.CycleStartReset)OTE(S050TT1.Oper.AntiTieDown);
				RC: "Change Edit.debug and Edit.Bit with CycleStart Signals";
				N: XIC(S050TT1.Int.AutoSel)[XIC(S050TT1.Int.AutoMode) XIC(S050TT1.Oper.AtWorkPos) XIC(S050TT1.Oper.AnyOperLdReq) [XIC(S050TT1.Oper.CycleStartPB) ,XIC(S050TT1.Int.DryCycle) XIC(S050TT1.Oper.DryCycStrtMem) XIC(Edit.Bit) ] XIC(Edit.Debug) XIC(Edit.Bit) ,XIC(S050TT1.Oper.CycleStartSetup) ]XIC(S050TT1.Oper.AntiTieDown)[XIC(S050TT1.Int.DryCycle) OTL(S050TT1.Oper.DryCycStrtMem) ,OTE(S050TT1.Oper.CycleStartSetup) ];
				N: XIO(S050TT1.Int.DryCycle)[XIC(S050TT1.Drive.TL1Installed) XIC(S050TT1.Drive.TL1InPos) XIC(S050TL1.Int.AtHomePos) ,XIC(S050TT1.Drive.TL2Installed) XIC(S050TT1.Drive.TL2InPos) XIC(S050TL2.Int.AtHomePos) ,XIC(S050TT1.Drive.TL3Installed) XIC(S050TT1.Drive.TL3InPos) XIC(S050TL3.Int.AtHomePos) ,XIC(S050TT1.Drive.TL4Installed) XIC(S050TT1.Drive.TL4InPos) XIC(S050TL4.Int.AtHomePos) ,XIC(Edit.Debug) ]OTU(S050TT1.Oper.DryCycStrtMem);
				RC: "Check Cycle Start Command. May Require Additional Cycle Start bits per load";
				N: XIC(S050TT1.Oper.AntiTieDown)[XIC(S050TT1.Oper.CycleStartSetup) ,XIC(S050TT1.Oper.CycleStart) XIC(Edit.Debug) XIC(Edit.Bit) ][XIC(S050TT1.Drive.TL1Installed) XIC(S050TT1.Drive.TL1InPos) XIC(S050TL1.Int.LoadComp) ,XIC(S050TT1.Drive.TL2Installed) XIC(S050TT1.Drive.TL2InPos) XIC(S050TL2.Int.LoadComp) ,XIC(S050TT1.Drive.TL3Installed) XIC(S050TT1.Drive.TL3InPos) XIC(S050TL3.Int.LoadComp) ,XIC(S050TT1.Drive.TL4Installed) XIC(S050TT1.Drive.TL4InPos) XIC(S050TL3.Int.LoadComp) ]XIO(S050TT1.Oper.DisableLoad)[OTE(S050TT1.Oper.CycleStart) ,XIC(Edit.Debug) XIC(Edit.Bit) NOP() ];
				N: XIC(Edit.Bit)XIO(S050TT1.Oper.CycleResetPB)XIO(S050TT1.Int.TaskComp)XIO(S050TT1.Int.CycComp)OTE(S050TT1.Oper.CycleStartReset);
				N: XIC(S050TT1.Int.AutoMode)XIC(S050TT1.Oper.CycleResetPB)XIO(S050TT1.Oper.CycleStartPB)[MOV(1000,S050TT1.Oper.CycleResetDlyTmr.PRE) TON(S050TT1.Oper.CycleResetDlyTmr,?,?) ,XIC(S050TT1.Oper.CycleResetDlyTmr.DN) OTE(S050TT1.Oper.CycleReset) ];
				N: XIO(S050TT1.Oper.ClrToEnter)XIO(S050TTSfty.StaZn1NotBlkd)OTL(S050TT1.Oper.LtScrnFlt);
				N: [XIC(S050TT1.Oper.CycleStartPB) ,XIC(S050TT1.Oper.CycleResetPB) ]XIC(Edit.Bit)OTU(S050TT1.Oper.LtScrnFlt);
				RC: "Example Logic$N"
				    "Edit As Required";
				N: XIC(Edit.Bit)[XIC(S050TT1.Drive.TL1Installed) XIC(S050TT1.Drive.TL1InPos) [XIC(S050TL1.SR.Int.Model1) [XIO(S050TL1.Int.Proc1Comp) XIO(S050TL1.Int.Proc2Comp) XIC(S050TL1.Int.LoadPos1) ,XIC(S050TL1.Int.Proc2Comp) XIO(S050TL1.Int.Proc3Comp) XIC(S050TL1.Int.LoadPos2) ] ,XIC(S050TL1.SR.Int.Model2) XIO(S050TL1.Int.Proc1Comp) XIC(S050TL1.Int.LoadPos3) ] ,XIC(S050TT1.Drive.TL2Installed) XIC(S050TT1.Drive.TL2InPos) [XIC(S050TL2.SR.Int.Model1) [XIO(S050TL2.Int.Proc1Comp) XIO(S050TL2.Int.Proc2Comp) XIC(S050TL2.Int.LoadPos1) ,XIC(S050TL2.Int.Proc2Comp) XIO(S050TL2.Int.Proc3Comp) XIC(S050TL2.Int.LoadPos2) ] ,XIC(S050TL2.SR.Int.Model2) XIO(S050TL2.Int.Proc1Comp) XIC(S050TL2.Int.LoadPos3) ] ,XIC(S050TT1.Drive.TL3Installed) XIC(S050TT1.Drive.TL3InPos) [XIC(S050TL3.SR.Int.Model1) [XIO(S050TL3.Int.Proc1Comp) XIO(S050TL3.Int.Proc2Comp) XIC(S050TL3.Int.LoadPos1) ,XIC(S050TL3.Int.Proc2Comp) XIO(S050TL3.Int.Proc3Comp) XIC(S050TL3.Int.LoadPos2) ] ,XIC(S050TL3.SR.Int.Model2) XIO(S050TL3.Int.Proc1Comp) XIC(S050TL3.Int.LoadPos3) ] ,XIC(S050TT1.Drive.TL4Installed) XIC(S050TT1.Drive.TL4InPos) [XIC(S050TL4.SR.Int.Model1) [XIO(S050TL4.Int.Proc1Comp) XIO(S050TL4.Int.Proc2Comp) XIC(S050TL4.Int.LoadPos1) ,XIC(S050TL4.Int.Proc2Comp) XIO(S050TL4.Int.Proc3Comp) XIC(S050TL4.Int.LoadPos2) ] ,XIC(S050TL4.SR.Int.Model2) XIO(S050TL4.Int.Proc1Comp) XIC(S050TL4.Int.LoadPos3) ] ]OTE(S050TT1.Oper.AtWorkPos);
				RC: "************************************************************$N"
				    "Operator Cycle Time$N"
				    "************************************************************";
				N: NOP();
				N: MOV(60000,S050TT1.Oper.CycleTime)MUL(S050TT1.Oper.CycleTime,0.7,S050TT1.Oper.CycleTime75);
				N: XIC(S050TT1.Int.AutoMode)XIC(S050TT1.Oper.ClrToEnter)XIO(S050TT1.Oper.DisableLoad)MOV(3600000,S050TT1.Oper.CycTimeTmr.PRE)RTO(S050TT1.Oper.CycTimeTmr,?,?);
				N: GRT(S050TT1.Oper.CycTimeTmr.ACC,S050TT1.Oper.CycleTime75)OTE(S050TT1.Oper.CycNearOT);
				N: GRT(S050TT1.Oper.CycTimeTmr.ACC,S050TT1.Oper.CycleTime)OTE(S050TT1.Oper.CycOverTime);
				N: XIC(S050TT1.Oper.CycleStart)ONS(S050TT1.Oper.CycleTimeOns)[MOV(S050TT1.Oper.CycTimeTmr.ACC,S050TT1.Oper.CycleTimeStore) ,RES(S050TT1.Oper.CycTimeTmr) ];
		END_ROUTINE

		ROUTINE D00_Turntable 
				N: NOP();
				RC: "*****************************************************$N"
				    "Installetion setup$N"
				    "***********************************************";
				N: OTL(S050TT1.Drive.OperInstalled);
				RC: "*****************************************************$N"
				    "Kinetix Parameters setup$N"
				    "Move Type$N"
				    " 0  ------------Absolute$N"
				    "1  --------Incremental$N"
				    "2--Rotary Shortest Path$N"
				    "3 -- Rotary Positive$N"
				    "4  ---Rotary Negative$N"
				    "5  ---Absolute Master Offset$N"
				    "6  ---- Incremental Master Offset$N"
				    "***********************************************";
				N: [MOV(0.5,S050TT1.Drive.InPosTolerance) ,MOV(10,S050TT1.Drive.MotionStopDecelPorc) MOV(10,S050TT1.Drive.MotionStopDecelPorcJerk) ,MOV(0,S050TT1.Drive.MotionMoveType) ,MOV(40,S050TT1.Drive.MotionRunSpeed) MOV(3,S050TT1.Drive.MotionJogSpeed) ,MOV(177,S050TT1.Drive.MotionTorque) MOV(100,S050TT1.Drive.MotionJogTorque) ,MOV(3,S050TT1.Drive.MotionJogAccel) MOV(3,S050TT1.Drive.MotionJogDecel) ,MOV(100,S050TT1.Drive.MotionJogAccelJerk) MOV(100,S050TT1.Drive.MotionJogDecelJerk) ,LIM(0,S050TT1SRV.BusRegulatorCapacity,1) [MOV(21.5,S050TT1.Drive.MotionDecel) ,MOV(50,S050TT1.Drive.MotionAccel) ] ,LIM(1,S050TT1SRV.BusRegulatorCapacity,5) [MOV(20.5,S050TT1.Drive.MotionDecel) ,MOV(49,S050TT1.Drive.MotionAccel) ] ,GRT(S050TT1SRV.BusRegulatorCapacity,5) [MOV(19.5,S050TT1.Drive.MotionDecel) ,MOV(48,S050TT1.Drive.MotionAccel) ] ,MOV(40,S050TT1.Drive.MotionAccelJerk) MOV(40,S050TT1.Drive.MotionDecelJerk) ];
				RC: "$N"
				    "This Rung Suports The Data Recovery Of The Critical Data That Needs To Be Restored After A UDT Change$N"
				    "";
				N: [XIC(S:FS) [MOV(S050TT1.Drive.CtrlData[1],S050TT1.Drive.TL1SetPoint) MOV(S050TT1.Drive.CtrlData[2],S050TT1.Drive.TL2SetPoint) ,MOV(S050TT1.Drive.CtrlData[3],S050TT1.Drive.TL3SetPoint) MOV(S050TT1.Drive.CtrlData[4],S050TT1.Drive.TL4SetPoint) ] ,[MOV(S050TT1.Drive.TL1SetPoint,S050TT1.Drive.CtrlData[1]) MOV(S050TT1.Drive.TL2SetPoint,S050TT1.Drive.CtrlData[2]) ,MOV(S050TT1.Drive.TL3SetPoint,S050TT1.Drive.CtrlData[3]) MOV(S050TT1.Drive.TL4SetPoint,S050TT1.Drive.CtrlData[4]) ] ];
				N: LIM(S050TT1.Drive.TL1PosLimitLow,S050TT1.Drive.MotorEncoderPos,S050TT1.Drive.TL1PosLimitHigh)OTE(S050TT1.Drive.EncAtTL1);
				N: LIM(S050TT1.Drive.TL2PosLimitLow,S050TT1.Drive.MotorEncoderPos,S050TT1.Drive.TL2PosLimitHigh)OTE(S050TT1.Drive.EncAtTL2);
				N: LIM(S050TT1.Drive.TL3PosLimitLow,S050TT1.Drive.MotorEncoderPos,S050TT1.Drive.TL3PosLimitHigh)OTE(S050TT1.Drive.EncAtTL3);
				N: LIM(S050TT1.Drive.TL4PosLimitLow,S050TT1.Drive.MotorEncoderPos,S050TT1.Drive.TL4PosLimitHigh)OTE(S050TT1.Drive.EncAtTL4);
				N: XIC(S050TT1.Drive.AtZeroSpeed)[XIC(S050TT1.Drive.TL1InPos) ,XIO(S050TT1.Drive.OperInstalled) ]XIC(S050TT1.Drive.EncAtTL1)OTE(S050TT1.Drive.TL1AtLoadPos);
				N: XIC(S050TT1.Drive.AtZeroSpeed)[XIC(S050TT1.Drive.TL2InPos) ,XIO(S050TT1.Drive.OperInstalled) ]XIC(S050TT1.Drive.EncAtTL2)OTE(S050TT1.Drive.TL2AtLoadPos);
				N: XIC(S050TT1.Drive.AtZeroSpeed)[XIC(S050TT1.Drive.TL3InPos) ,XIO(S050TT1.Drive.OperInstalled) ]XIC(S050TT1.Drive.EncAtTL3)OTE(S050TT1.Drive.TL3AtLoadPos);
				N: XIC(S050TT1.Drive.AtZeroSpeed)[XIC(S050TT1.Drive.TL4InPos) ,XIO(S050TT1.Drive.OperInstalled) ]XIC(S050TT1.Drive.EncAtTL4)OTE(S050TT1.Drive.TL4AtLoadPos);
				N: [XIC(S050TT1.Drive.TL1AtLoadPos) ,XIC(S050TT1.Drive.TL2AtLoadPos) ,XIC(S050TT1.Drive.TL3AtLoadPos) ,XIC(S050TT1.Drive.TL4AtLoadPos) ]OTE(S050TT1.Drive.DriveInPos);
				RC: "If This Timer Times Out Check For Mechanical Bind";
				N: [XIC(S050TT1SRV.MotorOvercurrentFault) ,XIC(S050TT1.Drive.OverCurrentTmr.DN) XIO(S010TL1.Int.FaultResetPB) ][MOV(250,S050TT1.Drive.OverCurrentTmr.PRE) ,TON(S050TT1.Drive.OverCurrentTmr,?,?) ];
				N: [XIC(S050TT1.Drive.DiscOn) OTE(S050TT1.Drive.RunIntlk.Inp_Intlk00) ,XIC(S050TT1.Drive.SftyPinsOk) OTE(S050TT1.Drive.RunIntlk.Inp_Intlk01) ,XIC(S050TT1.Drive.DriveEnbl) OTE(S050TT1.Drive.RunIntlk.Inp_Intlk02) ,XIO(S050TT1.Drive.OverCurrentTmr.DN) OTE(S050TT1.Drive.RunIntlk.Inp_Intlk03) ,XIO(S050TT1.Drive.DriveFault) OTE(S050TT1.Drive.RunIntlk.Inp_Intlk04) ,XIO(S050TT1.Drive.DriveInhibited) OTE(S050TT1.Drive.RunIntlk.Inp_Intlk05) ,XIO(S050TTSfty.RdytoRun) OTE(S050TT1.Drive.RunIntlk.Inp_Intlk07) ,P_Intlk(S050TT1.Drive.RunIntlk) ];
				N: [[[XIC(S050TT1.Drive.ToolingRdyTo_Rotate) ,XIO(S050TT1.Drive.DriveInPos) ] ,XIC(S050TT1.Int.ManualMode) ] OTE(S050TT1.Drive.ClrtoRotate.Inp_Perm00) ,XIC(S050TT1.Drive.RbtsClr) OTE(S050TT1.Drive.ClrtoRotate.Inp_Perm01) ,XIC(S050TT1.Drive.ToolingClr) OTE(S050TT1.Drive.ClrtoRotate.Inp_Perm02) ,XIO(S050TT1.Drive.PosTimerFlt) OTE(S050TT1.Drive.ClrtoRotate.Inp_Perm03) ,P_Perm(S050TT1.Drive.ClrtoRotate) ];
				N: [EQU(S050TT1.Drive.InPosTolerance,0.5) OTE(S050TT1.Drive.Parameters.Inp_Perm00) ,EQU(S050TT1.Drive.MotionStopDecelPorc,10) EQU(S050TT1.Drive.MotionStopDecelPorcJerk,10) OTE(S050TT1.Drive.Parameters.Inp_Perm01) ,EQU(S050TT1.Drive.MotionMoveType,0) OTE(S050TT1.Drive.Parameters.Inp_Perm02) ,LIM(40,S050TT1.Drive.MotionRunSpeed,45) OTE(S050TT1.Drive.Parameters.Inp_Perm03) ,LIM(3,S050TT1.Drive.MotionJogSpeed,5) OTE(S050TT1.Drive.Parameters.Inp_Perm04) ,LIM(177,S050TT1.Drive.MotionTorque,180) OTE(S050TT1.Drive.Parameters.Inp_Perm05) ,LIM(100,S050TT1.Drive.MotionJogTorque,105) OTE(S050TT1.Drive.Parameters.Inp_Perm06) ,LIM(3,S050TT1.Drive.MotionJogAccel,5) LIM(3,S050TT1.Drive.MotionJogDecel,5) OTE(S050TT1.Drive.Parameters.Inp_Perm07) ,EQU(S050TT1.Drive.MotionJogAccelJerk,100) EQU(S050TT1.Drive.MotionJogDecelJerk,100) OTE(S050TT1.Drive.Parameters.Inp_Perm08) ,LIM(19.5,S050TT1.Drive.MotionDecel,21.5) OTE(S050TT1.Drive.Parameters.Inp_Perm09) ,LIM(48,S050TT1.Drive.MotionAccel,50) OTE(S050TT1.Drive.Parameters.Inp_Perm10) ,EQU(S050TT1.Drive.MotionAccelJerk,40) EQU(S050TT1.Drive.MotionDecelJerk,40) OTE(S050TT1.Drive.Parameters.Inp_Perm11) ,P_Perm(S050TT1.Drive.Parameters) ];
				N: [XIO(S050TT1.Drive.OvrtrvlFwdFault) OTE(S050TT1.Drive.OverTravels.Inp_Perm00) ,XIO(S050TT1.Drive.OvrtrvlFwdHdwMem) OTE(S050TT1.Drive.OverTravels.Inp_Perm01) ,XIO(S050TT1.Drive.OvrtrvlRevFault) OTE(S050TT1.Drive.OverTravels.Inp_Perm02) ,XIO(S050TT1.Drive.OvrtrvlRevHdwMem) OTE(S050TT1.Drive.OverTravels.Inp_Perm04) ,P_Perm(S050TT1.Drive.OverTravels) ];
				N: [XIO(S050TT1.Drive.DriveStoped) OTE(S050TT1.Drive.DriveStatus.Inp_Perm00) ,XIC(S050TT1.Drive.DriveRunning) OTE(S050TT1.Drive.DriveStatus.Inp_Perm01) ,XIO(S050TT1.Drive.DriveFault) OTE(S050TT1.Drive.DriveStatus.Inp_Perm02) ,XIO(S050TT1.Drive.DriveInhibited) OTE(S050TT1.Drive.DriveStatus.Inp_Perm03) ,XIO(S050TT1.Drive.DriveShutdown) OTE(S050TT1.Drive.DriveStatus.Inp_Perm04) ,P_Perm(S050TT1.Drive.DriveStatus) ];
				N: XIC(S050TT1.Drive.ClrtoRotate.Sts_PermOK)XIC(S050TT1.Drive.RunIntlk.Sts_IntlkOK)XIC(S050TT1.Drive.OverTravels.Sts_PermOK)XIC(S050TT1.Drive.DriveStatus.Sts_PermOK)XIC(S050TT1.Drive.Parameters.Sts_PermOK)OTE(S050TT1.Drive.RdyToRun);
				N: [XIC(S050TT1.Int.ManualMode) XIO(S050TT1.Drive.TL1IndexPB) XIO(S050TT1.Drive.TL2IndexPB) XIO(S050TT1.Drive.TL3IndexPB) XIO(S050TT1.Drive.TL4IndexPB) ,XIC(S050TT1.Drive.AntiHoldDown) ]XIC(S050TT1.Drive.DriveInPos)[MOV(250,S050TT1.Drive.HoldDownDly.PRE) TON(S050TT1.Drive.HoldDownDly,?,?) ,XIC(S050TT1.Drive.HoldDownDly.DN) OTE(S050TT1.Drive.AntiHoldDown) ];
				RC: "******************************************************************************** $N"
				    "Command Setup$N"
				    "*****************************************************************************";
				N: XIC(S050TT1.Drive.TL1Installed)[XIC(S050TT1.Int.AutoMode) XIC(S050TT1.Drive.RotateToTL1Mem) ,XIC(S050TT1.Int.ManualMode) [XIC(S050TT1.Drive.AntiHoldDown) ,XIC(S050TT1.Drive.CmdPosTL1) ,XIO(S050TT1.Drive.DriveInPos) ] XIC(S050TT1.Drive.TL1IndexPB) ]XIO(S050TT1.Drive.TL1AtLoadPos)XIC(S050TT1.Drive.RdyToRun)OTE(S050TT1.Drive.CmdPosTL1);
				N: XIC(S050TT1.Drive.TL2Installed)[XIC(S050TT1.Int.AutoMode) XIC(S050TT1.Drive.RotateToTL2Mem) ,XIC(S050TT1.Int.ManualMode) [XIC(S050TT1.Drive.AntiHoldDown) ,XIC(S050TT1.Drive.CmdPosTL2) ,XIO(S050TT1.Drive.DriveInPos) ] XIC(S050TT1.Drive.TL2IndexPB) ]XIO(S050TT1.Drive.TL2AtLoadPos)XIC(S050TT1.Drive.RdyToRun)OTE(S050TT1.Drive.CmdPosTL2);
				N: XIC(S050TT1.Drive.TL3Installed)[XIC(S050TT1.Int.AutoMode) XIC(S050TT1.Drive.RotateToTL3Mem) ,XIC(S050TT1.Int.ManualMode) [XIC(S050TT1.Drive.AntiHoldDown) ,XIC(S050TT1.Drive.CmdPosTL3) ,XIO(S050TT1.Drive.DriveInPos) ] XIC(S050TT1.Drive.TL3IndexPB) ]XIO(S050TT1.Drive.TL3AtLoadPos)XIC(S050TT1.Drive.RdyToRun)OTE(S050TT1.Drive.CmdPosTL3);
				N: XIC(S050TT1.Drive.TL4Installed)[XIC(S050TT1.Int.AutoMode) XIC(S050TT1.Drive.RotateToTL4Mem) ,XIC(S050TT1.Int.ManualMode) [XIC(S050TT1.Drive.AntiHoldDown) ,XIC(S050TT1.Drive.CmdPosTL4) ,XIO(S050TT1.Drive.DriveInPos) ] XIC(S050TT1.Drive.TL4IndexPB) ]XIO(S050TT1.Drive.TL4AtLoadPos)XIC(S050TT1.Drive.RdyToRun)OTE(S050TT1.Drive.CmdPosTL4);
				RC: "*********************************************************************************************************************$N"
				    "OverTravel Permisive Setup$N"
				    "**********************************************************************************************************************";
				N: XIC(S050TT1.Drive.CommOk)NEQ(S050TT1SRV.VelocityFeedback,0)XIC(S050TT1.Drive.OvrtrvlFwdHdw)OTL(S050TT1.Drive.OvrtrvlFwdHdwMem);
				N: XIC(S050TT1.Drive.OvrtrvlFwdHdwMem)XIO(S050TT1.Drive.OvrtrvlFwdHdw)XIC(S050TT1.Drive.JogRevPB)OTU(S050TT1.Drive.OvrtrvlFwdHdwMem);
				RC: "Task 018$N"
				    "Changed PwrOn To VFD CommOK Also Added RPM Check To Mask Tripping The Switch By Operators$N"
				    "****09-16-13****";
				N: XIC(S050TT1.Drive.CommOk)NEQ(S050TT1SRV.VelocityFeedback,0)XIC(S050TT1.Drive.OvrtrvlRevHdw)OTL(S050TT1.Drive.OvrtrvlRevHdwMem);
				N: XIC(S050TT1.Drive.OvrtrvlRevHdwMem)XIO(S050TT1.Drive.OvrtrvlRevHdw)XIC(S050TT1.Drive.JogFwdPB)OTU(S050TT1.Drive.OvrtrvlRevHdwMem);
				RC: "Overtravel Faults";
				N: XIO(S050TT1.Drive.LrnMode)[GRT(S050TT1.Drive.MotorEncoderPos,S050TT1.Drive.FwdOvrtrvlLim) OTE(S050TT1.Drive.OvrtrvlFwdFault) ,LES(S050TT1.Drive.MotorEncoderPos,S050TT1.Drive.RevOvrtrvlLim) OTE(S050TT1.Drive.OvrtrvlRevFault) ];
				N: XIC(S050TT1.Int.ManualMode)XIC(S050TT1.Drive.RunIntlk.Sts_IntlkOK)XIC(S050TT1.Drive.ClrtoRotate.Sts_PermOK)XIC(S050TT1.Drive.Parameters.Sts_PermOK)[XIC(S050TT1.Drive.JogFwdPB) XIO(S050TT1.Drive.OvrtrvlFwdFault) XIO(S050TT1.Drive.OvrtrvlFwdHdwMem) OTE(S050TT1.Drive.CmdJogFwd) ,XIC(S050TT1.Drive.JogRevPB) XIO(S050TT1.Drive.OvrtrvlRevFault) XIO(S050TT1.Drive.OvrtrvlRevHdwMem) OTE(S050TT1.Drive.CmdJogRev) ]OTE(S050TT1.Drive.JogActive);
				N: [XIC(S050TT1.Drive.CmdPosTL1) ,XIC(S050TT1.Drive.CmdPosTL2) ,XIC(S050TT1.Drive.CmdPosTL3) ,XIC(S050TT1.Drive.CmdPosTL4) ][OTE(S050TT1.Drive.CmdStart) ,OTU(S050TT1.Drive.TL1Seled) OTU(S050TT1.Drive.TL2Seled) OTU(S050TT1.Drive.TL3Seled) OTU(S050TT1.Drive.TL4Seled) ];
				N: [XIC(S050TT1.Drive.CmdPosTL1) MOV(S050TT1.Drive.TL1SetPoint,S050TT1.Drive.MotionPosReq) OTL(S050TT1.Drive.TL1Seled) ,XIC(S050TT1.Drive.CmdPosTL2) MOV(S050TT1.Drive.TL2SetPoint,S050TT1.Drive.MotionPosReq) OTL(S050TT1.Drive.TL2Seled) ,XIC(S050TT1.Drive.CmdPosTL3) MOV(S050TT1.Drive.TL3SetPoint,S050TT1.Drive.MotionPosReq) OTL(S050TT1.Drive.TL3Seled) ,XIC(S050TT1.Drive.CmdPosTL4) MOV(S050TT1.Drive.TL4SetPoint,S050TT1.Drive.MotionPosReq) OTL(S050TT1.Drive.TL4Seled) ];
				RC: "***************************************************************************************$N"
				    "TL In Position Window$N"
				    "***********************************************************************************************$N"
				    "$N"
				    "";
				N: SUB(S050TT1.Drive.TL1SetPoint,S050TT1.Drive.InPosTolerance,S050TT1.Drive.TL1PosLimitLow)ADD(S050TT1.Drive.TL1SetPoint,S050TT1.Drive.InPosTolerance,S050TT1.Drive.TL1PosLimitHigh);
				N: XIC(S050TT1.Int.ManualMode)XIC(S050TT1.Int.AutoMode)XIC(S050TT1.Drive.AtZeroSpeed)[XIC(S050TL1.Int.AtHomePos) XIC(S050TL1.Int.AllPPandSR) ,XIO(S050TT1.Drive.TL1Installed) ][XIC(S050TL2.Int.AtHomePos) XIC(S050TL2.Int.AllPPandSR) ,XIO(S050TT1.Drive.TL2Installed) ][XIC(S050TL3.Int.AtHomePos) XIC(S050TL3.Int.AllPPandSR) ,XIO(S050TT1.Drive.TL3Installed) ][XIC(S050TL4.Int.AtHomePos) XIC(S050TL4.Int.AllPPandSR) ,XIO(S050TT1.Drive.TL4Installed) ]OTE(S050TT1.Drive.LrnModeEnbl);
				N: XIC(S050TT1.Drive.LrnModeEnbl)XIC(S050TT1.Drive.LrnModeEnblPB)ONS(S050TT1.Drive.LrnModeONS.0)[XIC(S050TT1.Drive.LrnMode) ONS(S050TT1.Drive.LrnModeONS.1) OTU(S050TT1.Drive.LrnMode) ,XIO(S050TT1.Drive.LrnMode) XIO(S050TT1.Drive.LrnModeONS.1) OTL(S050TT1.Drive.LrnMode) ];
				RC: "***************************************************************************************$N"
				    "TL1-TL4 Position Learn Setup$N"
				    "***********************************************************************************************$N"
				    "$N"
				    "";
				N: XIC(S050TT1.Int.ManualMode)XIC(S050TT1.Drive.LrnMode)XIO(S050TT1.Drive.CmdPosTL1)XIO(S050TT1.Drive.CmdPosTL2)XIO(S050TT1.Drive.CmdPosTL3)XIO(S050TT1.Drive.CmdPosTL4)XIC(S050TT1.Drive.AtZeroSpeed)[XIC(S050TT1.Drive.TL1Installed) XIC(S050TT1.Drive.TL1SPEntPB) [XIO(S050TT1.Drive.TL1SPChg) MOV(S050TT1.Drive.MotorEncoderPos,S050TT1.Drive.TL1SetPoint) ,OTE(S050TT1.Drive.TL1SPChg) ] ,XIC(S050TT1.Drive.TL2Installed) XIC(S050TT1.Drive.TL2SPEntPB) [XIO(S050TT1.Drive.TL2SPChg) MOV(S050TT1.Drive.MotorEncoderPos,S050TT1.Drive.TL2SetPoint) ,OTE(S050TT1.Drive.TL2SPChg) ] ,XIC(S050TT1.Drive.TL3Installed) XIC(S050TT1.Drive.TL3SPEntPB) [XIO(S050TT1.Drive.TL3SPChg) MOV(S050TT1.Drive.MotorEncoderPos,S050TT1.Drive.TL3SetPoint) ,OTE(S050TT1.Drive.TL3SPChg) ] ,XIC(S050TT1.Drive.TL4Installed) XIC(S050TT1.Drive.TL4SPEntPB) [XIO(S050TT1.Drive.TL4SPChg) MOV(S050TT1.Drive.MotorEncoderPos,S050TT1.Drive.TL4SetPoint) ,OTE(S050TT1.Drive.TL4SPChg) ] ];
				RC: "***************************************************************************************$N"
				    "TL1-TL4 In Position Window$N"
				    "***********************************************************************************************$N"
				    "$N"
				    "";
				N: [XIC(S050TT1.Drive.TL1Installed) SUB(S050TT1.Drive.TL1SetPoint,S050TT1.Drive.InPosTolerance,S050TT1.Drive.TL1PosLimitLow) ADD(S050TT1.Drive.TL1SetPoint,S050TT1.Drive.InPosTolerance,S050TT1.Drive.TL1PosLimitHigh) ,XIC(S050TT1.Drive.TL2Installed) SUB(S050TT1.Drive.TL2SetPoint,S050TT1.Drive.InPosTolerance,S050TT1.Drive.TL2PosLimitLow) ADD(S050TT1.Drive.TL2SetPoint,S050TT1.Drive.InPosTolerance,S050TT1.Drive.TL2PosLimitHigh) ,XIC(S050TT1.Drive.TL3Installed) SUB(S050TT1.Drive.TL3SetPoint,S050TT1.Drive.InPosTolerance,S050TT1.Drive.TL3PosLimitLow) ADD(S050TT1.Drive.TL3SetPoint,S050TT1.Drive.InPosTolerance,S050TT1.Drive.TL3PosLimitHigh) ,XIC(S050TT1.Drive.TL4Installed) SUB(S050TT1.Drive.TL4SetPoint,S050TT1.Drive.InPosTolerance,S050TT1.Drive.TL4PosLimitLow) ADD(S050TT1.Drive.TL4SetPoint,S050TT1.Drive.InPosTolerance,S050TT1.Drive.TL4PosLimitHigh) ];
				RC: "***************************************************************************$N"
				    "Define the Index Cycletime:$N"
				    "***************************************************************************";
				N: XIC(S050TT1.Int.AutoMode)[XIO(S050TT1.Drive.CmdPosTL1) ,XIO(S050TT1.Drive.CmdPosTL2) ,XIO(S050TT1.Drive.CmdPosTL3) ,XIO(S050TT1.Drive.CmdPosTL4) ]MOV(320000,S050TT1.Drive.IndexTmr.PRE)RTO(S050TT1.Drive.IndexTmr,?,?);
				N: [XIC(S050TT1.Drive.TL1Seled) XIC(S050TT1.Drive.TL1AtLoadPos) ,XIC(S050TT1.Drive.TL2Seled) XIC(S050TT1.Drive.TL2AtLoadPos) ,XIC(S050TT1.Drive.TL3Seled) XIC(S050TT1.Drive.TL3AtLoadPos) ,XIC(S050TT1.Drive.TL4Seled) XIC(S050TT1.Drive.TL4AtLoadPos) ]ONS(S050TT1.Int.ONS.1)RES(S050TT1.Drive.IndexTmr);
				N: GRT(S050TT1.Drive.IndexTmr.ACC,45000)OTE(S050TT1.Drive.IndexOt);
		END_ROUTINE

		ROUTINE E00_TurnTable_TL_Edit (Description := "Setup Depends wich TL are installed and using")
				RC: "***************************************************************************$N"
				    "Setup Tolling Installed$N"
				    "Set OTL the tooling to use or installed to work$N"
				    "Set OTU the tooling NOT use or installed to work$N"
				    "***************************************************************************";
				N: OTL(S050TT1.Drive.TL1Installed)OTU(S050TT1.Drive.TL2Installed)OTU(S050TT1.Drive.TL3Installed)OTU(S050TT1.Drive.TL4Installed);
				RC: "Setup Software Overtravel:$N"
				    "This depend wich TLs are installedn and Using$N"
				    "TL1-TL2$N"
				    "  - Overtravel REV limit = beyond the first fixture Position TL1 $N"
				    "  - Overtravel FWD limit = beyond the last fixture Position TL2 $N"
				    "TL4-TL4$N"
				    "  - Overtravel REV limit = beyond the first fixture Position TL4 $N"
				    "  - Overtravel FWD limit = beyond the last fixture Position TL4$N"
				    "TL1-TL4$N"
				    "  - Overtravel REV limit = beyond the first fixture Position TL1 $N"
				    "  - Overtravel FWD limit = beyond the last fixture Position TL4 $N"
				    "TL1-TL$N"
				    "  - Overtravel REV limit = beyond the first fixture Position TL1 $N"
				    "  - Overtravel FWD limit = beyond the last fixture Position TL$N"
				    "";
				N: ADD(S050TT1.Drive.TL1SetPoint,1,S050TT1.Drive.FwdOvrtrvlLim)SUB(S050TT1.Drive.TL2SetPoint,1,S050TT1.Drive.RevOvrtrvlLim);
				N: XIC(S050TT1.Drive.AtZeroSpeed)[XIC(S050TT1.Drive.TL1AtLoadPos) ,XIC(S050TT1.Drive.TL2AtLoadPos) ,XIO(S050TT1.Int.AutoMode) ][MOV(100,S050TT1.Drive.InPosDwell.PRE) ,TON(S050TT1.Drive.InPosDwell,?,?) ];
				N: [XIC(S050TT1.Drive.TL1AtLoadPos) ,XIC(S050TT1.Drive.TL2AtLoadPos) ][MOV(350,S050TT1.Drive.MotionDelay.PRE) ,TON(S050TT1.Drive.MotionDelay,?,?) ];
				RC: "***************************************************************************$N"
				    "TL1 INSTALLED$N"
				    "Define Unload Position for TL1$N"
				    "Modify is using a diferent configuration tha TL1 and TL2$N"
				    "***************************************************************************";
				N: XIC(Edit.Bit)XIC(S050TT1.Drive.TL2AtLoadPos)OTE(S050TT1.Drive.TL1AtUnldPos);
				RC: "Add/remove conditions for the tooling Ready to Rotate";
				N: XIC(Edit.Bit)[XIC(S050TT1.Drive.TL1AtLoadPos) [XIC(Edit.Bit) XIC(S050TL1.Int.AtWorkPos1) XIC(S050TL1.SR.Int.Part) XIC(S050TL1.Int.Load1Comp) ,XIC(S050TT1.Int.ManualMode) XIC(S050TL1.Int.PartsPresNo) ] ,XIC(S050TT1.Drive.TL1AtUnldPos) XIC(S050TL1.Int.AtHomePos) XIC(S050TL1.Int.PartsPresNo) XIC(S050TL1.SR.Int.NoPart) ,XIC(S050TL1.Int.Bypass.Seld) ,XIO(S050TT1.Drive.TL1Installed) ]OTE(S050TT1.Drive.TL1RdyToRotate);
				N: XIC(S050TT1.Drive.TL1RdyToRotate)XIC(S050TT1.Drive.RotateToTL1)OTL(S050TT1.Drive.RotateToTL1Mem);
				N: [XIC(S050TT1.Drive.TL1AtLoadPos) ,XIO(S050TT1.Drive.TL1Installed) ]OTU(S050TT1.Drive.RotateToTL1Mem);
				N: XIC(S050TT1.Int.ManualMode)XIC(S050TT1.Drive.TL1AtLoadPos)XIC(S050TL1.Int.AtHomePos)XIC(S050TL1.Int.PartsPresNo)XIC(S050TL1.SR.Int.NoPart)OTE(S050TL1.Int.Bypass.SU1);
				N: XIC(S050TT1.Int.ManualMode)XIC(S050TL1.Int.Bypass.SU1)[XIC(S050TL1.Int.Bypass.PB) [XIO(S050TL1.Int.Bypass.Seld) XIO(S050TL1.Int.Bypass.Toggle) [OTL(S050TL1.Int.Bypass.Seld) ,OTL(S050TL1.Int.Bypass.Toggle) ] ,XIC(S050TL1.Int.Bypass.Seld) XIO(S050TL1.Int.Bypass.Toggle) [OTU(S050TL1.Int.Bypass.Seld) ,OTL(S050TL1.Int.Bypass.Toggle) ] ] ,XIO(S050TL1.Int.Bypass.PB) OTU(S050TL1.Int.Bypass.Toggle) ];
				RC: "Add/remove conditions for the tooling clear to rotate";
				N: XIC(Edit.Bit)[XIC(S050TL1.Int.AtHomePos) ,XIC(Edit.Bit) XIC(S050TL1.Int.AtWorkPos1) ,XIC(S050TL1.Int.PartsPresNo) XIC(S050TL1.SR.Int.NoPart) ,XIO(S050TT1.Drive.TL1Installed) ]OTE(S050TT1.Drive.TL1ClrToRotate);
				RC: "***************************************************************************$N"
				    "TL2 INSTALLED$N"
				    "Define Unload Position for TL2$N"
				    "Modify is using a diferent configuration thaN TL1 and TL2$N"
				    "***************************************************************************";
				N: XIC(Edit.Bit)XIC(S050TT1.Drive.TL1AtLoadPos)OTE(S050TT1.Drive.TL2AtUnldPos);
				RC: "Add/remove conditions for the tooling Ready to Rotate$N"
				    "";
				N: XIC(Edit.Bit)[XIC(S050TT1.Drive.TL2AtLoadPos) [XIC(Edit.Bit) XIC(S050TL2.Int.AtWorkPos1) XIC(S050TL2.SR.Int.Part) XIC(S050TL2.Int.Load1Comp) ,XIC(S050TT1.Int.ManualMode) XIC(S050TL2.Int.PartsPresNo) ] ,XIC(S050TT1.Drive.TL2AtUnldPos) XIC(S050TL2.Int.AtHomePos) XIC(S050TL2.Int.PartsPresNo) XIC(S050TL2.SR.Int.NoPart) ,XIC(S050TL2.Int.Bypass.Seld) ,XIO(S050TT1.Drive.TL2Installed) ]OTE(S050TT1.Drive.TL2RdyToRotate);
				N: XIC(S050TT1.Drive.TL2RdyToRotate)XIC(S050TT1.Drive.RotateToTL2)OTL(S050TT1.Drive.RotateToTL2Mem);
				N: [XIC(S050TT1.Drive.TL2AtLoadPos) ,XIO(S050TT1.Drive.TL2Installed) ]OTU(S050TT1.Drive.RotateToTL2Mem);
				N: XIC(S050TT1.Int.ManualMode)XIC(S050TT1.Drive.TL2AtLoadPos)XIC(S050TL2.Int.AtHomePos)XIC(S050TL2.Int.PartsPresNo)XIC(S050TL2.SR.Int.NoPart)OTE(S050TL2.Int.Bypass.SU1);
				N: XIC(S050TT1.Int.ManualMode)XIC(S050TL2.Int.Bypass.SU1)[XIC(S050TL2.Int.Bypass.PB) [XIO(S050TL2.Int.Bypass.Seld) XIO(S050TL2.Int.Bypass.Toggle) [OTL(S050TL2.Int.Bypass.Seld) ,OTL(S050TL2.Int.Bypass.Toggle) ] ,XIC(S050TL2.Int.Bypass.Seld) XIO(S050TL2.Int.Bypass.Toggle) [OTU(S050TL2.Int.Bypass.Seld) ,OTL(S050TL2.Int.Bypass.Toggle) ] ] ,XIO(S050TL2.Int.Bypass.PB) OTU(S050TL2.Int.Bypass.Toggle) ];
				RC: "Add/remove conditions for the tooling clear to rotate";
				N: XIC(Edit.Bit)[XIC(S050TL2.Int.AtHomePos) ,XIC(Edit.Bit) XIC(S050TL2.Int.AtWorkPos1) ,XIC(S050TL2.Int.PartsPresNo) XIC(S050TL2.SR.Int.NoPart) ,XIO(S050TT1.Drive.TL2Installed) ]OTE(S050TT1.Drive.TL2ClrToRotate);
				RC: "***************************************************************************$N"
				    "TL3  NOT INSTALLED$N"
				    "Define Unload Position for TL3$N"
				    "***************************************************************************";
				N: XIC(Edit.Bit)[XIC(S050TT1.Drive.TL3AtLoadPos) [XIC(Edit.Bit) XIC(S050TL3.Int.AtWorkPos1) XIC(S050TL3.SR.Int.Part) XIC(S050TL3.Int.Load1Comp) ,XIC(S050TT1.Int.ManualMode) XIC(S050TL3.Int.PartsPresNo) ] ,XIC(S050TT1.Drive.TL3AtUnldPos) XIC(S050TL3.Int.AtHomePos) XIC(S050TL3.Int.PartsPresNo) XIC(S050TL3.SR.Int.NoPart) ,XIC(S050TL3.Int.Bypass.Seld) ,XIO(S050TT1.Drive.TL3Installed) ]OTE(S050TT1.Drive.TL3RdyToRotate);
				N: XIC(S050TT1.Drive.TL3RdyToRotate)XIC(S050TT1.Drive.RotateToTL3)OTL(S050TT1.Drive.RotateToTL3Mem);
				N: [XIC(S050TT1.Drive.TL3AtLoadPos) ,XIO(S050TT1.Drive.TL3Installed) ]OTU(S050TT1.Drive.RotateToTL3Mem);
				N: XIC(S050TT1.Int.ManualMode)XIC(S050TT1.Drive.TL3AtLoadPos)XIC(S050TL3.Int.AtHomePos)XIC(S050TL3.Int.PartsPresNo)XIC(S050TL3.SR.Int.NoPart)OTE(S050TL3.Int.Bypass.SU1);
				N: XIC(S050TT1.Int.ManualMode)XIC(S050TL3.Int.Bypass.SU1)[XIC(S050TL3.Int.Bypass.PB) [XIO(S050TL3.Int.Bypass.Seld) XIO(S050TL3.Int.Bypass.Toggle) [OTL(S050TL3.Int.Bypass.Seld) ,OTL(S050TL3.Int.Bypass.Toggle) ] ,XIC(S050TL3.Int.Bypass.Seld) XIO(S050TL3.Int.Bypass.Toggle) [OTU(S050TL3.Int.Bypass.Seld) ,OTL(S050TL3.Int.Bypass.Toggle) ] ] ,XIO(S050TL3.Int.Bypass.PB) OTU(S050TL3.Int.Bypass.Toggle) ];
				RC: "Add/remove conditions for the tooling clear to rotate";
				N: XIC(Edit.Bit)[XIC(S050TL3.Int.AtHomePos) ,XIC(Edit.Bit) XIC(S050TL3.Int.AtWorkPos1) ,XIC(S050TL3.Int.PartsPresNo) XIC(S050TL3.SR.Int.NoPart) ,XIO(S050TT1.Drive.TL3Installed) ]OTE(S050TT1.Drive.TL3ClrToRotate);
				RC: "***************************************************************************$N"
				    "TL4  NOT INSTALLED$N"
				    "Define Unload Position for TL4$N"
				    "***************************************************************************";
				N: XIC(Edit.Bit)[XIC(S050TT1.Drive.TL4AtLoadPos) [XIC(Edit.Bit) XIC(S050TL4.Int.AtWorkPos1) XIC(S050TL4.SR.Int.Part) XIC(S050TL4.Int.Load1Comp) ,XIC(S050TT1.Int.ManualMode) XIC(S050TL4.Int.PartsPresNo) ] ,XIC(S050TT1.Drive.TL4AtUnldPos) XIC(S050TL4.Int.AtHomePos) XIC(S050TL4.Int.PartsPresNo) XIC(S050TL4.SR.Int.NoPart) ,XIC(S050TL4.Int.Bypass.Seld) ,XIO(S050TT1.Drive.TL4Installed) ]OTE(S050TT1.Drive.TL4RdyToRotate);
				N: XIC(S050TT1.Drive.TL4RdyToRotate)XIC(S050TT1.Drive.RotateToTL4)OTL(S050TT1.Drive.RotateToTL4Mem);
				N: [XIC(S050TT1.Drive.TL4AtLoadPos) ,XIO(S050TT1.Drive.TL4Installed) ]OTU(S050TT1.Drive.RotateToTL4Mem);
				N: XIC(S050TT1.Int.ManualMode)XIC(S050TT1.Drive.TL4AtLoadPos)XIC(S050TL4.Int.AtHomePos)XIC(S050TL4.Int.PartsPresNo)XIC(S050TL4.SR.Int.NoPart)OTE(S050TL4.Int.Bypass.SU1);
				N: XIC(S050TT1.Int.ManualMode)XIC(S050TL4.Int.Bypass.SU1)[XIC(S050TL4.Int.Bypass.PB) [XIO(S050TL4.Int.Bypass.Seld) XIO(S050TL4.Int.Bypass.Toggle) [OTL(S050TL4.Int.Bypass.Seld) ,OTL(S050TL4.Int.Bypass.Toggle) ] ,XIC(S050TL4.Int.Bypass.Seld) XIO(S050TL4.Int.Bypass.Toggle) [OTU(S050TL4.Int.Bypass.Seld) ,OTL(S050TL4.Int.Bypass.Toggle) ] ] ,XIO(S050TL4.Int.Bypass.PB) OTU(S050TL4.Int.Bypass.Toggle) ];
				RC: "Add/remove conditions for the tooling clear to rotate";
				N: XIC(Edit.Bit)[XIC(S050TL4.Int.AtHomePos) ,XIC(S050TL4.Int.AtWorkPos1) XIC(Edit.Bit) ,XIC(S050TL4.Int.PartsPresNo) XIC(S050TL4.SR.Int.NoPart) ,XIO(S050TT1.Drive.TL4Installed) ]OTE(S050TT1.Drive.TL4ClrToRotate);
				RC: "***************************************************************************$N"
				    "Replace:$N"
				    "--|/|-- $QEdit.Bit$Q With Robot Zone Clear Memory Bits$N"
				    "--| |-- $QEdit.Bit$Q Robot At Home Bits$N"
				    "This Applies To Robot Clearance Of The Turntable Index$N"
				    "***************************************************************************";
				N: XIC(Edit.Bit)XIC(S005RB01.Int.ClearOfTool1)XIC(S005RB01.Int.ClearOfTool2)XIC(S005RB01.Int.ClearOfPick1)XIC(S005RB01.Int.ClearOfDrop1)OTE(S050TT1.Drive.RbtsClr);
				RC: "***************************************************************************$N"
				    "Replace:$N"
				    "--| |-- $QEdit.Bit$Q With Tooling Interference Bits (i.e. Clamps Clsd) For The Turntable Index$N"
				    "***************************************************************************";
				N: XIC(S050TT1.Drive.TL1ClrToRotate)XIC(S050TT1.Drive.TL2ClrToRotate)XIC(S050TT1.Drive.TL3ClrToRotate)XIC(S050TT1.Drive.TL4ClrToRotate)OTE(S050TT1.Drive.ToolingClr);
				N: XIC(S050TT1.Drive.TL1RdyToRotate)XIC(S050TT1.Drive.TL2RdyToRotate)XIC(S050TT1.Drive.TL3RdyToRotate)XIC(S050TT1.Drive.TL4RdyToRotate)OTE(S050TT1.Drive.ToolingRdyTo_Rotate);
				RC: "***************************************************************************$N"
				    "Replace:$N"
				    "modify with Conditions For The Command To Rotate To The load Position$N"
				    "modify with tooling conditions for the Command to Rotate to Change Out Position$N"
				    "***************************************************************************$N"
				    "$N"
				    "";
				N: [XIC(S050TT1.Drive.ToolingRdyTo_Rotate) ,XIC(S050TT1.Int.ManualMode) ]XIC(S050TT1.Drive.RbtsClr)XIC(S050TT1.Drive.ToolingClr)XIO(S050TT1.Drive.RotateToTL1Mem)XIO(S050TT1.Drive.RotateToTL2Mem)XIO(S050TT1.Drive.RotateToTL3Mem)XIO(S050TT1.Drive.RotateToTL4Mem)OTE(S050TT1.Drive.RotateSetup);
				RC: "***************************************************************************$N"
				    "modify with Conditions For The Command To Rotate To The load Position$N"
				    "***************************************************************************$N"
				    "$N"
				    "";
				N: XIC(S050TT1.Drive.RotateSetup)[XIC(S050TT1.Drive.TL1Installed) [XIO(S050TL1.Int.Bypass.Seld) XIC(S050TL1.Int.PartsPresNo) [XIC(S050TL1.Int.UnldComp) XIC(Edit.Bit) ,XIC(S050TL1.Int.PartsPresNo) XIC(S050TL1.SR.Int.NoPart) XIC(S050TL1.Int.AtHomePos) ] ,XIC(S050TL1.Int.Bypass.Seld) [XIO(S050TL2.Int.Bypass.Seld) ,XIO(S050TT1.Drive.TL2Installed) ] XIC(S050TL1.Int.AtWorkPos1) XIC(Edit.Bit) XIC(S050TL1.Int.Load1Comp) XIC(S050TL1.Int.AllPPandSR) ] OTE(S050TT1.Drive.RotateToTL1) ,XIC(S050TT1.Drive.TL2Installed) [XIO(S050TL2.Int.Bypass.Seld) XIC(S050TL2.Int.PartsPresNo) [XIC(S050TL2.Int.UnldComp) XIC(Edit.Bit) ,XIC(S050TL2.Int.PartsPresNo) XIC(S050TL2.SR.Int.NoPart) XIC(S050TL2.Int.AtHomePos) ] ,XIC(S050TL2.Int.Bypass.Seld) [XIO(S050TL1.Int.Bypass.Seld) ,XIO(S050TT1.Drive.TL1Installed) ] XIC(S050TL2.Int.AtWorkPos1) XIC(Edit.Bit) XIC(S050TL2.Int.Load1Comp) XIC(S050TL2.Int.AllPPandSR) ] OTE(S050TT1.Drive.RotateToTL2) ,OTU(S050TT1.Drive.RotateToTL3) ,OTU(S050TT1.Drive.RotateToTL4) ];
				RC: "****************************************************************************************************$N"
				    "Motion  Watchdog Faults$N"
				    "****************************************************************************************************$N"
				    "$N"
				    "Design Cycle time for TT 5 sec.";
				N: [XIC(S050TT1.Drive.CmdStart) XIC(S050TT1.Drive.DriveEnbl) ,XIO(S050TT1.Drive.TL1InPos) XIO(S050TT1.Drive.TL2InPos) XIO(S050TT1.Drive.TL3InPos) XIO(S050TT1.Drive.TL4InPos) ][XIC(S050TT1.Drive.TL1Seled) XIO(S050TT1.Drive.TL1AtLoadPos) ,XIC(S050TT1.Drive.TL2Seled) XIO(S050TT1.Drive.TL2AtLoadPos) ,XIC(S050TT1.Drive.TL3Seled) XIO(S050TT1.Drive.TL3AtLoadPos) ,XIC(S050TT1.Drive.TL4Seled) XIO(S050TT1.Drive.TL4AtLoadPos) ][XIC(S050TT1.Drive.JogActive) [MOV(30000,S050TT1.Drive.NotInPosLSTmr.PRE) ,RTO(S050TT1.Drive.NotInPosLSTmr,?,?) ] ,XIO(S050TT1.Drive.JogActive) [MOV(20000,S050TT1.Drive.NotInPosHSTmr.PRE) ,RTO(S050TT1.Drive.NotInPosHSTmr,?,?) ] ];
				N: [XIC(S050TT1.Drive.TL1Seled) XIC(S050TT1.Drive.TL1AtLoadPos) ,XIC(S050TT1.Drive.TL2Seled) XIC(S050TT1.Drive.TL2AtLoadPos) ,XIC(S050TT1.Drive.TL3Seled) XIC(S050TT1.Drive.TL3AtLoadPos) ,XIC(S050TT1.Drive.TL4Seled) XIC(S050TT1.Drive.TL4AtLoadPos) ][RES(S050TT1.Drive.NotInPosLSTmr) ,RES(S050TT1.Drive.NotInPosHSTmr) ];
				N: [XIC(S050TT1.Drive.CmdStart) [XIC(S050TT1.Drive.EncAtTL1) ,XIC(S050TT1.Drive.EncAtTL2) ,XIC(S050TT1.Drive.EncAtTL3) ,XIC(S050TT1.Drive.EncAtTL4) ] [MOV(2500,S050TT1.Drive.StillInPosTmr.PRE) ,RTO(S050TT1.Drive.StillInPosTmr,?,?) ] ,[XIC(S050TT1.Drive.CmdStart) XIO(S050TT1.Drive.StillInPosTmr.EN) ,XIO(S050TT1.Drive.StillInPosTmr.DN) XIO(S050TT1.Drive.CmdStart) ,XIC(S050TT1.Int.FaultResetPB) ONS(S050TT1.Int.ONS.2) ] RES(S050TT1.Drive.StillInPosTmr) ];
				N: [XIC(S050TT1.Drive.NotInPosLSTmr.DN) ,XIC(S050TT1.Drive.NotInPosHSTmr.DN) ,XIC(S050TT1.Drive.StillInPosTmr.DN) ]OTE(S050TT1.Drive.PosTimerFlt);
		END_ROUTINE

		ROUTINE Main 
				N: JSR(B01_MapInputs,0);
				N: JSR(B00_NetworkDiag,0);
				N: JSR(C00_Operator,0);
				N: JSR(D00_Turntable,0);
				N: JSR(E00_TurnTable_TL_Edit,0);
				N: JSR(P00_Station,0);
				N: JSR(P01_StationToSfty,0);
				N: JSR(Y00_Alarms_L1,0);
				N: JSR(Y01_Alarms_L2,0);
				N: JSR(Y02_Alarms_L3,0);
				N: JSR(Z00_MapOutputs,0);
		END_ROUTINE

		ROUTINE P00_Station 
				RC: "************************************************************$N"
				    "Station Part Present Summary$N"
				    "************************************************************$N"
				    "$N"
				    "OTU Bit if not used or required";
				N: NOP();
				N: XIC(S050TL1.Int.PartsPresNo)XIC(S050TL1.SR.Int.NoPart)XIC(S050TL1.Int.PartsPresNo)XIC(S050TL1.SR.Int.NoPart)XIC(S050TL1.Int.PartsPresNo)XIC(S050TL1.SR.Int.NoPart)XIC(S050TL1.Int.PartsPresNo)XIC(S050TL1.SR.Int.NoPart)OTE(S050TT1.Int.Empty);
				N: [XIC(S050TL1.Int.PartsPresAll) XIC(S050TL1.SR.Int.Part) ,XIC(S050TL1.Int.PartsPresAll) XIC(S050TL2.SR.Int.Part) ,XIC(S050TL1.Int.PartsPresAll) XIC(S050TL3.SR.Int.Part) ,XIC(S050TL1.Int.PartsPresAll) XIC(S050TL4.SR.Int.Part) ]XIC(Edit.Bit)OTE(S050TT1.Int.AllPPandSR);
				RC: "************************************************************$N"
				    "Auto Mode Selected$N"
				    "************************************************************$N"
				    "";
				N: [XIO(S050TT1.Int.ManualModePB) XIO(S050TT1.Int.NoModePB) XIO(Z005_040.NoModePB) ,XIC(S050TT1.Int.AutoMode) ][XIC(S050TT1.Int.NoMode) [XIC(S050TT1.Int.AutoSelPB) ,XIC(Z005_040.GlobalAutoModeSelPB) ,XIC(S050TT1.Int.AutoModePB) ,XIC(Z005_040.GlobalAutoModePB) ] ,XIC(S050TT1.Int.AutoSel) ]XIC(S050TT1.Int.RbtsInAuto)XIC(S050TT1.Int.RbtsTeachOff)OTE(S050TT1.Int.AutoSel);
				RC: "************************************************************$N"
				    "Station Auto Mode$N"
				    "Interlocks$N"
				    "************************************************************";
				N: [XIC(Z005_040.AutoModeSetup.Sts_IntlkOK) OTE(S050TT1.Int.AutoModeSetup.Inp_Intlk00) ,XIC(S050TT1.Int.AutoSel) OTE(S050TT1.Int.AutoModeSetup.Inp_Intlk01) ,XIO(S050TT1.Int.AutoModeStop) OTE(S050TT1.Int.AutoModeSetup.Inp_Intlk02) ,XIO(S050TT1.Int.ManualMode) OTE(S050TT1.Int.AutoModeSetup.Inp_Intlk03) ,XIC(S050TT1.Int.RbtsTeachOff) OTE(S050TT1.Int.AutoModeSetup.Inp_Intlk04) ,XIC(S050TT1.Int.RbtsInAuto) OTE(S050TT1.Int.AutoModeSetup.Inp_Intlk05) ,XIC(S050TT1.Int.AirOnOk) OTE(S050TT1.Int.AutoModeSetup.Inp_Intlk06) ,XIC(Edit.Bit) OTE(S050TT1.Int.AutoModeSetup.Inp_Intlk07) ,XIC(Edit.Bit) OTE(S050TT1.Int.AutoModeSetup.Inp_Intlk08) ,P_Intlk(S050TT1.Int.AutoModeSetup) ];
				RC: "************************************************************$N"
				    "Auto Mode $N"
				    "Running$N"
				    "************************************************************";
				N: XIC(S050TT1.Int.AutoModeSetup.Sts_IntlkOK)[[XIC(S050TT1.Int.AutoModePB) ,XIC(Z005_040.GlobalAutoModePB) ] ,XIC(S050TT1.Int.AutoMode) ][MOV(25,S050TT1.Int.AutoDlyTmr.PRE) TON(S050TT1.Int.AutoDlyTmr,?,?) ,XIC(S050TT1.Int.AutoDlyTmr.DN) OTE(S050TT1.Int.AutoMode) ];
				RC: "************************************************************$N"
				    "Auto Cycle Stop$N"
				    "************************************************************$N"
				    "";
				N: XIC(S050TT1.Int.AutoMode)[XIC(S050TT1.Int.NoModePB) ,XIC(Z005_040.AutoModeStopReq) ,XIC(S050TT1.Int.AutoModeStopReq) ]XIO(S050TT1.Int.AutoModeStop)OTE(S050TT1.Int.AutoModeStopReq);
				N: [XIC(S010RB01.I1.Pg_Paused) ,XIC(S010RB01.I1.RbtHeld) ,XIC(S010RB01.I1.RbtFaulted) ][XIC(S010RB02.I1.Pg_Paused) ,XIC(S010RB02.I1.RbtHeld) ,XIC(S010RB02.I1.RbtFaulted) ]OTE(S050TT1.Int.AutoModeStopEnable);
				N: XIC(S050TT1.Int.AutoMode)XIC(S050TT1.Int.AutoModeStopReq)XIC(S050TT1.Int.AutoModeStopEnable)OTE(S050TT1.Int.AutoModeStop);
				RC: "************************************************************$N"
				    "Manual Mode$N"
				    "************************************************************$N"
				    "";
				N: XIO(S050TT1.Int.NoModePB)XIO(Z005_040.NoModePB)XIO(S050TT1.Int.AutoSelPB)XIO(S050TT1.Int.AutoSel)[XIC(S050TT1.Int.NoMode) [XIC(S050TT1.Int.ManualModePB) ,XIC(Z005_040.ManualModePB) ] ,XIC(S050TT1.Int.ManualMode) ]XIC(S010RB01.Int.InTeach)OTE(S050TT1.Int.ManualMode);
				RC: "************************************************************$N"
				    "Dry Cycle$N"
				    "************************************************************$N"
				    "";
				N: XIC(Z005_040.DryCycle)OTE(S050TT1.Int.DryCycle);
				RC: "************************************************************$N"
				    "No Mode$N"
				    "************************************************************$N"
				    "";
				N: XIO(S050TT1.Int.AutoSel)XIO(S050TT1.Int.ManualMode)OTE(S050TT1.Int.NoMode);
				RC: "########################################$N"
				    "Station Tasks Complete$N"
				    "########################################";
				N: XIC(S050TT1.Int.CycStart)XIC(S050TT1.Int.LoadComp)XIC(S050TT1.Int.RbtsTaskComp)XIC(Edit.Bit)OTL(S050TT1.Int.TaskComp);
				N: [XIC(S050TT1.Int.UnldComp) ,XIC(S050TT1.Int.RstCycComp) ]OTU(S050TT1.Int.TaskComp);
				N: XIC(S050TT1.Int.AutoMode)[XIC(S050TT1.Drive.TL1AtLoadPos) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL2AtLoadPos) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL3AtLoadPos) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL4AtLoadPos) XIC(Edit.Bit) ]XIO(S050TT1.Int.TaskComp)XIO(S050TT1.Int.CycComp)XIC(S050TTSfty.AllStaLtScrnOK)OTE(S050TT1.Int.ClrToLoad);
				N: XIC(S050TT1.Int.AutoMode)[XIC(S050TT1.Drive.TL1Installed) XIC(S050TT1.Drive.TL1AtUnldPos) XIC(S050TL1.Int.AllPPandSR) XIC(S050TL1.Int.UnldPos1) XIC(S050TL1.Int.TaskComp) XIO(S050TL1.Int.CycComp) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL2Installed) XIC(S050TT1.Drive.TL2AtUnldPos) XIC(S050TL1.Int.AllPPandSR) XIC(S050TL2.Int.UnldPos1) XIC(S050TL2.Int.TaskComp) XIO(S050TL2.Int.CycComp) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL3Installed) XIC(S050TT1.Drive.TL3AtUnldPos) XIC(S050TL1.Int.AllPPandSR) XIC(S050TL3.Int.UnldPos1) XIC(S050TL3.Int.TaskComp) XIO(S050TL3.Int.CycComp) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL4Installed) XIC(S050TT1.Drive.TL4AtUnldPos) XIC(S050TL1.Int.AllPPandSR) XIC(S050TL4.Int.UnldPos1) XIC(S050TL4.Int.TaskComp) XIO(S050TL4.Int.CycComp) XIC(Edit.Bit) ]OTE(S050TT1.Int.ClrToUnld);
				N: XIC(S050TT1.Int.TaskComp)[XIC(S050TT1.Drive.TL1Installed) XIC(S050TT1.Drive.TL1AtLoadPos) XIC(S050TL1.Int.UnldComp) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL2Installed) XIC(S050TT1.Drive.TL2AtLoadPos) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL3Installed) XIC(S050TT1.Drive.TL3AtLoadPos) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL4Installed) XIC(S050TT1.Drive.TL4AtLoadPos) XIC(Edit.Bit) ]OTL(S050TT1.Int.CycComp);
				N: XIC(S050TT1.Int.TaskComp)XIC(S050TT1.Int.CycComp)XIC(S050TT1.Int.Empty)XIC(Edit.Bit)OTL(S010TL1.Int.UnldComp);
				N: XIC(S050TT1.Int.RstCycComp)OTU(S010TL1.Int.UnldComp)OTU(S050TT1.Int.CycComp);
				N: XIC(S050TT1.Int.AutoMode)XIC(S050TT1.Int.Empty)XIO(S050TT1.Drive.TL1AtLoadPos)XIO(S050TT1.Drive.TL2AtLoadPos)XIO(S050TT1.Drive.TL3AtLoadPos)XIO(S050TT1.Drive.TL4AtLoadPos)XIC(S050TT1.Drive.Rotating)XIC(Edit.Bit)OTE(S050TT1.Int.RstCycComp);
				RC: "########################################$N"
				    "Cycle Start Logic$N"
				    "########################################$N"
				    "$N"
				    "To be detemined how cycle start will be handled. Different Process starts may be involved.";
				N: XIC(Edit.Debug)OTE(S050TT1.Int.CycStart);
				RC: "************************************************************$N"
				    "Station Cycle Time Logic$N"
				    "************************************************************";
				N: NOP();
				N: MOV(3600000,S050TT1.Int.TackTMR.PRE)RTO(S050TT1.Int.TackTMR,?,?);
				N: XIC(S050TT1.Int.AutoMode)[XIC(S005RB01.Int.AutoMode) XIO(S005RB01.Int.ClearOfDrop1) ,XIC(S020RB05.Int.AutoMode) XIC(S020RB05.Int.ClearOfPick1) ]MOV(3600000,S050TT1.Int.IndexTMR.PRE)RTO(S050TT1.Int.IndexTMR,?,?);
				N: [XIC(S050TT1.Int.AutoMode) [XIC(S050TT1.Int.CycStart) XIO(S050TT1.Int.UnldComp) ,XIC(S050TT1.Drive.TL1Installed) XIC(S050TL1.Int.TaskComp) XIO(S050TT1.Drive.TL1AtUnldPos) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL2Installed) XIC(Edit.Bit) XIO(S050TT1.Drive.TL2AtUnldPos) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL3Installed) XIC(Edit.Bit) XIO(S050TT1.Drive.TL3AtUnldPos) XIC(Edit.Bit) ,XIC(S050TT1.Drive.TL4Installed) XIC(Edit.Bit) XIO(S050TT1.Drive.TL4AtUnldPos) XIC(Edit.Bit) ] ,XIC(S050TT1.Oper.CycTimeTmr.EN) ]XIO(S050TT1.Int.IndexTMR.TT)MOV(3600000,S050TT1.Int.CycTMR.PRE)RTO(S050TT1.Int.CycTMR,?,?);
				N: [XIC(S050TT1.Oper.CycTimeTmr.EN) ,XIC(S050TT1.Int.IndexTMR.EN) ,XIC(S050TT1.Int.CycTMR.EN) ]MOV(3600000,S050TT1.Int.ProcTMR.PRE)RTO(S050TT1.Int.ProcTMR,?,?);
				N: XIC(S050TT1.Int.UnldComp)[XIO(S050TT1.Int.CycCompONS.0) [MOV(S050TT1.Int.CycTMR.ACC,S050TT1.Int.CycTimeStore) ,RES(S050TT1.Int.CycTMR) ] ,OTL(S050TT1.Int.CycCompONS.0) ];
				N: XIC(S050TT1.Int.CycCompONS.0)XIO(S050TT1.Int.IndexTMR.EN)[XIO(S050TT1.Int.CycCompONS.1) [MOV(S050TT1.Int.TackTMR.ACC,S050TT1.Int.TackTimeStore) ,RES(S050TT1.Int.TackTMR) ,MOV(S050TT1.Int.IndexTMR.ACC,S050TT1.Int.IndexTimeStore) ,RES(S050TT1.Int.IndexTMR) ,MOV(S050TT1.Int.ProcTMR.ACC,S050TT1.Int.ProcTimeStore) ,RES(S050TT1.Int.ProcTMR) ] ,OTL(S050TT1.Int.CycCompONS.1) ];
				N: XIC(S050TT1.Int.CycStart)OTU(S050TT1.Int.CycCompONS.0)OTU(S050TT1.Int.CycCompONS.1);
				RC: "************************************************************$N"
				    "Station State$N"
				    "************************************************************";
				N: NOP();
				N: XIC(Edit.Bit)OTE(S050TT1.Int.Starved);
				N: XIC(Edit.Bit)OTE(S050TT1.Int.Blocked);
				RC: "************************************************************$N"
				    "Station Mode for HMI$N"
				    "$N"
				    "###REQUIRES UPDATE####$N"
				    "************************************************************";
				N: [MOV(0,S050TT1.Int.RunningMode) ,XIC(Status.AlwaysOff) XIC(Edit.Debug) MOV(1,S050TT1.Int.RunningMode) ,XIC(S050TT1.Int.HoldEndOfCycle) MOV(2,S050TT1.Int.RunningMode) ,XIC(S050TT1.Int.DryCycle) MOV(3,S050TT1.Int.RunningMode) ];
				RC: "************************************************************$N"
				    "Station Mode Status for HMI$N"
				    "$N"
				    "######REQUIRED UPDATE########$N"
				    "************************************************************";
				N: [XIO(HMI_FRM005.stsAnyFixtureOnFault) XIO(HMI_FRM005.stsAnyRobotOnFault) MOV(1,S050TT1.Int.RunningModeStatus) ,XIC(S050TT1.Int.Blocked) MOV(2,S050TT1.Int.RunningModeStatus) ,XIC(S050TT1.Int.Starved) MOV(3,S050TT1.Int.RunningModeStatus) ,[XIC(HMI_FRM005.stsAnyFixtureOnFault) ,XIC(HMI_FRM005.stsAnyRobotOnFault) ] MOV(0,S050TT1.Int.RunningModeStatus) ];
				RC: "************************************************************$N"
				    "Station Operation Mode for HMI$N"
				    "$N"
				    "#####REQUIRES UPDATE#####$N"
				    "************************************************************";
				N: [MOV(0,S050TT1.Int.OperationMode) ,XIC(S050TT1.Int.AutoSel) MOV(1,S050TT1.Int.OperationMode) ,XIC(S050TT1.Int.ManualMode) MOV(2,S050TT1.Int.OperationMode) ,XIC(S050TT1.Int.AutoMode) MOV(3,S050TT1.Int.OperationMode) ];
		END_ROUTINE

		ROUTINE P01_StationToSfty 
				RC: "************************************************************$N"
				    "Map States to Safety Tag$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S050TT1.Int.KnownPos)OTE(StdToSfty.S050KnownPos);
				N: XIC(Edit.Bit)[MOV(500,S050TT1.Int.ClrToUnlockDlyTmr.PRE) TON(S050TT1.Int.ClrToUnlockDlyTmr,?,?) ,XIC(S050TT1.Int.ClrToUnlockDlyTmr.DN) OTE(StdToSfty.S050ClrToUnlock) ];
		END_ROUTINE

		ROUTINE Y00_Alarms_L1 
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L1$N"
				    "Machine Faults$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "Module Communication Faults$N"
				    "#######################$N"
				    "$N"
				    "Add the ENet.CommOK signal of the First upstream Ethernet Device If Daisy Chain.$N"
				    "If the First Upstream Ethernet Device is a Switch, TBD.$N"
				    "$N"
				    "-------------------------------------------$N"
				    "Sx.L1[1].0 - SxL1[1].31$N"
				    "Up to 32 Alarms$N"
				    "$N"
				    "";
				N: NOP();
				RC: "******************************************************$N"
				    "Servo DriveComunicationFaults$N"
				    "*****************************************************";
				N: [XIO(S050TT1SRV_ENet.CommOK) XIO(S050TT1SRV_ENet.Inhibited) OTE(S5.L1[1].4) ,XIO(S050TT1SIO1_ENet.CommOK) XIO(S050TT1SIO1_ENet.Inhibited) OTE(S5.L1[1].5) ,XIO(S050TT1SIO2_ENet.CommOK) XIO(S050TT1SIO2_ENet.Inhibited) OTE(S5.L1[1].6) ];
				N: [XIO(S050TT1SIO1:I.ConnectionFaulted) [XIO(S050TT1SIO1:I.RunMode) ,XIO(S050TTSfty.Mod1.InputStatus) ] OTE(S5.L1[1].21) ,XIO(S050TT1SIO2:I.ConnectionFaulted) [XIO(S050TT1SIO2:I.RunMode) ,XIO(S050TTSfty.Mod2.InputStatus) ] OTE(S5.L1[1].22) ];
				RC: "************************************************************$N"
				    "Servo CIP Axis Module Faults to HMI$N"
				    "$N"
				    "************************************************************";
				N: NOP();
				N: ServoAxisFaults(S050TT1.Drive.AxisFault,S050TT1SRV,Edit.Array,0);
				N: XIC(S050TT1SRV1:SI.ConnectionFaulted)OTE(S5.L1[1].7);
				N: NOP();
				N: NOP();
				RC: "#######################$N"
				    "Safety Instruction Faults$N"
				    "$N"
				    "E-Stop$N"
				    "Oper Light Screens And Scanners$N"
				    "Safety Position Devices$N"
				    "InterCell Safety Devices$N"
				    "#######################$N"
				    "$N"
				    "-------------------------------------------$N"
				    "Sx.L1[2].0 - SxL1[3].31$N"
				    "Up to 64 Alarms$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(S050TT1SRV1:SI.SafetyFault)OTE(S5.L1[1].24);
				N: XIC(S050TT1SRV1:SI.ResetRequired)OTE(S5.L1[1].25);
				N: XIC(S050TT1SRV1:SI.TorqueDisabled)OTE(S5.L1[1].26);
				N: [XIC(S050TTSfty.E1.Estop.FP) OTE(S5.L1[2].0) ,XIC(S050TTSfty.E2.Estop.FP) OTE(S5.L1[2].1) ,XIC(S050TTSfty.E3.Estop.FP) OTE(S5.L1[2].2) ];
				N: [XIC(S050TTSfty.OperLS.LC1.FP) OTE(S5.L1[2].10) ,XIC(S050TTSfty.OperLS.LC2.FP) OTE(S5.L1[2].11) ,XIC(S050TTSfty.OperLS.LC3.FP) OTE(S5.L1[2].12) ];
				N: [XIC(S050TTSfty.OperLS.SCN1_1.FP) OTE(S5.L1[2].13) ,XIC(S050TTSfty.OperLS.SCN1_2.FP) OTE(S5.L1[2].14) ,XIC(S050TTSfty.OperLS.SCN2_1.FP) OTE(S5.L1[2].15) ,XIC(S050TTSfty.OperLS.SCN2_2.FP) OTE(S5.L1[2].16) ];
				N: [XIC(S050TTSfty.SftyPosDev.SPD1.FP) OTE(S5.L1[3].0) ,XIC(S050TTSfty.SftyPosDev.SPD2.FP) OTE(S5.L1[3].1) ,XIC(S050TTSfty.SftyPosDev.SPD3.FP) OTE(S5.L1[3].2) ,XIC(S050TTSfty.SftyPosDev.SPD4.FP) OTE(S5.L1[3].3) ];
				N: [XIC(S050TTSfty.IntSftyDevice.LC1.FP) OTE(S5.L1[2].20) ,XIC(S050TTSfty.IntSftyDevice.LC2.FP) OTE(S5.L1[2].21) ,XIC(S050TTSfty.IntSftyDevice.LC3.FP) OTE(S5.L1[2].22) ];
				N: [XIC(S050TTSfty.IntSftyDevice.SCN1_1.FP) OTE(S5.L1[2].23) ,XIC(S050TTSfty.IntSftyDevice.SCN1_2.FP) OTE(S5.L1[2].24) ,XIC(S050TTSfty.IntSftyDevice.SCN2_1.FP) OTE(S5.L1[2].25) ,XIC(S050TTSfty.IntSftyDevice.SCN2_2.FP) OTE(S5.L1[2].26) ];
				RC: "#######################$N"
				    "Application Faults$N"
				    "$N"
				    "Turntable$N"
				    "Conveyor$N"
				    "ToolTray$N"
				    "$N"
				    "#######################$N"
				    "$N"
				    "-------------------------------------------$N"
				    "Sx.L1[80].0 - SxL1[83].31$N"
				    "Up to 64 Alarms$N"
				    "$N"
				    "";
				N: NOP();
				RC: "******************************************************$N"
				    "Servo Drive Position Faults$N"
				    "*****************************************************";
				N: XIC(S050TT1.Drive.AtZeroSpeed)[XIC(S050TT1.Drive.TL1InPos) XIO(S050TT1.Drive.EncAtTL1) OTE(S6.L1[80].0) ,XIC(S050TT1.Drive.TL2InPos) XIO(S050TT1.Drive.EncAtTL2) OTE(S6.L1[80].1) ,XIC(S050TT1.Drive.TL3InPos) XIO(S050TT1.Drive.EncAtTL3) OTE(S6.L1[80].2) ,XIC(S050TT1.Drive.TL4InPos) XIO(S050TT1.Drive.EncAtTL4) OTE(S6.L1[80].3) ];
				N: XIC(S050TT1.Drive.AtZeroSpeed)[XIO(S050TT1.Drive.TL1InPos) XIC(S050TT1.Drive.EncAtTL1) OTE(S6.L1[80].4) ,XIO(S050TT1.Drive.TL2InPos) XIC(S050TT1.Drive.EncAtTL2) OTE(S6.L1[80].5) ,XIO(S050TT1.Drive.TL3InPos) XIC(S050TT1.Drive.EncAtTL3) OTE(S6.L1[80].6) ,XIO(S050TT1.Drive.TL4InPos) XIC(S050TT1.Drive.EncAtTL4) OTE(S6.L1[80].7) ];
				N: [XIC(S050TT1.Drive.NotInPosLSTmr.DN) OTE(S6.L1[80].8) ,XIC(S050TT1.Drive.NotInPosHSTmr.DN) OTE(S6.L1[80].9) ,XIC(S050TT1.Drive.StillInPosTmr.DN) OTE(S6.L1[80].10) ];
				RC: "-*******************************************$N"
				    "Software Overtravel Faults$N"
				    "*******************************************";
				N: XIC(S050TT1.Drive.DriveEnbl)XIC(S050TT1.Drive.OvrtrvlFwdFault)OTE(S6.L1[81].0);
				N: XIC(S050TT1.Drive.DriveEnbl)XIC(S050TT1.Drive.OvrtrvlRevFault)OTE(S6.L1[81].1);
				RC: "-*******************************************$N"
				    "Hardware Overtravel Faults$N"
				    "*******************************************";
				N: XIC(S050TT1.Drive.OvrtrvlFwdHdwInst)XIC(S050TT1.Drive.DriveEnbl)XIC(S050TT1.Drive.OvrtrvlFwdHdwMem)OTE(S6.L1[81].2);
				N: XIC(S050TT1.Drive.OvrtrvlRevHdwInst)XIC(S050TT1.Drive.DriveEnbl)XIC(S050TT1.Drive.OvrtrvlRevHdwMem)OTE(S6.L1[81].3);
				RC: "-*******************************************$N"
				    "Indexing Time Faults$N"
				    "*******************************************";
				N: XIC(S050TT1.Drive.DriveEnbl)XIC(S050TT1.Drive.IndexOt)OTE(S6.L1[81].4);
		END_ROUTINE

		ROUTINE Y01_Alarms_L2 
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L2$N"
				    "Manual Interventions$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S050TTSfty.DiscInstalled)XIO(S050TTSfty.All_DiscSwitch_OK)OTE(S5.L2[11].0);
				N: XIC(S050TTSfty.SftyPinsInstalled)XIO(S050TTSfty.SftyPinsOk)OTE(S5.L2[11].1);
				RC: "#######################$N"
				    "E-Stop Activated$N"
				    "#######################";
				N: NOP();
				N: XIC(S050TTSfty.Mod1.RunMode)XIO(S050TTSfty.E1.EstpChnA)XIO(S050TTSfty.E1.EstpChnB)OTE(S5.L2[3].0);
				N: XIC(S050TTSfty.Mod1.RunMode)XIO(S050TTSfty.E2.EstpChnA)XIO(S050TTSfty.E2.EstpChnB)OTE(S5.L2[3].1);
				N: XIC(S050TTSfty.Mod2.RunMode)XIO(S050TTSfty.E3.EstpChnA)XIO(S050TTSfty.E3.EstpChnB)OTE(S5.L2[3].2);
				RC: "***********************************************************$N"
				    "TT Interlocks Faults$N"
				    "************************************************************";
				N: NOP();
				N: XIO(S050TT1.Drive.RunIntlk.Sts_IntlkOK)[XIO(S050TT1.Drive.DiscOn) OTE(S5.L2[80].0) ,XIO(S050TT1.Drive.SftyPinsOk) OTE(S5.L2[80].1) ,XIO(S050TT1.Drive.DriveEnbl) OTE(S5.L2[80].2) ,XIO(S050TT1.Drive.OverCurrentTmr.DN) OTE(S5.L2[80].3) ,XIC(S050TT1.Drive.DriveFault) OTE(S5.L2[80].4) ,XIC(S050TT1.Drive.DriveInhibited) OTE(S5.L2[80].5) ];
		END_ROUTINE

		ROUTINE Y02_Alarms_L3 
				RC: "************************************************************$N"
				    "Station Alarms$N"
				    "L3$N"
				    "Warnings$N"
				    "************************************************************";
				N: NOP();
				RC: "***********************************************************$N"
				    "TT Parameters Faults$N"
				    "************************************************************";
				N: XIO(S050TT1.Drive.Parameters.Sts_PermOK)[NEQ(S050TT1.Drive.InPosTolerance,0.5) OTE(S5.L3[81].0) ,[NEQ(S050TT1.Drive.MotionStopDecelPorc,10) ,NEQ(S050TT1.Drive.MotionStopDecelPorcJerk,10) ] OTE(S5.L3[81].1) ,NEQ(S050TT1.Drive.MotionMoveType,0) OTE(S5.L3[81].2) ,[LES(S050TT1.Drive.MotionRunSpeed,40) ,GRT(S050TT1.Drive.MotionRunSpeed,45) ] OTE(S5.L3[81].3) ,[LES(S050TT1.Drive.MotionJogSpeed,3) ,GRT(S050TT1.Drive.MotionJogSpeed,5) ] OTE(S5.L3[81].4) ,[LES(S050TT1.Drive.MotionTorque,177) ,GRT(S050TT1.Drive.MotionTorque,180) ] OTE(S5.L3[81].5) ,[LES(S050TT1.Drive.MotionJogTorque,100) ,GRT(S050TT1.Drive.MotionJogTorque,105) ] OTE(S5.L3[81].6) ,[LES(S050TT1.Drive.MotionJogAccel,3) ,GRT(S050TT1.Drive.MotionJogAccel,5) ] OTE(S5.L3[81].7) ,[LES(S050TT1.Drive.MotionJogDecel,3) ,GRT(S050TT1.Drive.MotionJogDecel,5) ] OTE(S5.L3[81].8) ,[NEQ(S050TT1.Drive.MotionJogAccelJerk,100) ,NEQ(S050TT1.Drive.MotionJogDecelJerk,100) ] OTE(S5.L3[81].9) ,[LES(S050TT1.Drive.MotionDecel,19.5) ,GRT(S050TT1.Drive.MotionDecel,21.5) ] OTE(S5.L3[81].10) ,[LES(S050TT1.Drive.MotionAccel,48) ,GRT(S050TT1.Drive.MotionAccel,50) ] OTE(S5.L3[81].11) ,[NEQ(S050TT1.Drive.MotionAccelJerk,40) ,NEQ(S050TT1.Drive.MotionDecelJerk,40) ] OTE(S5.L3[81].12) ];
				RC: "#######################$N"
				    "RESERVED$N"
				    "#######################";
				N: NOP();
		END_ROUTINE

		ROUTINE Z00_MapOutputs 
				RC: "*************************************************************$N"
				    "This rung defines the actual speed units\Sec$N"
				    "************************************************************$N"
				    "";
				N: [XIC(S050TT1.Drive.JogActive) MOV(3,S050TT1.Drive.MotionJogSpeed) ,XIO(S050TT1.Drive.JogActive) MOV(50,S050TT1.Drive.MotionRunSpeed) ];
				RC: "*************************************************************$N"
				    "Motion Axis Move $N"
				    "Local moves to TL1,TL2,TL3,TL4$N"
				    "$N"
				    "************************************************************$N"
				    "";
				N: XIC(S050TT1.Drive.CmdStart)XIO(S050TT1.Drive.CmdStop)XIO(S050TT1.Drive.MoveComp)MAM(S050TT1SRV,S050TT1.MI.MoveMAM,S050TT1.Drive.MotionMoveType,S050TT1.Drive.MotionPosReq,S050TT1.Drive.MotionRunSpeed,Units per sec,S050TT1.Drive.MotionAccel,Units per sec2,S050TT1.Drive.MotionDecel,Units per sec2,S-Curve,S050TT1.Drive.MotionAccelJerk,S050TT1.Drive.MotionDecelJerk,Units per sec3,Disabled,Programmed,0,None,0,0);
				N: [XIC(S050TT1.MI.MoveMAM.PC) XIC(S050TT1.Drive.DriveInPos) ,XIC(S050TT1.Drive.MoveComp) XIO(S050TT1.Drive.CmdStart) ]OTE(S050TT1.Drive.MoveComp);
				N: [XIC(S050TT1.MI.MoveMAM.ER) ,XIC(S050TT1.Drive.MoveFailed) XIO(S050TT1.Drive.MoveComp) ]OTE(S050TT1.Drive.MoveFailed);
				RC: "*************************************************************$N"
				    "Motion Axis Jog$N"
				    "Jogging moves In Manual Mode$N"
				    "Setup Direction$N"
				    "$N"
				    "************************************************************$N"
				    "";
				N: XIC(S050TT1.Drive.JogActive)[XIC(S050TT1.Drive.CmdJogFwd) MOV(0,S050TT1.Drive.MotionJogDirection) ,XIC(S050TT1.Drive.CmdJogRev) MOV(1,S050TT1.Drive.MotionJogDirection) ];
				RC: "*************************************************************$N"
				    "Motion Axis Jog$N"
				    "Jogging moves In Manual Mode$N"
				    "direction $N"
				    "0 Fwd$N"
				    "1 Rev$N"
				    "************************************************************$N"
				    "";
				N: XIC(S050TT1.Drive.JogActive)[XIC(S050TT1.Drive.CmdJogFwd) EQU(S050TT1.Drive.MotionJogDirection,0) ,XIC(S050TT1.Drive.CmdJogRev) EQU(S050TT1.Drive.MotionJogDirection,1) ]MAJ(S050TT1SRV,S050TT1.MI.JogPosMAJ,S050TT1.Drive.MotionJogDirection,S050TT1.Drive.MotionJogSpeed,Units per sec,S050TT1.Drive.MotionJogAccel,Units per sec2,S050TT1.Drive.MotionJogDecel,Units per sec2,S-Curve,S050TT1.Drive.MotionJogAccelJerk,S050TT1.Drive.MotionJogDecelJerk,Units per sec3,Disabled,Programmed,0,None);
				N: [XIC(S050TT1.MI.JogPosMAJ.ER) EQU(S050TT1.Drive.MotionJogDirection,0) ,XIC(S050TT1.Drive.JogFwdFailed) XIO(S050TT1.Drive.CmdJogFwd) ]OTE(S050TT1.Drive.JogFwdFailed);
				N: [XIC(S050TT1.MI.JogPosMAJ.ER) EQU(S050TT1.Drive.MotionJogDirection,1) ,XIC(S050TT1.Drive.JogRevFailed) XIO(S050TT1.Drive.CmdJogRev) ]OTE(S050TT1.Drive.JogRevFailed);
				RC: "*************************************************************$N"
				    "Motion Axis Stop$N"
				    "************************************************************$N"
				    "";
				N: [XIC(S050TT1.Drive.CmdStart) XIC(S050TT1.Drive.MoveFailed) ,XIC(S050TT1.Drive.JogActive) [XIC(S050TT1.Drive.JogFwdFailed) ,XIC(S050TT1.Drive.JogRevFailed) ] ,XIO(S050TT1.Drive.RunIntlk.Sts_IntlkOK) ,[XIC(S050TT1.Drive.OvrtrvlFwdHdwMem) ,XIC(S050TT1.Drive.OvrtrvlFwdFault) ] [XIO(S050TT1.Int.ManualMode) ,XIO(S050TT1.Drive.JogRevPB) ] ,[XIC(S050TT1.Drive.OvrtrvlRevHdwMem) ,XIC(S050TT1.Drive.OvrtrvlRevFault) ] [XIO(S050TT1.Int.ManualMode) ,XIO(S050TT1.Drive.JogFwdPB) ] ]OTE(S050TT1.Drive.CmdStop);
				N: XIC(S050TT1.Drive.CmdStop)MAS(S050TT1SRV,S050TT1.MI.MoveMAS,All,Yes,S050TT1.Drive.MotionStopDecelPorc,% of Maximum,Yes,S050TT1.Drive.MotionStopDecelPorcJerk,% of Maximum);
				RC: "*************************************************************$N"
				    "Motion Axis Fault Reset$N"
				    "************************************************************$N"
				    "";
				N: XIC(S050TT1.Int.FaultResetPB)XIC(S050TT1.Drive.DriveFault)MAFR(S050TT1SRV,S050TT1.MI.MAFR);
				RC: "*************************************************************$N"
				    "Motion Servo On$N"
				    "************************************************************$N"
				    "";
				N: XIC(S050TT1.Int.FaultResetPB)XIC(S050TT1.Drive.DriveStoped)XIO(S050TT1.Drive.DriveFault)MSO(S050TT1SRV,S050TT1.MI.MSO);
				RC: "*************************************************************$N"
				    "Motion Axis Shutdown Reset$N"
				    "************************************************************$N"
				    "";
				N: XIC(S050TT1.Drive.DriveShutdown)MASR(S050TT1SRV,S050TT1.MI.MASR);
				RC: "*************************************************************$N"
				    "Motion Axis Stop All$N"
				    "************************************************************$N"
				    "";
				N: [XIO(S050TT1.Drive.Parameters.Sts_PermOK) ,XIO(S050TT1.Drive.ClrtoRotate.Sts_PermOK) ,XIO(S050TT1.Drive.RunIntlk.Sts_IntlkOK) ]MAS(S050TT1SRV,S050TT1.MI.TotalMAS,All,Yes,S050TT1.Drive.MotionStopDecelPorc,% of Maximum,Yes,S050TT1.Drive.MotionStopDecelPorcJerk,% of Maximum);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM S050TT1Sfty (Class := Safety,
	                     MAIN := "s_A00_Main",
	                     MODE := 0,
	                     DisableFlag := 0,
	                     UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE s_A00_Main 
				N: JSR(s_B00_ModStatus,0);
				N: JSR(s_D00_Estop,0);
				N: JSR(s_D01_LC,0);
				N: JSR(s_D02_OPR,0);
				N: JSR(s_D03_SPD,0);
				N: JSR(s_E00_TT1,0);
				N: JSR(s_E01_TL1,0);
				N: JSR(s_E02_TL2,0);
				N: JSR(s_Z00_Summary,0);
		END_ROUTINE

		ROUTINE s_B00_ModStatus (Description := "Safety Module IO Status")
				RC: "************************************************************$N"
				    "S050 TT Module Status$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Module 1 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: XIC(S050TT1SIO1:I.RunMode)OTE(S050TTSfty.Mod1.RunMode);
				N: XIC(S050TT1SIO1:I.Pt00InputStatus)XIC(S050TT1SIO1:I.Pt01InputStatus)XIC(S050TT1SIO1:I.Pt02InputStatus)XIC(S050TT1SIO1:I.Pt03InputStatus)XIC(S050TT1SIO1:I.Pt04InputStatus)XIC(S050TT1SIO1:I.Pt05InputStatus)XIC(S050TT1SIO1:I.Pt06InputStatus)XIC(S050TT1SIO1:I.Pt07InputStatus)OTE(S050TTSfty.Mod1.InputStatus);
				N: XIC(S050TT1SIO1:I.Pt00OutputStatus)XIC(S050TT1SIO1:I.Pt01OutputStatus)XIC(S050TT1SIO1:I.Pt02OutputStatus)XIC(S050TT1SIO1:I.Pt03OutputStatus)OTE(S050TTSfty.Mod1.OutputStatus);
				RC: "************************************************************$N"
				    "Module 2 Status$N"
				    "Run Mode$N"
				    "Input Status$N"
				    "Output Status$N"
				    "************************************************************";
				N: XIC(S050TT1SIO2:I.RunMode)OTE(S050TTSfty.Mod2.RunMode);
				N: XIC(S050TT1SIO2:I.Pt00InputStatus)XIC(S050TT1SIO2:I.Pt01InputStatus)XIC(S050TT1SIO2:I.Pt02InputStatus)XIC(S050TT1SIO2:I.Pt03InputStatus)XIC(S050TT1SIO2:I.Pt04InputStatus)XIC(S050TT1SIO2:I.Pt05InputStatus)XIC(S050TT1SIO2:I.Pt06InputStatus)XIC(S050TT1SIO2:I.Pt07InputStatus)OTE(S050TTSfty.Mod2.InputStatus);
				N: XIC(S050TT1SIO2:I.Pt00OutputStatus)XIC(S050TT1SIO2:I.Pt01OutputStatus)XIC(S050TT1SIO2:I.Pt02OutputStatus)XIC(S050TT1SIO2:I.Pt03OutputStatus)OTE(S050TTSfty.Mod2.OutputStatus);
				RC: "************************************************************$N"
				    "Module Summary$N"
				    "************************************************************";
				N: XIC(S050TTSfty.Mod1.RunMode)XIC(S050TTSfty.Mod2.RunMode)OTE(S050TTSfty.AllModRunMode);
				N: XIC(S050TTSfty.Mod1.InputStatus)XIC(S050TTSfty.Mod2.InputStatus)OTE(S050TTSfty.AllModInStatusOk);
				N: XIC(S050TTSfty.Mod1.OutputStatus)XIC(S050TTSfty.Mod2.OutputStatus)OTE(S050TTSfty.AllModOutStatusOk);
		END_ROUTINE

		ROUTINE s_D00_Estop 
				RC: "************************************************************$N"
				    "FRM0XX Emergency Stop$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "E-Stop$N"
				    "FRM0XX E1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S050TT1SIO1:I.Pt00Data)OTE(S050TTSfty.E1.EstpChnA);
				N: XIC(S050TT1SIO1:I.Pt01Data)OTE(S050TTSfty.E1.EstpChnB);
				N: [XIC(S005Sfty.Oper1SwipeStart) ,XIC(sZ050_080.AnyGateRstPB) ]OTE(S050TTSfty.E1.EstpInstCR);
				N: XIC(sZ050_080.SftyFltRst)OTE(S050TTSfty.E1.EstpInstFltRst);
				N: XIC(S050TTSfty.AllModRunMode)ESTOP(S050TTSfty.E1.Estop,MANUAL,S050TTSfty.E1.EstpChnA,S050TTSfty.E1.EstpChnB,S050TTSfty.E1.EstpInstCR,S050TTSfty.E1.EstpInstFltRst);
		END_ROUTINE

		ROUTINE s_D01_LC 
				RC: "************************************************************$N"
				    "Safety Light Curtains and Scanners$N"
				    "************************************************************";
				N: NOP();
				N: OTE(S050TTSfty.OperLS.LC1Installed)OTU(S050TTSfty.OperLS.LC2Installed)OTU(S050TTSfty.OperLS.LC3Installed)OTE(S050TTSfty.OperLS.SCN1_1Installed)OTE(S050TTSfty.OperLS.SCN1_2Installed)OTE(S050TTSfty.OperLS.SCN2_1Installed)OTE(S050TTSfty.OperLS.SCN2_2Installed);
				RC: "************************************************************$N"
				    "LC Instruction$N"
				    "Input Mapping$N"
				    "************************************************************$N"
				    "Edit all required Input mapping rungs with the correct safety input$N"
				    "Edit LC Muting as required. Check Rung description for details";
				N: NOP();
				RC: "************************************************************$N"
				    "S050TT LC1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S050TT1SIO1:I.Pt02Data)OTE(S050TTSfty.OperLS.LC1ChnAInp);
				N: XIC(S050TT1SIO1:I.Pt03Data)OTE(S050TTSfty.OperLS.LC1ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTU(S050TTSfty.OperLS.LC1MuteInstalled) ,XIC(sEdit.Bit) XIC(S050TTSfty.OperLS.LC1MuteInstalled) OTE(S050TTSfty.OperLS.LC1Mute) ];
				RC: "************************************************************$N"
				    "S050TT Scanner 1_1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S005TL1SIO2:I.Pt00Data)OTE(S050TTSfty.OperLS.SCN1_1ChnAInp);
				N: XIC(S005TL1SIO2:I.Pt01Data)OTE(S050TTSfty.OperLS.SCN1_1ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTE(S050TTSfty.OperLS.SCN1_1MuteInstalled) ,XIC(S050TTSfty.SftyPosDev.SPD1.O1) XIC(S050TTSfty.OperLS.SCN1_1MuteInstalled) OTE(S050TTSfty.OperLS.SCN1_1Mute) ];
				RC: "************************************************************$N"
				    "S050TT Scanner 1_2$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S005TL1SIO2:I.Pt02Data)OTE(S050TTSfty.OperLS.SCN1_2ChnAInp);
				N: XIC(S005TL1SIO2:I.Pt03Data)OTE(S050TTSfty.OperLS.SCN1_2ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTE(S050TTSfty.OperLS.SCN2_1MuteInstalled) ,XIC(S050TTSfty.SftyPosDev.SPD1.O1) XIC(S050TTSfty.OperLS.SCN2_1MuteInstalled) OTE(S050TTSfty.OperLS.SCN2_1Mute) ];
				RC: "************************************************************$N"
				    "S005 Scanner 2_1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S050TT1SIO1:I.Pt04Data)OTE(S050TTSfty.OperLS.SCN2_1ChnAInp);
				N: XIC(S050TT1SIO1:I.Pt05Data)OTE(S050TTSfty.OperLS.SCN2_1ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTU(S050TTSfty.OperLS.SCN1_2MuteInstalled) ,XIC(sEdit.Bit) XIC(S050TTSfty.OperLS.SCN1_2MuteInstalled) OTE(S050TTSfty.OperLS.SCN1_2Mute) ];
				RC: "************************************************************$N"
				    "S005 Scanner 2_1$N"
				    "Map Inputs$N"
				    "************************************************************";
				N: XIC(S050TT1SIO1:I.Pt06Data)OTE(S050TTSfty.OperLS.SCN2_2ChnAInp);
				N: XIC(S050TT1SIO1:I.Pt07Data)OTE(S050TTSfty.OperLS.SCN2_2ChnBInp);
				RC: "************************************************************$N"
				    "LC Muting$N"
				    "$N"
				    "Set $QMuteInstalled$Q Bit to OTE if muting exists$N"
				    "$N"
				    "Change sEdit.Bit to required muting conditions.$N"
				    "Every muting conditions shall be controlled by a safety instruction.$N"
				    "$N"
				    "Mutted devices require Yellow Indicator light$N"
				    "************************************************************";
				N: [OTU(S050TTSfty.OperLS.SCN2_2MuteInstalled) ,XIC(sEdit.Bit) XIC(S050TTSfty.OperLS.SCN2_2MuteInstalled) OTE(S050TTSfty.OperLS.SCN2_2Mute) ];
				RC: "************************************************************$N"
				    "LC Instruction$N"
				    "$N"
				    "DO NOT EDIT AFTER THIS POINT$N"
				    "************************************************************$N"
				    "";
				N: NOP();
				N: [XIC(S050TTSfty.OperLS.LC1ChnAInp) ,XIC(S050TTSfty.OperLS.LC1Mute) XIC(S050TTSfty.OperLS.LC1MuteInstalled) ]OTE(S050TTSfty.OperLS.LC1ChnAInst);
				N: [XIC(S050TTSfty.OperLS.LC1ChnBInp) ,XIC(S050TTSfty.OperLS.LC1Mute) XIC(S050TTSfty.OperLS.LC1MuteInstalled) ]OTE(S050TTSfty.OperLS.LC1ChnBInst);
				N: XIC(S050TTSfty.Oper1SwipeStart)ONS(S050TTSfty.OperLS.LC1InsCROns)OTE(S050TTSfty.OperLS.LC1InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S050TTSfty.OperLS.LC1FltRst);
				N: XIC(S050TTSfty.OperLS.LC1Installed)XIC(S050TTSfty.AllModRunMode)LC(S050TTSfty.OperLS.LC1,MANUAL,S050TTSfty.OperLS.LC1ChnAInst,S050TTSfty.OperLS.LC1ChnBInst,20,S050TTSfty.OperLS.LC1Mute,S050TTSfty.OperLS.LC1InsCR,S050TTSfty.OperLS.LC1FltRst);
				N: [XIC(S050TTSfty.OperLS.SCN1_1ChnAInp) ,XIC(S050TTSfty.OperLS.SCN1_1MuteInstalled) XIC(S050TTSfty.OperLS.SCN1_1Mute) ]OTE(S050TTSfty.OperLS.SCN1_1ChnAInst);
				N: [XIC(S050TTSfty.OperLS.SCN1_1ChnBInp) ,XIC(S050TTSfty.OperLS.SCN1_1MuteInstalled) XIC(S050TTSfty.OperLS.SCN1_1Mute) ]OTE(S050TTSfty.OperLS.SCN1_1ChnBInst);
				N: XIC(S050TTSfty.Oper1SwipeStart)OTE(S050TTSfty.OperLS.SCN1_1InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S050TTSfty.OperLS.SCN1_1FltRst);
				N: XIC(S050TTSfty.OperLS.SCN1_1Installed)XIC(S050TTSfty.AllModRunMode)LC(S050TTSfty.OperLS.SCN1_1,MANUAL,S050TTSfty.OperLS.SCN1_1ChnAInst,S050TTSfty.OperLS.SCN1_1ChnBInst,20,S050TTSfty.OperLS.SCN1_1Mute,S050TTSfty.OperLS.SCN1_1InsCR,S050TTSfty.OperLS.SCN1_1FltRst);
				N: [XIC(S050TTSfty.OperLS.SCN1_2ChnAInp) ,XIC(S050TTSfty.OperLS.SCN1_2MuteInstalled) XIC(S050TTSfty.OperLS.SCN1_2Mute) ]OTE(S050TTSfty.OperLS.SCN1_2ChnAInst);
				N: [XIC(S050TTSfty.OperLS.SCN1_2ChnBInp) ,XIC(S050TTSfty.OperLS.SCN1_2MuteInstalled) XIC(S050TTSfty.OperLS.SCN1_2Mute) ]OTE(S050TTSfty.OperLS.SCN1_2ChnBInst);
				N: XIC(S050TTSfty.Oper1SwipeStart)OTE(S050TTSfty.OperLS.SCN1_2InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S050TTSfty.OperLS.SCN1_2FltRst);
				N: XIC(S050TTSfty.OperLS.SCN1_2Installed)XIC(S050TTSfty.AllModRunMode)LC(S050TTSfty.OperLS.SCN1_2,MANUAL,S050TTSfty.OperLS.SCN1_2ChnAInst,S050TTSfty.OperLS.SCN1_2ChnBInst,20,S050TTSfty.OperLS.SCN1_2Mute,S050TTSfty.OperLS.SCN1_2InsCR,S050TTSfty.OperLS.SCN1_2FltRst);
				N: [XIC(S050TTSfty.OperLS.SCN2_1ChnAInp) ,XIC(S050TTSfty.OperLS.SCN2_1MuteInstalled) XIC(S050TTSfty.OperLS.SCN2_1Mute) ]OTE(S050TTSfty.OperLS.SCN2_1ChnAInst);
				N: [XIC(S050TTSfty.OperLS.SCN2_1ChnBInp) ,XIC(S050TTSfty.OperLS.SCN2_1MuteInstalled) XIC(S050TTSfty.OperLS.SCN2_1Mute) ]OTE(S050TTSfty.OperLS.SCN2_1ChnBInst);
				N: XIC(S050TTSfty.Oper1SwipeStart)OTE(S050TTSfty.OperLS.SCN2_1InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S050TTSfty.OperLS.SCN2_1FltRst);
				N: XIC(S050TTSfty.OperLS.SCN2_1Installed)XIC(S050TTSfty.AllModRunMode)LC(S050TTSfty.OperLS.SCN2_1,MANUAL,S050TTSfty.OperLS.SCN2_1ChnAInst,S050TTSfty.OperLS.SCN2_1ChnBInst,20,S050TTSfty.OperLS.SCN2_1Mute,S050TTSfty.OperLS.SCN2_1InsCR,S050TTSfty.OperLS.SCN2_1FltRst);
				N: [XIC(S050TTSfty.OperLS.SCN2_2ChnAInp) ,XIC(S050TTSfty.OperLS.SCN2_2MuteInstalled) XIC(S050TTSfty.OperLS.SCN2_2Mute) ]OTE(S050TTSfty.OperLS.SCN2_2ChnAInst);
				N: [XIC(S050TTSfty.OperLS.SCN2_2ChnBInp) ,XIC(S050TTSfty.OperLS.SCN2_2MuteInstalled) XIC(S050TTSfty.OperLS.SCN2_2Mute) ]OTE(S050TTSfty.OperLS.SCN2_2ChnBInst);
				N: XIC(S050TTSfty.Oper1SwipeStart)OTE(S050TTSfty.OperLS.SCN2_2InsCR);
				N: XIC(sZ005_040.SftyFltRst)OTE(S050TTSfty.OperLS.SCN2_2FltRst);
				N: XIC(S050TTSfty.OperLS.SCN2_2Installed)XIC(S050TTSfty.AllModRunMode)LC(S050TTSfty.OperLS.SCN2_2,MANUAL,S050TTSfty.OperLS.SCN2_2ChnAInst,S050TTSfty.OperLS.SCN2_2ChnBInst,20,S050TTSfty.OperLS.SCN2_2Mute,S050TTSfty.OperLS.SCN2_2InsCR,S050TTSfty.OperLS.SCN2_2FltRst);
		END_ROUTINE

		ROUTINE s_D02_OPR 
				RC: "************************************************************$N"
				    "FRM050 Cycle Start$N"
				    "Finger Swipe$N"
				    "************************************************************";
				N: NOP();
				N: XIC(S050TTSfty.Oper1Instd)FingerSwipe(S050TTSfty.OPR1,S050TTSfty.Oper1SwipeStart);
				N: XIC(S050TTSfty.Oper2Instd)FingerSwipe(S050TTSfty.OPR2,S050TTSfty.Oper2SwipeStart);
		END_ROUTINE

		ROUTINE s_D03_SPD 
				RC: "************************************************************$N"
				    "FRM050 TT Safety Position Devices$N"
				    "$N"
				    "$N"
				    " --l l-- Replace the referance bit  for feedback installed and delate edit.bit$N"
				    "************************************************************";
				N: NOP();
				N: XIC(sEdit.Bit)XIC(S050TT1SIO2:I.Pt06Data)OTE(S050TTSfty.SftyPosDev.SPD1ChnA);
				N: XIC(sEdit.Bit)XIC(S050TT1SIO2:I.Pt07Data)OTE(S050TTSfty.SftyPosDev.SPD1ChnB);
				N: [XIC(S050TTSfty.Oper1SwipeStart) ,XIC(sZ050_080.AnyGateRstPB) ]ONS(S050TTSfty.SftyPosDev.SPD1InsCROns)OTE(S050TTSfty.SftyPosDev.SPD1InsCR);
				N: XIC(sZ050_080.SftyFltRst)OTE(S050TTSfty.SftyPosDev.SPD1InsFltRst);
				N: XIC(S050TTSfty.AllModRunMode)RIN(S050TTSfty.SftyPosDev.SPD1,AUTOMATIC,S050TTSfty.SftyPosDev.SPD1ChnA,S050TTSfty.SftyPosDev.SPD1ChnB,S050TTSfty.SftyPosDev.SPD1InsCR,S050TTSfty.SftyPosDev.SPD1InsFltRst);
		END_ROUTINE

		ROUTINE s_E00_TT1 
				RC: "***********************************************************$N"
				    "TT Setup$N"
				    "TT Faulted$N"
				    "Setup for diferet driver using in the Turn Table$N"
				    "***********************************************************$N"
				    "";
				N: [XIC(S050TT1SRV1:SI.SafetyFault) ,XIC(S050TT1SRV1:SI.ConnectionFaulted) ]OTE(S050TTSfty.Fault);
				RC: "***********************************************************$N"
				    "TT Enable safety ok$N"
				    "***********************************************************$N"
				    "";
				N: XIO(S050TTSfty.AnyBypassSwitchOn)XIC(sZ050_080.AllEStopsOk)XIC(sZ050_080.AllGatesOk)XIC(sZ050_080.EnExLSActive)XIC(sZ050_080.PerimeterSafe)XIC(S050TTSfty.AllStaLtScrnOK)XIC(S050TTSfty.LoadAssistClear)OTE(S050TTSfty.Enable);
				RC: "***********************************************************$N"
				    "TT Enable with Bypass Switch selected$N"
				    "***********************************************************$N"
				    "";
				N: XIC(sZ050_080.AllEStopsOk)XIC(sZ050_080.AnyBypassSwOn)OTE(S050TTSfty.EnblBypassSwitch);
				RC: "***********************************************************$N"
				    "TT Ready to Run Safe$N"
				    "***********************************************************$N"
				    "";
				N: XIC(S050TTSfty.Enable)XIC(S050TT1SRV1:SI.RunMode)XIO(S050TT1SRV1:SI.TorqueDisabled)XIO(S050TTSfty.Fault)OTE(S050TTSfty.RdytoRun);
				RC: "***********************************************************$N"
				    "TT  safe torque OK$N"
				    "***********************************************************$N"
				    "";
				N: XIC(S050TTSfty.Enable)XIO(S050TT1SRV1:SI.TorqueDisabled)OTE(S050TTSfty.SafeTorqueOff);
				N: XIC(S050TTSfty.SafeTorqueOff)XIC(S050TTSfty.Fault)OTE(S050TTSfty.ResetReq);
				RC: "************************************************************$N"
				    "Turn Table Servo Drive$N"
				    "************************************************************";
				N: XIC(S050TTSfty.ResetReq)XIC(S050TTSfty.AnyResetPB)OTE(S050TT1SRV1:SO.Reset);
				N: XIC(S050TTSfty.SafeTorqueOff)OTE(S050TT1SRV1:SO.SafeTorqueOff);
		END_ROUTINE

		ROUTINE s_E01_TL1 
				RC: "************************************************************$N"
				    "FRM050 TL1$N"
				    "************************************************************$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(sZ050_080.AllEStopsOk)[XIC(sZ050_080.PerimeterSafe) XIC(S050TTSfty.AllStaLtScrnOK) ,XIC(S050TTSfty.AnyBypassSwitchOn) ][XIC(S050TTSfty.FX1.MotionEnbl) ,XIC(S050TTSfty.FX1.SoftStartPwrOn) ]OTE(S050TTSfty.FX1.SoftStartPwrOn);
				N: XIC(sZ050_080.PowerEnbld)XIC(S050TTSfty.AllStaLtScrnOK)OTE(S050TTSfty.FX1.MotionEnbl);
				RC: "Soft Start Valve Power Output$N"
				    "************************************************************";
				N: XIC(S050TTSfty.FX1.SoftStartPwrOn)[OTE(S050TT1SIO1:O.Pt00Data) ,OTE(S050TT1SIO1:O.Pt01Data) ];
				RC: "Valve Manifold DC Power Output$N"
				    "************************************************************";
				N: XIC(S050TTSfty.FX1.MotionEnbl)[OTE(S050TT1SIO1:O.Pt02Data) ,OTE(S050TT1SIO1:O.Pt03Data) ];
		END_ROUTINE

		ROUTINE s_E02_TL2 
				RC: "************************************************************$N"
				    "FRM050 TL2$N"
				    "************************************************************$N"
				    "$N"
				    "";
				N: NOP();
				N: XIC(sZ050_080.AllEStopsOk)[XIC(sZ050_080.PerimeterSafe) XIC(S050TTSfty.AllStaLtScrnOK) ,XIC(S050TTSfty.AnyBypassSwitchOn) ][XIC(S050TTSfty.FX2.MotionEnbl) ,XIC(S050TTSfty.FX2.SoftStartPwrOn) ]OTE(S050TTSfty.FX2.SoftStartPwrOn);
				N: XIC(sZ050_080.PowerEnbld)XIC(S050TTSfty.AllStaLtScrnOK)OTE(S050TTSfty.FX2.MotionEnbl);
				RC: "Soft Start Valve Power Output$N"
				    "************************************************************";
				N: XIC(S050TTSfty.FX2.SoftStartPwrOn)[OTE(S050TT1SIO1:O.Pt04Data) ,OTE(S050TT1SIO1:O.Pt05Data) ];
				RC: "Valve Manifold DC Power Output$N"
				    "************************************************************";
				N: XIC(S050TTSfty.FX2.MotionEnbl)[OTE(S050TT1SIO1:O.Pt06Data) ,OTE(S050TT1SIO1:O.Pt07Data) ];
		END_ROUTINE

		ROUTINE s_Z00_Summary 
				RC: "***********************************************************$N"
				    "Turn Table Hardware Setup$N"
				    "OTL Equipment Installed$N"
				    "OTU Equipment no installed$N"
				    "***********************************************************$N"
				    "";
				N: OTL(S050TTSfty.DiscInstalled)OTU(S050TTSfty.SftyPinsInstalled);
				N: OTE(S050TTSfty.Oper1Instd)OTU(S050TTSfty.Oper2Instd);
				N: OTU(S050TTSfty.LoadAssistInstld);
				RC: "*****************************************************$N"
				    "sEdit.bit Replace for the Disconector Feedback$N"
				    "******************************************************";
				N: [XIC(sEdit.Bit) ,XIO(S050TTSfty.DiscInstalled) ]OTE(S050TTSfty.All_DiscSwitch_OK);
				RC: "*****************************************************$N"
				    "sEdit.bit Replace for the Safety Pin  Feedback$N"
				    "******************************************************";
				N: [XIC(sEdit.Bit) ,XIO(S050TTSfty.SftyPinsInstalled) ]OTE(S050TTSfty.SftyPinsOk);
				N: XIC(sSftyFromStd.AutoCycleReady)OTE(S050TTSfty.AutoCycleReady);
				N: XIC(sSftyFromStd.AutoCycleOn)OTE(S050TTSfty.AutoCycleOn);
				N: [XIO(S050TTSfty.OperLS.LC1.LCB) ,XIO(S050TTSfty.OperLS.LC1Installed) ][XIO(S050TTSfty.OperLS.LC2.LCB) ,XIO(S050TTSfty.OperLS.LC2Installed) ][XIO(S050TTSfty.OperLS.LC3.LCB) ,XIO(S050TTSfty.OperLS.LC3Installed) ][XIO(S050TTSfty.OperLS.SCN1_1.LCB) ,XIO(S050TTSfty.OperLS.SCN1_1Installed) ][XIO(S050TTSfty.OperLS.SCN1_2.LCB) ,XIO(S050TTSfty.OperLS.SCN1_2Installed) ][XIO(S050TTSfty.OperLS.SCN2_1.LCB) ,XIO(S050TTSfty.OperLS.SCN2_1Installed) ][XIO(S050TTSfty.OperLS.SCN2_2.LCB) ,XIO(S050TTSfty.OperLS.SCN2_2Installed) ]OTE(S050TTSfty.StaZn1NotBlkd);
				N: [XIC(S050TTSfty.OperLS.LC1.O1) ,XIO(S050TTSfty.OperLS.LC1Installed) ][XIC(S050TTSfty.OperLS.LC2.O1) ,XIO(S050TTSfty.OperLS.LC2Installed) ][XIC(S050TTSfty.OperLS.LC3.O1) ,XIO(S050TTSfty.OperLS.LC3Installed) ][XIC(S050TTSfty.OperLS.SCN1_1.O1) ,XIO(S050TTSfty.OperLS.SCN1_1Installed) ][XIC(S050TTSfty.OperLS.SCN1_2.O1) ,XIO(S050TTSfty.OperLS.SCN1_2Installed) ][XIC(S050TTSfty.OperLS.SCN2_1.O1) ,XIO(S050TTSfty.OperLS.SCN2_1Installed) ][XIC(S050TTSfty.OperLS.SCN2_2.O1) ,XIO(S050TTSfty.OperLS.SCN2_2Installed) ]OTE(S050TTSfty.StaZn1Active);
				N: OTE(S050TTSfty.StaZn2NotBlkd);
				N: OTE(S050TTSfty.StaZn2Active);
				N: OTE(S050TTSfty.StaZn3NotBlkd);
				N: OTE(S050TTSfty.StaZn3Active);
				N: XIC(S050TTSfty.StaZn1Active)XIC(S050TTSfty.StaZn2Active)XIC(S050TTSfty.StaZn3Active)OTE(S050TTSfty.AllStaLtScrnOK);
				N: [XIC(sEdit.Bit) ,XIO(S050TTSfty.LoadAssistInstld) ]OTE(S050TTSfty.LoadAssistClear);
				N: XIC(S050TTSfty.LoadAssistInstld)OTE(S050TTSfty.LoadAssistActive);
				N: XIC(S050TTSfty.Oper1Instd)XIC(sEdit.Bit)OTE(S050TTSfty.Oper1SwipeStart);
				N: XIC(S050TTSfty.Oper2Instd)XIC(sEdit.Bit)OTE(S050TTSfty.Oper2SwipeStart);
				N: XIC(sSftyFromStd.ClearToUnlock.7)OTE(S050TTSfty.ClearToUnlock);
				RC: "***********************************************************$N"
				    "PB Status$N"
				    "Add or remove devices  to use in the Llgic$N"
				    "***********************************************************$N"
				    "";
				N: XIC(sZ050_080.AnyPowerEnblPB)OTE(S050TTSfty.AnyPowerOnPB);
				N: XIC(sZ050_080.StaGateStartPB)OTE(S050TTSfty.AnyStartPB);
				N: XIC(sZ050_080.StaGateRstPB)OTE(S050TTSfty.AnyResetPB);
				N: XIC(sZ050_080.AnyBypassSwOn)OTE(S050TTSfty.AnyBypassSwitchOn);
				N: XIC(sZ050_080.AnyOpenGateReqPB)OTE(S050TTSfty.AnyOpenGateReqPB);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM sZ005_040 (Description := "Zone Safety Task",
	                   Class := Safety,
	                   MAIN := "s_A00_Main",
	                   MODE := 0,
	                   DisableFlag := 0,
	                   UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE s_A00_Main 
				N: JSR(s_C00_Common,0);
				N: JSR(s_D00_Gates,0);
				N: JSR(s_Z00_ZoneSftyIn,0);
				N: JSR(s_Z01_ZoneSftySum,0);
				N: JSR(s_Z02_ZoneSftyOut,0);
		END_ROUTINE

		ROUTINE s_C00_Common 
				RC: "************************************************************$N"
				    "Constants$N"
				    "************************************************************";
				N: [XIC(sAlways_On) ,XIO(sAlways_On) ]OTE(sAlways_On);
				N: XIC(sAlways_Off)XIO(sAlways_Off)OTE(sAlways_Off);
				N: XIC(sEdit.Bit)OTE(sZ005_040.LightTest);
				N: XIC(sSftyFromStd.FlasherHi)OTE(sZ005_040.sFlasher);
				N: XIC(sSftyFromStd.SafetyInsFltRstPB)OTE(sZ005_040.SftyFltRst);
		END_ROUTINE

		ROUTINE s_D00_Gates (Description := "Safety Gate Routine")
				RC: "************************************************************$N"
				    "Safety Gates Inputs$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Add inpSysAutoCycleReady OTE for all applicable Gates $N"
				    "************************************************************";
				N: XIC(sZ005_040.AutoCycleReady)[OTE(S007GS1.GateAOI.inpSysAutoCycleReady) ,OTE(S010GS1.GateAOI.inpSysAutoCycleReady) ,OTE(S030GS1.GateAOI.inpSysAutoCycleReady) ,OTE(S030GS2.GateAOI.inpSysAutoCycleReady) ];
				RC: "************************************************************$N"
				    "Add inpSysAutoCycleOn OTE for all applicable Gates $N"
				    "************************************************************";
				N: XIC(sZ005_040.AutoCycleOn)[OTE(S007GS1.GateAOI.inpSysAutoCycleOn) ,OTE(S010GS1.GateAOI.inpSysAutoCycleOn) ,OTE(S030GS1.GateAOI.inpSysAutoCycleOn) ,OTE(S030GS2.GateAOI.inpSysAutoCycleOn) ];
				RC: "************************************************************$N"
				    "Add inpSysFaulted OTE for all applicable Gates $N"
				    "************************************************************";
				N: XIC(sZ005_040.Faulted)[OTE(S007GS1.GateAOI.inpSysFaulted) ,OTE(S010GS1.GateAOI.inpSysFaulted) ,OTE(S030GS1.GateAOI.inpSysFaulted) ,OTE(S030GS2.GateAOI.inpSysFaulted) ];
				RC: "************************************************************$N"
				    "Add inpClearToUnlock OTE for all applicable Gates $N"
				    "************************************************************";
				N: XIC(sZ005_040.ClearToUnlock)[OTE(S007GS1.GateAOI.inpClearToUnlock) ,OTE(S010GS1.GateAOI.inpClearToUnlock) ,OTE(S030GS1.GateAOI.inpClearToUnlock) ,OTE(S030GS2.GateAOI.inpClearToUnlock) ];
				RC: "************************************************************$N"
				    "Safety Gates$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Always OTU unless specified and approved by Lucid Motors Controls $N"
				    "************************************************************";
				N: OTU(S007GS1.DCSTL_TestReq);
				RC: "************************************************************$N"
				    "Safety Gate AOI$N"
				    "************************************************************";
				N: XIC(S007GS1:I.RunMode)Gate(S007GS1.GateAOI,S007GS1:I,S007GS1:O,S007GS1.DCSTL_TestReq,sZ005_040.PowerEnblSetup,sZ005_040.PowerEnbld,S007GS1.GateAOI.inpSysAutoCycleReady,S007GS1.GateAOI.inpSysAutoCycleOn,S007GS1.GateAOI.inpSysFaulted,S007GS1.GateAOI.inpClearToUnlock,sSftyFromStd.FlasherHi,sSftyFromStd.FlasherMid,sSftyFromStd.FlasherLow);
				RC: "************************************************************$N"
				    "Always OTU unless specified and approved by Lucid Motors Controls $N"
				    "************************************************************";
				N: OTU(S010GS1.DCSTL_TestReq);
				RC: "************************************************************$N"
				    "Safety Gate AOI$N"
				    "************************************************************";
				N: XIC(S010GS1:I.RunMode)Gate(S010GS1.GateAOI,S010GS1:I,S010GS1:O,S010GS1.DCSTL_TestReq,sZ005_040.PowerEnblSetup,sZ005_040.PowerEnbld,S010GS1.GateAOI.inpSysAutoCycleReady,S010GS1.GateAOI.inpSysAutoCycleOn,S010GS1.GateAOI.inpSysFaulted,S010GS1.GateAOI.inpClearToUnlock,sSftyFromStd.FlasherHi,sSftyFromStd.FlasherMid,sSftyFromStd.FlasherLow);
				RC: "************************************************************$N"
				    "Always OTU unless specified and approved by Lucid Motors Controls $N"
				    "************************************************************";
				N: OTU(S030GS1.DCSTL_TestReq);
				RC: "************************************************************$N"
				    "Safety Gate AOI$N"
				    "************************************************************";
				N: XIC(S030GS1:I.RunMode)Gate(S030GS1.GateAOI,S030GS1:I,S030GS1:O,S030GS1.DCSTL_TestReq,sZ005_040.PowerEnblSetup,sZ005_040.PowerEnbld,S030GS1.GateAOI.inpSysAutoCycleReady,S030GS1.GateAOI.inpSysAutoCycleOn,S030GS1.GateAOI.inpSysFaulted,S030GS1.GateAOI.inpClearToUnlock,sSftyFromStd.FlasherHi,sSftyFromStd.FlasherMid,sSftyFromStd.FlasherLow);
				RC: "************************************************************$N"
				    "Always OTU unless specified and approved by Lucid Motors Controls $N"
				    "************************************************************";
				N: OTU(S030GS2.DCSTL_TestReq);
				RC: "************************************************************$N"
				    "Safety Gate AOI$N"
				    "************************************************************";
				N: XIC(S030GS2:I.RunMode)Gate(S030GS2.GateAOI,S030GS2:I,S030GS2:O,S030GS2.DCSTL_TestReq,sZ005_040.PowerEnblSetup,sZ005_040.PowerEnbld,S030GS2.GateAOI.inpSysAutoCycleReady,S030GS2.GateAOI.inpSysAutoCycleOn,S030GS2.GateAOI.inpSysFaulted,S030GS2.GateAOI.inpClearToUnlock,sSftyFromStd.FlasherHi,sSftyFromStd.FlasherMid,sSftyFromStd.FlasherLow);
		END_ROUTINE

		ROUTINE s_Z00_ZoneSftyIn (Description := "Zone Safety Input Mapping")
				RC: "************************************************************$N"
				    "Zone Safety Inputs Mapping$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Add all zone gates stsEstopNormal signal$N"
				    "************************************************************";
				N: XIC(S007GS1.GateAOI.stsEstopNormal)XIC(S010GS1.GateAOI.stsEstopNormal)XIC(sZ050_080.GateEStopsOk)OTE(sZ005_040.GateEStopsOk);
				RC: "************************************************************$N"
				    "Adjacent Zone Gates$N"
				    "Delete XICs if no safety Interlocks exist$N"
				    "************************************************************";
				N: [XIC(PrevSftyIn.EStopsOk) XIC(NextSftyIn.EStopsOk) XIC(sZ050_080.AdjEStopsOk) ,XIO(sEdit.Bit) ]OTE(sZ005_040.AdjEStopsOk);
				RC: "************************************************************$N"
				    "Add all Operator Estops$N"
				    "Operator Load/Unload Stations$N"
				    "Rack Load/Unload Stations$N"
				    "************************************************************";
				N: XIC(S005Sfty.E1.Estop.O1)XIC(S015RT1Sfty.E1.Estop.O1)XIC(sZ050_080.OperEStopsOk)OTE(sZ005_040.OperEStopsOk);
				RC: "************************************************************$N"
				    "Add all Operator TT Estops$N"
				    "$N"
				    "************************************************************";
				N: XIC(S050TTSfty.E1.Estop.O1)OTE(sZ005_040.TTEStopsOK);
				RC: "************************************************************$N"
				    "Add all Operator CNV Estops$N"
				    "$N"
				    "************************************************************";
				N: XIC(S001CNV1Sfty.All_Estop_OK)OTE(sZ005_040.CNVEStopsOK);
				RC: "************************************************************$N"
				    "Add all Robot Estops$N"
				    "************************************************************$N"
				    "Use SxxxRBxxSfty.Int.EStopPBOk";
				N: XIC(S005RB01Sfty.Int.EStopPBOk)XIC(S010RB01Sfty.Int.EStopPBOk)XIC(S015RB01Sfty.Int.EStopPBOk)XIC(S020RB01Sfty.Int.EStopPBOk)OTE(sZ005_040.RbtEStops1Ok);
				RC: "************************************************************$N"
				    "Add all Robot Estops$N"
				    "************************************************************";
				N: XIC(S030RB01Sfty.Int.EStopPBOk)XIC(S030RB02Sfty.Int.EStopPBOk)XIC(S040RB01Sfty.Int.EStopPBOk)XIC(S040RB02Sfty.Int.EStopPBOk)OTE(sZ005_040.RbtEStops2Ok);
				RC: "************************************************************$N"
				    "Add all Robot Safety Interface Enabled signal$N"
				    "************************************************************";
				N: XIC(S005RB01Sfty.Int.SftyIntEnbld)XIO(S005RB01Sfty.Int.SftyChanged)XIC(S010RB01Sfty.Int.SftyIntEnbld)XIO(S010RB01Sfty.Int.SftyChanged)XIC(S020RB01Sfty.Int.SftyIntEnbld)XIO(S020RB01Sfty.Int.SftyChanged)OTE(sZ005_040.RbtSftyEnbld1);
				RC: "************************************************************$N"
				    "Add all Robot Safety Interface Enabled signal$N"
				    "************************************************************";
				N: XIC(S030RB01Sfty.Int.SftyIntEnbld)XIO(S030RB01Sfty.Int.SftyChanged)XIC(S040RB01Sfty.Int.SftyIntEnbld)XIO(S040RB01Sfty.Int.SftyChanged)OTE(sZ005_040.RbtSftyEnbld2);
				RC: "************************************************************$N"
				    "Safety Gates PushButtons$N"
				    "************************************************************";
				N: [XIC(S007GS1.GateAOI.stsPowerOnPushed) ,XIC(S010GS1.GateAOI.stsPowerOnPushed) ]OTE(sZ005_040.StaPowerEnblPB);
				N: [XIC(S007GS1.GateAOI.stsBypassSwitchOn) ,XIC(S010GS1.GateAOI.stsBypassSwitchOn) ]OTE(sZ005_040.AnyBypassSwOn);
				N: [XIC(S007GS1.GateAOI.stsResetPushed) ,XIC(S010GS1.GateAOI.stsResetPushed) ]OTE(sZ005_040.StaGateRstPB);
				N: [XIC(S007GS1.GateAOI.stsStartPushed) ,XIC(S010GS1.GateAOI.stsStartPushed) ]OTE(sZ005_040.StaGateStartPB);
				N: [XIC(S007GS1.GateAOI.stsOpenGateRequested) ,XIC(S010GS1.GateAOI.stsOpenGateRequested) ]OTE(sZ005_040.StaOpenGateReqPB);
				RC: "************************************************************$N"
				    "Add all zone entry Safety Device$N"
				    "************************************************************";
				N: OTE(sZ005_040.EntryLSActive);
				RC: "************************************************************$N"
				    "Add all zone exit Safety Device$N"
				    "************************************************************";
				N: OTE(sZ005_040.ExitLSActive);
				RC: "************************************************************$N"
				    "Add all zone and station access lightscreens or scanners$N"
				    "************************************************************";
				N: XIC(S015RT1Sfty.AccessLS.LC1.O1)XIC(S015RT2Sfty.AccessLS.LC1.O1)OTE(sZ005_040.AccessLSActive);
				RC: "************************************************************$N"
				    "Add all Gate Locked Signals$N"
				    "************************************************************";
				N: XIC(S007GS1.GateAOI.stsGateLocked)XIC(S010GS1.GateAOI.stsGateLocked)XIC(S030GS1.GateAOI.stsGateLocked)OTE(sZ005_040.StaGatesOk);
				RC: "************************************************************$N"
				    "Adjacent Zone Gates locked interlocks$N"
				    "Delete XICs if no safety Interlocks exist$N"
				    "************************************************************";
				N: [XIC(PrevSftyIn.AllGatesOk) XIC(NextSftyIn.AllGatesOk) ,XIO(sEdit.Bit) ]OTE(sZ005_040.AdjGatesOk);
				RC: "************************************************************$N"
				    "Add all required Clear to Unlock signals$N"
				    "************************************************************";
				N: XIC(S005Sfty.ClearToUnlock)XIC(S010Sfty.ClearToUnlock)XIC(S015RT1Sfty.ClearToUnlock)XIC(S015RT2Sfty.ClearToUnlock)XIC(S017Sfty.ClearToUnlock)XIC(S018Sfty.ClearToUnlock)XIC(S019Sfty.ClearToUnlock)XIC(S020Sfty.ClearToUnlock)XIC(S030Sfty.ClearToUnlock)XIC(S040Sfty.ClearToUnlock)[XIC(PrevSftyIn.ClearToUnlock) XIC(NextSftyIn.ClearToUnlock) ,XIO(sEdit.Bit) ]OTE(sZ005_040.ClearToUnlock);
				RC: "************************************************************$N"
				    "Add all Robot in Teach Selected signals$N"
				    "************************************************************";
				N: [XIC(S005RB01Sfty.Int.TeachSeld) ,XIC(S005RB02Sfty.Int.TeachSeld) ,XIC(S010RB01Sfty.Int.TeachSeld) ,XIC(S010RB02Sfty.Int.TeachSeld) ,XIC(S020RB01Sfty.Int.TeachSeld) ,XIC(S030RB01Sfty.Int.TeachSeld) ,XIC(S040RB01Sfty.Int.TeachSeld) ]OTE(sZ005_040.RbtInTeach);
				RC: "************************************************************$N"
				    "Add or Remove If Adjacent zones will trigger Gate Rst$N"
				    "************************************************************";
				N: [XIC(sZ005_040.StaGateRstPB) ,XIC(sZ050_080.StaGateRstPB) XIC(sEdit.Bit) ]ONS(sZ005_040.GateRstOns)OTE(sZ005_040.AnyGateRstPB);
				RC: "************************************************************$N"
				    "Add or Remove If Adjacent zones will trigger Gate Start$N"
				    "************************************************************";
				N: [XIC(sZ005_040.StaGateStartPB) ,XIC(sZ050_080.StaGateStartPB) XIC(sEdit.Bit) ]OTE(sZ005_040.AnyGateStartPB);
				RC: "************************************************************$N"
				    "Add or Remove If Adjacent zones will trigger Power Enable$N"
				    "************************************************************";
				N: [XIC(sZ005_040.StaPowerEnblPB) ,XIC(sZ050_080.StaPowerEnblPB) XIC(sEdit.Bit) ]ONS(sZ005_040.PowerEnblOns)OTE(sZ005_040.AnyPowerEnblPB);
				RC: "************************************************************$N"
				    "Add or Remove If Adjacent zones will trigger Open Gate Request$N"
				    "************************************************************";
				N: [XIC(sZ005_040.StaOpenGateReqPB) ,XIC(sZ050_080.StaOpenGateReqPB) XIC(sEdit.Bit) ]ONS(sZ005_040.OpenGateReqOns)OTE(sZ005_040.AnyOpenGateReqPB);
				RC: "************************************************************$N"
				    "Safety Interlocks mapping$N"
				    "************************************************************";
				N: [[XIC(PrevSftyIntlkIn.Status.ConnectionFaulted) ,XIO(PrevSftyIntlkIn.Status.RunMode) ] COP(ZeroRefSafety[0],PrevSftyIn,1) ,XIO(PrevSftyIntlkIn.Status.ConnectionFaulted) XIC(PrevSftyIntlkIn.Status.RunMode) COP(PrevSftyIntlkIn,PrevSftyIn,1) ];
				N: [[XIC(NextSftyIntlkIn.Status.ConnectionFaulted) ,XIO(NextSftyIntlkIn.Status.RunMode) ] COP(ZeroRefSafety[0],NextSftyIn,1) ,XIO(NextSftyIntlkIn.Status.ConnectionFaulted) XIC(NextSftyIntlkIn.Status.RunMode) COP(NextSftyIntlkIn,NextSftyIn,1) ];
		END_ROUTINE

		ROUTINE s_Z01_ZoneSftySum (Description := "Zone Safety Summary$N*Not Editable Routine*")
				RC: "************************************************************$N"
				    "Zone Safety Summary Routine$N"
				    "$N"
				    "Do NOT edit this Routine$N"
				    "************************************************************";
				N: NOP();
				N: XIC(sZ005_040.GateEStopsOk)XIC(sZ005_040.AdjEStopsOk)XIC(sZ005_040.OperEStopsOk)XIC(sZ005_040.TTEStopsOK)XIC(sZ005_040.CNVEStopsOK)XIC(sZ005_040.RbtEStops1Ok)XIC(sZ005_040.RbtEStops2Ok)XIC(sZ005_040.RbtSftyEnbld1)XIC(sZ005_040.RbtSftyEnbld2)OTE(sZ005_040.AllEStopsOk);
				N: XIC(sZ005_040.EntryLSActive)XIC(sZ005_040.ExitLSActive)XIC(sZ005_040.AccessLSActive)OTE(sZ005_040.EnExLSActive);
				N: XIC(sZ005_040.StaGatesOk)XIC(sZ005_040.AdjGatesOk)[XIC(sZ005_040.EnExLSActive) OTE(sZ005_040.PerimeterSafe) ,OTE(sZ005_040.AllGatesOk) ];
				N: XIC(sZ005_040.AllEStopsOk)XIC(sZ005_040.PerimeterSafe)OTE(sZ005_040.PowerEnblSetup);
				N: [XIC(sZ005_040.AnyPowerEnblPB) ,XIC(sZ005_040.PowerEnbld) ]XIC(sZ005_040.PowerEnblSetup)OTE(sZ005_040.PowerEnbld);
				N: XIC(sSftyFromStd.AutoCycleReady)OTE(sZ005_040.AutoCycleReady);
				N: XIC(sSftyFromStd.AutoCycleOn)OTE(sZ005_040.AutoCycleOn);
				N: NEQ(sSftyFromStd.Faulted,0)OTE(sZ005_040.Faulted);
		END_ROUTINE

		ROUTINE s_Z02_ZoneSftyOut (Description := "Zone Safety  Output Mapping")
				RC: "************************************************************$N"
				    "Zone Safety Output Mapping$N"
				    "Next and Previous Zone Interlocks$N"
				    "************************************************************";
				N: NOP();
				N: XIC(sZ005_040.AllEStopsOk)OTE(Z1SftyIntlkOut.EStopsOk);
				N: XIC(sZ005_040.EnExLSActive)OTE(Z1SftyIntlkOut.EnExLSActive);
				N: OTE(Z1SftyIntlkOut.EntryLSActive);
				N: XIC(S040Sfty.IntSftyDevice.LC1.O1)OTE(Z1SftyIntlkOut.ExitLSActive);
				N: XIC(sZ005_040.PowerEnbld)OTE(Z1SftyIntlkOut.PowerEnbld);
				N: XIC(sZ005_040.AllGatesOk)OTE(Z1SftyIntlkOut.AllGatesOk);
				N: XIC(sZ005_040.StaGateRstPB)OTE(Z1SftyIntlkOut.StaGateRstPB);
				N: XIC(sZ005_040.StaGateStartPB)OTE(Z1SftyIntlkOut.StaGateStartPB);
				N: XIC(sZ005_040.StaPowerEnblPB)OTE(Z1SftyIntlkOut.StaPowerEnblPB);
				N: XIC(sZ005_040.StaOpenGateReqPB)OTE(Z1SftyIntlkOut.StaOpenGateReqPB);
				N: XIC(sZ005_040.RbtInTeach)OTE(Z1SftyIntlkOut.RbtInTeach);
				N: XIC(sZ005_040.ClearToUnlock)OTE(Z1SftyIntlkOut.ClearToUnlock);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM sZ050_080 (Description := "Zone Safety Task",
	                   Class := Safety,
	                   MAIN := "s_A00_Main",
	                   MODE := 0,
	                   DisableFlag := 0,
	                   UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE s_A00_Main 
				N: JSR(s_C00_Common,0);
				N: JSR(s_D00_Gates,0);
				N: JSR(s_Z00_ZoneSftyIn,0);
				N: JSR(s_Z01_ZoneSftySum,0);
				N: JSR(s_Z02_ZoneSftyOut,0);
		END_ROUTINE

		ROUTINE s_C00_Common 
				N: XIC(sEdit.Bit)OTE(sZ050_080.LightTest);
				N: XIC(sSftyFromStd.FlasherHi)OTE(sZ050_080.sFlasher);
				N: XIC(sSftyFromStd.SafetyInsFltRstPB)OTE(sZ050_080.SftyFltRst);
		END_ROUTINE

		ROUTINE s_D00_Gates (Description := "Safety Gate Routine")
		END_ROUTINE

		ROUTINE s_Z00_ZoneSftyIn (Description := "Zone Safety Input Mapping")
				RC: "************************************************************$N"
				    "Zone Safety Inputs Mapping$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Add all zone gates stsEstopNormal signal$N"
				    "************************************************************";
				N: XIC(sZ005_040.GateEStopsOk)XIC(sEdit.Bit)OTE(sZ050_080.GateEStopsOk);
				RC: "************************************************************$N"
				    "Adjacent Zone Gates$N"
				    "Delete XICs if no safety Interlocks exist$N"
				    "************************************************************";
				N: [XIC(PrevSftyIn.EStopsOk) XIC(NextSftyIn.EStopsOk) ,XIO(sEdit.Bit) ]XIC(sZ005_040.AdjEStopsOk)XIC(sEdit.Bit)OTE(sZ050_080.AdjEStopsOk);
				RC: "************************************************************$N"
				    "Add all Operator Estops$N"
				    "Operator Load/Unload Stations$N"
				    "Rack Load/Unload Stations$N"
				    "************************************************************";
				N: XIC(sZ005_040.OperEStopsOk)XIC(sEdit.Bit)OTE(sZ050_080.OperEStopsOk);
				RC: "************************************************************$N"
				    "Add all Robot Estops$N"
				    "************************************************************";
				N: XIC(sZ005_040.RbtEStops1Ok)XIC(sEdit.Bit)OTE(sZ050_080.RbtEStops1Ok);
				RC: "************************************************************$N"
				    "Add all Robot Estops$N"
				    "************************************************************";
				N: XIC(sZ005_040.RbtEStops2Ok)XIC(sEdit.Bit)OTE(sZ050_080.RbtEStops2Ok);
				RC: "************************************************************$N"
				    "Add all Robot Safety Interface Enabled signal$N"
				    "************************************************************";
				N: XIC(sZ005_040.RbtSftyEnbld1)XIC(sEdit.Bit)OTE(sZ050_080.RbtSftyEnbld1);
				RC: "************************************************************$N"
				    "Add all Robot Safety Interface Enabled signal$N"
				    "************************************************************";
				N: XIC(sZ005_040.RbtSftyEnbld2)XIC(sEdit.Bit)OTE(sZ050_080.RbtSftyEnbld2);
				RC: "************************************************************$N"
				    "Safety Gates PushButtons$N"
				    "************************************************************";
				N: NOP();
				N: [XIC(sEdit.Bit) ,XIC(sZ005_040.AnyBypassSwOn) ]OTE(sZ050_080.AnyBypassSwOn);
				N: [XIC(sEdit.Bit) ,XIC(sZ005_040.StaGateRstPB) ]OTE(sZ050_080.StaGateRstPB);
				N: [XIC(sEdit.Bit) ,XIC(sZ005_040.StaGateStartPB) ]OTE(sZ050_080.StaGateStartPB);
				RC: "************************************************************$N"
				    "Add all zone entry Safety Device$N"
				    "************************************************************";
				N: XIC(sEdit.Bit)OTE(sZ050_080.EntryLSActive);
				RC: "************************************************************$N"
				    "Add all zone exit Safety Device$N"
				    "************************************************************";
				N: XIC(sEdit.Bit)OTE(sZ050_080.ExitLSActive);
				RC: "************************************************************$N"
				    "Add all zone access lightscreens or scanners$N"
				    "************************************************************";
				N: OTE(sZ050_080.AccessLSActive);
				RC: "************************************************************$N"
				    "Add all Gate Locked Signals$N"
				    "************************************************************";
				N: XIC(sEdit.Bit)OTE(sZ050_080.StaGatesOk);
				RC: "************************************************************$N"
				    "Adjacent Zone Gates locked interlocks$N"
				    "Delete XICs if no safety Interlocks exist$N"
				    "************************************************************";
				N: [XIC(PrevSftyIn.AllGatesOk) XIC(NextSftyIn.AllGatesOk) ,XIO(sEdit.Bit) ]OTE(sZ050_080.AdjGatesOk);
				RC: "************************************************************$N"
				    "Add all required Clear to Unlock signals$N"
				    "************************************************************";
				N: XIC(sEdit.Bit)[XIC(PrevSftyIn.ClearToUnlock) XIC(NextSftyIn.ClearToUnlock) ,XIO(sEdit.Bit) ]OTE(sZ050_080.ClearToUnlock);
				RC: "************************************************************$N"
				    "Add all Robot in Teach Selected signals$N"
				    "************************************************************";
				N: XIC(sEdit.Bit)OTE(sZ050_080.RbtInTeach);
				N: [XIC(sZ050_080.StaGateRstPB) ,XIC(sZ005_040.StaGateRstPB) XIC(sEdit.Bit) ,XIC(PrevSftyIn.StaGateRstPB) XIC(sEdit.Bit) ,XIC(NextSftyIn.StaGateRstPB) XIC(sEdit.Bit) ]ONS(sZ050_080.GateRstOns)OTE(sZ050_080.AnyGateRstPB);
				N: [XIC(sZ050_080.StaGateStartPB) ,XIC(sZ005_040.StaGateStartPB) XIC(sEdit.Bit) ,XIC(PrevSftyIn.StaGateStartPB) XIC(sEdit.Bit) ,XIC(NextSftyIn.StaGateStartPB) XIC(sEdit.Bit) ]ONS(sZ050_080.GateStartOns)OTE(sZ050_080.AnyGateStartPB);
				N: [XIC(sZ050_080.StaPowerEnblPB) ,XIC(sZ005_040.StaPowerEnblPB) XIC(sEdit.Bit) ,XIC(PrevSftyIn.StaPowerEnblPB) XIC(sEdit.Bit) ,XIC(NextSftyIn.StaPowerEnblPB) XIC(sEdit.Bit) ]ONS(sZ050_080.PowerEnblOns)OTE(sZ050_080.AnyPowerEnblPB);
				N: [XIC(sZ050_080.StaOpenGateReqPB) ,XIC(sZ005_040.StaOpenGateReqPB) XIC(sEdit.Bit) ,XIC(PrevSftyIn.StaOpenGateReqPB) XIC(sEdit.Bit) ,XIC(NextSftyIn.StaOpenGateReqPB) XIC(sEdit.Bit) ]ONS(sZ050_080.OpenGateReqOns)OTE(sZ050_080.AnyOpenGateReqPB);
				RC: "************************************************************$N"
				    "Safety Interlocks mapping$N"
				    "************************************************************";
				N: [[XIC(PrevSftyIntlkIn.Status.ConnectionFaulted) ,XIO(PrevSftyIntlkIn.Status.RunMode) ] COP(ZeroRefSafety[0],PrevSftyIn,1) ,XIO(PrevSftyIntlkIn.Status.ConnectionFaulted) XIC(PrevSftyIntlkIn.Status.RunMode) COP(PrevSftyIntlkIn,PrevSftyIn,1) ];
				N: [[XIC(NextSftyIntlkIn.Status.ConnectionFaulted) ,XIO(NextSftyIntlkIn.Status.RunMode) ] COP(ZeroRefSafety[0],NextSftyIn,1) ,XIO(NextSftyIntlkIn.Status.ConnectionFaulted) XIC(NextSftyIntlkIn.Status.RunMode) COP(NextSftyIntlkIn,NextSftyIn,1) ];
		END_ROUTINE

		ROUTINE s_Z01_ZoneSftySum (Description := "Zone Safety Summary$N*Not Editable Routine*")
				RC: "************************************************************$N"
				    "Zone Safety Summary Routine$N"
				    "$N"
				    "Do NOT edit this Routine$N"
				    "************************************************************";
				N: NOP();
				N: XIC(sZ050_080.GateEStopsOk)XIC(sZ050_080.AdjEStopsOk)XIC(sZ050_080.OperEStopsOk)XIC(sZ050_080.RbtEStops1Ok)XIC(sZ050_080.RbtEStops2Ok)XIC(sZ050_080.RbtSftyEnbld1)XIC(sZ050_080.RbtSftyEnbld2)OTE(sZ050_080.AllEStopsOk);
				N: XIC(sZ050_080.EntryLSActive)XIC(sZ050_080.ExitLSActive)OTE(sZ050_080.EnExLSActive);
				N: XIC(sZ050_080.StaGatesOk)XIC(sZ050_080.AdjGatesOk)XIC(sZ050_080.AccessLSActive)[XIC(sZ050_080.EnExLSActive) OTE(sZ050_080.PerimeterSafe) ,OTE(sZ050_080.AllGatesOk) ];
				N: XIC(sZ050_080.AllEStopsOk)XIC(sZ050_080.PerimeterSafe)OTE(sZ050_080.PowerEnblSetup);
				N: [XIC(sZ050_080.AnyPowerEnblPB) ,XIC(sZ050_080.PowerEnbld) ,XIC(sEdit.Bit) ]XIC(sZ050_080.PowerEnblSetup)OTE(sZ050_080.PowerEnbld);
				N: XIC(sSftyFromStd.AutoCycleReady)OTE(sZ050_080.AutoCycleReady);
				N: XIC(sSftyFromStd.AutoCycleOn)OTE(sZ050_080.AutoCycleOn);
				N: NEQ(sSftyFromStd.Faulted,0)OTE(sZ050_080.Faulted);
		END_ROUTINE

		ROUTINE s_Z02_ZoneSftyOut (Description := "Zone Safety  Output Mapping")
				RC: "************************************************************$N"
				    "Zone Safety Output Mapping$N"
				    "Next and Previous Zone Interlocks$N"
				    "************************************************************";
				N: NOP();
				N: XIC(sZ050_080.AllEStopsOk)OTE(Z2SftyIntlkOut.EStopsOk);
				N: XIC(sZ050_080.EnExLSActive)OTE(Z2SftyIntlkOut.EnExLSActive);
				N: OTE(Z2SftyIntlkOut.EntryLSActive);
				N: OTE(Z2SftyIntlkOut.ExitLSActive);
				N: XIC(sZ050_080.PowerEnbld)OTE(Z2SftyIntlkOut.PowerEnbld);
				N: XIC(sZ050_080.AllGatesOk)OTE(Z2SftyIntlkOut.AllGatesOk);
				N: XIC(sZ050_080.StaGateRstPB)OTE(Z2SftyIntlkOut.AnyGateRstPB);
				N: XIC(sZ050_080.StaGateStartPB)OTE(Z2SftyIntlkOut.AnyGateStartPB);
				N: XIC(sZ050_080.StaPowerEnblPB)OTE(Z2SftyIntlkOut.AnyPowerEnblPB);
				N: XIC(sZ050_080.StaOpenGateReqPB)OTE(Z2SftyIntlkOut.AnyOpenGateReqPB);
				N: XIC(sZ050_080.RbtInTeach)OTE(Z2SftyIntlkOut.RbtInTeach);
				N: XIC(sZ050_080.ClearToUnlock)OTE(Z2SftyIntlkOut.ClearToUnlock);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM Z005_040 (Description := "Zone Standard Task",
	                  Class := Standard,
	                  MAIN := "A00_Main",
	                  MODE := 0,
	                  DisableFlag := 0,
	                  UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE A00_Main (Description := "Main Routine")
				N: JSR(B00_ControllerDiag,0);
				N: JSR(B01_Status,0);
				N: JSR(B02_IntlkInputs,0);
				N: JSR(C00_NetworkDiag,0);
				N: JSR(C01_ModuleConfig,0);
				N: JSR(C03_DryCycle,0);
				N: JSR(C05_Shifts,0);
				N: JSR(H01_ProdCount_Mdl,0);
				N: JSR(L00_ZoneStackLights,0);
				N: JSR(P00_StdToSfty,0);
				N: JSR(P00_Zone,0);
				N: JSR(R01_RFID_RFU63x_S005,0);
				N: JSR(R01_RFID_RFU63x_S019,0);
				N: JSR(S00_ShiftRegisters,0);
				N: JSR(S01_ShiftRegistersMdlMap,0);
				N: JSR(Y00_Alarms_L1,0);
				N: JSR(Y01_Alarms_L2,0);
				N: JSR(Y02_Alarms_L3,0);
				N: JSR(Z00_IntlkOutputs,0);
		END_ROUTINE

		ROUTINE B00_ControllerDiag (Description := "Controller Diagnostics Routine")
				RC: "************************************************************$N"
				    "Controller Safety Status/Diagnostics$N"
				    "************************************************************";
				N: NOP();
				RC: "***********************************************************************************************   $N"
				    "Safety Signature Status$N"
				    "***********************************************************************************************";
				N: GSV(Safety,,SafetyLocked,SafetyTask.Locked)EQU(SafetyTask.Locked,0)OTE(SafetyTask.Unlocked);
				N: GSV(Safety,,SafetySignatureExists,SafetyTask.SftySignatureExists)EQU(SafetyTask.SftySignatureExists,1)OTE(SafetyTask.SftySigExists);
				RC: "****************************************************************************$N"
				    "Get Safety Signature ID and Time from Controller$N"
				    "***************************************************************************$N"
				    "";
				N: GSV(Safety,,SafetySignatureIDHex,SafetyTask.SigCurrentID)GSV(Safety,,SafetySignatureDateTime,SafetyTask.SigCurrentTime);
				N: NEQ(SafetyTask.SigCurrentID,SafetyTask.SigCompareID)OTL(SafetyTask.Fault);
				RC: "****************************************************************************$N"
				    "Safety Signature Reset - To be only Reset by Controls Team$N"
				    "***************************************************************************$N"
				    "";
				N: XIC(SafetyTask.Reset)[COP(SafetyTask.SigCurrentID,SafetyTask.SigCompareID,1) ,COP(SafetyTask.SigCurrentTime,SafetyTask.SigCompareTime,1) ][OTU(SafetyTask.Fault) ,OTU(SafetyTask.Reset) ];
				N: [XIO(SafetyTask.SftySigExists) MOV(0,SafetyTask.SftySignatureInd) ,XIC(SafetyTask.SftySigExists) XIO(SafetyTask.Fault) MOV(1,SafetyTask.SftySignatureInd) ,XIC(SafetyTask.Fault) XIC(SafetyTask.SftySigExists) MOV(2,SafetyTask.SftySignatureInd) ];
		END_ROUTINE

		ROUTINE B01_Status (Description := "Controller Status Functions Routine")
				RC: "*************************************************$N"
				    "PLC Status$N"
				    "Routine$N"
				    "*************************************************";
				N: NOP();
				N: OTE(Status.AlwaysOn)OTU(Status.AlwaysOff);
				N: GSV(WallClockTime,,LocalDateTime,Status.DateTime.Year);
				N: [GSV(FaultLog,,MinorFaultBits,Status.MinorFlt) ,XIC(Status.MinorFlt.10) OTE(Status.ProcLowBattery) ];
				N: [EQU(Status.DateTime.Minute,0) ONS(ProdCount.Shifts.ONS.0) OTE(ProdCount.Shifts.MinIs0) ,EQU(Status.DateTime.Minute,30) ONS(ProdCount.Shifts.ONS.1) OTE(ProdCount.Shifts.MinIs30) ,EQU(Status.DateTime.Second,0) OTE(ProdCount.Shifts.SecIs0) ];
				RC: "*********************************************************************************************************$N"
				    "Flashers Logic$N"
				    "Low - 1 seconds$N"
				    "Medium - 0.5 Seconds$N"
				    "High 0.25 Seconds$N"
				    "*********************************************************************************************************";
				N: [XIO(Status.FlasherOnHighTmr.DN) MOV(250,Status.FlasherOffHighTmr.PRE) TON(Status.FlasherOffHighTmr,?,?) ,XIC(Status.FlasherOffHighTmr.DN) MOV(250,Status.FlasherOnHighTmr.PRE) TON(Status.FlasherOnHighTmr,?,?) OTE(Status.FlasherHigh) ];
				N: [XIO(Status.FlasherOnMidTmr.DN) MOV(500,Status.FlasherOffMidTmr.PRE) TON(Status.FlasherOffMidTmr,?,?) ,XIC(Status.FlasherOffMidTmr.DN) MOV(500,Status.FlasherOnMidTmr.PRE) TON(Status.FlasherOnMidTmr,?,?) OTE(Status.FlasherMid) ];
				N: [XIO(Status.FlasherOnLowTmr.DN) MOV(750,Status.FlasherOffLowTmr.PRE) TON(Status.FlasherOffLowTmr,?,?) ,XIC(Status.FlasherOffLowTmr.DN) MOV(750,Status.FlasherOnLowTmr.PRE) TON(Status.FlasherOnLowTmr,?,?) OTE(Status.FlasherLow) ];
				RC: "************************************************************$N"
				    "P_Perm  Always On$N"
				    "************************************************************$N"
				    "-To be used when only 1 Perm is needed on Robot Interlocks (Process Numbers)-$N"
				    "$N"
				    "*";
				N: [OTE(Status.P_Perm_AlwaysOn.Inp_Perm00) OTE(Status.P_Perm_AlwaysOn.Inp_Perm01) OTE(Status.P_Perm_AlwaysOn.Inp_Perm02) OTE(Status.P_Perm_AlwaysOn.Inp_Perm03) ,OTE(Status.P_Perm_AlwaysOn.Inp_Perm04) OTE(Status.P_Perm_AlwaysOn.Inp_Perm05) OTE(Status.P_Perm_AlwaysOn.Inp_Perm06) OTE(Status.P_Perm_AlwaysOn.Inp_Perm07) ,OTE(Status.P_Perm_AlwaysOn.Inp_Perm08) OTE(Status.P_Perm_AlwaysOn.Inp_Perm09) OTE(Status.P_Perm_AlwaysOn.Inp_Perm10) OTE(Status.P_Perm_AlwaysOn.Inp_Perm11) ,OTE(Status.P_Perm_AlwaysOn.Inp_Perm12) OTE(Status.P_Perm_AlwaysOn.Inp_Perm13) OTE(Status.P_Perm_AlwaysOn.Inp_Perm14) OTE(Status.P_Perm_AlwaysOn.Inp_Perm15) ,P_Perm(Status.P_Perm_AlwaysOn) ];
				N: XIC(Edit.Debug)XIC(SetClock.Update)[ONS(SetClock.Ons) SSV(WallClockTime,,LocalDateTime,SetClock.X.Year) ,OTU(SetClock.Update) ];
		END_ROUTINE

		ROUTINE B02_IntlkInputs (Description := "Interlock Inputs Routine$NConsumed Mapping")
				RC: "****************************************************************************************************$N"
				    "Zone Interlock Input Mapping$N"
				    "****************************************************************************************************$N"
				    "$N"
				    "***************************************************************************$N"
				    "Copy The Input Interlock Data From Each PLC Controller Required$N"
				    "***************************************************************************";
				N: NOP();
				N: [[XIC(Z050_080_StdInIntlk.Status.ConnectionFaulted) ,XIO(Z050_080_StdInIntlk.Status.RunMode) ] FLL(ZeroRef[0],Z050_080_StdIn,1) ,XIO(Z050_080_StdInIntlk.Status.ConnectionFaulted) XIC(Z050_080_StdInIntlk.Status.RunMode) CPS(Z050_080_StdInIntlk,Z050_080_StdIn,1) ];
				N: [[XIC(CV1_UBC_StdInIntlk.Status.ConnectionFaulted) ,XIO(CV1_UBC_StdInIntlk.Status.RunMode) ] FLL(ZeroRef[0],CV1_UBC_StdIn,1) ,XIO(CV1_UBC_StdInIntlk.Status.ConnectionFaulted) XIC(CV1_UBC_StdInIntlk.Status.RunMode) CPS(CV1_UBC_StdInIntlk,CV1_UBC_StdIn,1) ];
		END_ROUTINE

		ROUTINE C00_NetworkDiag (Description := "Zone Modules Network Diagnostics Routine")
				RC: "************************************************************$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "FRM P1 Zone Ethernet Devices Diagnostic$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Balluff IOL$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: GSV(Module,Z005_040IOL1,EntryStatus,Z005_040IOL1.ENet.ObjectStatus)[MEQ(Z005_040IOL1.ENet.ObjectStatus,61440,24576) OTE(Z005_040IOL1.ENet.Inhibited) ,MEQ(Z005_040IOL1.ENet.ObjectStatus,61440,16384) OTE(Z005_040IOL1.ENet.CommOK) ];
				RC: "************************************************************$N"
				    "Balluff IOL$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: GSV(Module,Z005_040IOL2,EntryStatus,Z005_040MIO2.ENet.ObjectStatus)[MEQ(Z005_040MIO2.ENet.ObjectStatus,61440,24576) OTE(Z005_040MIO2.ENet.Inhibited) ,MEQ(Z005_040MIO2.ENet.ObjectStatus,61440,16384) OTE(Z005_040MIO2.ENet.CommOK) ];
				RC: "************************************************************$N"
				    "Gate Switch$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: GSV(Module,S007GS1,EntryStatus,S007GS1Diag.ENet.ObjectStatus)[MEQ(S007GS1Diag.ENet.ObjectStatus,61440,24576) OTE(S007GS1Diag.ENet.Inhibited) ,MEQ(S007GS1Diag.ENet.ObjectStatus,61440,16384) OTE(S007GS1Diag.ENet.CommOK) ];
				RC: "************************************************************$N"
				    "Gate Switch$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: GSV(Module,S010GS1,EntryStatus,S010GS1Diag.ENet.ObjectStatus)[MEQ(S010GS1Diag.ENet.ObjectStatus,61440,24576) OTE(S010GS1Diag.ENet.Inhibited) ,MEQ(S010GS1Diag.ENet.ObjectStatus,61440,16384) OTE(S010GS1Diag.ENet.CommOK) ];
				RC: "************************************************************$N"
				    "Gate Switch$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: GSV(Module,S030GS1,EntryStatus,S030GS1Diag.ENet.ObjectStatus)[MEQ(S030GS1Diag.ENet.ObjectStatus,61440,24576) OTE(S030GS1Diag.ENet.Inhibited) ,MEQ(S030GS1Diag.ENet.ObjectStatus,61440,16384) OTE(S030GS1Diag.ENet.CommOK) ];
				RC: "************************************************************$N"
				    "Gate Switch$N"
				    "Module Diagnostics$N"
				    "************************************************************";
				N: GSV(Module,S030GS2,EntryStatus,S030GS2Diag.ENet.ObjectStatus)[MEQ(S030GS2Diag.ENet.ObjectStatus,61440,24576) OTE(S030GS2Diag.ENet.Inhibited) ,MEQ(S030GS2Diag.ENet.ObjectStatus,61440,16384) OTE(S030GS2Diag.ENet.CommOK) ];
				RC: "************************************************************$N"
				    "BIW DC Ethernet Devices Diagnostic$N"
				    "************************************************************$N"
				    "";
				N: GSV(Module,BIW_DC,EntryStatus,BIW_DC_ENet.EntryStatus)[EQU(16#4000,BIW_DC_ENet.EntryStatus) OTE(BIW_DC_ENet.Running) ,XIO(BIW_DC_ENet.Running) [OTE(ENet_FRM_P1.ENetNotRunning62) ,OTE(BIW_DC_ENet.Fault) ] ];
		END_ROUTINE

		ROUTINE C01_ModuleConfig (Description := "Module Configuration Routine")
				RC: "************************************************************$N"
				    "IO Modules Mapping/Configuration$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "FRM M MIO1$N"
				    "BNI006A AOI$N"
				    "8 IO Link Ports$N"
				    "************************************************************$N"
				    "EIP-508-105-Z105";
				N: AOI_BNI006A_50_31_040(Z005_040IOL1.CtrlTag,Z005_040IOL1:I.Data,Z005_040IOL1:O.Data,Z005_040IOL1:C.Data,Z005_040IOL1.Port1,Z005_040IOL1.Port2,Z005_040IOL1.Port3,Z005_040IOL1.Port4,Z005_040IOL1.Port5,Z005_040IOL1.Port6,Z005_040IOL1.Port7,Z005_040IOL1.Port8,Z005_040IOL1.Data);
				RC: "************************************************************$N"
				    "FRM M MIO2$N"
				    "BNI006A AOI$N"
				    "8 IO Link Ports$N"
				    "************************************************************$N"
				    "EIP-508-105-Z105";
				N: AOI_BNI006A_50_31_040(Z005_040IOL2.CtrlTag,Z005_040IOL2:I.Data,Z005_040IOL2:O.Data,Z005_040IOL2:C.Data,Z005_040IOL2.Port1,Z005_040IOL2.Port2,Z005_040IOL2.Port3,Z005_040IOL2.Port4,Z005_040IOL2.Port5,Z005_040IOL2.Port6,Z005_040IOL2.Port7,Z005_040IOL2.Port8,Z005_040IOL2.Data);
				RC: "************************************************************$N"
				    "FRM007 Tower Light$N"
				    "Banner TL50 AOIs$N"
				    "************************************************************$N"
				    "TL50GYRKQ";
				N: Banner_TL50_PD_v2(FRM007_TL,FRM007_MIO1.ILP8.Outputs[0],FRM007_MIO1.ILP8.Outputs[1],FRM007_TL_PD,0);
				RC: "************************************************************$N"
				    "FRM015 RT1 MIO1 Channels Output Activation$N"
				    "Configuration Bits: 1=Active, 0=NotActive $N"
				    "Data[16].0-7 - Channels 00-07$N"
				    "Data[17].0-7 - Channels 08-15$N"
				    "************************************************************$N"
				    "Required for Turck MIO - TBEN-L4-16DXP$N"
				    "";
				N: MOV(2#11110000,S015RT1MIO1:C.Data[16])MOV(2#00000000,S015RT1MIO1:C.Data[17]);
				RC: "************************************************************$N"
				    "FRM015 RT1 MIO1$N"
				    "BNI006A AOI$N"
				    "8 IO Link Ports$N"
				    "************************************************************$N"
				    "EIP-508-105-Z105";
				N: AOI_BNI006A_50_31_040(FRM015_LH_MIO1.MCTag,S015RT1IOL1:I.Data,S015RT1IOL1:O.Data,S015RT1IOL1:C.Data,FRM015_LH_MIO1.ILP1,FRM015_LH_MIO1.ILP2,FRM015_LH_MIO1.ILP3,FRM015_LH_MIO1.ILP4,FRM015_LH_MIO1.ILP5,FRM015_LH_MIO1.ILP6,FRM015_LH_MIO1.ILP7,FRM015_LH_MIO1.ILP8,FRM015_LH_MIO1.MMData);
				RC: "************************************************************$N"
				    "FRM015 RT1 Tower Light$N"
				    "Banner TL50 AOIs$N"
				    "************************************************************$N"
				    "TL50GYRKQ";
				N: Banner_TL50_PD_v2(FRM015_RT1_TL,FRM015_LH_MIO1.ILP8.Outputs[0],FRM015_LH_MIO1.ILP8.Outputs[1],FRM015_RT1_TL_PD,0);
				RC: "************************************************************$N"
				    "FRM015 RT2 MIO1 Channels Output Activation$N"
				    "Configuration Bits: 1=Active, 0=NotActive $N"
				    "Data[16].0-7 - Channels 00-07$N"
				    "Data[17].0-7 - Channels 08-15$N"
				    "************************************************************$N"
				    "Required for Turck MIO - TBEN-L4-16DXP$N"
				    "";
				N: MOV(2#11110000,S015RT2MIO1:C.Data[16])MOV(2#00000000,S015RT2MIO1:C.Data[17]);
				RC: "************************************************************$N"
				    "FRM015 RH MIO1$N"
				    "BNI006A AOI$N"
				    "8 IO Link Ports$N"
				    "************************************************************$N"
				    "EIP-508-105-Z105";
				N: AOI_BNI006A_50_31_040(FRM015_RH_MIO1.MCTag,S015RT2IOL1:I.Data,S015RT2IOL1:O.Data,S015RT2IOL1:C.Data,FRM015_RH_MIO1.ILP1,FRM015_RH_MIO1.ILP2,FRM015_RH_MIO1.ILP3,FRM015_RH_MIO1.ILP4,FRM015_RH_MIO1.ILP5,FRM015_RH_MIO1.ILP6,FRM015_RH_MIO1.ILP7,FRM015_RH_MIO1.ILP8,FRM015_RH_MIO1.MMData);
				RC: "************************************************************$N"
				    "FRM015 RT2 Tower Light$N"
				    "Banner TL50 AOIs$N"
				    "************************************************************$N"
				    "TL50GYRKQ";
				N: Banner_TL50_PD_v2(FRM015_RT2_TL,FRM015_RH_MIO1.ILP8.Outputs[0],FRM015_RH_MIO1.ILP8.Outputs[1],FRM015_RT2_TL_PD,0);
				RC: "************************************************************$N"
				    "FRM019 RT1 MIO1$N"
				    "BNI006A AOI$N"
				    "8 IO Link Ports$N"
				    "************************************************************$N"
				    "EIP-508-105-Z105";
				N: AOI_BNI006A_50_31_040(FRM019_RT1_MIO1.MCTag,S019IOL1:I.Data,S019IOL1:O.Data,S019IOL1:C.Data,FRM019_RT1_MIO1.ILP1,FRM019_RT1_MIO1.ILP2,FRM019_RT1_MIO1.ILP3,FRM019_RT1_MIO1.ILP4,FRM019_RT1_MIO1.ILP5,FRM019_RT1_MIO1.ILP6,FRM019_RT1_MIO1.ILP7,FRM019_RT1_MIO1.ILP8,FRM019_RT1_MIO1.MMData);
				RC: "************************************************************$N"
				    "FRM019 RT1 Tower Light$N"
				    "Banner TL50 AOIs$N"
				    "************************************************************$N"
				    "TL50GYRKQ";
				N: Banner_TL50_PD_v2(FRM019_RT1_TL,FRM019_RT1_MIO1.ILP8.Outputs[0],FRM019_RT1_MIO1.ILP8.Outputs[1],FRM019_RT1_TL_PD,0);
				RC: "************************************************************$N"
				    "FRM019 RT2 Tower Light$N"
				    "Banner TL50 AOIs$N"
				    "************************************************************$N"
				    "TL50GYRKQ";
				N: Banner_TL50_PD_v2(FRM019_RT2_TL,FRM019_RT1_MIO1.ILP7.Outputs[0],FRM019_RT1_MIO1.ILP7.Outputs[1],FRM019_RT2_TL_PD,0);
				RC: "************************************************************$N"
				    "FRM019 TL1 MIO1 Channels Output Activation$N"
				    "Configuration Bits: 1=Active, 0=NotActive $N"
				    "Data[16].0-7 - Channels 00-07$N"
				    "Data[17].0-7 - Channels 08-15$N"
				    "************************************************************$N"
				    "Required for Turck MIO - TBEN-L4-16DXP$N"
				    "";
				N: MOV(2#00000000,S019TO1MIO1:C.Data[16])MOV(2#00000000,S019TO1MIO1:C.Data[17]);
				RC: "************************************************************$N"
				    "Gates Stack Lights$N"
				    "BNI0082  AOIs$N"
				    "************************************************************$N"
				    "IOL-802-102-Z036";
				N: [BMC_AOI_PROC_BNI0082(FRM007_GS1_BNI0082,Z005_040IOL1.Port1,FRM010_GS1_SL) ,BMC_AOI_PROC_BNI0082(FRM010_GS1_BNI0082,Z005_040IOL1.Port2,FRM030_GS2_SL) ,BMC_AOI_PROC_BNI0082(FRM030_GS1_BNI0082,Z005_040IOL2.Port1,FRM030_GS1_SL) ,BMC_AOI_PROC_BNI0082(FRM060_GS1_BNI0082,Z005_040IOL2.Port2,FRM060_GS1_SL) ];
		END_ROUTINE

		ROUTINE C03_DryCycle (Description := "Zone Dry Cycle Logic Routine")
				RC: "************************************************************$N"
				    "Dry Cycle$N"
				    "Conditions to Run$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "All Robots stsHome$N"
				    "************************************************************$N"
				    "";
				N: XIC(S005RB01.I1.AtHome)XIC(S005RB02.I1.AtHome)XIC(S020RB01.I1.AtHome)OTE(Z005_040.DryCycleSU1);
				RC: "************************************************************$N"
				    "All Stations DryCycleSU$N"
				    "************************************************************$N"
				    "";
				N: XIC(S005TL1.Int.DryCycleSU)XIC(S010TL1.Int.DryCycleSU)XIC(Edit.Bit)OTE(Z005_040.DryCycleSU2);
				RC: "************************************************************$N"
				    "Summary$N"
				    "************************************************************$N"
				    "";
				N: XIC(Z005_040.DryCycleSU1)XIC(Z005_040.DryCycleSU2)OTE(Z005_040.DryCycleSU);
				N: XIC(Z005_040.AutoMode)XIC(Z005_040.DryCyclePB)[XIC(Z005_040.DryCycleStartPB) XIC(Z005_040.DryCycleSU) ,XIC(Z005_040.DryCycle) ,XIC(Z005_040.AutoModePB) ]XIC(Z005_040.NoPartPres)OTE(Z005_040.DryCycle);
		END_ROUTINE

		ROUTINE C05_Shifts (Description := "Shift Logic Routine$NBased on a three shift Production Schedule")
				N: NOP();
				N: OTU(ProdCount.Shifts.RollOver)CPT(ProdCount.Shifts.CurrentTime,(Status.DateTime.Hour*60)+Status.DateTime.Minute)CPT(ProdCount.Shifts.Shift1Start,(ProdCount.HMI.Shift1StartHour*60)+ProdCount.HMI.Shift1StartMin)CPT(ProdCount.Shifts.Shift2Start,(ProdCount.HMI.Shift2StartHour*60)+ProdCount.HMI.Shift2StartMin)CPT(ProdCount.Shifts.Shift3Start,(ProdCount.HMI.Shift3StartHour*60)+ProdCount.HMI.Shift3StartMin);
				RC: "Active shift Logic";
				N: [LES(ProdCount.Shifts.Shift1Start,ProdCount.Shifts.Shift2Start) LES(ProdCount.Shifts.Shift1Start,ProdCount.Shifts.Shift3Start) GEQ(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift1Start) LES(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift2Start) LES(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift3Start) ,GRT(ProdCount.Shifts.Shift1Start,ProdCount.Shifts.Shift2Start) LES(ProdCount.Shifts.Shift1Start,ProdCount.Shifts.Shift3Start) GEQ(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift1Start) LES(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift3Start) ,GRT(ProdCount.Shifts.Shift1Start,ProdCount.Shifts.Shift3Start) LES(ProdCount.Shifts.Shift1Start,ProdCount.Shifts.Shift2Start) GEQ(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift1Start) LES(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift2Start) ,GRT(ProdCount.Shifts.Shift1Start,ProdCount.Shifts.Shift2Start) GRT(ProdCount.Shifts.Shift1Start,ProdCount.Shifts.Shift3Start) [GEQ(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift1Start) ,LES(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift2Start) LES(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift3Start) OTL(ProdCount.Shifts.RollOver) ] ]OTE(ProdCount.Shifts.Shift1Active);
				RC: "Active shift Logic";
				N: [LES(ProdCount.Shifts.Shift2Start,ProdCount.Shifts.Shift1Start) LES(ProdCount.Shifts.Shift2Start,ProdCount.Shifts.Shift3Start) GEQ(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift2Start) LES(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift1Start) LES(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift3Start) ,GRT(ProdCount.Shifts.Shift2Start,ProdCount.Shifts.Shift1Start) LES(ProdCount.Shifts.Shift2Start,ProdCount.Shifts.Shift3Start) GEQ(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift2Start) LES(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift3Start) ,GRT(ProdCount.Shifts.Shift2Start,ProdCount.Shifts.Shift3Start) LES(ProdCount.Shifts.Shift2Start,ProdCount.Shifts.Shift1Start) GEQ(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift2Start) LES(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift1Start) ,GRT(ProdCount.Shifts.Shift2Start,ProdCount.Shifts.Shift1Start) GRT(ProdCount.Shifts.Shift2Start,ProdCount.Shifts.Shift3Start) [GEQ(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift2Start) ,LES(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift1Start) LES(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift3Start) OTL(ProdCount.Shifts.RollOver) ] ]OTE(ProdCount.Shifts.Shift2Active);
				RC: "Active shift Logic";
				N: [LES(ProdCount.Shifts.Shift3Start,ProdCount.Shifts.Shift1Start) LES(ProdCount.Shifts.Shift3Start,ProdCount.Shifts.Shift2Start) GEQ(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift3Start) LES(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift1Start) LES(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift2Start) ,GRT(ProdCount.Shifts.Shift3Start,ProdCount.Shifts.Shift1Start) LES(ProdCount.Shifts.Shift3Start,ProdCount.Shifts.Shift2Start) GEQ(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift3Start) LES(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift2Start) ,GRT(ProdCount.Shifts.Shift3Start,ProdCount.Shifts.Shift2Start) LES(ProdCount.Shifts.Shift3Start,ProdCount.Shifts.Shift1Start) GEQ(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift3Start) LES(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift1Start) ,GRT(ProdCount.Shifts.Shift3Start,ProdCount.Shifts.Shift1Start) GRT(ProdCount.Shifts.Shift3Start,ProdCount.Shifts.Shift2Start) [GEQ(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift3Start) ,LES(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift1Start) LES(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift2Start) OTL(ProdCount.Shifts.RollOver) ] ]OTE(ProdCount.Shifts.Shift3Active);
				RC: "New Shift start";
				N: XIC(ProdCount.Shifts.SecIs0)[EQU(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift1Start) ,EQU(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift2Start) ,EQU(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.Shift3Start) ]ONS(ProdCount.Shifts.StartShiftONS)OTL(ProdCount.Shifts.StartShift);
				RC: "*********************************************************************$N"
				    "Determine Current Shift Hour$N"
				    "*********************************************************************";
				N: [XIC(ProdCount.Shifts.Shift1Active) MOV(ProdCount.Shifts.Shift1Start,ProdCount.Shifts.ShiftStart) ,XIC(ProdCount.Shifts.Shift2Active) MOV(ProdCount.Shifts.Shift2Start,ProdCount.Shifts.ShiftStart) ,XIC(ProdCount.Shifts.Shift3Active) MOV(ProdCount.Shifts.Shift3Start,ProdCount.Shifts.ShiftStart) ];
				N: [SUB(ProdCount.Shifts.CurrentTime,ProdCount.Shifts.ShiftStart,ProdCount.Shifts.ShiftMins) ,XIC(ProdCount.Shifts.RollOver) ADD(ProdCount.Shifts.ShiftMins,1440,ProdCount.Shifts.ShiftMins) ];
				N: [MOD(ProdCount.Shifts.ShiftMins,60,ProdCount.Shifts.ShiftMinsMod) ,CPT(ProdCount.Shifts.ShiftHour,(ProdCount.Shifts.ShiftMins-ProdCount.Shifts.ShiftMinsMod)/60) ];
				RC: "************************************************************$N"
				    "Shift Hours - Verify Valid Inputs$N"
				    "************************************************************";
				N: NOP();
				N: NEQ(ProdCount.HMI.PB.InHour,ProdCount.HMI.ShiftStartHourInput)LIM(0,ProdCount.HMI.PB.InHour,23)MOV(ProdCount.HMI.PB.InHour,ProdCount.HMI.ShiftStartHourInput)OTL(ProdCount.HMI.ShiftStartHourChange);
				N: NEQ(ProdCount.HMI.PB.InMin,ProdCount.HMI.ShiftStartMinInput)LIM(0,ProdCount.HMI.PB.InMin,59)MOV(ProdCount.HMI.PB.InMin,ProdCount.HMI.ShiftStartMinInput)OTL(ProdCount.HMI.ShiftStartMinChange);
				RC: "************************************************************$N"
				    "Shift 1 Start Time$N"
				    "************************************************************";
				N: NOP();
				N: XIO(ProdCount.HMI.Ind.Shift[2].Seld)XIO(ProdCount.HMI.Ind.Shift[3].Seld)HMI_Toggle2PB(ProdCount.HMI.SelShift1Tgl,ProdCount.HMI.PB.SelShift1,0,ProdCount.HMI.Ind.Shift[1].Seld);
				N: XIC(ProdCount.HMI.Ind.Shift[1].Seld)[XIC(ProdCount.HMI.ShiftStartHourChange) MOV(ProdCount.HMI.ShiftStartHourInput,ProdCount.HMI.Shift1StartHour) ,XIC(ProdCount.HMI.ShiftStartMinChange) MOV(ProdCount.HMI.ShiftStartMinInput,ProdCount.HMI.Shift1StartMin) ];
				N: MOV(ProdCount.HMI.Shift1StartHour,ProdCount.HMI.Ind.Shift[1].Hour)MOV(ProdCount.HMI.Shift1StartMin,ProdCount.HMI.Ind.Shift[1].Min);
				RC: "************************************************************$N"
				    "Shift 2 Start Time$N"
				    "************************************************************";
				N: NOP();
				N: XIO(ProdCount.HMI.Ind.Shift[1].Seld)XIO(ProdCount.HMI.Ind.Shift[3].Seld)HMI_Toggle2PB(ProdCount.HMI.SelShift2Tgl,ProdCount.HMI.PB.SelShift2,0,ProdCount.HMI.Ind.Shift[2].Seld);
				N: XIC(ProdCount.HMI.Ind.Shift[2].Seld)[XIC(ProdCount.HMI.ShiftStartHourChange) MOV(ProdCount.HMI.ShiftStartHourInput,ProdCount.HMI.Shift2StartHour) ,XIC(ProdCount.HMI.ShiftStartMinChange) MOV(ProdCount.HMI.ShiftStartMinInput,ProdCount.HMI.Shift2StartMin) ];
				N: MOV(ProdCount.HMI.Shift2StartHour,ProdCount.HMI.Ind.Shift[2].Hour)MOV(ProdCount.HMI.Shift2StartMin,ProdCount.HMI.Ind.Shift[2].Min);
				RC: "************************************************************$N"
				    "Shift 3 Start Time$N"
				    "************************************************************";
				N: NOP();
				N: XIO(ProdCount.HMI.Ind.Shift[1].Seld)XIO(ProdCount.HMI.Ind.Shift[2].Seld)HMI_Toggle2PB(ProdCount.HMI.SelShift3Tgl,ProdCount.HMI.PB.SelShift3,0,ProdCount.HMI.Ind.Shift[3].Seld);
				N: XIC(ProdCount.HMI.Ind.Shift[3].Seld)[XIC(ProdCount.HMI.ShiftStartHourChange) MOV(ProdCount.HMI.ShiftStartHourInput,ProdCount.HMI.Shift3StartHour) ,XIC(ProdCount.HMI.ShiftStartMinChange) MOV(ProdCount.HMI.ShiftStartMinInput,ProdCount.HMI.Shift3StartMin) ];
				N: MOV(ProdCount.HMI.Shift3StartHour,ProdCount.HMI.Ind.Shift[3].Hour)MOV(ProdCount.HMI.Shift3StartMin,ProdCount.HMI.Ind.Shift[3].Min);
				N: [XIC(ProdCount.HMI.ShiftStartHourChange) ,XIC(ProdCount.HMI.ShiftStartMinChange) ]MOV(99,ProdCount.HMI.PB.InHour)MOV(99,ProdCount.HMI.PB.InMin)MOV(99,ProdCount.HMI.ShiftStartHourInput)MOV(99,ProdCount.HMI.ShiftStartMinInput)OTU(ProdCount.HMI.ShiftStartHourChange)OTU(ProdCount.HMI.ShiftStartMinChange);
				RC: "************************************************************$N"
				    "Shift Active Indicators$N"
				    "************************************************************";
				N: NOP();
				RC: "PLC Current Time to HMI$N"
				    "*";
				N: MOV(Status.DateTime.Hour,ProdCount.HMI.Ind.Shift[0].Hour)MOV(Status.DateTime.Minute,ProdCount.HMI.Ind.Shift[0].Min);
				RC: "PLC Time Integer Format$N"
				    "*";
				N: MUL(Status.DateTime.Hour,100,ProdCount.HMI.PLC_Int_Hour)ADD(ProdCount.HMI.PLC_Int_Hour,Status.DateTime.Minute,ProdCount.HMI.PLC_Int_Time);
				RC: "Shifts Start Times Integer Format$N"
				    "*";
				N: [MUL(ProdCount.HMI.Ind.Shift[1].Hour,100,ProdCount.HMI.Shift1_Int_Hour) ADD(ProdCount.HMI.Shift1_Int_Hour,ProdCount.HMI.Ind.Shift[1].Min,ProdCount.HMI.Shift1_Int_Time) ,MUL(ProdCount.HMI.Ind.Shift[2].Hour,100,ProdCount.HMI.Shift2_Int_Hour) ADD(ProdCount.HMI.Shift2_Int_Hour,ProdCount.HMI.Ind.Shift[2].Min,ProdCount.HMI.Shift2_Int_Time) ,MUL(ProdCount.HMI.Ind.Shift[3].Hour,100,ProdCount.HMI.Shift3_Int_Hour) ADD(ProdCount.HMI.Shift3_Int_Hour,ProdCount.HMI.Ind.Shift[3].Min,ProdCount.HMI.Shift3_Int_Time) ];
				RC: "Models Production Count$N"
				    "Visibility$N"
				    "$N"
				    "*";
				N: OTL(ProdCount.HMI.Vis.0);
				RC: "Models Production Count$N"
				    "Visibility$N"
				    "$N"
				    "*";
				N: OTL(ProdCount.HMI.Vis.2);
		END_ROUTINE

		ROUTINE H01_ProdCount (Description := "Production Count Routine$N**Do not call from A00_Main**$NNot Editable")
				N: SBR(ProdCount.ModelNum)XIC(ProdCount.Model[ProdCount.ModelNum].HourInc)ADD(ProdCount.Model[ProdCount.ModelNum].Hour,1,ProdCount.Model[ProdCount.ModelNum].Hour);
				N: XIC(ProdCount.Shifts.MinIs0)[GRT(Status.DateTime.Hour,0) MOV(ProdCount.Model[ProdCount.ModelNum].Hour,ProdCount.PrevDayProd.Count[ProdCount.ModelNum].HourInd[Status.DateTime.Hour-1]) ,EQU(Status.DateTime.Hour,0) MOV(ProdCount.Model[ProdCount.ModelNum].Hour,ProdCount.PrevDayProd.Count[ProdCount.ModelNum].HourInd[23]) ,CLR(ProdCount.Model[ProdCount.ModelNum].Hour) ];
				N: XIC(ProdCount.Shifts.StartShift)[XIC(ProdCount.Shifts.Shift1Active) [MOV(ProdCount.Model[ProdCount.ModelNum].Shift1Total,ProdCount.Model[ProdCount.ModelNum].Shift1PrevProd) ,COP(ZeroRef[0],ProdCount.Model[ProdCount.ModelNum].Shift1HrProd[0],13) ] ,XIC(ProdCount.Shifts.Shift2Active) [MOV(ProdCount.Model[ProdCount.ModelNum].Shift2Total,ProdCount.Model[ProdCount.ModelNum].Shift2PrevProd) ,COP(ZeroRef[0],ProdCount.Model[ProdCount.ModelNum].Shift2HrProd[0],13) ] ,XIC(ProdCount.Shifts.Shift3Active) [MOV(ProdCount.Model[ProdCount.ModelNum].Shift3Total,ProdCount.Model[ProdCount.ModelNum].Shift3PrevProd) ,COP(ZeroRef[0],ProdCount.Model[ProdCount.ModelNum].Shift3HrProd[0],13) ] ];
				RC: "Add Count To Shift Hour";
				N: XIC(ProdCount.Model[ProdCount.ModelNum].HourInc)[XIC(ProdCount.Shifts.Shift1Active) ADD(ProdCount.Model[ProdCount.ModelNum].Shift1HrProd[ProdCount.Shifts.ShiftHour],1,ProdCount.Model[ProdCount.ModelNum].Shift1HrProd[ProdCount.Shifts.ShiftHour]) ,XIC(ProdCount.Shifts.Shift2Active) ADD(ProdCount.Model[ProdCount.ModelNum].Shift2HrProd[ProdCount.Shifts.ShiftHour],1,ProdCount.Model[ProdCount.ModelNum].Shift2HrProd[ProdCount.Shifts.ShiftHour]) ,XIC(ProdCount.Shifts.Shift3Active) ADD(ProdCount.Model[ProdCount.ModelNum].Shift3HrProd[ProdCount.Shifts.ShiftHour],1,ProdCount.Model[ProdCount.ModelNum].Shift3HrProd[ProdCount.Shifts.ShiftHour]) ];
				RC: "Shift counts";
				N: CLR(ProdCount.Model[ProdCount.ModelNum].Shift)CLR(ProdCount.Index);
				N: LBL(SumLoop)[XIC(ProdCount.Shifts.Shift1Active) ADD(ProdCount.Model[ProdCount.ModelNum].Shift,ProdCount.Model[ProdCount.ModelNum].Shift1HrProd[ProdCount.Index],ProdCount.Model[ProdCount.ModelNum].Shift) ,XIC(ProdCount.Shifts.Shift2Active) ADD(ProdCount.Model[ProdCount.ModelNum].Shift,ProdCount.Model[ProdCount.ModelNum].Shift2HrProd[ProdCount.Index],ProdCount.Model[ProdCount.ModelNum].Shift) ,XIC(ProdCount.Shifts.Shift3Active) ADD(ProdCount.Model[ProdCount.ModelNum].Shift,ProdCount.Model[ProdCount.ModelNum].Shift3HrProd[ProdCount.Index],ProdCount.Model[ProdCount.ModelNum].Shift) ];
				N: LES(ProdCount.Index,12)ADD(ProdCount.Index,1,ProdCount.Index)JMP(SumLoop);
				N: [XIC(ProdCount.Shifts.Shift1Active) MOV(ProdCount.Model[ProdCount.ModelNum].Shift,ProdCount.Model[ProdCount.ModelNum].Shift1Total) ,XIC(ProdCount.Shifts.Shift2Active) MOV(ProdCount.Model[ProdCount.ModelNum].Shift,ProdCount.Model[ProdCount.ModelNum].Shift2Total) ,XIC(ProdCount.Shifts.Shift3Active) MOV(ProdCount.Model[ProdCount.ModelNum].Shift,ProdCount.Model[ProdCount.ModelNum].Shift3Total) ];
		END_ROUTINE

		ROUTINE H01_ProdCount_Mdl (Description := "Production Count by Model$NEditable Routine")
				N: NOP();
				RC: "Edit triggers to increment production counts.$N"
				    "Edit Triggers to Unlatch production count to prevent multiple counts$N"
				    "$N"
				    "LUCID AIR COMMON MODEL";
				N: [XIC(Edit.Bit) [XIC(Model[14].Data.Model.0) ,XIC(Model[14].Data.Model.1) ,XIC(Model[14].Data.Model.2) ,XIC(Model[14].Data.Model.3) ,XIC(Model[14].Data.Model.4) ] OTL(ProdCount.Model[0].CountInc) ,XIC(Model[14].State.Data_Empty) OTU(ProdCount.Model[0].CountInc) ,XIC(ProdCount.Model[0].CountInc) ONS(ProdCount.Model[0].CountONS) OTE(ProdCount.Model[0].HourInc) ,[XIC(ProdCount.Model[0].HourInc) ,XIC(ProdCount.Shifts.MinIs0) ,XIC(ProdCount.Shifts.StartShift) ] JSR(H01_ProdCount,1,0) ];
				RC: "Edit triggers to increment production counts.$N"
				    "Edit Triggers to Unlatch production count to prevent multiple counts$N"
				    "$N"
				    "LUCID AIR COMMON MODEL";
				N: [XIC(Edit.Bit) XIC(Model[14].State.Data_Existing) XIC(Model[14].Data.Model.2) OTL(ProdCount.Model[2].CountInc) ,XIC(Model[14].State.Data_Empty) OTU(ProdCount.Model[2].CountInc) ,XIC(ProdCount.Model[2].CountInc) ONS(ProdCount.Model[2].CountONS) OTE(ProdCount.Model[2].HourInc) ,[XIC(ProdCount.Model[2].HourInc) ,XIC(ProdCount.Shifts.MinIs0) ,XIC(ProdCount.Shifts.StartShift) ] JSR(H01_ProdCount,1,2) ];
				RC: "Edit triggers to increment production counts.$N"
				    "Edit Triggers to Unlatch production count to prevent multiple counts$N"
				    "$N"
				    "LUCID AIR COMMON MODEL";
				N: [XIC(Edit.Bit) XIC(Model[14].State.Data_Existing) XIC(Model[14].Data.Model.3) OTL(ProdCount.Model[3].CountInc) ,XIC(Model[14].State.Data_Empty) OTU(ProdCount.Model[3].CountInc) ,XIC(ProdCount.Model[3].CountInc) ONS(ProdCount.Model[3].CountONS) OTE(ProdCount.Model[3].HourInc) ,[XIC(ProdCount.Model[3].HourInc) ,XIC(ProdCount.Shifts.MinIs0) ,XIC(ProdCount.Shifts.StartShift) ] JSR(H01_ProdCount,1,3) ];
				RC: "Edit triggers to increment production counts.$N"
				    "Edit Triggers to Unlatch production count to prevent multiple counts$N"
				    "$N"
				    "LUCID AIR COMMON MODEL";
				N: [XIC(Edit.Bit) XIC(Model[14].State.Data_Existing) XIC(Model[14].Data.Model.4) OTL(ProdCount.Model[4].CountInc) ,XIC(Model[14].State.Data_Empty) OTU(ProdCount.Model[4].CountInc) ,XIC(ProdCount.Model[4].CountInc) ONS(ProdCount.Model[4].CountONS) OTE(ProdCount.Model[4].HourInc) ,[XIC(ProdCount.Model[4].HourInc) ,XIC(ProdCount.Shifts.MinIs0) ,XIC(ProdCount.Shifts.StartShift) ] JSR(H01_ProdCount,1,4) ];
				N: OTU(ProdCount.Shifts.StartShift);
				N: MOV(8,ProdCount.HMI.MaxMld);
				N: [XIC(ProdCount.HMI.ModelSelPB.PB) [XIO(ProdCount.HMI.ModelSelPB.Toggle) ADD(ProdCount.HMI.ModelSel,1,ProdCount.HMI.ModelSel) ,OTE(ProdCount.HMI.ModelSelPB.Toggle) ] ,GRT(ProdCount.HMI.MaxMld,0) OTE(ProdCount.HMI.ModelSelPB.Vis) ,[LES(ProdCount.HMI.ModelSel,0) ,GRT(ProdCount.HMI.ModelSel,ProdCount.HMI.MaxMld) ,GRT(ProdCount.HMI.ModelSel,9) ] MOV(0,ProdCount.HMI.ModelSel) ];
				RC: "Production Count to HMI Screen";
				N: [[MOV(ProdCount.Model[ProdCount.HMI.ModelSel].Shift1PrevProd,ProdCount.HMI.Shft1Prev) ,MOV(ProdCount.Model[ProdCount.HMI.ModelSel].Shift1Total,ProdCount.HMI.Shft1Total) ,COP(ProdCount.Model[ProdCount.HMI.ModelSel].Shift1HrProd[0],ProdCount.HMI.Shft1Prod[0],13) ] ,[MOV(ProdCount.Model[ProdCount.HMI.ModelSel].Shift2PrevProd,ProdCount.HMI.Shft2Prev) ,MOV(ProdCount.Model[ProdCount.HMI.ModelSel].Shift2Total,ProdCount.HMI.Shft2Total) ,COP(ProdCount.Model[ProdCount.HMI.ModelSel].Shift2HrProd[0],ProdCount.HMI.Shft2Prod[0],13) ] ,[MOV(ProdCount.Model[ProdCount.HMI.ModelSel].Shift3PrevProd,ProdCount.HMI.Shft3Prev) ,MOV(ProdCount.Model[ProdCount.HMI.ModelSel].Shift3Total,ProdCount.HMI.Shft3Total) ,COP(ProdCount.Model[ProdCount.HMI.ModelSel].Shift3HrProd[0],ProdCount.HMI.Shft3Prod[0],13) ] ];
				N: [XIO(ProdCount.Shifts.Shift1Active) XIO(ProdCount.Shifts.Shift2Active) XIO(ProdCount.Shifts.Shift3Active) MOV(0,ProdCount.HMI.CurrShift) ,XIC(ProdCount.Shifts.Shift1Active) MOV(1,ProdCount.HMI.CurrShift) ,XIC(ProdCount.Shifts.Shift2Active) MOV(2,ProdCount.HMI.CurrShift) ,XIC(ProdCount.Shifts.Shift3Active) MOV(3,ProdCount.HMI.CurrShift) ];
				N: MOV(ProdCount.Shifts.ShiftHour,ProdCount.HMI.CurrShiftHr);
		END_ROUTINE

		ROUTINE L00_ZoneStackLights 
				RC: "##########################$N"
				    "Zone Stack Light$N"
				    "Standard Logic$N"
				    "##########################";
				N: NOP();
				RC: "Config$N"
				    "*$N"
				    "Clears any unused Mode";
				N: [FLL(0,Z005_040SL.SL1.O.Level,1) FLL(0,Z005_040SL.SL1.O.Runlight,1) FLL(0,Z005_040SL.SL1.O.Buzzer,1) FLL(0,Z005_040SL.SL1.O.Flexible,1) ,OTE(Z005_040SL.SL1.O.Segment.Enable) MOV(5,Z005_040SL.SL1.O.Segment.Number_of_Segments) ];
				RC: "########################################$N"
				    "Mode Configuration$N"
				    "Do Not Edit$N"
				    "########################################$N"
				    "$N"
				    "Edit.Debug to be replaced for production or break modes$N"
				    "This modes will be defined in the future";
				N: XIC(Z005_040IOL1.ENet.CommOK)[XIC(Edit.Debug) OTE(Z005_040.InProduction) ,XIC(Edit.Debug) OTE(Z005_040.InBreak) ];
				RC: "########################################$N"
				    "Segment 1 - RED$N"
				    "Steady - Machine Fault$N"
				    "Flashing - Manual Intervention$N"
				    "$N"
				    "Segment 2 - YELLOW$N"
				    "Steady - Any Robot In Maintenance$N"
				    "$N"
				    "Segment 3 - GREEN$N"
				    "Steady - Line In Auto Mode$N"
				    "Flashing - Any station in Auto Mode$N"
				    "$N"
				    "Segment 4 - Reserved$N"
				    "$N"
				    "Segment 5 - BLUE$N"
				    "Steady - Maintenance Call$N"
				    "$N"
				    "Buzzer$N"
				    "Continuous - Line Faulted$N"
				    "########################################";
				N: NOP();
				RC: "########################################$N"
				    "Segment 1 - RED$N"
				    "########################################$N"
				    "$N"
				    "Line Faulted$N"
				    "Place zone and station L1 Fault finder NEQ to 0$N"
				    "Place zone and station L2 Fault Finder NEQ to 0";
				N: [XIC(Edit.Debug) ,XIC(Edit.Debug) XIC(Status.FlasherMid) ][OTE(Z005_040SL.SL1.O.Segment.Segment_1.Red) ,OTE(Z005_040SL.SL1.O.Buzzer.Continuous) ];
				RC: "########################################$N"
				    "Segment 2 - YELLOW$N"
				    "########################################";
				N: XIC(Z005_040.AnyRbtInMaintPos)OTE(Z005_040SL.SL1.O.Segment.Segment_2.Yellow);
				RC: "########################################$N"
				    "Segment 3 - GREEN$N"
				    "########################################";
				N: [XIC(Z005_040.AllStaAutoMode) ,XIC(Z005_040.AnyStaAutoMode) XIO(Z005_040.AllStaAutoMode) XIC(Status.FlasherMid) ]OTE(Z005_040SL.SL1.O.Segment.Segment_3.Green);
				RC: "########################################$N"
				    "Segment 5 - BLUE$N"
				    "########################################$N"
				    "$N"
				    "Add all maintenance call bits";
				N: XIC(Edit.Bit)OTE(Z005_040SL.SL1.O.Segment.Segment_5.Blue);
				N: BMC_AOI_PROC_BNI0085(ZoneAOIs.ZoneSL[0],Z005_040IOL1.Port1,Z005_040SL.SL1);
		END_ROUTINE

		ROUTINE P00_StdToSfty (Description := "Standard To Safety Mapping Routine")
				RC: "************************************************************$N"
				    "Map States to Safety Tag$N"
				    "************************************************************";
				N: NOP();
				N: XIC(Status.FlasherHigh)OTE(StdToSfty.FlasherHi);
				N: XIC(Status.FlasherMid)OTE(StdToSfty.FlasherMid);
				N: XIC(Status.FlasherLow)OTE(StdToSfty.FlasherLow);
				RC: "************************************************************$N"
				    "Disable Robot Drives$N"
				    "DCS Safety Reset - Need to Toggle to Reset$N"
				    "************************************************************";
				N: [XIC(S005RB01.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS005RB01) ,XIC(S005RB01.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS005RB01) ,XIO(S005RB01Sfty.Int.SftyChanged) OTU(S005RB01.Int.RstSftyChange) ];
				N: [XIC(S005RB02.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS005RB02) ,XIC(S005RB02.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS005RB02) ,XIO(S005RB02Sfty.Int.SftyChanged) OTU(S005RB02.Int.RstSftyChange) ];
				N: [XIC(S010RB01.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS010RB01) ,XIC(S010RB01.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS010RB01) ,XIO(S010RB01Sfty.Int.SftyChanged) OTU(S010RB01.Int.RstSftyChange) ];
				N: [XIC(S010RB02.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS010RB02) ,XIC(S010RB02.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS010RB02) ,XIO(S010RB02Sfty.Int.SftyChanged) OTU(S010RB02.Int.RstSftyChange) ];
				N: [XIC(S015RB01.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS015RB01) ,XIC(S015RB01.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS015RB01) ,XIO(S015RB01Sfty.Int.SftyChanged) OTU(S015RB01.Int.RstSftyChange) ];
				N: [XIC(S015RB02.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS015RB02) ,XIC(S015RB02.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS015RB02) ,XIO(S015RB02Sfty.Int.SftyChanged) OTU(S015RB02.Int.RstSftyChange) ];
				N: [XIC(S018RB01.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS018RB01) ,XIC(S018RB01.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS018RB01) ,XIO(S018RB01Sfty.Int.SftyChanged) OTU(S018RB01.Int.RstSftyChange) ];
				N: [XIC(S018RB02.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS018RB02) ,XIC(S018RB02.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS018RB02) ,XIO(S018RB02Sfty.Int.SftyChanged) OTU(S018RB02.Int.RstSftyChange) ];
				N: [XIC(S019RB01.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS019RB01) ,XIC(S019RB01.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS019RB01) ,XIO(S019RB01Sfty.Int.SftyChanged) OTU(S019RB01.Int.RstSftyChange) ];
				N: [XIC(S020RB01.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS020RB01) ,XIC(S020RB01.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS020RB01) ,XIO(S020RB01Sfty.Int.SftyChanged) OTU(S020RB01.Int.RstSftyChange) ];
				N: [XIC(S020RB02.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS020RB02) ,XIC(S020RB02.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS020RB02) ,XIO(S020RB02Sfty.Int.SftyChanged) OTU(S020RB02.Int.RstSftyChange) ];
				N: [XIC(S020RB03.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS020RB03) ,XIC(S020RB03.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS020RB03) ,XIO(S020RB03Sfty.Int.SftyChanged) OTU(S020RB03.Int.RstSftyChange) ];
				N: [XIC(S020RB04.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS020RB04) ,XIC(S020RB04.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS020RB04) ,XIO(S020RB04Sfty.Int.SftyChanged) OTU(S020RB04.Int.RstSftyChange) ];
				N: [XIC(S020RB05.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS020RB05) ,XIC(S020RB05.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS020RB05) ,XIO(S020RB05Sfty.Int.SftyChanged) OTU(S020RB05.Int.RstSftyChange) ];
				N: [XIC(S020RB06.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS020RB06) ,XIC(S020RB06.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS020RB06) ,XIO(S020RB06Sfty.Int.SftyChanged) OTU(S020RB06.Int.RstSftyChange) ];
				N: [XIC(S030RB01.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS030RB01) ,XIC(S030RB01.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS030RB01) ,XIO(S030RB01Sfty.Int.SftyChanged) OTU(S030RB01.Int.RstSftyChange) ];
				N: [XIC(S030RB02.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS030RB02) ,XIC(S030RB02.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS030RB02) ,XIO(S030RB02Sfty.Int.SftyChanged) OTU(S030RB02.Int.RstSftyChange) ];
				N: [XIC(S040RB01.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS040RB01) ,XIC(S040RB01.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS040RB01) ,XIO(S040RB01Sfty.Int.SftyChanged) OTU(S040RB01.Int.RstSftyChange) ];
				N: [XIC(S040RB02.Int.DisableDrives) OTE(StdToSfty.DisblDrvsS040RB02) ,XIC(S040RB02.Int.RstSftyChange) OTE(StdToSfty.RstDcsChngS040RB02) ,XIO(S040RB02Sfty.Int.SftyChanged) OTU(S040RB02.Int.RstSftyChange) ];
				N: XIC(Z005_040.AutoModeSetup.Sts_IntlkOK)OTE(StdToSfty.AutoCycleReady);
				N: XIC(Z005_040.AllStaAutoMode)OTE(StdToSfty.AutoCycleOn);
				N: XIC(Z005_040.Faulted.0)OTE(StdToSfty.Faulted.0);
				N: XIC(Z005_040.Faulted.1)OTE(StdToSfty.Faulted.1);
				N: XIC(Edit.Debug)OTE(StdToSfty.SafetyInsFltRstPB);
		END_ROUTINE

		ROUTINE P00_Zone (Description := "Zone Standard Control Routine")
				RC: "************************************************************$N"
				    "Zone Master$N"
				    "Mode selection$N"
				    "************************************************************";
				N: NOP();
				RC: "Change Edit.Bit with conditions to enable or disable Sequential and Dynamic Modes";
				N: XIC(Edit.Bit)[XIC(Edit.Bit) OTU(Z005_040.DynamicMode) OTL(Z005_040.SequentialMode) ,XIC(Edit.Bit) OTU(Z005_040.SequentialMode) OTL(Z005_040.DynamicMode) ];
				RC: "************************************************************$N"
				    "All Zone Disconnects ON$N"
				    "$N"
				    "Add all panel disconnects$N"
				    "************************************************************";
				N: XIC(Edit.Bit)OTE(Z005_040.DiscOn);
				RC: "************************************************************$N"
				    "Main Air$N"
				    "$N"
				    "Add flow switch sensor input if applicable and Remove Status.AlwaysOn Bit$N"
				    "************************************************************";
				N: [[XIC(Edit.Bit) ,XIC(Status.AlwaysOn) ] MOV(1500,Z005_040.AirOnDlyTmr.PRE) TOF(Z005_040.AirOnDlyTmr,?,?) ,XIC(Z005_040.AirOnDlyTmr.DN) OTE(Z005_040.AirOn) ];
				RC: "************************************************************$N"
				    "Any Fault Reset Pressed$N"
				    "************************************************************";
				N: [XIC(sZ005_040.AnyGateRstPB) ,XIC(HMI.Int.ResetPB) ]OTE(Z005_040.AnyFltResetPB);
				RC: "************************************************************$N"
				    "All Modules Communication OK$N"
				    "$N"
				    "Map all zone Modules$N"
				    "Zone IO blocks$N"
				    "Gates$N"
				    "************************************************************";
				N: XIC(Z005_040IOL1.ENet.CommOK)XIC(Z005_040MIO2.ENet.CommOK)XIC(S007GS1Diag.ENet.CommOK)XIC(S010GS1Diag.ENet.CommOK)XIC(S030GS1Diag.ENet.CommOK)XIC(S030GS2Diag.ENet.CommOK)XIC(S005TL1.Int.AllModCommOk)XIC(S010TL1.Int.AllModCommOk)XIC(Edit.Bit)OTE(Z005_040.AllModCommOk);
				N: XIC(Edit.Bit)OTE(Z005_040.SftyCommOK);
				RC: "************************************************************$N"
				    "No Part Presents$N"
				    "************************************************************";
				N: XIC(S005TL1.Int.PartsPresNo)XIC(S010TL1.Int.PartsPresNo)XIC(Edit.Bit)OTE(Z005_040.NoPartPres);
				RC: "Auto Mode Enable";
				N: [XIC(sZ005_040.PowerEnbld) OTE(Z005_040.AutoModeSetup.Inp_Intlk00) ,XIC(sZ005_040.AllEStopsOk) OTE(Z005_040.AutoModeSetup.Inp_Intlk01) ,XIC(sZ005_040.PerimeterSafe) OTE(Z005_040.AutoModeSetup.Inp_Intlk02) ,XIO(sZ005_040.AnyBypassSwOn) OTE(Z005_040.AutoModeSetup.Inp_Intlk03) ,XIC(Z005_040.DiscOn) OTE(Z005_040.AutoModeSetup.Inp_Intlk04) ,XIC(Z005_040.AllModCommOk) XIC(Z005_040.SftyCommOK) OTE(Z005_040.AutoModeSetup.Inp_Intlk05) ,[XIO(Z005_040.AutoModeStop) ,XIC(Edit.Debug) ] OTE(Z005_040.AutoModeSetup.Inp_Intlk06) ,XIC(Z005_040.AnyStaAutoSel) OTE(Z005_040.AutoModeSetup.Inp_Intlk07) ,XIC(Z005_040.AirOn) OTE(Z005_040.AutoModeSetup.Inp_Intlk08) ,OTE(Z005_040.AutoModeSetup.Inp_Intlk09) ,OTE(Z005_040.AutoModeSetup.Inp_Intlk10) ,P_Intlk(Z005_040.AutoModeSetup) ];
				RC: "Auto Mode Select PB";
				N: [XIC(Z005_040.AutoModeSelPB) ,XIC(sZ005_040.AnyPowerEnblPB) ]OTE(Z005_040.GlobalAutoModeSelPB);
				RC: "Auto Mode PB";
				N: [XIC(Z005_040.AutoModePB) ,XIC(sZ005_040.AnyGateStartPB) ]XIC(Z005_040.AutoModeSetup.Sts_IntlkOK)OTE(Z005_040.GlobalAutoModePB);
				RC: "************************************************************$N"
				    "Auto Mode$N"
				    "************************************************************$N"
				    "";
				N: XIC(S005TL1.Int.AutoSel)XIC(S010TL1.Int.AutoSel)XIC(Edit.Bit)OTE(Z005_040.AllStaAutoSel);
				N: [XIC(S005TL1.Int.AutoSel) ,XIC(S010TL1.Int.AutoSel) ,XIC(Edit.Bit) ]OTE(Z005_040.AnyStaAutoSel);
				N: XIC(S005TL1.Int.AutoMode)XIC(S010TL1.Int.AutoMode)XIC(S001CNV1.Unld.AutoMode)XIC(S001CNV1.Load.AutoMode)XIC(Edit.Bit)OTE(Z005_040.AllStaAutoMode);
				N: [XIC(S005TL1.Int.AutoMode) ,XIC(S010TL1.Int.AutoMode) ,XIC(S001CNV1.Unld.AutoMode) ,XIC(S001CNV1.Load.AutoMode) ,XIC(Edit.Bit) ]OTE(Z005_040.AnyStaAutoMode);
				RC: "************************************************************$N"
				    "Manual Mode$N"
				    "************************************************************$N"
				    "";
				N: [XIC(S005TL1.Int.ManualMode) ,XIC(S010TL1.Int.ManualMode) ,XIC(S001CNV1.Unld.ManualMode) ,XIC(S001CNV1.Load.ManualMode) ,XIC(Edit.Bit) ]OTE(Z005_040.AnyStaManualMode);
				N: XIC(S005TL1.Int.ManualMode)XIC(S010TL1.Int.ManualMode)XIC(S001CNV1.Unld.ManualMode)XIC(S001CNV1.Load.ManualMode)XIC(Edit.Bit)OTE(Z005_040.AllStaManualMode);
				RC: "************************************************************$N"
				    "No Mode$N"
				    "************************************************************$N"
				    "";
				N: XIO(Z005_040.AllStaAutoMode)XIO(Z005_040.AllStaManualMode)OTE(Z005_040.NoMode);
				RC: "************************************************************$N"
				    "Auto Cycle Stop Request$N"
				    "************************************************************$N"
				    "";
				N: XIC(Z005_040.AnyStaAutoMode)[XIC(Z005_040.NoModePB) ,XIC(Z005_040.AutoModeStopPB) ,XIC(sZ005_040.AnyOpenGateReqPB) ,XIC(Z005_040.AutoModeStopReq) ]XIO(Z005_040.AutoModeStop)OTE(Z005_040.AutoModeStopReq);
				RC: "Auto Mode Stop Setup 1$N"
				    "All Stations at Known Position$N"
				    "*";
				N: XIC(S005TL1.Int.KnownPos)XIC(S010TL1.Int.KnownPos)XIC(Edit.Bit)OTE(Z005_040.AutoModeStopEnable.0);
				RC: "Aut Mode Stop Setup 2$N"
				    "All Robots No Motion$N"
				    "*$N"
				    "Paused$N"
				    "Held$N"
				    "Faulted$N"
				    "*";
				N: [XIC(S005RB01.I1.Pg_Paused) ,XIC(S005RB01.I1.RbtHeld) ,XIC(S005RB01.I1.RbtFaulted) ,XIC(S005RB01.I1.WaitingOnInput) ][XIC(S005RB02.I1.Pg_Paused) ,XIC(S005RB02.I1.RbtHeld) ,XIC(S005RB02.I1.RbtFaulted) ,XIC(S005RB02.I1.WaitingOnInput) ][XIC(S010RB01.I1.Pg_Paused) ,XIC(S010RB01.I1.RbtHeld) ,XIC(S010RB01.I1.RbtFaulted) ,XIC(S010RB01.I1.WaitingOnInput) ][XIC(S010RB02.I1.Pg_Paused) ,XIC(S010RB02.I1.RbtHeld) ,XIC(S010RB02.I1.RbtFaulted) ,XIC(S010RB02.I1.WaitingOnInput) ][XIC(S020RB01.I1.Pg_Paused) ,XIC(S020RB01.I1.RbtHeld) ,XIC(S020RB01.I1.RbtFaulted) ,XIC(S020RB01.I1.WaitingOnInput) ][XIC(S020RB02.I1.Pg_Paused) ,XIC(S020RB02.I1.RbtHeld) ,XIC(S020RB02.I1.RbtFaulted) ,XIC(S020RB02.I1.WaitingOnInput) ]XIC(Edit.Bit)OTE(Z005_040.AutoModeStopEnable.1);
				N: XIC(Z005_040.AutoMode)XIC(Z005_040.AutoModeStopReq)XIC(Z005_040.AutoModeStopEnable.0)XIC(Z005_040.AutoModeStopEnable.1)OTE(Z005_040.AutoModeStop);
				RC: "************************************************************$N"
				    "Cycle End$N"
				    "************************************************************$N"
				    "";
				N: NOP();
				N: [XIC(Z005_040.Utility.CycleEnd.PB) [XIO(Z005_040.Utility.CycleEnd.Seld) XIO(Z005_040.Utility.CycleEnd.Toggle) [OTL(Z005_040.Utility.CycleEnd.Seld) ,OTL(Z005_040.Utility.CycleEnd.Toggle) ] ,XIC(Z005_040.Utility.CycleEnd.Seld) XIO(Z005_040.Utility.CycleEnd.Toggle) [OTU(Z005_040.Utility.CycleEnd.Seld) ,OTL(Z005_040.Utility.CycleEnd.Toggle) ] ] ,XIO(Z005_040.Utility.CycleEnd.PB) OTU(Z005_040.Utility.CycleEnd.Toggle) ];
				N: XIC(Z005_040.Utility.CycleEnd.Seld)[XIC(S005RB01.I1.Pg_Paused) ,XIC(S005RB01.I1.RbtHeld) ,XIC(S005RB01.I1.RbtFaulted) ,XIC(S005RB01.I1.AtHome) ,XIC(S005RB01.I1.AtMaintPos) ,XIC(S005RB01.I1.WaitingOnInput) ][XIC(S005RB02.I1.Pg_Paused) ,XIC(S005RB02.I1.RbtHeld) ,XIC(S005RB02.I1.RbtFaulted) ,XIC(S005RB02.I1.AtHome) ,XIC(S005RB02.I1.AtMaintPos) ,XIC(S005RB02.I1.WaitingOnInput) ][XIC(S010RB01.I1.Pg_Paused) ,XIC(S010RB01.I1.RbtHeld) ,XIC(S010RB01.I1.RbtFaulted) ,XIC(S010RB01.I1.AtHome) ,XIC(S010RB01.I1.AtMaintPos) ,XIC(S010RB01.I1.WaitingOnInput) ][XIC(S010RB02.I1.Pg_Paused) ,XIC(S010RB02.I1.RbtHeld) ,XIC(S010RB02.I1.RbtFaulted) ,XIC(S010RB02.I1.AtHome) ,XIC(S010RB02.I1.AtMaintPos) ,XIC(S010RB02.I1.WaitingOnInput) ][XIC(S020RB01.I1.Pg_Paused) ,XIC(S020RB01.I1.RbtHeld) ,XIC(S020RB01.I1.RbtFaulted) ,XIC(S020RB01.I1.AtHome) ,XIC(S020RB01.I1.AtMaintPos) ,XIC(S020RB01.I1.WaitingOnInput) ][XIC(S020RB02.I1.Pg_Paused) ,XIC(S020RB02.I1.RbtHeld) ,XIC(S020RB02.I1.RbtFaulted) ,XIC(S020RB02.I1.AtHome) ,XIC(S020RB02.I1.AtMaintPos) ,XIC(S020RB02.I1.WaitingOnInput) ]XIC(Edit.Bit)OTE(Z005_040.CycleEnd);
				RC: "************************************************************$N"
				    "Runout Mode$N"
				    "************************************************************$N"
				    "";
				N: NOP();
				N: [XIC(Z005_040.Utility.RunoutMode.PB) [XIO(Z005_040.Utility.RunoutMode.Seld) XIO(Z005_040.Utility.RunoutMode.Toggle) [OTL(Z005_040.Utility.RunoutMode.Seld) ,OTL(Z005_040.Utility.RunoutMode.Toggle) ] ,XIC(Z005_040.Utility.RunoutMode.Seld) XIO(Z005_040.Utility.RunoutMode.Toggle) [OTU(Z005_040.Utility.RunoutMode.Seld) ,OTL(Z005_040.Utility.RunoutMode.Toggle) ] ] ,XIO(Z005_040.Utility.RunoutMode.PB) OTU(Z005_040.Utility.RunoutMode.Toggle) ];
				N: [NEQ(Z1.L1[0],0) ,NEQ(Z1.L1[1],0) ,NEQ(Z1.L1[2],0) ,NEQ(Z1.L1[3],0) ,NEQ(Z1.L1[4],0) ,NEQ(Z1.L1[5],0) ,NEQ(Z1.L1[6],0) ,NEQ(Z1.L1[7],0) ]XIC(Edit.Bit)OTE(Z005_040.Faulted.0);
				N: [NEQ(Z1.L2[0],0) ,NEQ(Z1.L2[1],0) ,NEQ(Z1.L2[2],0) ,NEQ(Z1.L2[3],0) ]XIC(Edit.Bit)OTE(Z005_040.Faulted.1);
		END_ROUTINE

		ROUTINE R01_RFID_RFU63x_S005 (Description := "Standard Routine for RFU63X RFID Reader")
				RC: "************************************************************$N"
				    "FRM007 RFID Control$N"
				    "************************************************************";
				N: NOP();
				N: COP(S005RFID:I.Data[0],S005TL1RF.I[0],32);
				RC: "************************************************************$N"
				    "Add conditions to enable read/write$N"
				    "$N"
				    "cfgTriggerEnable should be OTU unless specified by Controls Dept.$N"
				    "************************************************************";
				N: [XIC(Edit.Bit) OTE(S005TL1RF.AOI.cfgReadEnable) ,XIC(Edit.Bit) OTE(S005TL1RF.AOI.cfgWriteEnable) ,OTU(S005TL1RF.AOI.cfgTriggerEnable) ];
				N: XIC(S005TL1RF.AOI.stsBusy)XIO(S005TL1RF.AOI.stsDone)OTL(S005TL1RF.Int.InProcess);
				N: XIC(S005TL1.Int.FaultResetPB)XIO(S005TL1RF.Int.InProcess)OTE(S005TL1RF.Int.ResetPB);
				N: XIC(S005TL1.Int.AllPartsPres1)XIC(S005TL1.SR.Int.Model1)XIC(Edit.Bit)[MOV(100,S005TL1RF.Int.TagInPosDwl.PRE) TON(S005TL1RF.Int.TagInPosDwl,?,?) ,XIC(S005TL1RF.Int.TagInPosDwl.DN) OTE(S005TL1RF.Int.TagInPos) ];
				N: XIC(S005TL1RF.Int.TagInPos)XIC(S005Sfty.StaZn1Active)XIO(S005TL1RF.Int.InProcess)XIC(S005TL1RF.AOI.cfgReadEnable)XIO(S005TL1RF.Int.ReadComp)XIC(Edit.Bit)OTE(S005TL1RF.Int.ClrToRead);
				N: XIC(S005TL1.Int.AutoMode)XIC(S005TL1RF.Int.ClrToRead)[ONS(S005TL1RF.Int.ReadOns) [OTL(S005TL1RF.RFU.pCmdRead) ,MOV('',S005TL1RF.Int.ReadDataReg) ] ,OTL(S005TL1RF.Int.Reading) ];
				N: XIC(S005TL1RF.Int.TagInPos)XIC(S005Sfty.StaZn1Active)XIO(S005TL1RF.Int.InProcess)XIC(S005TL1RF.AOI.cfgWriteEnable)XIO(S005TL1RF.Int.WriteComp)XIC(Edit.Bit)OTE(S005TL1RF.Int.ClrToWrite);
				N: XIC(S005TL1.Int.AutoMode)XIC(S005TL1RF.Int.ClrToWrite)[ONS(S005TL1RF.Int.WriteOns) OTL(S005TL1RF.RFU.pCmdWrite) ,OTL(S005TL1RF.Int.Writing) ];
				N: [XIC(S005TL1RF.RFU.pCmdRead) ,XIC(S005TL1RF.RFU.pCmdWrite) ]OTL(S005TL1RF.RFU.ResetCmd);
				N: RFU63xPh2(S005TL1RF.AOI,S005TL1RF.O,S005TL1RF.I,S005TL1RF.RFU,S005TL1RF.Int.ReadDataReg,S005TL1.Int,S005TL1RF.Int.WriteDataReg,S005TL1RF.Int.ResetPB);
				N: XIC(S005TL1RF.Int.Reading)XIC(S005TL1RF.Int.InProcess)XIC(S005TL1RF.AOI.stsDone)NEQ(S005TL1RF.Int.ReadDataReg,'')OTL(S005TL1RF.Int.ReadComp);
				N: XIC(S005TL1RF.Int.Writing)XIC(S005TL1RF.Int.InProcess)XIC(S005TL1RF.AOI.stsDone)OTL(S005TL1RF.Int.WriteComp);
				N: [XIC(S005TL1RF.Int.ReadComp) XIC(Edit.Bit) ,XIC(S005TL1RF.Int.WriteComp) XIC(Edit.Bit) ][OTE(S005TL1RF.Int.ProcessComp) ,OTU(S005TL1RF.Int.Reading) ,OTU(S005TL1RF.Int.Writing) ];
				N: XIC(S005TL1RF.Int.ProcessComp)XIC(S005TL1RF.AOI.stsDone)XIO(S005TL1RF.AOI.stsBusy)OTU(S005TL1RF.Int.InProcess);
				N: XIC(S005TL1RF.Int.ProcessComp)XIO(S005TL1RF.Int.InProcess)XIC(Edit.Bit)[OTU(S005TL1RF.Int.ReadComp) ,OTU(S005TL1RF.Int.WriteComp) ];
				N: COP(S005RFID:O.Data[0],S005TL1RF.O[0],32);
		END_ROUTINE

		ROUTINE R01_RFID_RFU63x_S019 (Description := "Standard Routine for RFU63X RFID Reader")
				RC: "************************************************************$N"
				    "FRM007 RFID Control$N"
				    "************************************************************";
				N: NOP();
				N: COP(S019RFID:I.Data[0],S019TO1RF.I[0],32);
				RC: "************************************************************$N"
				    "Add conditions to enable read/write$N"
				    "$N"
				    "cfgTriggerEnable should be OTU unless specified by Controls Dept.$N"
				    "************************************************************";
				N: [XIC(Edit.Bit) OTE(S019TO1RF.AOI.cfgReadEnable) ,XIC(Edit.Bit) OTE(S019TO1RF.AOI.cfgWriteEnable) ,OTU(S019TO1RF.AOI.cfgTriggerEnable) ];
				N: XIC(S019TO1RF.AOI.stsBusy)XIO(S019TO1RF.AOI.stsDone)OTL(S019TO1RF.Int.InProcess);
				N: XIC(S019TO1.Int.FaultResetPB)XIO(S019TO1RF.Int.InProcess)OTE(S019TO1RF.Int.ResetPB);
				N: XIC(S019TO1.Int.AllPartsPres1)XIC(S019TO1.SR.Int.Model1)XIC(Edit.Bit)[MOV(100,S019TO1RF.Int.TagInPosDwl.PRE) TON(S019TO1RF.Int.TagInPosDwl,?,?) ,XIC(S019TO1RF.Int.TagInPosDwl.DN) OTE(S019TO1RF.Int.TagInPos) ];
				N: XIC(S019TO1RF.Int.TagInPos)XIC(S019Sfty.StaZn1Active)XIO(S019TO1RF.Int.InProcess)XIC(S019TO1RF.AOI.cfgReadEnable)XIO(S019TO1RF.Int.ReadComp)XIC(Edit.Bit)OTE(S019TO1RF.Int.ClrToRead);
				N: XIC(S019TO1.Int.AutoMode)XIC(S019TO1RF.Int.ClrToRead)[ONS(S019TO1RF.Int.ReadOns) [OTL(S019TO1RF.RFU.pCmdRead) ,MOV('',S019TO1RF.Int.ReadDataReg) ] ,OTL(S019TO1RF.Int.Reading) ];
				N: XIC(S019TO1RF.Int.TagInPos)XIC(S019Sfty.StaZn1Active)XIO(S019TO1RF.Int.InProcess)XIC(S019TO1RF.AOI.cfgWriteEnable)XIO(S019TO1RF.Int.WriteComp)XIC(Edit.Bit)OTE(S019TO1RF.Int.ClrToWrite);
				N: XIC(S019TO1.Int.AutoMode)XIC(S019TO1RF.Int.ClrToWrite)[ONS(S019TO1RF.Int.WriteOns) OTL(S019TO1RF.RFU.pCmdWrite) ,OTL(S019TO1RF.Int.Writing) ];
				N: [XIC(S019TO1RF.RFU.pCmdRead) ,XIC(S019TO1RF.RFU.pCmdWrite) ]OTL(S019TO1RF.RFU.ResetCmd);
				N: RFU63xPh2(S019TO1RF.AOI,S019TO1RF.O,S019TO1RF.I,S019TO1RF.RFU,S019TO1RF.Int.ReadDataReg,S019TO1.Int,S019TO1RF.Int.WriteDataReg,S019TO1RF.Int.ResetPB);
				N: XIC(S019TO1RF.Int.Reading)XIC(S019TO1RF.Int.InProcess)XIC(S019TO1RF.AOI.stsDone)NEQ(S019TO1RF.Int.ReadDataReg,'')OTL(S019TO1RF.Int.ReadComp);
				N: XIC(S019TO1RF.Int.Writing)XIC(S019TO1RF.Int.InProcess)XIC(S019TO1RF.AOI.stsDone)OTL(S019TO1RF.Int.WriteComp);
				N: [XIC(S019TO1RF.Int.ReadComp) XIC(Edit.Bit) ,XIC(S019TO1RF.Int.WriteComp) XIC(Edit.Bit) ][OTE(S019TO1RF.Int.ProcessComp) ,OTU(S019TO1RF.Int.Reading) ,OTU(S019TO1RF.Int.Writing) ];
				N: XIC(S019TO1RF.Int.ProcessComp)XIC(S019TO1RF.AOI.stsDone)XIO(S019TO1RF.AOI.stsBusy)OTU(S019TO1RF.Int.InProcess);
				N: XIC(S019TO1RF.Int.ProcessComp)XIO(S019TO1RF.Int.InProcess)XIC(Edit.Bit)[OTU(S019TO1RF.Int.ReadComp) ,OTU(S019TO1RF.Int.WriteComp) ];
				N: COP(S019RFID:O.Data[0],S019TO1RF.O[0],32);
		END_ROUTINE

		ROUTINE S00_ShiftRegisters (Description := "Shift Register Routine")
				RC: "############################$N"
				    "Shift Register Routine$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    "Model From MES$N"
				    "$N"
				    "Note: Top Rung to be used with existing MES Logic$N"
				    "Lower Rung, Option Proposal$N"
				    "*Delete This Note After Proposal is approved*$N"
				    "############################";
				N: XIO(Z005_040.DryCycle)XIC(Edit.Bit)[LIM(1,S005TL1MES.ManualOS.SR.Data.Options.CarModel,3) EQU(S005TL1MES.ManualOS.SR.Data.Options.CanRoofPack,1) MOV(1,S005TL1MES.ManualOS.SR.Int.Model) ,LIM(3,S005TL1MES.ManualOS.SR.Data.Options.CarModel,4) EQU(S005TL1MES.ManualOS.SR.Data.Options.CanRoofPack,2) MOV(2,S005TL1MES.ManualOS.SR.Int.Model) ];
				RC: "############################$N"
				    "MES To S005TL1$N"
				    "$N"
				    "############################";
				N: XIC(Edit.Bit)XIC(S005TL1.SR.Int.NoPart)XIC(S005TL1RF.Int.ProcessComp)XIC(S005TL1MES.ManualOS.DataAvailable)XIC(Edit.Debug)NEQ(S005TL1MES.ManualOS.SR.Int.Model,0)NEQ(S005TL1MES.ManualOS.SR.Int.Model,90)[CPS(S005TL1MES.ManualOS.SR,S005TL1.SR,1) ,CPS(ZeroRef[0],S005TL1MES.ManualOS.SR,1) ];
				RC: "############################$N"
				    "S005TL1 To S005RB01$N"
				    "############################";
				N: XIC(S005RB01.Int.Pick1Comp)XIO(S005RB01.Int.ClearOfPick1)XIO(S005TL1.SR.Int.NoPart)OTE(S005RB01.SR.Int.Shift.0);
				N: XIC(S005RB01.SR.Int.Shift.0)XIC(S005RB01.SR.Int.NoPart)[CPS(S005TL1.SR,S005RB01.SR,1) ,CPS(ZeroRef[0],S005TL1.SR,1) ,MOV(90,S005TL1.SR.Int.Model) ];
				RC: "############################$N"
				    "S005RB01 To S010TL1$N"
				    "############################";
				N: XIC(S005RB01.Int.Drop1Comp)XIO(S005RB01.Int.ClearOfDrop1)XIO(S005RB01.SR.Int.NoPart)OTE(S005RB01.SR.Int.Shift.1);
				N: XIC(S005RB01.SR.Int.Shift.1)XIC(S010TL1.SR.Int.NoPart)[CPS(S005RB01.SR,S010TL1.SR,1) ,CPS(ZeroRef[0],S005RB01.SR,1) ,MOV(90,S005RB01.SR.Int.Model) ];
				RC: "############################$N"
				    "S015RT1 Next SR To S015RT1$N"
				    "############################";
				N: XIC(S015RT1_LwrRck.Int.AtWorkPos1)EQU(90,S015RT1_LwrRck.SR.Int.Model)XIO(S015RT1LookAhead.NextSR.Int.NoPart)OTE(S015RT1LookAhead.NextSR.Int.Shift.0);
				N: XIC(S015RT1.SR.Int.Shift.0)XIC(S015RT1_LwrRck.SR.Int.NoPart)[CPS(S015RT1LookAhead.NextSR,S015RT1_LwrRck.SR,1) ,CPS(ZeroRef[0],S015RT1LookAhead.NextSR,1) ,MOV(90,S015RT1LookAhead.NextSR.Int.Model) ];
				RC: "############################$N"
				    "S015RT1 To S005RB01$N"
				    "############################";
				N: XIC(S005RB01.Int.Pick2Comp)XIO(S005RB01.Int.ClearOfPick2)XIO(S015RT1_LwrRck.SR.Int.NoPart)OTE(S005RB01.SR.Int.Shift.2);
				N: XIC(S005RB01.SR.Int.Shift.2)XIC(S005RB01.SR.Int.NoPart)[CPS(S015RT1_LwrRck.SR,S005RB01.SR,1) ,CPS(ZeroRef[0],S015RT1_LwrRck.SR,1) ,MOV(90,S015RT1_LwrRck.SR.Int.Model) ];
				RC: "############################$N"
				    "CNV To Robot$N"
				    "############################";
				N: XIC(S005RB02.Int.Pick3Comp)XIO(S005RB01.Int.ClearOfPick3)XIO(S001CNV1.Unld.SR.Int.NoPart)OTE(S005RB02.SR.Int.Shift.0);
				N: XIC(S005RB02.SR.Int.Shift.0)XIC(S005RB02.SR.Int.NoPart)[CPS(S001CNV1.Unld.SR,S005RB02.SR,1) ,XIC(Edit.Debug) CPS(ZeroRef[0],S001CNV1.Unld.SR,1) ,MOV(95,S001CNV1.Unld.SR.Int.Model) ];
				N: XIC(S001CNV1.M.RunningFwd)XIC(S001CNV1.Unld.SR.Int.EmptyPall)[XIO(S001CNV1.Pallet[1].PalletPres) ,XIC(Edit.Debug) ]XIC(S005RB01.Int.ClearOfPick3)[CPS(ZeroRef[0],S001CNV1.Unld.SR,1) ,MOV(90,S001CNV1.Unld.SR.Int.Model) ];
				RC: "############################$N"
				    "Robot To CNV$N"
				    "############################";
				N: XIC(S005RB02.Int.Drop3Comp)XIO(S005RB01.Int.ClearOfDrop3)XIO(S005RB02.SR.Int.NoPart)OTE(S005RB02.SR.Int.Shift.1);
				N: XIC(S005RB02.SR.Int.Shift.1)XIC(S001CNV1.Load.SR.Int.NoPart)[CPS(S005RB02.SR,S001CNV1.Load.SR,1) ,CPS(ZeroRef[0],S001CNV1.Load.SR,1) ,MOV(90,S005RB02.SR.Int.Model) ];
				RC: "############################$N"
				    "Load CNV To CNV Positions$N"
				    "############################$N"
				    "Add depends of how manny position availables in cnv$N"
				    "";
				N: XIC(S001CNV1.Pallet[11].PalletLivingMem)XIO(S001CNV1.Load.SR.Int.NoPart)OTE(S001CNV1.SR[1].Int.Shift.0);
				N: XIC(S001CNV1.SR[1].Int.Shift.0)XIC(S001CNV1.SR[1].Int.NoPart)[CPS(S001CNV1.Load.SR,S001CNV1.SR[1],1) ,CPS(ZeroRef[0],S001CNV1.Load.SR,1) ,MOV(90,S001CNV1.Load.SR.Int.Model) ];
				RC: "#####################$N"
				    "CNV Positions$N"
				    "############################$N"
				    "Add depends of how manny position availables in cnv$N"
				    "";
				N: LIM(1,S001CNV1.SR[1].Int.Model,30)EQU(S001CNV1.SR[2].Int.Model,90)OTE(S001CNV1.SR[2].Int.Shift.0);
				N: XIC(S001CNV1.SR[2].Int.Shift.0)[CPS(S001CNV1.SR[1],S001CNV1.SR[2],1) ,CPS(ZeroRef[0],S001CNV1.SR[1],1) ,MOV(90,S001CNV1.SR[1].Int.Model) ];
				RC: "#####################$N"
				    "CNV Positions to Unload$N"
				    "############################$N"
				    "Add depends of how manny position availables in cnv$N"
				    "";
				N: LIM(1,S001CNV1.SR[2].Int.Model,30)XIC(S001CNV1.Unld.AllPartsPres1)XIC(S001CNV1.Pallet[11].PalletPres)OTE(S001CNV1.Unld.SR.Int.Shift.0);
				N: XIC(S001CNV1.Unld.SR.Int.Shift.0)XIO(S001CNV1.Unld.SR.Int.NoPart)[CPS(S001CNV1.SR[2],S001CNV1.Unld.SR,1) ,CPS(ZeroRef[0],S001CNV1.SR[2],1) ,MOV(90,S001CNV1.SR[2].Int.Model) ];
		END_ROUTINE

		ROUTINE S01_ShiftRegistersMdlMap 
				RC: "############################$N"
				    "Shift Register Model Mapping$N"
				    "############################";
				N: NOP();
				RC: "S005TL1";
				N: [LIM(1,S005TL1.SR.Int.Model,30) OTE(S005TL1.SR.Int.Part) ,EQU(S005TL1.SR.Int.Model,90) OTE(S005TL1.SR.Int.NoPart) ];
				N: XIC(Edit.Debug)[EQU(S005TL1.SR.Int.Model,91) OTE(S005TL1.SR.Int.DmgdPart) ,EQU(S005TL1.SR.Int.Model,92) OTE(S005TL1.SR.Int.DmgdPall) ,EQU(S005TL1.SR.Int.Model,95) OTE(S005TL1.SR.Int.EmptyPall) ];
				N: XIC(S005TL1.SR.Int.Part)[EQU(S005TL1.SR.Int.Model,1) OTE(S005TL1.SR.Int.Model1) ,EQU(S005TL1.SR.Int.Model,2) OTE(S005TL1.SR.Int.Model2) ,EQU(S005TL1.SR.Int.Model,3) OTE(S005TL1.SR.Int.Model3) ,EQU(S005TL1.SR.Int.Model,4) OTE(S005TL1.SR.Int.Model4) ,EQU(S005TL1.SR.Int.Model,5) OTE(S005TL1.SR.Int.Model5) ,EQU(S005TL1.SR.Int.Model,6) OTE(S005TL1.SR.Int.Model6) ];
				RC: "********************************************************$N"
				    "S015RT1$N"
				    "****************************************************************$N"
				    "$N"
				    "";
				N: [LIM(1,S015RT1.SR.Int.Model,30) OTE(S015RT1.SR.Int.Part) ,EQU(S015RT1.SR.Int.Model,90) OTE(S015RT1.SR.Int.NoPart) ];
				N: XIC(S005TL1.SR.Int.Part)[EQU(S015RT1.SR.Int.Model,1) OTE(S015RT1.SR.Int.Model1) ,EQU(S015RT1.SR.Int.Model,2) OTE(S015RT1.SR.Int.Model2) ,EQU(S015RT1.SR.Int.Model,3) OTE(S015RT1.SR.Int.Model3) ,EQU(S015RT1.SR.Int.Model,4) OTE(S015RT1.SR.Int.Model4) ,EQU(S015RT1.SR.Int.Model,5) OTE(S015RT1.SR.Int.Model5) ,EQU(S015RT1.SR.Int.Model,6) OTE(S015RT1.SR.Int.Model6) ];
				RC: "************************************************************$N"
				    "S005RB01$N"
				    "**********************************************************";
				N: [LIM(1,S005RB01.SR.Int.Model,30) OTE(S005RB01.SR.Int.Part) ,EQU(S005RB01.SR.Int.Model,90) OTE(S005RB01.SR.Int.NoPart) ];
				N: XIC(S005RB01.SR.Int.Part)[EQU(S005RB01.SR.Int.Model,1) OTE(S005RB01.SR.Int.Model1) ,EQU(S005RB01.SR.Int.Model,2) OTE(S005RB01.SR.Int.Model2) ,EQU(S005RB01.SR.Int.Model,3) OTE(S005RB01.SR.Int.Model3) ,EQU(S005RB01.SR.Int.Model,4) OTE(S005RB01.SR.Int.Model4) ,EQU(S005RB01.SR.Int.Model,5) OTE(S005RB01.SR.Int.Model5) ,EQU(S005RB01.SR.Int.Model,6) OTE(S005RB01.SR.Int.Model6) ];
				RC: "Conveyor Load";
				N: [LIM(1,S001CNV1.Load.SR.Int.Model,30) OTE(S001CNV1.Load.SR.Int.Part) ,EQU(S001CNV1.Load.SR.Int.Model,90) OTE(S001CNV1.Load.SR.Int.NoPart) ];
				N: XIC(Edit.Debug)[EQU(S001CNV1.Load.SR.Int.Model,91) OTE(S001CNV1.Load.SR.Int.DmgdPart) ,EQU(S001CNV1.Load.SR.Int.Model,92) OTE(S001CNV1.Load.SR.Int.DmgdPall) ,EQU(S001CNV1.Load.SR.Int.Model,95) OTE(S001CNV1.Load.SR.Int.EmptyPall) ];
				N: XIC(S001CNV1.Load.SR.Int.Part)[EQU(S001CNV1.Load.SR.Int.Model,1) OTE(S001CNV1.Load.SR.Int.Model1) ,EQU(S001CNV1.Load.SR.Int.Model,2) OTE(S001CNV1.Load.SR.Int.Model2) ,EQU(S001CNV1.Load.SR.Int.Model,3) OTE(S001CNV1.Load.SR.Int.Model3) ,EQU(S001CNV1.Load.SR.Int.Model,4) OTE(S001CNV1.Load.SR.Int.Model4) ,EQU(S001CNV1.Load.SR.Int.Model,5) OTE(S001CNV1.Load.SR.Int.Model5) ,EQU(S001CNV1.Load.SR.Int.Model,6) OTE(S001CNV1.Load.SR.Int.Model6) ];
				RC: "**************************************************************************$N"
				    "Conveyor Unload Side$N"
				    "$N"
				    "*******************************************************************************$N"
				    "";
				N: [LIM(1,S001CNV1.Unld.SR.Int.Model,30) OTE(S001CNV1.Unld.SR.Int.Part) ,EQU(S001CNV1.Unld.SR.Int.Model,90) OTE(S001CNV1.Unld.SR.Int.NoPart) ];
				N: XIC(Edit.Debug)[EQU(S001CNV1.Unld.SR.Int.Model,91) OTE(S001CNV1.Unld.SR.Int.DmgdPart) ,EQU(S001CNV1.Unld.SR.Int.Model,92) OTE(S001CNV1.Unld.SR.Int.DmgdPall) ,EQU(S001CNV1.Unld.SR.Int.Model,95) OTE(S001CNV1.Unld.SR.Int.EmptyPall) ];
				N: XIC(S001CNV1.Unld.SR.Int.Part)[EQU(S001CNV1.Unld.SR.Int.Model,1) OTE(S001CNV1.Unld.SR.Int.Model1) ,EQU(S001CNV1.Unld.SR.Int.Model,2) OTE(S001CNV1.Unld.SR.Int.Model2) ,EQU(S001CNV1.Unld.SR.Int.Model,3) OTE(S001CNV1.Unld.SR.Int.Model3) ,EQU(S001CNV1.Unld.SR.Int.Model,4) OTE(S001CNV1.Unld.SR.Int.Model4) ,EQU(S001CNV1.Unld.SR.Int.Model,5) OTE(S001CNV1.Unld.SR.Int.Model5) ,EQU(S001CNV1.Unld.SR.Int.Model,6) OTE(S001CNV1.Unld.SR.Int.Model6) ];
		END_ROUTINE

		ROUTINE Y00_Alarms_L1 
				RC: "************************************************************$N"
				    "Zone 1 Safety Ethernet Devices Comm Alarms$N"
				    "Level1[0] to Level1[2]$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "Zone Module Communication Faults$N"
				    "#######################$N"
				    "$N"
				    "Add the ENet.CommOK signal of the First upstream Ethernet Device If Daisy Chain.$N"
				    "If the First Upstream Ethernet Device is a Switch, TBD.";
				N: [XIC(Edit.Bit) [XIO(S007GS1.ENet.CommOK) ,XIO(S007GS1.GateAOI.stsCommOk) ] XIO(S007GS1.ENet.Inhibited) OTE(Z1.L1[2].0) ,XIC(Edit.Bit) [XIO(S010GS1.ENet.CommOK) ,XIO(S010GS1.GateAOI.stsCommOk) ] XIO(S010GS1.ENet.Inhibited) OTE(Z1.L1[2].1) ,XIC(Edit.Bit) [XIO(S030GS1.ENet.CommOK) ,XIO(S030GS1.GateAOI.stsCommOk) ] XIO(S030GS1.ENet.Inhibited) OTE(Z1.L1[2].2) ,XIC(Edit.Bit) [XIO(S030GS2.ENet.CommOK) ,XIO(S030GS2.GateAOI.stsCommOk) ] XIO(S030GS2.ENet.Inhibited) OTE(Z1.L1[2].3) ,XIC(Edit.Bit) XIO(Z005_040IOL1.ENet.CommOK) XIO(Z005_040IOL1.ENet.Inhibited) OTE(Z1.L1[2].4) ,XIC(Edit.Bit) XIO(Z005_040MIO2.ENet.CommOK) XIO(Z005_040MIO2.ENet.Inhibited) OTE(Z1.L1[2].5) ];
				RC: "#######################$N"
				    "Interlocks Communication Faults$N"
				    "#######################";
				N: XIC(Z005_040.DiscOn)[XIC(PrevSftyIntlkIn.Status.ConnectionFaulted) OTE(Z1.L1[3].0) ,XIC(Z1SftyIntlkOut.Status.ConnectionFaulted) OTE(Z1.L1[3].1) ,XIC(Z050_080_StdInIntlk.Status.ConnectionFaulted) OTE(Z1.L1[3].2) ,XIC(CV1_UBC_StdInIntlk.Status.ConnectionFaulted) OTE(Z1.L1[3].3) ];
				RC: "#######################$N"
				    "Safety Gates Faults$N"
				    "#######################";
				N: NOP();
				N: XIC(S007GS1.GateAOI.stsFaulted)OTE(Z1.L1[5].0);
				N: XIC(S010GS1.GateAOI.stsFaulted)OTE(Z1.L1[5].1);
				N: XIC(S030GS1.GateAOI.stsFaulted)OTE(Z1.L1[5].2);
				N: XIC(S030GS2.GateAOI.stsFaulted)OTE(Z1.L1[5].3);
		END_ROUTINE

		ROUTINE Y01_Alarms_L2 
				RC: "************************************************************$N"
				    "Zone 1 Machine Faults$N"
				    "************************************************************";
				N: NOP();
				RC: "#######################$N"
				    "Zone Module Inhibited Alarms$N"
				    "#######################$N"
				    "";
				N: [XIC(S007GS1.ENet.Inhibited) OTE(Z1.L2[2].0) ,XIC(S010GS1.ENet.Inhibited) OTE(Z1.L2[2].1) ,XIC(S030GS1.ENet.Inhibited) OTE(Z1.L2[2].2) ,XIC(S030GS2.ENet.Inhibited) OTE(Z1.L2[2].3) ,XIC(Z005_040IOL1.ENet.Inhibited) OTE(Z1.L2[2].4) ,XIC(Z005_040MIO2.ENet.Inhibited) OTE(Z1.L2[2].5) ];
				RC: "Zone Air Not On";
				N: XIC(sZ005_040.PowerEnbld)XIC(Z005_040.AllModCommOk)XIO(Z005_040.AirOn)OTE(Z1.L2[10].0);
				RC: "############################$N"
				    "Zone Functions$N"
				    "Messages$N"
				    "############################";
				N: XIC(sZ005_040.PowerEnbld)XIC(Z005_040.Utility.RunoutMode.Seld)OTE(Z1.L2[11].0);
				N: XIC(sZ005_040.PowerEnbld)XIC(Z005_040.Utility.CycleEnd.Seld)OTE(Z1.L2[11].1);
				N: XIC(sZ005_040.PowerEnbld)XIC(Z005_040.AutoModeStop)OTE(Z1.L2[11].2);
				RC: "############################$N"
				    "Safety Gates Estop$N"
				    "############################";
				N: XIO(S007GS1.GateAOI.stsEstopNormal)OTE(Z1.L2[4].0);
				N: XIO(S010GS1.GateAOI.stsEstopNormal)OTE(Z1.L2[4].1);
				N: XIO(S030GS1.GateAOI.stsEstopNormal)OTE(Z1.L2[4].2);
				N: XIO(S030GS2.GateAOI.stsEstopNormal)OTE(Z1.L2[4].3);
				RC: "############################$N"
				    "Safety Gates Opened$N"
				    "############################";
				N: XIC(S007GS1.GateAOI.stsGateUnlocked)OTE(Z1.L2[5].0);
				N: XIC(S010GS1.GateAOI.stsGateUnlocked)OTE(Z1.L2[5].1);
				N: XIC(S030GS1.GateAOI.stsGateUnlocked)OTE(Z1.L2[5].2);
				N: XIC(S030GS2.GateAOI.stsGateUnlocked)OTE(Z1.L2[5].3);
				RC: "############################$N"
				    "Safety Gates$N"
				    "Bypass Switch On$N"
				    "############################";
				N: XIC(S007GS1.GateAOI.stsBypassSwitchOn)OTE(Z1.L2[6].0);
				N: XIC(S010GS1.GateAOI.stsBypassSwitchOn)OTE(Z1.L2[6].1);
				N: XIC(S030GS1.GateAOI.stsBypassSwitchOn)OTE(Z1.L2[6].2);
				N: XIC(S030GS2.GateAOI.stsBypassSwitchOn)OTE(Z1.L2[6].3);
		END_ROUTINE

		ROUTINE Y02_Alarms_L3 
				RC: "************************************************************$N"
				    "Zone$N"
				    "Warning Messages$N"
				    "************************************************************";
				N: NOP();
				N: XIC(sZ005_040.AllEStopsOk)XIC(sZ005_040.PowerEnblSetup)XIO(sZ005_040.PowerEnbld)OTE(Z1.L3[1].0);
		END_ROUTINE

		ROUTINE Z00_IntlkOutputs (Description := "Interlock Output Routine$NProduced Mapping")
				RC: "****************************************************************************************************$N"
				    "Zone Interlock Output Mapping$N"
				    "****************************************************************************************************";
				N: NOP();
				N: XIC(Z005_040.GlobalAutoModePB)OTE(Z050_080_StdOut.Zone.AutoModePB);
				N: XIC(Z005_040.AllStaAutoMode)OTE(Z050_080_StdOut.Zone.AutoMode);
				N: XIC(Z005_040.GlobalAutoModeSelPB)OTE(Z050_080_StdOut.Zone.AutoModeSelPB);
				N: XIC(Z005_040.AllStaAutoSel)OTE(Z050_080_StdOut.Zone.AutoModeSel);
				N: XIC(Z005_040.GlobalManualModePB)OTE(Z050_080_StdOut.Zone.ManualModePB);
				N: XIC(Z005_040.AllStaManualMode)OTE(Z050_080_StdOut.Zone.ManualMode);
				N: XIC(Z005_040.NoModePB)OTE(Z050_080_StdOut.Zone.NoModePB);
				N: XIC(Z005_040.NoMode)OTE(Z050_080_StdOut.Zone.NoMode);
				N: XIC(Z005_040.NoPartPres)OTE(Z050_080_StdOut.Zone.NoPartPres);
				N: XIC(Z005_040.DryCycle)OTE(Z050_080_StdOut.Zone.DryCycle);
				N: XIC(Z005_040.Utility.CycleEnd.Seld)OTE(Z050_080_StdOut.Zone.CycEndSeld);
				N: XIC(Z005_040.CycleEnd)OTE(Z050_080_StdOut.Zone.CycEnd);
				N: XIC(Z005_040.Utility.RunoutMode.Seld)OTE(Z050_080_StdOut.Zone.RunoutMode);
				N: XIC(Z005_040.AutoModeStopReq)OTE(Z050_080_StdOut.Zone.AutoModeStopReq);
				N: XIC(Z005_040.AutoModeStop)OTE(Z050_080_StdOut.Zone.AutoModeStop);
				N: NEQ(Z005_040.Faulted,0)OTE(Z050_080_StdOut.Zone.Faulted);
				N: XIC(Z005_040.AnyFltResetPB)OTE(Z050_080_StdOut.Zone.AnyFltResetPB);
				N: XIC(Z005_040.Utility.GlobalRbtsMaint.Seld)OTE(Z050_080_StdOut.Zone.GlobalRbtsMaint);
				N: XIC(Z005_040.Utility.RetGlobalRbtsMaint.Seld)OTE(Z050_080_StdOut.Zone.RetGlobalRbtsMaint);
				N: XIC(Z005_040.Utility.GlobalXferHold.Seld)OTE(Z050_080_StdOut.Zone.GlobalXferHold);
				RC: "****************************************************************************************************$N"
				    "Conveyor Interlock Output Mapping$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				N: XIC(S001CNV1.Int.All_Zone_LC_OK)OTE(Z050_080_StdOut.Cnv.All_Zone_LC_OK);
				N: XIC(S001CNV1.Int.All_LC_OK)OTE(Z050_080_StdOut.Cnv.All_LC_OK);
				N: XIC(S001CNV1.Int.All_EStops_OK)OTE(Z050_080_StdOut.Cnv.All_EStops_OK);
				N: XIC(S001CNV1.Int.RdyToRun)OTE(Z050_080_StdOut.Cnv.RdyToRun);
				N: XIC(S001CNV1.Int.NoMotion)OTE(Z050_080_StdOut.Cnv.NoMotion);
				RC: "****************************************************************************************************$N"
				    "Depending the Conveyor Side Aplication to Interlocks$N"
				    "Load-Unload Side$N"
				    " Setup the Outputs $N"
				    "$N"
				    "****************************************************************************************************$N"
				    "";
				N: [XIC(Edit.Bit) XIC(S001CNV1.Load.NoMode) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.NoMode) ]OTE(Z050_080_StdOut.Cnv.NoMode);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Load.AutoSel) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.AutoSel) ]OTE(Z050_080_StdOut.Cnv.AutoSel);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Load.AutoMode) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.AutoMode) ]OTE(Z050_080_StdOut.Cnv.AutoMode);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Load.ManualMode) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.ManualMode) ]OTE(Z050_080_StdOut.Cnv.ManualMode);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Load.DryCycle) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.DryCycle) ]OTE(Z050_080_StdOut.Cnv.DryCycle);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Load.HoldEndOfCycle) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.HoldEndOfCycle) ]OTE(Z050_080_StdOut.Cnv.HoldEndOfCycle);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Load.Fault) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.Fault) ]OTE(Z050_080_StdOut.Cnv.Fault);
				N: [[XIC(Edit.Bit) XIC(S001CNV1.Load.RbtAtDrop) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.RbtAtDrop) ] OTE(Z050_080_StdOut.Cnv.RbtAtDrop) ,[XIC(Edit.Bit) XIC(S001CNV1.Load.RbtAtPick) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.RbtAtPick) ] OTE(Z050_080_StdOut.Cnv.RbtAtPick) ,[XIC(Edit.Bit) XIC(S001CNV1.Load.RbtAtPick2) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.RbtAtPick2) ] OTE(Z050_080_StdOut.Cnv.RbtAtPick2) ,[XIC(Edit.Bit) XIC(S001CNV1.Load.RbtAtPick3) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.RbtAtPick3) ] OTE(Z050_080_StdOut.Cnv.RbtAtPick3) ];
				N: [XIC(Edit.Bit) XIC(S001CNV1.Load.RbtsClr.Sts_PermOK) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.RbtsClr.Sts_PermOK) ]OTE(Z050_080_StdOut.Cnv.RbtsClr);
				N: XIC(Edit.Bit)XIC(S001CNV1.Load.Clear)OTE(Z050_080_StdOut.Cnv.ClearToLoad);
				N: XIC(Edit.Bit)XIC(S001CNV1.Unld.Clear)OTE(Z050_080_StdOut.Cnv.ClearToUnld);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Load.AllPPandSR) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.AllPPandSR) ]OTE(Z050_080_StdOut.Cnv.AllPPandSR);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Pallet[1].PalletPres) ,XIC(Edit.Bit) XIC(S001CNV1.Pallet[11].PalletPres) ]OTE(Z050_080_StdOut.Cnv.PalletPres);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Pallet[1].GoodPalletPres) ,XIC(Edit.Bit) XIC(S001CNV1.Pallet[11].GoodPalletPres) ]OTE(Z050_080_StdOut.Cnv.GoodPalletPres);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Pallet[1].BadPalletPres) ,XIC(Edit.Bit) XIC(S001CNV1.Pallet[11].BadPalletPres) ]OTE(Z050_080_StdOut.Cnv.BadPalletPres);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Load.PartsPresAll) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.PartsPresAll) ]OTE(Z050_080_StdOut.Cnv.PartsPresAll);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Load.PartsPresNo) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.PartsPresNo) ]OTE(Z050_080_StdOut.Cnv.PartsPresNo);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Load.AnyPartPres) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.AnyPartPres) ]OTE(Z050_080_StdOut.Cnv.AnyPartPres);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Act[1].Work.Comp) ,XIC(Edit.Bit) XIC(S001CNV1.Act[11].Work.Comp) ]OTE(Z050_080_StdOut.Cnv.StopAtWork);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Act[1].Home.Comp) ,XIC(Edit.Bit) XIC(S001CNV1.Act[11].Home.Comp) ]OTE(Z050_080_StdOut.Cnv.StopAtHome);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Load.TaskComp) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.TaskComp) ]OTE(Z050_080_StdOut.Cnv.TaskComp);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Load.CycComp) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.CycComp) ]OTE(Z050_080_StdOut.Cnv.CycComp);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Load.ClrToEnter) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.ClrToEnter) ]OTE(Z050_080_StdOut.Cnv.ClrToEnter);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Load.Disable) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.Disable) ]OTE(Z050_080_StdOut.Cnv.Disable);
				N: [XIC(Edit.Bit) XIC(S001CNV1.Load.Comp) ,XIC(Edit.Bit) XIC(S001CNV1.Unld.Comp) ]OTE(Z050_080_StdOut.Cnv.Comp);
				RC: "****************************************************************************************************$N"
				    "Tooling Station Interlock Output Mapping$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				N: XIC(Edit.Bit)XIC(S005TL1.Int.NoMode)OTE(Z050_080_StdOut.TL.NoMode);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.AutoSel)OTE(Z050_080_StdOut.TL.AutoSel);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.AutoMode)OTE(Z050_080_StdOut.TL.AutoMode);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.ManualMode)OTE(Z050_080_StdOut.TL.ManualMode);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.DryCycle)OTE(Z050_080_StdOut.TL.DryCycle);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.HoldEndOfCycle)OTE(Z050_080_StdOut.TL.HoldEndOfCycle);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.Fault)OTE(Z050_080_StdOut.TL.Fault);
				N: XIC(Edit.Bit)OTE(Z050_080_StdOut.TL.RbtAtDrop);
				N: XIC(Edit.Bit)OTE(Z050_080_StdOut.TL.RbtAtPick);
				N: XIC(Edit.Bit)OTE(Z050_080_StdOut.TL.RbtAtPick2);
				N: XIC(Edit.Bit)OTE(Z050_080_StdOut.TL.RbtAtPick3);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.RbtsClr.Sts_PermOK)OTE(Z050_080_StdOut.TL.RbtsClr);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.RbtsTeachOff)OTE(Z050_080_StdOut.TL.RbtInTeach);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.ClrToLoad)OTE(Z050_080_StdOut.TL.ClearLoad);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.ClrToUnld)OTE(Z050_080_StdOut.TL.ClearUnld);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.KnownPos)OTE(Z050_080_StdOut.TL.KnownPos);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.Empty)OTE(Z050_080_StdOut.TL.Empty);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.AllPPandSR)OTE(Z050_080_StdOut.TL.AllPPandSR);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.PartsPresAll)OTE(Z050_080_StdOut.TL.PartsPresAll);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.PartsPresNo)OTE(Z050_080_StdOut.TL.PartsPresNo);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.AnyPartPres)OTE(Z050_080_StdOut.TL.AnyPartPres);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.TaskComp)OTE(Z050_080_StdOut.TL.TaskComp);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.CycComp)OTE(Z050_080_StdOut.TL.CycComp);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.ClrToEnter)OTE(Z050_080_StdOut.TL.ClrToEnter);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.LoadDisable)OTE(Z050_080_StdOut.TL.Disable);
				N: XIC(Edit.Bit)XIC(S005TL1.Int.LoadComp)OTE(Z050_080_StdOut.TL.Comp);
				RC: "****************************************************************************************************$N"
				    "Robot Interlock Output Mapping$N"
				    "****************************************************************************************************$N"
				    "";
				N: NOP();
				N: XIC(Edit.Bit)XIC(S005RB01.Int.RbtRdy)OTE(Z050_080_StdOut.Rbt.RbtRdy);
				N: XIC(Edit.Bit)XIC(S005RB01.Int.TeachSSOff)OTE(Z050_080_StdOut.Rbt.InTeach);
				N: XIC(Edit.Bit)XIC(S005RB01.I1.AtHome)OTE(Z050_080_StdOut.Rbt.AtHome);
				N: XIC(Edit.Bit)XIC(S005RB01.I1.Pg_Paused)OTE(Z050_080_StdOut.Rbt.Paused);
				N: XIC(Edit.Bit)XIC(S005RB01.I1.RbtHeld)OTE(Z050_080_StdOut.Rbt.Held);
				N: XIC(Edit.Bit)XIC(S005RB01.I1.Pg_Running)OTE(Z050_080_StdOut.Rbt.ProgRuning);
				N: XIC(Edit.Bit)XIC(S005RB01.Int.AutoMode)OTE(Z050_080_StdOut.Rbt.AutoMode);
				N: XIC(Edit.Bit)XIC(S005RB01.I1.AtMaintPos)OTE(Z050_080_StdOut.Rbt.Maintenance);
				N: XIC(Edit.Bit)MOV(S005RB01.I1.PN,Z050_080_StdOut.Rbt.PN);
				N: XIC(Edit.Bit)MOV(Edit.Int,Z050_080_StdOut.Rbt.PrgEcho);
				N: XIC(Edit.Bit)[XIC(S005RB01.I1.ClrIntfZn1) OTE(Z050_080_StdOut.Rbt.ClrIntfZn1) ,XIC(S005RB01.I1.ClrIntfZn2) OTE(Z050_080_StdOut.Rbt.ClrIntfZn2) ,XIC(S005RB01.I1.ClrIntfZn3) OTE(Z050_080_StdOut.Rbt.ClrIntfZn3) ,XIC(S005RB01.I1.ClrIntfZn4) OTE(Z050_080_StdOut.Rbt.ClrIntfZn4) ,XIC(S005RB01.I1.ClrIntfZn5) OTE(Z050_080_StdOut.Rbt.ClrIntfZn5) ,XIC(S005RB01.I1.ClrIntfZn6) OTE(Z050_080_StdOut.Rbt.ClrIntfZn6) ,XIC(S005RB01.I1.ClrIntfZn7) OTE(Z050_080_StdOut.Rbt.ClrIntfZn7) ,XIC(S005RB01.I1.ClrIntfZn8) OTE(Z050_080_StdOut.Rbt.ClrIntfZn8) ,XIC(S005RB01.I1.ClrIntfZn9) OTE(Z050_080_StdOut.Rbt.ClrIntfZn9) ,XIC(S005RB01.I1.ClrIntfZn10) OTE(Z050_080_StdOut.Rbt.ClrIntfZn10) ,XIC(S005RB01.I1.ClrIntfZn11) OTE(Z050_080_StdOut.Rbt.ClrIntfZn11) ,XIC(S005RB01.I1.ClrIntfZn12) OTE(Z050_080_StdOut.Rbt.ClrIntfZn12) ,XIC(S005RB01.I1.ClrIntfZn13) OTE(Z050_080_StdOut.Rbt.ClrIntfZn13) ,XIC(S005RB01.I1.ClrIntfZn14) OTE(Z050_080_StdOut.Rbt.ClrIntfZn14) ,XIC(S005RB01.I1.ClrIntfZn15) OTE(Z050_080_StdOut.Rbt.ClrIntfZn15) ,XIC(S005RB01.I1.ClrIntfZn16) OTE(Z050_080_StdOut.Rbt.ClrIntfZn16) ];
				N: XIC(Edit.Bit)[XIC(S005RB01.Int.ClearOfTool1) OTE(Z050_080_StdOut.Rbt.ClearOfTool1) ,XIC(S005RB01.Int.ClearOfTool2) OTE(Z050_080_StdOut.Rbt.ClearOfTool2) ,XIC(S005RB01.Int.ClearOfTool3) OTE(Z050_080_StdOut.Rbt.ClearOfTool3) ,XIC(S005RB01.Int.ClearOfTool4) OTE(Z050_080_StdOut.Rbt.ClearOfTool4) ,XIC(S005RB01.Int.ClearOfTool5) OTE(Z050_080_StdOut.Rbt.ClearOfTool5) ];
				N: XIC(Edit.Bit)[XIC(S005RB01.Int.ClearOfPick1) OTE(Z050_080_StdOut.Rbt.ClearOfPick1) ,XIC(S005RB01.Int.ClearOfPick2) OTE(Z050_080_StdOut.Rbt.ClearOfPick2) ,XIC(S005RB01.Int.ClearOfPick3) OTE(Z050_080_StdOut.Rbt.ClearOfPick3) ,XIC(S005RB01.Int.ClearOfPick4) OTE(Z050_080_StdOut.Rbt.ClearOfPick4) ,XIC(S005RB01.Int.ClearOfPick5) OTE(Z050_080_StdOut.Rbt.ClearOfPick5) ];
				N: XIC(Edit.Bit)[XIC(S005RB01.Int.ClearOfDrop1) OTE(Z050_080_StdOut.Rbt.ClearOfDrop1) ,XIC(S005RB01.Int.ClearOfDrop2) OTE(Z050_080_StdOut.Rbt.ClearOfDrop2) ,XIC(S005RB01.Int.ClearOfDrop3) OTE(Z050_080_StdOut.Rbt.ClearOfDrop3) ];
				N: XIC(Edit.Bit)XIC(S005RB01.SR.State.Data_Empty)OTE(Z050_080_StdOut.Rbt.Empty);
				N: XIC(Edit.Bit)[XIC(S005RB01.I1.AtPick1) OTE(Z050_080_StdOut.Rbt.AtPick1) ,XIC(S005RB01.I1.AtPick2) OTE(Z050_080_StdOut.Rbt.AtPick2) ,XIC(S005RB01.I1.AtPick3) OTE(Z050_080_StdOut.Rbt.AtPick3) ,XIC(S005RB01.I1.AtPick4) OTE(Z050_080_StdOut.Rbt.AtPick4) ,XIC(S005RB01.I1.AtPick5) OTE(Z050_080_StdOut.Rbt.AtPick5) ];
				N: XIC(Edit.Bit)[XIC(S005RB01.I1.AtDrop1) OTE(Z050_080_StdOut.Rbt.AtDrop1) ,XIC(S005RB01.I1.AtDrop2) OTE(Z050_080_StdOut.Rbt.AtDrop2) ,XIC(S005RB01.I1.AtDrop3) OTE(Z050_080_StdOut.Rbt.AtDrop3) ,XIC(S005RB01.I1.AtDrop4) OTE(Z050_080_StdOut.Rbt.AtDrop4) ,XIC(S005RB01.I1.AtDrop5) OTE(Z050_080_StdOut.Rbt.AtDrop5) ];
				N: XIC(Edit.Bit)[XIC(S005RB01.Int.PartPres1) OTE(Z050_080_StdOut.Rbt.PartPres1) ,XIC(S005RB01.Int.PartPres2) OTE(Z050_080_StdOut.Rbt.PartPres2) ,XIC(S005RB01.Int.PartPres3) OTE(Z050_080_StdOut.Rbt.PartPres3) ,XIC(S005RB01.Int.PartPres4) OTE(Z050_080_StdOut.Rbt.PartPres4) ,XIC(S005RB01.Int.PartPres5) OTE(Z050_080_StdOut.Rbt.PartPres5) ];
				N: XIC(Edit.Bit)XIC(S005RB01.Int.AllPartPres)OTE(Z050_080_StdOut.Rbt.AllPartPres);
				N: XIC(Edit.Bit)XIC(S005RB01.Int.NoPartPres)OTE(Z050_080_StdOut.Rbt.NoPartPres);
				N: XIC(Edit.Bit)XIC(S005RB01.Int.EOATHome)OTE(Z050_080_StdOut.Rbt.EOATHome);
				N: XIC(Edit.Bit)[XIC(S005RB01.Int.EOATWorkPos1) OTE(Z050_080_StdOut.Rbt.EOATWorkPos1) ,XIC(S005RB01.Int.EOATWorkPos2) OTE(Z050_080_StdOut.Rbt.EOATWorkPos2) ,XIC(S005RB01.Int.EOATWorkPos3) OTE(Z050_080_StdOut.Rbt.EOATWorkPos3) ,XIC(S005RB01.Int.EOATWorkPos4) OTE(Z050_080_StdOut.Rbt.EOATWorkPos4) ,XIC(S005RB01.Int.EOATWorkPos5) OTE(Z050_080_StdOut.Rbt.EOATWorkPos5) ];
				N: XIC(Edit.Bit)[XIC(S005RB01.Int.Pick1Comp) OTE(Z050_080_StdOut.Rbt.Pick1Comp) ,XIC(S005RB01.Int.Pick2Comp) OTE(Z050_080_StdOut.Rbt.Pick2Comp) ,XIC(S005RB01.Int.Pick3Comp) OTE(Z050_080_StdOut.Rbt.Pick3Comp) ,XIC(S005RB01.Int.Pick4Comp) OTE(Z050_080_StdOut.Rbt.Pick4Comp) ,XIC(S005RB01.Int.Pick5Comp) OTE(Z050_080_StdOut.Rbt.Pick5Comp) ];
				N: XIC(Edit.Bit)[XIC(S005RB01.Int.Drop1Comp) OTE(Z050_080_StdOut.Rbt.Drop1Comp) ,XIC(S005RB01.Int.Drop2Comp) OTE(Z050_080_StdOut.Rbt.Drop2Comp) ,XIC(S005RB01.Int.Drop3Comp) OTE(Z050_080_StdOut.Rbt.Drop3Comp) ,XIC(S005RB01.Int.Drop4Comp) OTE(Z050_080_StdOut.Rbt.Drop4Comp) ,XIC(S005RB01.Int.Drop5Comp) OTE(Z050_080_StdOut.Rbt.Drop5Comp) ];
				N: XIC(Edit.Bit)XIC(S005RB01.SR.Int.NoPart)OTE(Z050_080_StdOut.Rbt.SR_NoPart);
				N: XIC(Edit.Bit)XIC(S005RB01.Int.AllPPAndSR)OTE(Z050_080_StdOut.Rbt.AllPPAndSR);
				RC: "*************************************************************$N"
				    "RIvet Robot Interlock Maping Outputs$N"
				    "*****************************************************************************$N"
				    "";
				N: XIC(Edit.Bit)[XIC(S010RB01.Int.Spr1Rvtd) OTE(Z050_080_StdOut.Rbt.Spr1Rvtd) ,XIC(S010RB01.Int.Spr2Rvtd) OTE(Z050_080_StdOut.Rbt.Spr2Rvtd) ,XIC(S010RB01.Int.Spr3Rvtd) OTE(Z050_080_StdOut.Rbt.Spr3Rvtd) ,XIC(S010RB01.Int.Spr4Rvtd) OTE(Z050_080_StdOut.Rbt.Spr4Rvtd) ,XIC(S010RB01.Int.Spr5Rvtd) OTE(Z050_080_StdOut.Rbt.Spr5Rvtd) ];
				N: XIC(Edit.Bit)[XIC(S010RB01.Int.Spr1Comp) OTE(Z050_080_StdOut.Rbt.Spr1Comp) ,XIC(S010RB01.Int.Spr2Comp) OTE(Z050_080_StdOut.Rbt.Spr2Comp) ,XIC(S010RB01.Int.Spr3Comp) OTE(Z050_080_StdOut.Rbt.Spr3Comp) ,XIC(S010RB01.Int.Spr4Comp) OTE(Z050_080_StdOut.Rbt.Spr4Comp) ,XIC(S010RB01.Int.Spr5Comp) OTE(Z050_080_StdOut.Rbt.Spr5Comp) ];
				N: XIC(Edit.Bit)[XIC(S010RB01.Int.ToolSprPos1) OTE(Z050_080_StdOut.Rbt.ToolSprPos1) ,XIC(S010RB01.Int.ToolSprPos2) OTE(Z050_080_StdOut.Rbt.ToolSprPos2) ,XIC(S010RB01.Int.ToolSprPos3) OTE(Z050_080_StdOut.Rbt.ToolSprPos3) ,XIC(S010RB01.Int.ToolSprPos4) OTE(Z050_080_StdOut.Rbt.ToolSprPos4) ,XIC(S010RB01.Int.ToolSprPos5) OTE(Z050_080_StdOut.Rbt.ToolSprPos5) ];
				RC: "*************************************************************$N"
				    "FDS Robot Interlock Maping Outputs$N"
				    "*****************************************************************************$N"
				    "";
				N: XIC(Edit.Bit)[XIC(S010RB02.I1.FdsProc1Welded) OTE(Z050_080_StdOut.Rbt.FdsProc1Welded) ,XIC(S010RB02.I1.FdsProc2Welded) OTE(Z050_080_StdOut.Rbt.FdsProc2Welded) ,XIC(S010RB02.I1.FdsProc3Welded) OTE(Z050_080_StdOut.Rbt.FdsProc3Welded) ];
				RC: "*************************************************************$N"
				    "Seal Robot Interlock Maping Outputs$N"
				    "*****************************************************************************$N"
				    "";
				N: XIC(Edit.Bit)[XIC(S010RB02.I1.Seal1Proc1Dpsd) OTE(Z050_080_StdOut.Rbt.SealProc1Dpsd) ,XIC(S010RB02.I1.Seal1Proc2Dpsd) OTE(Z050_080_StdOut.Rbt.SealProc2Dpsd) ,XIC(S010RB02.I1.Seal1Proc3Dpsd) OTE(Z050_080_StdOut.Rbt.SealProc3Dpsd) ];
				N: CPS(Z050_080_StdOut,Z050_080_StdOutIntlk,1);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM

	PROGRAM Z050_080 (Class := Standard,
	                  MAIN := "A00_Main",
	                  MODE := 0,
	                  DisableFlag := 0,
	                  UseAsFolder := 0)
		TAG
		END_TAG

		ROUTINE A00_Main 
				N: JSR(S00_ShiftRegisters,0);
				N: JSR(S01_ShiftRegistersMdlMap,0);
		END_ROUTINE

		ROUTINE S00_ShiftRegisters (Description := "Shift Register Routine")
				RC: "############################$N"
				    "Shift Register Routine$N"
				    "############################";
				N: NOP();
				RC: "############################$N"
				    " S050TT1 OPER LOAD$N"
				    "To$N"
				    "S050TT1TL1$N"
				    "############################";
				N: XIC(S050TT1.Drive.TL1Installed)XIO(S050TL1.Int.Bypass.Seld)XIC(S050TT1.Drive.TL1AtLoadPos)XIC(S050TT1.Oper.CycleStart)XIC(S050TL1.Int.LoadComp)XIC(S050TL1.Int.PartsPresAll)NEQ(MES_old.GN.SR.Int.Model,0)NEQ(MES_old.GN.SR.Int.Model,90)XIC(Edit.Bit)OTE(S050TL1.SR.Int.Shift.0);
				N: XIC(S005RB01.SR.Int.Shift.1)XIC(S050TL1.SR.Int.Part)[CPS(MES_old.GN.SR,S050TL1.SR,1) ,CPS(ZeroRef[0],MES_old.GN.SR,1) ];
				RC: "############################$N"
				    "S050TT1TL1$N"
				    "To$N"
				    "ROBOT$N"
				    "############################";
				N: XIC(S050TT1.Drive.TL1Installed)XIO(S050TL1.Int.Bypass.Seld)XIC(S050TT1.Drive.TL1AtUnldPos)XIC(S005RB02.Int.Pick3Comp)XIO(S005RB01.Int.ClearOfPick3)XIC(S050TL1.SR.Int.Part)XIC(Edit.Bit)OTE(S050TL1.SR.Int.Shift.1);
				N: XIC(S050TL1.SR.Int.Shift.1)XIC(S005RB02.SR.Int.NoPart)[CPS(S050TL1.SR,S005RB02.SR,1) ,XIC(Edit.Debug) CPS(ZeroRef[0],S050TL1.SR,1) ,MOV(90,S050TL1.SR.Int.Model) ];
		END_ROUTINE

		ROUTINE S01_ShiftRegistersMdlMap 
				RC: "############################$N"
				    "Shift Register Model Mapping$N"
				    "############################";
				N: NOP();
				RC: "S050TT1TL1";
				N: [LIM(1,S050TL1.SR.Int.Model,30) OTE(S050TL1.SR.Int.Part) ,EQU(S050TL1.SR.Int.Model,90) OTE(S050TL1.SR.Int.NoPart) ];
				N: XIC(S050TL1.SR.Int.Part)[EQU(S050TL1.SR.Int.Model,1) OTE(S050TL1.SR.Int.Model1) ,EQU(S050TL1.SR.Int.Model,2) OTE(S050TL1.SR.Int.Model2) ,EQU(S050TL1.SR.Int.Model,3) OTE(S050TL1.SR.Int.Model3) ,EQU(S050TL1.SR.Int.Model,4) OTE(S050TL1.SR.Int.Model4) ,EQU(S050TL1.SR.Int.Model,5) OTE(S050TL1.SR.Int.Model5) ,EQU(S050TL1.SR.Int.Model,6) OTE(S050TL1.SR.Int.Model6) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM