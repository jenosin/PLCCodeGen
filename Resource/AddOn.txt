	ADD_ON_INSTRUCTION_DEFINITION P_Perm (Description := "Permissives$N[Edit not Allowed]",
	                                      Class := Standard,
	                                      Revision := "4.10",
	                                      RevisionExtension := ".00 Release",
	                                      RevisionNote := "See Instruction Help for a summary of changes, and see 4.10 Release Notes for details.",
	                                      Vendor := "Rockwell Automation",
	                                      ExecutePrescan := No,
	                                      ExecutePostscan := No,
	                                      ExecuteEnableInFalse := Yes,
	                                      CreatedDate := "2008-04-03T19:38:05.264Z",
	                                      CreatedBy := "Not Available",
	                                      EditedDate := "2022-01-05T16:13:14.453Z",
	                                      EditedBy := "LUCID\DanWeinhold",
	                                      SoftwareRevision := "v33.00",
	                                      AdditionalHelpText := "Copyright Â© Rockwell Automation, Inc.  All Rights Reserved.$N$NThis Instruction monitors up to 16 Permissive conditions.  It provides these features:$N$N*  The $QOK$Q state of each Permissive Input is configurable.  By default,$N    each Input is 1 when OK to start, 0 when not OK to start.$N*  Permissives may be configured as Bypassable.  A separate Sts_NBPermOK $N    (Non-Bypassable Permissives OK) status is provided, which the destination$N    object can use for Bypass, Maintenance and other functions,$N    where Bypassable Permissives can be ignored.$N$NAll Permissive Inputs must be in their configured $QOK$Q states$Nfor the P_Perm instruction to provide a $QPermOK$Q status.$N$NAll non-bypassable Permissive inputs must be in their configured $QOK$Q states$Nfor the P_Perm instruction to provide a $QNBPermOK$Q status.$N$NFor each Permissive condition, a Tag may be defined for navigation. Clicking$Nthe Permissive description will call up the associated Tag$'s Faceplate.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.00)$NSee 4.10 Release Notes for details.$N* Added Cfg_HasMoreObj.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (3.5-05)$NSee 4.00 Release Notes for details.$N* Changed Inf_ items to HMI_, and added Cfg_Area for security.$N* OSets / OCmds and MSets / MCmds are now LOCAL TAGS.$N")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inp_Perm00 OF Wrk_Inp.0 (Description := "Permissive Cond 00, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm01 OF Wrk_Inp.1 (Description := "Permissive Cond 01, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm02 OF Wrk_Inp.2 (Description := "Permissive Cond 02, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm03 OF Wrk_Inp.3 (Description := "Permissive Cond 03, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm04 OF Wrk_Inp.4 (Description := "Permissive Cond 04, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm05 OF Wrk_Inp.5 (Description := "Permissive Cond 05, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm06 OF Wrk_Inp.6 (Description := "Permissive Cond 06, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm07 OF Wrk_Inp.7 (Description := "Permissive Cond 07, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm08 OF Wrk_Inp.8 (Description := "Permissive Cond 08, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm09 OF Wrk_Inp.9 (Description := "Permissive Cond 09, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm10 OF Wrk_Inp.10 (Description := "Permissive Cond 10, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm11 OF Wrk_Inp.11 (Description := "Permissive Cond 11, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm12 OF Wrk_Inp.12 (Description := "Permissive Cond 12, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm13 OF Wrk_Inp.13 (Description := "Permissive Cond 13, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm14 OF Wrk_Inp.14 (Description := "Permissive Cond 14, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_Perm15 OF Wrk_Inp.15 (Description := "Permissive Cond 15, OK to start if in configured OK state",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No);
			Inp_BypActive : BOOL (Description := "1=Permissive Bypassing is currently active",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 0);
			Cfg_OKState : INT (Description := "Bits indicate which state (0 or 1) of each input is OK to start",
			                       Usage := Input,
			                       RADIX := Binary,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := -1);
			Cfg_Bypassable : INT (Description := "Set bits indicate which conditions can be bypassed",
			                          Usage := Input,
			                          RADIX := Binary,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_HasNav : INT (Description := "Set bits indicate which Navigation buttons are enabled",
			                      Usage := Input,
			                      RADIX := Binary,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Cfg_HasMoreObj : BOOL (Description := "1=Tells HMI an object with more info is available",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Sts_PermOK : BOOL (Description := "Overall Permissive Status (1=OK to start)",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 1);
			Sts_NBPermOK : BOOL (Description := "Non-Bypassable Permissive Status (1 =all non- bypassable Permissives OK to start)",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 1);
			Sts_BypActive : BOOL (Description := "1=Permissive Bypassing is Active (ignore bypassable permissives)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_Perm : INT (Description := "Individual Permissive Status (1=OK, 0=don$'t start)",
			                    Usage := Output,
			                    RADIX := Binary,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := -1);
			P_Perm : BOOL (Description := "Unique Parameter Name for auto - discovery",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Cfg_CondTxt : STRING_Cond[16] (Description := "Short HMI description of Permissive Conditions",
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[[20,'Enter Description
			Wrk_Inp : INT (Description := "Collection copy of Inp_PermXXs",
			                  RADIX := Binary,
			                  ExternalAccess := Read/Write,
			                  DefaultData := -1);
			Wrk_Bypass : INT (Description := "Working Register for Bypassable Permissives",
			                     RADIX := Binary,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			HMI_Tab : SINT (Description := "Tab to display (FTView ME)",
			                  RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Wrk_InpInv : INT (Description := "Input states after inverting based on Cfg_OKState",
			                     RADIX := Binary,
			                     ExternalAccess := None,
			                     DefaultData := -1);
			HMI_Type : STRING_16_UDT (Description := "Type identifier for HMI navigation",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[6,'P_Perm$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Label : STRING_20 (Description := "Label for graphic symbol displayed on HMI",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[11,'Permissives$00$00$00$00$00$00$00$00$00']");
			Cfg_Tag : STRING_20 (Description := "Tagname for display on HMI",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Desc : STRING_40 (Description := "Description for display on HMI",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[11,'Permissives$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_NavTag : STRING_NavTag[16] (Description := "Tagnames for destinations of Navigation buttons",
			                     ExternalAccess := Read/Write,
			                     DefaultData
			HMI_Lib : STRING_16_UDT (Description := "Display Library for Faceplate call-up",
			                  ExternalAccess := Read Only,
			                  DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			MSet_Bypass : INT (Description := "Individual condition Maintenance Bypass toggles",
			                      RADIX := Binary,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			Cfg_Area : STRING_Area (Description := "Process Area for security",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[6,'area01$00$00']");
		END_LOCAL_TAGS

		ROUTINE EnableInFalse (Description := "Set summary $QOK$Q Status bits to FALSE (0)")
				RC: "************************************************************$N"
				    "OFF-SCAN (EnableIn is False) STATUS$N"
				    "************************************************************$N"
				    "If this Permissives instruction is OFF-SCAN (rung is false or EnableIn is false in FBD),$N"
				    "then set the summary Permissive OK Status bits to FALSE (0).";
				N: OTU(Sts_PermOK)OTU(Sts_NBPermOK);
				RC: "Individual Permissive Bypasses can only be set for conditions that are$N"
				    "configured as Bypassable.  This AND clears all the MSets for inputs$N"
				    "that are NOT Bypassable.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  OSets / OCmds and MSets / MCmds are now LOCAL TAGS.  #####";
				N: AND(MSet_Bypass,Cfg_Bypassable,MSet_Bypass);
		END_ROUTINE

		ROUTINE Logic (Description := "Check Permissive Conditions")
				RC: "Copyright Â© Rockwell Automation, Inc.  All Rights Reserved.$N"
				    "************************************************************$N"
				    "P_Perm:  PROCESS -- PERMISSIVES$N"
				    "************************************************************$N"
				    "Revision 4.10.00 Release  2019-03-08:  See V4.10.xx Release Notes for details.$N"
				    "V1.x, V2.x and V3.x Revision History archived.$N"
				    "V4.00.00  2018-07-16:  Changed Inf_ items to HMI_, and added Cfg_Area for security.$N"
				    "OSets / OCmds and MSets / MCmds are now LOCAL TAGS.$N"
				    "V4.10.00  2019-03-08:  Added Cfg_HasMoreObj.$N"
				    "************************************************************$N"
				    "This Instruction monitors up to 16 Permissive conditions.  It provides these features:$N"
				    "$N"
				    "*  The $QOK$Q state of each Permissive Input is configurable.  By default,$N"
				    "each Input is 1 when OK to start, 0 when not OK to start.$N"
				    "*  Permissives may be configured as Bypassable.  A separate Sts_NBPermOK $N"
				    "(Non-Bypassable Permissives OK) status is provided, which the destination$N"
				    "object can use forBypass, Maintenance and other functions,$N"
				    "where Bypassable Permissives can be ignored.$N"
				    "$N"
				    "All Permissive Inputs must be in their configured $QOK$Q states$N"
				    "for the P_Perm instruction to provide a $QPermOK$Q status.$N"
				    "$N"
				    "All non-bypassable Permissive inputs must be in their configured $QOK$Q states$N"
				    "for the P_Perm instruction to provide a $QNBPermOK$Q status.$N"
				    "$N"
				    "For each Permissive condition, a Tag may be defined for navigation. Clicking$N"
				    "the Permissive description will call up the associated Tag$'s Faceplate.$N"
				    "************************************************************$N"
				    "SHOW LOCAL STRINGS$N"
				    "************************************************************$N"
				    "The STRINGs containing the text associated with each instance of this$N"
				    "instruction cannot be Input or Output Parameters, because STRINGs are not$N"
				    " $'atomic$' types. (Inputs and Outputs must be SINT, INT, DINT, REAL, or BOOL.)$N"
				    "$N"
				    "In order to make it easier to find and configure these STRINGs, this rung$N"
				    "was added.  THE JMP (and the LBL on the following rung)$N"
				    "MUST NOT BE REMOVED!!!$N"
				    "$N"
				    "To view the STRINGs, go to the instruction instance (in LD or FBD), RIGHT-click$N"
				    "to bring up the context menu and select $QOpen Instruction Logic$Q.$N"
				    "This rung will appear with the STRING values for the selected instance.$N"
				    "You may double-click the STRING values here to modify them as well.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Added string for Cfg_Area, renamed Inf_* to HMI_*.  #####";
				N: JMP(SkipText)[LOWER(Cfg_Desc,Cfg_Label) LOWER(Cfg_Tag,Cfg_Area) LOWER(HMI_Lib,HMI_Type) ,LOWER(Cfg_CondTxt[0],Cfg_CondTxt[1]) LOWER(Cfg_CondTxt[2],Cfg_CondTxt[3]) LOWER(Cfg_CondTxt[4],Cfg_CondTxt[5]) LOWER(Cfg_CondTxt[6],Cfg_CondTxt[7]) ,LOWER(Cfg_CondTxt[8],Cfg_CondTxt[9]) LOWER(Cfg_CondTxt[10],Cfg_CondTxt[11]) LOWER(Cfg_CondTxt[12],Cfg_CondTxt[13]) LOWER(Cfg_CondTxt[14],Cfg_CondTxt[15]) ,LOWER(Cfg_NavTag[0],Cfg_NavTag[1]) LOWER(Cfg_NavTag[2],Cfg_NavTag[3]) LOWER(Cfg_NavTag[4],Cfg_NavTag[5]) LOWER(Cfg_NavTag[6],Cfg_NavTag[7]) ,LOWER(Cfg_NavTag[8],Cfg_NavTag[9]) LOWER(Cfg_NavTag[10],Cfg_NavTag[11]) LOWER(Cfg_NavTag[12],Cfg_NavTag[13]) LOWER(Cfg_NavTag[14],Cfg_NavTag[15]) ];
				RC: "************************************************************$N"
				    "INPUT GATHERING$N"
				    "************************************************************$N"
				    "This object uses word-wise logic.  The 16 permissive inputs are aliased$N"
				    "to the Wrk_Inp word, so no logic is needed to collect the individual$N"
				    "conditions.  We can immediately start processing the permissive logic.$N"
				    "************************************************************$N"
				    "HANDLE $QOK STATE$Q INVERSIONS$N"
				    "************************************************************$N"
				    "This rung inverts the Input bits whose $QOK State$Q is 1 (0 to Run).$N"
				    "The resulting Wrk_Inp word is ALL ONES if all permissive inputs are $QOK$Q.";
				N: LBL(SkipText)CPT(Wrk_InpInv,Wrk_Inp XOR(NOT(Cfg_OKState)));
				RC: "************************************************************$N"
				    "PERMISSIVE PROCESSING$N"
				    "************************************************************$N"
				    "Individual Permissive Bypasses can only be set for conditions that are$N"
				    "configured as Bypassable.  The AND clears all the MSets for inputs$N"
				    "that are NOT Bypassable.$N"
				    "$N"
				    "If an input is Bypassed, or the input is ON, that bit is OK as far as$N"
				    "Bypassable Permissives are concerned.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  OSets / OCmds and MSets / MCmds are now LOCAL TAGS.  #####";
				N: AND(MSet_Bypass,Cfg_Bypassable,MSet_Bypass)OR(MSet_Bypass,Wrk_InpInv,Wrk_Bypass);
				RC: "************************************************************$N"
				    "STATUS GENERATION$N"
				    "************************************************************$N"
				    "These rungs generate the public Status for this object.$N"
				    "$N"
				    "The Input Permissive conditions are passed through (wordwise)$N"
				    "directly to the final Permissive Status";
				N: MOV(Wrk_InpInv,Sts_Perm);
				RC: "If all the Permissive Status bits are ONE, there is no condition to$N"
				    "prevent starting the affected equipment: show the Permissive Status as $QOK$Q$N"
				    "$N"
				    "If all the Non-Bypassable permissives are true, set the NBPermOK Status as $QOK$Q$N"
				    "$N"
				    "If Permissive Bypassing is active (this input usually comes from a downstream$N"
				    "device block: motor, valve, etc.), then make this Status known to the HMI.";
				N: [EQU(Sts_Perm,-1) OTE(Sts_PermOK) ,EQU(Wrk_Bypass,-1) OTE(Sts_NBPermOK) ,XIC(Inp_BypActive) OTE(Sts_BypActive) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION Actuator (Class := Standard,
	                                        Revision := "2.5",
	                                        RevisionExtension := "20210206",
	                                        RevisionNote := "v2.1 Update on stsPosition values$Nv2.2 Update on stsPosition scan order$Nv2.3 Added NoCmd Timer for Manual Actuators.$Nv2.4 Debug NoCmd Timer.$Nv2.5 Debug NoCmd Timer.",
	                                        Vendor := "Hokuto",
	                                        ExecutePrescan := Yes,
	                                        ExecutePostscan := No,
	                                        ExecuteEnableInFalse := No,
	                                        CreatedDate := "2015-04-23T18:10:05.269Z",
	                                        CreatedBy := "Not Available",
	                                        EditedDate := "2022-01-05T16:13:14.119Z",
	                                        EditedBy := "LUCID\DanWeinhold",
	                                        SoftwareRevision := "v33.00",
	                                        AdditionalHelpText := "Actuator Status for HMI$NStsPosition -1: All Off$NStsPosition 0: Returned$NStsPosition 1: Advanced$NStsPosition 2: Returning$NStsPosition 3: Advancing$NStsPosition 4: Ret Shorted$NStsPosition 5: Adv Shorted$NStsPosition 6: Ret Transit Stall (in half way)$NStsPosition 7: ADv Transit Stall (in half way)$NStsPosition 8: Ret Full Stall (Did not move)$NStsPosition 9: Adv Full Stall (Did not move)")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			cfgFullStallFailTime : REAL (Description := "Full Stall Fail Time in Seconds",
			                                Usage := Input,
			                                RADIX := Float,
			                                Required := No,
			                                Visible := No,
			                                DefaultData := 5.00000000e+000);
			cfgTransitFailTime : REAL (Description := "Transit Fail Time in Seconds",
			                              Usage := Input,
			                              RADIX := Float,
			                              Required := No,
			                              Visible := No,
			                              DefaultData := 5.00000000e+000);
			cfgShortFailTime : REAL (Description := "Short Fail Time in Seconds",
			                            Usage := Input,
			                            RADIX := Float,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 5.00000000e+000);
			cfgAdvanceDelay : DINT (Description := "Delayed setting value for actuator Adv$'d",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 50);
			cfgReturnDelay : DINT (Description := "Delayed setting value for actuator Ret$'d",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 50);
			cfgEnableJog : BOOL (Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			pcmdAdvance : BOOL (Description := "Program Command$NAdvance Actuator",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			pcmdReturn : BOOL (Description := "Program Command$NReturn Actuator",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			pcmdAllOff : BOOL (Description := "Program Command$NAll Off",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			pcmdReset : BOOL (Description := "Program Command to Reset",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			ocmdAdvance : BOOL (Description := "Operator Command$Nto Advance Actuator",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			ocmdReturn : BOOL (Description := "Operator Command$Nto Return Actuator",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			ocmdAllOff : BOOL (Description := "Operator Command$NAll Off",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			inpModeAuto : BOOL (Description := "Disable Operation from HMI",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := Yes,
			                       Visible := Yes,
			                       DefaultData := 0);
			inpModeManual : BOOL (Description := "Enable Operation from HMI",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := Yes,
			                         Visible := Yes,
			                         DefaultData := 0);
			inpCommsOK : BOOL (Description := "Module Connection Healthy",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := Yes,
			                      Visible := Yes,
			                      DefaultData := 0);
			inpReadyIntlk : BOOL (Description := "Ready to$NAdvance/Return Interlock",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := Yes,
			                         Visible := Yes,
			                         DefaultData := 0);
			inpReset : BOOL (Description := "External$NReset",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := Yes,
			                    Visible := Yes,
			                    DefaultData := 0);
			outAdvance : BOOL (Description := "Physical Output to Advance",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			outReturn : BOOL (Description := "Physical Output to Return",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			inpComponents : p_udt_Actuator_Component[1] (Description := "Array of Components - Size Can Vary Depending on Mechanical Configuration",
			                         Usage := InOut,
			                         Required := Yes,
			                         Visible := Yes);
			cfgComponentsOffSetStart : DINT (Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := Yes,
			                                    Visible := Yes,
			                                    DefaultData := 0);
			cfgComponentsOffSetEnd : DINT (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := Yes,
			                                  Visible := Yes,
			                                  DefaultData := 0);
			stsProgramControl : BOOL (Description := "In Program Control",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := Yes,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0);
			stsOperatorControl : BOOL (Description := "In Operator Control",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := Yes,
			                              ExternalAccess := Read Only,
			                              DefaultData := 0);
			stsAdvanced : BOOL (Description := "Advanced",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			stsAdvancing : BOOL (Description := "Advancing",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			stsReturned : BOOL (Description := "Returned",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			stsReturning : BOOL (Description := "Returning",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			stsAllOff : BOOL (Description := "Command All Off",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			stsComponentsOffSetsNOK : BOOL (Usage := Output,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := Yes,
			                                   ExternalAccess := Read/Write,
			                                   DefaultData := 0);
			stsFaultOperatorControlNOK OF wrkFaultWord.0 (Description := "Operator Control Not Okay Fault",
			                                      Usage := Output,
			                                      RADIX := Decimal,
			                                      Required := No,
			                                      Visible := Yes,
			                                      ExternalAccess := Read/Write);
			stsFaultProgramControlNOK OF wrkFaultWord.1 (Description := "Program Control Not Okay Fault",
			                                     Usage := Output,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := Yes,
			                                     ExternalAccess := Read/Write);
			stsFaultAdvancePermNOK OF wrkFaultWord.2 (Description := "Advance Permissive Not Okay Fault",
			                                  Usage := Output,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := Yes,
			                                  ExternalAccess := Read/Write);
			stsFaultReturnPermNOK OF wrkFaultWord.3 (Description := "Return Permissive Not Okay Fault",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := Yes,
			                                 ExternalAccess := Read/Write);
			stsFaultAdvanceIntlkNOK OF wrkFaultWord.4 (Description := "Advance Interlock Not Okay Fault",
			                                   Usage := Output,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := Yes,
			                                   ExternalAccess := Read/Write);
			stsFaultReturnIntlkNOK OF wrkFaultWord.5 (Description := "Return Interlock Not Okay Fault",
			                                  Usage := Output,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := Yes,
			                                  ExternalAccess := Read/Write);
			stsFaultComponent OF wrkFaultWord.6 (Description := "Component Fault$NStatus",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := Yes,
			                             ExternalAccess := Read/Write);
			stsPosition : DINT (Description := "Integer Representing Current Status of Valve$N0 = Returned$N1 = Advanced$N2 = Returning$N3 = Advancing$N4 = Return Fault$N5 = Advance Fault$N6 = No Cmd Fault",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			stsReadyToAdvance : BOOL (Description := "Ready to Advance Status",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read/Write,
			                             DefaultData := 0);
			stsReadyToReturn : BOOL (Description := "Ready to Return Status",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read/Write,
			                            DefaultData := 0);
			stsFault : BOOL (Description := "Actuator Fault$NStatus",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			stsFaultWord : DINT (Description := "Fault Word",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			inpAdvancePerm_00 OF stsAdvancePerm.Inp_Perm00 (Description := "Advance Perm Cond 00",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			inpAdvancePerm_01 OF stsAdvancePerm.Inp_Perm01 (Description := "Advance Perm Cond 01",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			inpAdvancePerm_02 OF stsAdvancePerm.Inp_Perm02 (Description := "Advance Perm Cond 02",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			inpAdvancePerm_03 OF stsAdvancePerm.Inp_Perm03 (Description := "Advance Perm Cond 03",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			inpAdvancePerm_04 OF stsAdvancePerm.Inp_Perm04 (Description := "Advance Perm Cond 04",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			inpAdvancePerm_05 OF stsAdvancePerm.Inp_Perm05 (Description := "Advance Perm Cond 05",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			inpAdvancePerm_06 OF stsAdvancePerm.Inp_Perm06 (Description := "Advance Perm Cond 06",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			inpAdvancePerm_07 OF stsAdvancePerm.Inp_Perm07 (Description := "Advance Perm Cond 07",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			inpAdvancePerm_08 OF stsAdvancePerm.Inp_Perm08 (Description := "Advance Perm Cond 08",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			inpAdvancePerm_09 OF stsAdvancePerm.Inp_Perm09 (Description := "Advance Perm Cond 09",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			inpAdvancePerm_10 OF stsAdvancePerm.Inp_Perm10 (Description := "Advance Perm Cond 10",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			inpAdvancePerm_11 OF stsAdvancePerm.Inp_Perm11 (Description := "Advance Perm Cond 11",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			inpAdvancePerm_12 OF stsAdvancePerm.Inp_Perm12 (Description := "Advance Perm Cond 12",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			inpAdvancePerm_13 OF stsAdvancePerm.Inp_Perm13 (Description := "Advance Perm Cond 13",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			inpAdvancePerm_14 OF stsAdvancePerm.Inp_Perm14 (Description := "Advance Perm Cond 14",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			inpAdvancePerm_15 OF stsAdvancePerm.Inp_Perm15 (Description := "Advance Perm Cond 15",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No);
			inpReturnPerm_00 OF stsReturnPerm.Inp_Perm00 (Description := "Return Perm Cond 00",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpReturnPerm_01 OF stsReturnPerm.Inp_Perm01 (Description := "Return Perm Cond 01",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpReturnPerm_02 OF stsReturnPerm.Inp_Perm02 (Description := "Return Perm Cond 02",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpReturnPerm_03 OF stsReturnPerm.Inp_Perm03 (Description := "Return Perm Cond 03",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpReturnPerm_04 OF stsReturnPerm.Inp_Perm04 (Description := "Return Perm Cond 04",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpReturnPerm_05 OF stsReturnPerm.Inp_Perm05 (Description := "Return Perm Cond 05",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpReturnPerm_06 OF stsReturnPerm.Inp_Perm06 (Description := "Return Perm Cond 06",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpReturnPerm_07 OF stsReturnPerm.Inp_Perm07 (Description := "Return Perm Cond 07",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpReturnPerm_08 OF stsReturnPerm.Inp_Perm08 (Description := "Return Perm Cond 08",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpReturnPerm_09 OF stsReturnPerm.Inp_Perm09 (Description := "Return Perm Cond 09",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpReturnPerm_10 OF stsReturnPerm.Inp_Perm10 (Description := "Return Perm Cond 10",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpReturnPerm_11 OF stsReturnPerm.Inp_Perm11 (Description := "Return Perm Cond 11",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpReturnPerm_12 OF stsReturnPerm.Inp_Perm12 (Description := "Return Perm Cond 12",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpReturnPerm_13 OF stsReturnPerm.Inp_Perm13 (Description := "Return Perm Cond 13",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpReturnPerm_14 OF stsReturnPerm.Inp_Perm14 (Description := "Return Perm Cond 14",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpReturnPerm_15 OF stsReturnPerm.Inp_Perm15 (Description := "Return Perm Cond 15",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			stsReturnTime : REAL (Usage := Output,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read/Write,
			                         DefaultData := 0.00000000e+000);
			stsAdvanceTime : REAL (Usage := Output,
			                          RADIX := Float,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read/Write,
			                          DefaultData := 0.00000000e+000);
			stsAdvanceSeqReq : BOOL (Description := "Advance HMI Indicator for TL Sequence",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read/Write,
			                            DefaultData := 0);
			stsReturnSeqReq : BOOL (Description := "Return HMI Indicator for TL Sequence",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			hmiDeviceName : STRING_20 (Description := "Device Name",
			                        ExternalAccess := Read/Write,
			                        DefaultData := "[12,'ActuatorName$00$00$00$00$00$00$00$00']");
			wrkAdvanceFdbk : BOOL (Description := "Advance Feedback",
			                         RADIX := Decimal,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			wrkAdvance : BOOL (Description := "Advance Command",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			wrkReturnFdbk : BOOL (Description := "Return Feedback",
			                        RADIX := Decimal,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			hmiReturnedName : STRING_16_UDT (Description := "Name When Open",
			                          ExternalAccess := Read/Write,
			                          DefaultData := "[8,'Returned$00$00$00$00$00$00$00$00']");
			hmiAdvancedName : STRING_16_UDT (Description := "Name When Closed",
			                          ExternalAccess := Read/Write,
			                          DefaultData := "[8,'Advanced$00$00$00$00$00$00$00$00']");
			hmiType : STRING_16_UDT (Description := "Device Type",
			                  ExternalAccess := Read Only,
			                  DefaultData := "[8,'Actuator$00$00$00$00$00$00$00$00']");
			hmiReturningName : STRING_16_UDT (Description := "Name When Opening",
			                           ExternalAccess := Read/Write,
			                           DefaultData := "[9,'Returning$00$00$00$00$00$00$00']");
			hmiAdvancingName : STRING_16_UDT (Description := "Name When Closing",
			                           ExternalAccess := Read/Write,
			                           DefaultData := "[9,'Advancing$00$00$00$00$00$00$00']");
			hmiCmdAdvanceName : STRING_16_UDT (Description := "Name of Command to Close",
			                            ExternalAccess := Read/Write,
			                            DefaultData := "[7,'Advance$00$00$00$00$00$00$00$00$00']");
			hmiCmdReturnName : STRING_16_UDT (Description := "Name of Command to Open",
			                           ExternalAccess := Read/Write,
			                           DefaultData := "[6,'Return$00$00$00$00$00$00$00$00$00$00']");
			wrkAllOff : BOOL (Description := "All Off$NCommand",
			                    RADIX := Decimal,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			wrkArraySize : DINT (Description := "Size or Array - Represents Number of Cylinders Controlled by Valve",
			                       RADIX := Decimal,
			                       ExternalAccess := Read Only,
			                       DefaultData := 1);
			wrkIndex : DINT (Description := "Index used to loop through Components array when examinating status",
			                   RADIX := Decimal,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			wrkResetFaults : BOOL (Description := "Internal Reset Fault Bit Passed into Cylinder AOI",
			                         RADIX := Decimal,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			wrkNumFdBkReturn : DINT (Description := "Value Used to Determine Number of Components in Returned Position",
			                           RADIX := Decimal,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			wrkNumFdBkAdvance : DINT (Description := "Value Used to Determine Number of Components in Advanced Position",
			                            RADIX := Decimal,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			wrkReturn : BOOL (Description := "Return Command",
			                    RADIX := Decimal,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			wrkFaultWord : DINT (Description := "Fault Word",
			                       RADIX := Decimal,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			stsReturnPerm : P_Perm (ExternalAccess := Read/Write,
			                        DefaultDataerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']]");
			stsAdvancePerm : P_Perm (ExternalAccess := Read/Write,
			                         DefaultDataerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,[6,'area01$00$00']]");
			wrkAdvanceTimer : TIMER (ExternalAccess := Read/Write,
			                          DefaultData := "[0,100000,0]");
			wrkReturnTimer : TIMER (ExternalAccess := Read/Write,
			                         DefaultData := "[0,100000,0]");
			wrkFullStallTime : DINT (RADIX := Decimal,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
			wrkReturnTimeONS : BOOL (RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			wrkComponent : p_udt_Actuator_Component (ExternalAccess := None,
			                       DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0.00000000e+000,0.00000000e+000,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0.00000000e+000,0,0.00000000e+000,0.00000000e+000,0,0.00000000e+000,0.00000000e+000,0.00000000e+000]");
			wrkAdvanceFaultResetOS : BOOL (RADIX := Decimal,
			                                 ExternalAccess := None,
			                                 DefaultData := 0);
			wrkReturnFaultResetOS : BOOL (RADIX := Decimal,
			                                ExternalAccess := None,
			                                DefaultData := 0);
			wrkReturnDelayTmr : TIMER (ExternalAccess := None,
			                            DefaultData := "[0,0,0]");
			wrkAdvanceDelayTmr : TIMER (ExternalAccess := None,
			                             DefaultData := "[0,0,0]");
			wrkArraySizeMaxIndex : DINT (RADIX := Decimal,
			                               ExternalAccess := None,
			                               DefaultData := 0);
			wrkOffSetsValid : BOOL (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			wrkComponentsQty : DINT (RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			wrkAdvanceTimeONS : BOOL (RADIX := Decimal,
			                            ExternalAccess := None,
			                            DefaultData := 0);
			ocmdHighlight : BOOL (Description := "Operator Command Highlight Components",
			                        RADIX := Decimal,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			ONS : DINT (RADIX := Decimal,
			              ExternalAccess := None,
			              DefaultData := 0);
			hmiHighlight : BOOL (Description := "HMI Indicator to Highlight Componentes from this Actuator",
			                       RADIX := Decimal,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			wrkComponentFaults : SINT (COMMENT.0 := "Advance$NFull Stall Fault",
			                             COMMENT.1 := "Advance$NTransit Stall Fault",
			                             COMMENT.2 := "Advance$NShorted Fault",
			                             COMMENT.3 := "Return$NFull Stall Fault",
			                             COMMENT.4 := "Return$NTransit Stall Fault",
			                             COMMENT.5 := "Return$NShorted Fault",
			                             COMMENT.6 := "No Command$NStall/No Feedback$NFault",
			                             COMMENT.7 := "No Command$NShorted Fault",
			                             RADIX := Decimal,
			                             ExternalAccess := None,
			                             DefaultData := 0);
			wrkNoCmdTimer : TIMER (ExternalAccess := None,
			                        DefaultData := "[0,100000,0]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Actuator AOI$N"
				    "************************************************************";
				N: NOP();
				RC: "Name Configuration for Device";
				N: JMP(skiptext)LOWER(hmiDeviceName,hmiDeviceName)LOWER(hmiReturnedName,hmiAdvancedName)LOWER(hmiReturningName,hmiAdvancingName)LOWER(hmiCmdReturnName,hmiCmdAdvanceName)LOWER(hmiType,hmiType);
				N: LBL(skiptext)NOP();
				RC: "HMI Actuator Components Highlighting$N"
				    "*$N"
				    "";
				N: XIC(ocmdHighlight)ONS(ONS.0)[XIO(hmiHighlight) ONS(ONS.1) OTL(hmiHighlight) ,XIC(hmiHighlight) XIO(ONS.1) OTU(hmiHighlight) ];
				N: P_Perm(stsAdvancePerm)P_Perm(stsReturnPerm);
				RC: "************************************************************$N"
				    "ALARM RESET COMMAND HANDLING$N"
				    "************************************************************$N"
				    "This rung handles the Alarm Reset Input and Commands$N"
				    "and the $QReset and Ack All$Q Operator Command.$N"
				    "$N"
				    "This rung processes received Reset Commands from:$N"
				    "$N"
				    "1.  The Operator via HMI Operator Command, or$N"
				    "2.  Higher-level strategies via Program Command$N"
				    "3.  Pushbuttons or other block via Input$N"
				    "4.  Resets initiated by other device Operator Commands (if configured to do so)$N"
				    "$N"
				    "and forwards the Reset to ALL Alarms and latched Shed conditions.";
				N: [XIC(pcmdReset) ,XIC(pcmdAdvance) ,XIC(ocmdAdvance) ONS(wrkAdvanceFaultResetOS) ,XIC(pcmdReturn) ,XIC(ocmdReturn) ONS(wrkReturnFaultResetOS) ,XIC(inpReset) ]CLR(wrkFaultWord)OTE(wrkResetFaults);
				N: [XIC(inpModeManual) OTE(stsOperatorControl) ,XIC(inpModeAuto) OTE(stsProgramControl) ];
				N: GEQ(cfgComponentsOffSetEnd,cfgComponentsOffSetStart)LIM(0,cfgComponentsOffSetStart,wrkArraySizeMaxIndex)LIM(0,cfgComponentsOffSetEnd,wrkArraySizeMaxIndex)OTE(wrkOffSetsValid);
				N: XIO(wrkOffSetsValid)OTE(stsComponentsOffSetsNOK)JMP(End);
				N: CPT(wrkComponentsQty,(cfgComponentsOffSetEnd-cfgComponentsOffSetStart)+1);
				N: MOV(0,wrkNumFdBkReturn)MOV(0,wrkNumFdBkAdvance)MOV(cfgComponentsOffSetStart,wrkIndex)MOV(0,wrkComponentFaults);
				N: MOV(100000,wrkAdvanceTimer.PRE)MOV(100000,wrkReturnTimer.PRE)MOV(100000,wrkNoCmdTimer.PRE);
				N: LBL(FB_Loop)NOP();
				N: COP(inpComponents[wrkIndex],wrkComponent,1);
				RC: "HMI Actuator Components Highlighting$N"
				    "*$N"
				    "";
				N: XIC(wrkComponent.ocmdHighlight)ONS(wrkComponent.ocmdONSHighlight.0)[XIO(hmiHighlight) ONS(wrkComponent.ocmdONSHighlight.1) OTL(hmiHighlight) ,XIC(hmiHighlight) XIO(wrkComponent.ocmdONSHighlight.1) OTU(hmiHighlight) ];
				N: NEQ(cfgFullStallFailTime,wrkComponent.wrkFullStallTimePrev)MUL(cfgFullStallFailTime,1000,wrkComponent.wrkFullStallTime)MOV(cfgFullStallFailTime,wrkComponent.wrkFullStallTimePrev);
				N: NEQ(cfgTransitFailTime,wrkComponent.wrkTransitStallTimePrev)MUL(cfgTransitFailTime,1000,wrkComponent.wrkTransitStallTime)MOV(cfgTransitFailTime,wrkComponent.wrkTransitStallTimePrev);
				N: NEQ(cfgShortFailTime,wrkComponent.wrkShortedTimePrev)MUL(cfgShortFailTime,1000,wrkComponent.wrkShortedTime)MOV(cfgShortFailTime,wrkComponent.wrkShortedTimePrev);
				N: XIC(wrkComponent.inpAdvanceFdbk)OTE(wrkComponent.wrkAdvanceFdbk);
				N: XIC(wrkComponent.inpReturnFdbk)OTE(wrkComponent.wrkReturnFdbk);
				RC: "************************************************************$N"
				    "FEEDBACK STATUS$N"
				    "DETERMINED BY STATES$N"
				    "************************************************************";
				N: NOP();
				RC: "Returned: Returned feedback status is on and Advanced feedback is off.";
				N: XIC(inpCommsOK)XIC(wrkComponent.wrkReturnFdbk)XIO(wrkComponent.wrkAdvanceFdbk)XIO(wrkComponent.stsAdvanceFullStallFailure)OTU(wrkComponent.stsReturnFullStallFailure)OTU(wrkComponent.stsReturnTransitStallFailure)OTU(wrkComponent.stsReturnShortedFailure)OTU(wrkComponent.stsNoCmdStallFailure)OTU(wrkComponent.stsNoCmdShortedFailure)[MOV(0,wrkComponent.stsPosition) OTE(wrkComponent.stsReturned) ,ONS(wrkComponent.wrkReturnTimeONS) DIV(wrkReturnTimer.ACC,1000,wrkComponent.stsReturnTime) ];
				RC: "Advanced: Advanced feedback status is on and Return feedback is off.";
				N: XIC(inpCommsOK)XIC(wrkComponent.wrkAdvanceFdbk)XIO(wrkComponent.wrkReturnFdbk)XIO(wrkComponent.stsReturnFullStallFailure)OTU(wrkComponent.stsAdvanceFullStallFailure)OTU(wrkComponent.stsAdvanceTransitStallFailure)OTU(wrkComponent.stsAdvanceShortedFailure)OTU(wrkComponent.stsNoCmdStallFailure)OTU(wrkComponent.stsNoCmdShortedFailure)[MOV(1,wrkComponent.stsPosition) OTE(wrkComponent.stsAdvanced) ,ONS(wrkComponent.wrkAdvanceTimeONS) DIV(wrkAdvanceTimer.ACC,1000,wrkComponent.stsAdvanceTime) ];
				RC: "Returning: Return command has been issued to actuator but Returned status feedback has not been received.";
				N: XIC(wrkReturn)TON(wrkReturnTimer,?,?)XIO(wrkComponent.wrkReturnFdbk)XIO(wrkComponent.stsFailed)MOV(2,wrkComponent.stsPosition)OTE(wrkComponent.stsReturning);
				RC: "Advancing: Advance command has been issued to actuator but Advanced status feedback has not been received.";
				N: XIC(wrkAdvance)TON(wrkAdvanceTimer,?,?)XIO(wrkComponent.wrkAdvanceFdbk)XIO(wrkComponent.stsFailed)MOV(3,wrkComponent.stsPosition)OTE(wrkComponent.stsAdvancing);
				RC: "No Command has been issued to actuator";
				N: XIO(stsAdvanced)XIO(stsReturned)TON(wrkNoCmdTimer,?,?);
				RC: "All Off: All Off command has been issued to Actuator and Advanced and Returned feedback are both off.";
				N: XIC(wrkAllOff)XIO(wrkAdvance)XIO(wrkReturn)MOV(-1,wrkComponent.stsPosition)OTE(wrkComponent.stsAllOff);
				N: XIC(wrkResetFaults)OTU(wrkComponent.stsAdvanceFullStallFailure)OTU(wrkComponent.stsAdvanceTransitStallFailure)OTU(wrkComponent.stsAdvanceShortedFailure)OTU(wrkComponent.stsReturnFullStallFailure)OTU(wrkComponent.stsReturnTransitStallFailure)OTU(wrkComponent.stsReturnShortedFailure)OTU(wrkComponent.stsNoCmdStallFailure)OTU(wrkComponent.stsNoCmdShortedFailure);
				RC: "Stall/No Feedback: Returned feedback status is off and Advanced feedback is off.$N"
				    "No command active.";
				N: XIC(inpCommsOK)XIO(wrkComponent.wrkReturnFdbk)XIO(wrkComponent.wrkAdvanceFdbk)GEQ(wrkNoCmdTimer.ACC,wrkComponent.wrkTransitStallTime)MOV(10,wrkComponent.stsPosition)OTL(wrkComponent.stsNoCmdStallFailure);
				RC: "Shorted: Returned feedback status is on and Advanced feedback is on.$N"
				    "No command active.";
				N: XIC(inpCommsOK)XIC(wrkComponent.wrkReturnFdbk)XIC(wrkComponent.wrkAdvanceFdbk)GEQ(wrkNoCmdTimer.ACC,wrkComponent.wrkShortedTime)MOV(11,wrkComponent.stsPosition)OTL(wrkComponent.stsNoCmdShortedFailure);
				RC: "************************************************************$N"
				    "Component Feedback FULL STALL$N"
				    "************************************************************$N"
				    "If the Actuator was told to Advance and it hasn$'t moved off the Fully Returned position,$N"
				    "or if it was told to Return and it hasn$'t moved off the Fully Advanced position,$N"
				    "run the Full Stall Timer.";
				N: XIC(wrkAdvance)XIC(wrkComponent.wrkReturnFdbk)XIO(wrkComponent.wrkAdvanceFdbk)GEQ(wrkAdvanceTimer.ACC,wrkComponent.wrkFullStallTime)XIO(wrkComponent.stsFailed)MOV(9,wrkComponent.stsPosition)OTL(wrkComponent.stsAdvanceFullStallFailure);
				N: XIC(wrkReturn)XIC(wrkComponent.wrkAdvanceFdbk)XIO(wrkComponent.wrkReturnFdbk)GEQ(wrkReturnTimer.ACC,wrkComponent.wrkFullStallTime)XIO(wrkComponent.stsFailed)MOV(8,wrkComponent.stsPosition)OTL(wrkComponent.stsReturnFullStallFailure);
				RC: "************************************************************$N"
				    "Component Feedback TRANSIT STALL$N"
				    "************************************************************";
				N: XIC(wrkAdvance)XIO(wrkComponent.wrkAdvanceFdbk)XIO(wrkComponent.wrkReturnFdbk)GEQ(wrkAdvanceTimer.ACC,wrkComponent.wrkTransitStallTime)XIO(wrkComponent.stsFailed)MOV(7,wrkComponent.stsPosition)OTL(wrkComponent.stsAdvanceTransitStallFailure);
				N: XIC(wrkReturn)XIO(wrkComponent.wrkAdvanceFdbk)XIO(wrkComponent.wrkReturnFdbk)GEQ(wrkReturnTimer.ACC,wrkComponent.wrkTransitStallTime)XIO(wrkComponent.stsFailed)MOV(6,wrkComponent.stsPosition)OTL(wrkComponent.stsReturnTransitStallFailure);
				RC: "************************************************************$N"
				    "Component Feedback SHORTED$N"
				    "************************************************************";
				N: XIC(wrkAdvance)[XIC(wrkComponent.wrkAdvanceFdbk) XIC(wrkComponent.wrkReturnFdbk) ,XIC(wrkComponent.inpAdvanceShortFdbk) ]GEQ(wrkAdvanceTimer.ACC,wrkComponent.wrkShortedTime)XIO(wrkComponent.stsFailed)MOV(5,wrkComponent.stsPosition)OTL(wrkComponent.stsAdvanceShortedFailure);
				N: XIC(wrkReturn)[XIC(wrkComponent.wrkAdvanceFdbk) XIC(wrkComponent.wrkReturnFdbk) ,XIC(wrkComponent.inpReturnShortFdbk) ]GEQ(wrkReturnTimer.ACC,wrkComponent.wrkShortedTime)XIO(wrkComponent.stsFailed)MOV(4,wrkComponent.stsPosition)OTL(wrkComponent.stsReturnShortedFailure);
				N: [XIC(wrkComponent.stsAdvanceFullStallFailure) OTL(wrkComponentFaults.0) ,XIC(wrkComponent.stsAdvanceTransitStallFailure) OTL(wrkComponentFaults.1) ,XIC(wrkComponent.stsAdvanceShortedFailure) OTL(wrkComponentFaults.2) ,XIC(wrkComponent.stsReturnFullStallFailure) OTL(wrkComponentFaults.3) ,XIC(wrkComponent.stsReturnTransitStallFailure) OTL(wrkComponentFaults.4) ,XIC(wrkComponent.stsReturnShortedFailure) OTL(wrkComponentFaults.5) ,XIC(wrkComponent.stsNoCmdStallFailure) OTL(wrkComponentFaults.6) ,XIC(wrkComponent.stsNoCmdShortedFailure) OTL(wrkComponentFaults.7) ]OTE(wrkComponent.stsFailed);
				N: [XIC(wrkComponent.stsReturned) ADD(1,wrkNumFdBkReturn,wrkNumFdBkReturn) ,XIC(wrkComponent.stsAdvanced) ADD(1,wrkNumFdBkAdvance,wrkNumFdBkAdvance) ,XIC(wrkComponent.stsFailed) XIO(wrkFaultWord.6) OTL(wrkFaultWord.6) ,XIC(hmiHighlight) OTE(wrkComponent.hmiHighlight) ,COP(wrkComponent,inpComponents[wrkIndex],1) ,ADD(wrkIndex,1,wrkIndex) [LEQ(wrkIndex,cfgComponentsOffSetEnd) LES(wrkIndex,wrkArraySize) JMP(FB_Loop) ,[GRT(wrkIndex,cfgComponentsOffSetStart) ,GEQ(wrkIndex,wrkArraySize) ] NOP() ] ];
				N: EQU(wrkNumFdBkReturn,wrkComponentsQty)MOV(cfgReturnDelay,wrkReturnDelayTmr.PRE)TON(wrkReturnDelayTmr,?,?)XIC(wrkReturnDelayTmr.DN)[OTE(wrkReturnFdbk) ,ONS(wrkReturnTimeONS) DIV(wrkReturnTimer.ACC,1000,stsReturnTime) ];
				N: EQU(wrkNumFdBkAdvance,wrkComponentsQty)MOV(cfgAdvanceDelay,wrkAdvanceDelayTmr.PRE)TON(wrkAdvanceDelayTmr,?,?)XIC(wrkAdvanceDelayTmr.DN)[OTE(wrkAdvanceFdbk) ,ONS(wrkAdvanceTimeONS) DIV(wrkAdvanceTimer.ACC,1000,stsAdvanceTime) ];
				RC: "Feedback Status$N"
				    "Determined By States";
				N: [XIC(wrkAllOff) XIO(wrkReturn) XIO(wrkAdvance) MOV(-1,stsPosition) OTE(stsAllOff) ,XIC(wrkAdvance) XIO(wrkAdvanceFdbk) MOV(3,stsPosition) OTE(stsAdvancing) ,XIC(wrkAdvanceFdbk) XIO(wrkReturnFdbk) MOV(1,stsPosition) OTE(stsAdvanced) ,XIC(wrkReturn) XIO(wrkReturnFdbk) MOV(2,stsPosition) OTE(stsReturning) ,XIC(wrkReturnFdbk) XIO(wrkAdvanceFdbk) MOV(0,stsPosition) OTE(stsReturned) ,[XIC(stsFaultReturnIntlkNOK) ,XIC(stsFaultReturnPermNOK) ,XIC(wrkComponentFaults.3) ,XIC(wrkComponentFaults.4) ,XIC(wrkComponentFaults.5) ] MOV(4,stsPosition) ,[XIC(stsFaultAdvanceIntlkNOK) ,XIC(stsFaultAdvancePermNOK) ,XIC(wrkComponentFaults.0) ,XIC(wrkComponentFaults.1) ,XIC(wrkComponentFaults.2) ] MOV(5,stsPosition) ,[XIC(wrkComponentFaults.6) ,XIC(wrkComponentFaults.7) ] MOV(6,stsPosition) ];
				RC: "************************************************************$N"
				    "ACTUATOR COMMAND HANDLING$N"
				    "************************************************************$N"
				    "";
				N: [XIC(inpReadyIntlk) XIC(stsAdvancePerm.Sts_PermOK) OTE(stsReadyToAdvance) ,XIC(inpReadyIntlk) XIC(stsReturnPerm.Sts_PermOK) OTE(stsReadyToReturn) ];
				RC: "These rungs, in priority order, determine whether the actuator should be advanced or returned.$N"
				    "$N"
				    "If an Actuator RETURN command is received in Operator, Program or Maintenance Mode, $N"
				    "or if in Override Mode and the Override State is RETURN, mark the actuator TO RETURN.$N"
				    "(Modes are mutually exclusive, thus handling the priority.)";
				N: [XIC(ocmdReturn) [XIO(stsOperatorControl) OTL(wrkFaultWord.0) ,NOP() ] XIC(stsOperatorControl) ,XIC(pcmdReturn) [XIO(stsProgramControl) OTL(wrkFaultWord.1) ,NOP() ] XIC(stsProgramControl) ][XIC(inpReadyIntlk) XIC(stsReturnPerm.Sts_PermOK) OTU(wrkAdvance) OTL(wrkReturn) OTU(wrkAllOff) ,XIO(stsReturnPerm.Sts_PermOK) OTL(wrkFaultWord.3) ,XIO(inpReadyIntlk) OTL(wrkFaultWord.5) ];
				RC: "$N"
				    "If a Actuator ADVANCE command is received in Operator, Program or Maintenance Mode, $N"
				    "or if in Override Mode and the Override State is ADVANCE, mark the actuator TO ADVANCE.";
				N: [XIC(ocmdAdvance) [XIO(stsOperatorControl) OTL(wrkFaultWord.0) ,NOP() ] XIC(stsOperatorControl) ,XIC(pcmdAdvance) [XIO(stsProgramControl) OTL(wrkFaultWord.1) ,NOP() ] XIC(stsProgramControl) ][XIC(inpReadyIntlk) XIC(stsAdvancePerm.Sts_PermOK) OTU(wrkReturn) OTL(wrkAdvance) OTU(wrkAllOff) ,XIO(stsAdvancePerm.Sts_PermOK) OTL(wrkFaultWord.2) ,XIO(inpReadyIntlk) OTL(wrkFaultWord.4) ];
				RC: "All Off";
				N: [XIC(ocmdAllOff) [XIO(stsOperatorControl) OTL(wrkFaultWord.0) ,NOP() ] XIC(stsOperatorControl) ,XIC(pcmdAllOff) [XIO(stsProgramControl) OTL(wrkFaultWord.1) ,NOP() ] XIC(stsProgramControl) ,XIC(wrkReturn) XIO(stsReturned) XIO(inpReadyIntlk) OTL(wrkFaultWord.5) ,XIC(wrkAdvance) XIO(stsAdvanced) XIO(inpReadyIntlk) OTL(wrkFaultWord.4) ]OTU(wrkAdvance)OTU(wrkReturn)OTL(wrkAllOff);
				RC: "************************************************************$N"
				    "OUTPUT GENERATION$N"
				    "************************************************************$N"
				    "If the Acuator is NOT LOCKED, generate the appropriate outputs for the Actuator.$N"
				    "If the Acuator is not faulted and not disabledm then:$N"
				    "if the Acuator energizes to advance and should be advanced, or$N"
				    "if the Acuator energizes to return and should be returned,$N"
				    "then energize the Output (Out)";
				N: [XIC(wrkAdvance) OTE(outAdvance) ,XIC(wrkReturn) OTE(outReturn) ];
				N: MOV(wrkFaultWord,stsFaultWord)NEQ(wrkFaultWord,0)OTE(stsFault);
				N: [[XIC(stsAdvancePerm.Sts_PermOK) ,XIC(stsAdvanced) ] OTU(wrkFaultWord.2) ,[XIC(stsReturnPerm.Sts_PermOK) ,XIC(stsReturned) ] OTU(wrkFaultWord.3) ];
				RC: "Always unlatch the inputs which are latched by the HMI or sequencer logic.  ";
				N: OTU(inpReset)OTU(pcmdAdvance)OTU(pcmdReturn)OTU(pcmdAllOff)OTU(pcmdReset);
				N: LBL(End)XIO(cfgEnableJog)OTU(ocmdAdvance)OTU(ocmdReturn)OTU(ocmdAllOff);
		END_ROUTINE

		ROUTINE Prescan 
				N: OTL(stsProgramControl)OTU(pcmdReturn)OTU(pcmdAdvance)OTU(ocmdReturn)OTU(ocmdAdvance)OTU(pcmdReset)OTU(wrkAdvance)OTU(wrkReturn);
				N: SIZE(inpComponents[0],0,wrkArraySize)SUB(wrkArraySize,1,wrkArraySizeMaxIndex);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION TLPosition (Class := Standard,
	                                          Revision := "1.7",
	                                          RevisionExtension := "20210427",
	                                          RevisionNote := "v1.5 Added auxiliary condition for stsAtPosition$Nv1.6 Added Time out alarm and time monitoring.$Nv1.7 If Time out configured is more than 30 status time out turns on",
	                                          Vendor := "Hokuto",
	                                          ExecutePrescan := No,
	                                          ExecutePostscan := No,
	                                          ExecuteEnableInFalse := No,
	                                          CreatedDate := "2019-11-13T18:58:28.183Z",
	                                          CreatedBy := "LAPTOP-KKSRL2SB\ucarr",
	                                          EditedDate := "2022-01-05T16:13:14.600Z",
	                                          EditedBy := "LUCID\DanWeinhold",
	                                          SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpActuator : Actuator[1] (Usage := InOut,
			                       Required := Yes,
			                       Visible := Yes);
			stsAtPosition : BOOL (Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read/Write,
			                         DefaultData := 0);
			stsActuatorArraySizeFault : BOOL (Usage := Output,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := Yes,
			                                     ExternalAccess := Read/Write,
			                                     DefaultData := 0);
			inpActuator1 OF PositionMask.1 (Description := "Actuator[1]$N#NAME#$NRequired Status$N$NOTU=stsReturned$NOTL=stsAdvanced",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := None);
			inpActuator2 OF PositionMask.2 (Description := "Actuator[2]$N#NAME#$NRequired Status$N$NOTU=stsReturned$NOTL=stsAdvanced",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := None);
			inpActuator3 OF PositionMask.3 (Description := "Actuator[3]$N#NAME#$NRequired Status$N$NOTU=stsReturned$NOTL=stsAdvanced",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := None);
			inpActuator4 OF PositionMask.4 (Description := "Actuator[4]$N#NAME#$NRequired Status$N$NOTU=stsReturned$NOTL=stsAdvanced",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := None);
			inpActuator5 OF PositionMask.5 (Description := "Actuator[5]$N#NAME#$NRequired Status$N$NOTU=stsReturned$NOTL=stsAdvanced",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := None);
			inpActuator6 OF PositionMask.6 (Description := "Actuator[6]$N#NAME#$NRequired Status$N$NOTU=stsReturned$NOTL=stsAdvanced",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := None);
			inpActuator7 OF PositionMask.7 (Description := "Actuator[7]$N#NAME#$NRequired Status$N$NOTU=stsReturned$NOTL=stsAdvanced",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := None);
			inpActuator8 OF PositionMask.8 (Description := "Actuator[8]$N#NAME#$NRequired Status$N$NOTU=stsReturned$NOTL=stsAdvanced",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := None);
			inpActuator9 OF PositionMask.9 (Description := "Actuator[9]$N#NAME#$NRequired Status$N$NOTU=stsReturned$NOTL=stsAdvanced",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := None);
			inpActuator10 OF PositionMask.10 (Description := "Actuator[10]$N#NAME#$NRequired Status$N$NOTU=stsReturned$NOTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator11 OF PositionMask.11 (Description := "Actuator[11]$N#NAME#$NRequired Status$N$NOTU=stsReturned$NOTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator12 OF PositionMask.12 (Description := "Actuator[12]$N#NAME#$NRequired Status$N$NOTU=stsReturned$NOTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator13 OF PositionMask.13 (Description := "Actuator[13]$N#NAME#$NRequired Status$N$NOTU=stsReturned$NOTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator14 OF PositionMask.14 (Description := "Actuator[14]$N#NAME#$NRequired Status$N$NOTU=stsReturned$NOTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator15 OF PositionMask.15 (Description := "Actuator[15]$N#NAME#$NRequired Status$N$NOTU=stsReturned$NOTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator16 OF PositionMask.16 (Description := "Actuator[16]$N#NAME#$NRequired Status$N$NOTU=stsReturned OTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator17 OF PositionMask.17 (Description := "Actuator[17]$N#NAME#$NRequired Status$N$NOTU=stsReturned OTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator18 OF PositionMask.18 (Description := "Actuator[18]$N#NAME#$NRequired Status$N$NOTU=stsReturned$NOTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator19 OF PositionMask.19 (Description := "Actuator[19]$N#NAME#$NRequired Status$N$NOTU=stsReturned OTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator20 OF PositionMask.20 (Description := "Actuator[20]$N#NAME#$NRequired Status$N$NOTU=stsReturned OTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator21 OF PositionMask.21 (Description := "Actuator[21]$N#NAME#$NRequired Status$N$NOTU=stsReturned OTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator22 OF PositionMask.22 (Description := "Actuator[22]$N#NAME#$NRequired Status$N$NOTU=stsReturned OTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator23 OF PositionMask.23 (Description := "Actuator[23]$N#NAME#$NRequired Status$N$NOTU=stsReturned OTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator24 OF PositionMask.24 (Description := "Actuator[24]$N#NAME#$NRequired Status$N$NOTU=stsReturned OTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator25 OF PositionMask.25 (Description := "Actuator[25]$N#NAME#$NRequired Status$N$NOTU=stsReturned OTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator26 OF PositionMask.26 (Description := "Actuator[26]$N#NAME#$NRequired Status$N$NOTU=stsReturned OTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator27 OF PositionMask.27 (Description := "Actuator[27]$N#NAME#$NRequired Status$N$NOTU=stsReturned OTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator28 OF PositionMask.28 (Description := "Actuator[28]$N#NAME#$NRequired Status$N$NOTU=stsReturned OTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator29 OF PositionMask.29 (Description := "Actuator[29]$N#NAME#$NRequired Status$N$NOTU=stsReturned OTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator30 OF PositionMask.30 (Description := "Actuator[30]$N#NAME#$NRequired Status$N$NOTU=stsReturned OTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			inpActuator31 OF PositionMask.31 (Description := "Actuator[31]$N#NAME#$NRequired Status$N$NOTU=stsReturned OTL=stsAdvanced",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := None);
			ActuatorsPosGuide : DINT (Description := "Actuators Position Guide for HMI",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read/Write,
			                             DefaultData := 0);
			inpCmd : BOOL (Description := "Program or Operator$NCommand",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := Yes,
			                  Visible := Yes,
			                  DefaultData := 0);
			inpReset : BOOL (Description := "Reset",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := Yes,
			                    Visible := Yes,
			                    DefaultData := 0);
			cfgCmdTimeOut : DINT (Description := "Program or Operator Command$NTime Out in Seconds$NMax 30",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := Yes,
			                         Visible := Yes,
			                         DefaultData := 0);
			stsNotAtPosTimeOut : BOOL (Description := "Program or Operator$NCommand ON$NNot At Position$NTime Out Fault",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := Yes,
			                              ExternalAccess := Read Only,
			                              DefaultData := 0);
			stsPrevCmdTime : REAL (Description := "Program or Operator$NCommand$NPrevious Time to Reach Position",
			                          Usage := Output,
			                          RADIX := Float,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0.00000000e+000);
			stsMaxCmdTime : REAL (Description := "Program or Operator$NCommand$NMaximum Time to Reach Position",
			                         Usage := Output,
			                         RADIX := Float,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0.00000000e+000);
		END_PARAMETERS

		LOCAL_TAGS
			wrkMaxSize : INT (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Index : INT (RADIX := Decimal,
			                ExternalAccess := None,
			                DefaultData := 0);
			PositionMask : DINT (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			FixtureCurrentPosition : DINT (RADIX := Decimal,
			                                 ExternalAccess := None,
			                                 DefaultData := 0);
			hmiPositionName : STRING_20 (ExternalAccess := Read/Write,
			                          DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			wrkActKnwonPos : DINT (RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := 0);
			wrkActUsed : DINT (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			wrkCmdTimer : TIMER (Description := "Program or Operator$NCommand$NTime Out",
			                      ExternalAccess := None,
			                      DefaultData := "[0,0,0]");
			wrkPrevCmdTimeONS : BOOL (RADIX := Decimal,
			                            ExternalAccess := None,
			                            DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Tool/Fixture Position AOI$N"
				    "************************************************************";
				N: NOP();
				N: JMP(skiptext)LOWER(hmiPositionName,hmiPositionName);
				N: LBL(skiptext)SIZE(inpActuator,0,wrkMaxSize)SUB(wrkMaxSize,1,wrkActUsed)MOV(1,Index)CLR(wrkActKnwonPos);
				N: GRT(wrkMaxSize,32)OTE(stsActuatorArraySizeFault)JMP(End);
				RC: "Loops Actuator array status (Advanced or Returned) to determine current position and compares that to the configured required status for this position.$N"
				    "PositionMask.0 is not used (OTU)";
				N: LBL(Loop_Position)OTU(PositionMask.0);
				N: EQU(Index,1)CLR(FixtureCurrentPosition);
				N: XIC(inpActuator[Index].stsAdvanced)XIO(inpActuator[Index].stsReturned)OTL(FixtureCurrentPosition.[Index]);
				N: XIC(inpActuator[Index].stsReturned)XIO(inpActuator[Index].stsAdvanced)OTU(FixtureCurrentPosition.[Index]);
				N: [XIC(inpActuator[Index].stsAdvanced) ,XIC(inpActuator[Index].stsReturned) ]ADD(1,wrkActKnwonPos,wrkActKnwonPos);
				N: ADD(1,Index,Index)[LES(Index,wrkMaxSize) JMP(Loop_Position) ,GEQ(Index,wrkMaxSize) NOP() ];
				N: EQU(wrkActKnwonPos,wrkActUsed)EQU(FixtureCurrentPosition,PositionMask)OTE(stsAtPosition);
				N: COP(PositionMask,ActuatorsPosGuide,1);
				RC: "Fixture Position Fault$N"
				    "Time Out";
				N: NOP();
				N: XIC(inpCmd)LIM(0,cfgCmdTimeOut,30)[MUL(cfgCmdTimeOut,1000,wrkCmdTimer.PRE) TON(wrkCmdTimer,?,?) ,XIC(stsAtPosition) ONS(wrkPrevCmdTimeONS) DIV(wrkCmdTimer.ACC,1000,stsPrevCmdTime) ];
				N: GRT(stsPrevCmdTime,stsMaxCmdTime)MOV(stsPrevCmdTime,stsMaxCmdTime);
				N: [XIC(wrkCmdTimer.DN) ,GRT(cfgCmdTimeOut,30) ]OTL(stsNotAtPosTimeOut);
				N: XIC(inpReset)OTU(stsNotAtPosTimeOut);
				N: LBL(End)NOP();
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION BitCheck_INT (Description := "Verify INT$NOnly One Set Bit",
	                                            Class := Standard,
	                                            Revision := "1.0",
	                                            RevisionExtension := "20191220",
	                                            RevisionNote := "v1.0 Release",
	                                            Vendor := "Hokuto",
	                                            ExecutePrescan := No,
	                                            ExecutePostscan := No,
	                                            ExecuteEnableInFalse := No,
	                                            CreatedDate := "2019-12-18T21:28:52.106Z",
	                                            CreatedBy := "LAPTOP-KKSRL2SB\ucarr",
	                                            EditedDate := "2022-01-05T16:13:14.204Z",
	                                            EditedBy := "LUCID\DanWeinhold",
	                                            SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpINT : INT (Usage := Input,
			                  RADIX := Decimal,
			                  Required := Yes,
			                  Visible := Yes,
			                  DefaultData := 0);
			outBitSeld : INT (Description := "Bit Selected",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			outSingleBit : BOOL (Description := "Single Set$NBit DINT",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := Yes,
			                        Visible := Yes,
			                        ExternalAccess := None,
			                        DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			wrkIndex : DINT (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			wrkSum : DINT (RADIX := Decimal,
			                 ExternalAccess := None,
			                 DefaultData := 0);
			wrkBitMem : DINT (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Bit Check INT AOI$N"
				    "************************************************************";
				N: CLR(wrkIndex)CLR(wrkSum)CLR(wrkBitMem);
				N: LBL(NextIndex)XIC(inpINT.[wrkIndex])ADD(1,wrkSum,wrkSum)MOV(wrkIndex,wrkBitMem);
				N: LES(wrkIndex,15)ADD(wrkIndex,1,wrkIndex)JMP(NextIndex);
				N: EQU(wrkSum,1)OTE(outSingleBit)MOV(wrkBitMem,outBitSeld);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION HMI_TLSequence (Class := Standard,
	                                              Revision := "1.1",
	                                              RevisionExtension := "20201211",
	                                              RevisionNote := "v1.0 Release$Nv1.1 Add Tags for HMI Use",
	                                              Vendor := "Hokuto",
	                                              ExecutePrescan := No,
	                                              ExecutePostscan := No,
	                                              ExecuteEnableInFalse := No,
	                                              CreatedDate := "2020-10-20T07:00:03.626Z",
	                                              CreatedBy := "LAPTOP-KKSRL2SB\ucarr",
	                                              EditedDate := "2020-12-17T21:44:19.119Z",
	                                              EditedBy := "LAPTOP-1BK8GLC9\ucarr",
	                                              SoftwareRevision := "v32.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpActuator : Actuator[1] (Usage := InOut,
			                       Required := Yes,
			                       Visible := Yes);
			stsActuatorArraySizeFault : BOOL (Usage := Output,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := Yes,
			                                     ExternalAccess := Read/Write,
			                                     DefaultData := 0);
			inpTLHomePos : TLPosition (Usage := InOut,
			                        Required := Yes,
			                        Visible := Yes);
			inpTLHomePosPerm : P_Perm (Usage := InOut,
			                            Required := Yes,
			                            Visible := Yes);
			inpTLWorkPos : TLPosition[1] (Usage := InOut,
			                        Required := Yes,
			                        Visible := Yes);
			inpTLWorkPosPerm : P_Perm[1] (Usage := InOut,
			                            Required := Yes,
			                            Visible := Yes);
			stsLoadSeqStepEnable : BOOL (Description := "Sequence Load Enable",
			                                Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := Yes,
			                                ExternalAccess := Read/Write,
			                                DefaultData := 0);
			stsByPassReqPerms : BOOL (Description := "Continuous Sequence Visibility",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := Yes,
			                             ExternalAccess := Read/Write,
			                             DefaultData := 0);
			stsSeqStep : DINT (Description := "Current Sequence Step",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			stsHideSeq : BOOL (Description := "Hide Sequence Indicators due to Operators Command",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			outActuatorsPosGuide : DINT (Description := "Actuators Position Guide for HMI",
			                                Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                ExternalAccess := Read/Write,
			                                DefaultData := 0);
			stsTLWorkPospermArraySizeFault : BOOL (Usage := Output,
			                                          RADIX := Decimal,
			                                          Required := No,
			                                          Visible := Yes,
			                                          ExternalAccess := Read Only,
			                                          DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			wrkMaxSizeAct : DINT (RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			wrkActUsed : DINT (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			StsIndex : DINT (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			SeqInArr : DINT[64] (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]");
			SeqInMask : DINT (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			SeqControl : CONTROL (ExternalAccess := None,
			                     DefaultData := "[0,63,0]");
			SeqReq : DINT (Description := "Sequence Required for TL Actuators",
			                 RADIX := Decimal,
			                 ExternalAccess := None,
			                 DefaultData := 0);
			FixtureCurrentPosition : DINT (RADIX := Decimal,
			                                 ExternalAccess := None,
			                                 DefaultData := 0);
			wrkActKnwonPos : DINT (RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := 0);
			ocmdLoadSeqStep : BOOL (Description := "Load Sequence Step",
			                          RADIX := Decimal,
			                          ExternalAccess := Read/Write,
			                          DefaultData := 0);
			ONSLoad : BOOL (RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			ReqIndex : DINT (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			wrkMaxSizeTLPosPerm : DINT (RADIX := Decimal,
			                              ExternalAccess := None,
			                              DefaultData := 0);
			PosIndex : DINT (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			wrkMaxIndexTLPosPerm : DINT (RADIX := Decimal,
			                               ExternalAccess := None,
			                               DefaultData := 0);
			SeqReqOff : BOOL (Description := "Hide Sequence Indicators due to Perms for Next Pos NOK",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			ONSLoadSeqStepEnable1 : BOOL (RADIX := Decimal,
			                                ExternalAccess := None,
			                                DefaultData := 0);
			ocmdLoadSeqStepEnable : BOOL (Description := "Load Sequence Enable$NOnly When At HomePos$NCommand",
			                                RADIX := Decimal,
			                                ExternalAccess := Read/Write,
			                                DefaultData := 0);
			ONSLoadSeqStepEnable2 : BOOL (RADIX := Decimal,
			                                ExternalAccess := None,
			                                DefaultData := 0);
			Seq0LoadedMem : BOOL (RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			ocmdBypassReqPerms : BOOL (Description := "Bypass Required Permissive for Positions$N_$NEnables Continuous Sequence Visibility$NCommand",
			                             RADIX := Decimal,
			                             ExternalAccess := Read/Write,
			                             DefaultData := 0);
			ONSByPassReqPerms1 : BOOL (RADIX := Decimal,
			                             ExternalAccess := None,
			                             DefaultData := 0);
			ONSBypReqPerms2 : BOOL (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			ocmdHideSeq : BOOL (Description := "Hide Sequence$NIndicators$NCommand",
			                      RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			ONSHideSeq1 : BOOL (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			ONSHideSeq2 : BOOL (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			PBWorkPosGuide : INT (Description := "Work Position Guide Push Buttons",
			                         RADIX := Decimal,
			                         ExternalAccess := Read/Write,
			                         DefaultData := 0);
			IndWorkPosGuide : INT (Description := "Work Position Guide Indicators",
			                          RADIX := Decimal,
			                          ExternalAccess := Read/Write,
			                          DefaultData := 0);
			ONSWorkPosGuide : BOOL (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			WorkPosGuideSelected : BOOL (RADIX := Decimal,
			                               ExternalAccess := None,
			                               DefaultData := 0);
			TLWrkPosGd : BitCheck_INT (ExternalAccess := None,
			                     DefaultData := "[1,0,0,0,0,0]");
			PBHomePosGuide : BOOL (Description := "Home Position Guide Push Button",
			                         RADIX := Decimal,
			                         ExternalAccess := Read/Write,
			                         DefaultData := 0);
			ONSHomePosGuide1 : BOOL (RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			ONSHomePosGuide2 : BOOL (RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			IndHomePosGuide : BOOL (Description := "Home Position Guide Indicator",
			                          RADIX := Decimal,
			                          ExternalAccess := Read/Write,
			                          DefaultData := 0);
			Flasher1OffTmr : TIMER (ExternalAccess := None,
			                         DefaultData := "[0,1000,855]");
			Flasher1OnTmr : TIMER (ExternalAccess := None,
			                        DefaultData := "[0,1000,0]");
			Flasher1 : BOOL (Description := "1 Second",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			wrkTemporalIndex : SINT (RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			cfgWorkPosOrder : SINT[16] (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := "[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]");
			stsHMI_TLWorkPos : TLPosition[16] (ExternalAccess := Read Only,
			                           DefaultData := "[[1,0,0,0.00000000e+000,0.00000000e+000,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,[0,0,0]],[1,0,0,0.00000000e+000,0.00000000e+000,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,[0,0,0]],[1,0,0,0.00000000e+000,0.00000000e+000,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,[0,0,0]],[1,0,0,0.00000000e+000,0.00000000e+000,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,[0,0,0]],[1,0,0,0.00000000e+000,0.00000000e+000,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,[0,0,0]],[1,0,0,0.00000000e+000,0.00000000e+000,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,[0,0,0]],[1,0,0,0.00000000e+000,0.00000000e+000,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,[0,0,0]],[1,0,0,0.00000000e+000,0.00000000e+000,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,[0,0,0]],[1,0,0,0.00000000e+000,0.00000000e+000,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,[0,0,0]],[1,0,0,0.00000000e+000,0.00000000e+000,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,[0,0,0]],[1,0,0,0.00000000e+000,0.00000000e+000,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,[0,0,0]],[1,0,0,0.00000000e+000,0.00000000e+000,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,[0,0,0]],[1,0,0,0.00000000e+000,0.00000000e+000,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,[0,0,0]],[1,0,0,0.00000000e+000,0.00000000e+000,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,[0,0,0]],[1,0,0,0.00000000e+000,0.00000000e+000,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,[0,0,0]],[1,0,0,0.00000000e+000,0.00000000e+000,0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,[0,0,0]]]");
			stsHMI_WorkPosPermStsOK : BOOL[32] (RADIX := Decimal,
			                                  ExternalAccess := Read Only,
			                                  DefaultData := "[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0]");
			stsHMI_WorkPosPermSelected : P_Perm (ExternalAccess := Read Only,
			                                     DefaultData := "[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']]");
			stsHMI_TLWorkPosPerm : SINT[16] (RADIX := Decimal,
			                               ExternalAccess := None,
			                               DefaultData := "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "HMI TL Sequence AOI$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "TL Position HMI order$N"
				    "************************************************************$N"
				    "Configure order to show each WorkPos on HMI list$N"
				    "cfgWorkPosOrder[0] -> Position of WorkPos[0]$N"
				    "cfgWorkPosOrder[1] -> Position of WorkPos[1]$N"
				    "cfgWorkPosOrder[2] -> Position of WorkPos[2]$N"
				    ".$N"
				    ".$N"
				    ".$N"
				    "DON$'T repeat any number, DON$'T use any number greater than 15 $N"
				    "$N"
				    "Home Position always to be on top (Not configurable)$N"
				    "";
				N: NOP();
				N: JMP(skipconfig)[MOV(cfgWorkPosOrder[0],cfgWorkPosOrder[1]) MOV(cfgWorkPosOrder[2],cfgWorkPosOrder[3]) MOV(cfgWorkPosOrder[4],cfgWorkPosOrder[5]) MOV(cfgWorkPosOrder[6],cfgWorkPosOrder[7]) ,MOV(cfgWorkPosOrder[8],cfgWorkPosOrder[9]) MOV(cfgWorkPosOrder[10],cfgWorkPosOrder[11]) MOV(cfgWorkPosOrder[12],cfgWorkPosOrder[13]) MOV(cfgWorkPosOrder[14],cfgWorkPosOrder[15]) ];
				N: LBL(skipconfig)NOP();
				N: [SIZE(inpTLWorkPosPerm,0,wrkMaxSizeTLPosPerm) SUB(wrkMaxSizeTLPosPerm,1,wrkMaxIndexTLPosPerm) SIZE(inpActuator,0,wrkMaxSizeAct) SUB(wrkMaxSizeAct,1,wrkActUsed) CLR(wrkActKnwonPos) ,MOV(1,StsIndex) MOV(0,PosIndex) MOV(1,ReqIndex) MOV(63,SeqControl.LEN) ,[XIO(Flasher1OnTmr.DN) MOV(1000,Flasher1OffTmr.PRE) TON(Flasher1OffTmr,?,?) ,XIC(Flasher1OffTmr.DN) MOV(1000,Flasher1OnTmr.PRE) TON(Flasher1OnTmr,?,?) OTE(Flasher1) ] ];
				N: GRT(wrkMaxSizeAct,32)OTE(stsActuatorArraySizeFault)JMP(End);
				N: GRT(wrkMaxSizeTLPosPerm,16)OTE(stsTLWorkPospermArraySizeFault)JMP(End);
				RC: "HMI List Organize$N"
				    "WorkPos";
				N: LBL(Loop_HMI_Workpos)NOP();
				N: MOV(cfgWorkPosOrder[PosIndex],wrkTemporalIndex)LES(wrkTemporalIndex,16)[COP(inpTLWorkPos[PosIndex],stsHMI_TLWorkPos[wrkTemporalIndex],1) ,COP(PosIndex,stsHMI_TLWorkPosPerm[wrkTemporalIndex],1) ];
				N: ADD(1,PosIndex,PosIndex)[LES(PosIndex,16) JMP(Loop_HMI_Workpos) ,GEQ(PosIndex,16) MOV(0,PosIndex) NOP() ];
				RC: "HMI List Organize$N"
				    "WorkPos Permissives";
				N: LBL(Loop_HMI_WorkPosPerm)NOP();
				N: [MOV(cfgWorkPosOrder[PosIndex],wrkTemporalIndex) ,LES(wrkTemporalIndex,16) XIC(inpTLWorkPosPerm[PosIndex].Sts_PermOK) OTE(stsHMI_WorkPosPermStsOK[wrkTemporalIndex]) ];
				N: ADD(1,PosIndex,PosIndex)[LES(PosIndex,wrkMaxSizeTLPosPerm) JMP(Loop_HMI_WorkPosPerm) ,GEQ(PosIndex,wrkMaxSizeTLPosPerm) MOV(0,PosIndex) NOP() ];
				RC: "Loops Actuator array status (Advanced or Returned) to determine current position$N"
				    "Bit 0 of Current position is not used (OTU).";
				N: LBL(Loop_StatusPosition)OTU(FixtureCurrentPosition.0);
				N: XIC(inpActuator[StsIndex].stsAdvanced)XIO(inpActuator[StsIndex].stsReturned)OTL(FixtureCurrentPosition.[StsIndex]);
				N: XIC(inpActuator[StsIndex].stsReturned)XIO(inpActuator[StsIndex].stsAdvanced)OTU(FixtureCurrentPosition.[StsIndex]);
				N: [XIC(inpActuator[StsIndex].stsAdvanced) ,XIC(inpActuator[StsIndex].stsReturned) ]ADD(1,wrkActKnwonPos,wrkActKnwonPos);
				N: ADD(1,StsIndex,StsIndex)[LES(StsIndex,wrkMaxSizeAct) JMP(Loop_StatusPosition) ,GEQ(StsIndex,wrkMaxSizeAct) NOP() ];
				N: XIC(ocmdLoadSeqStepEnable)ONS(ONSLoadSeqStepEnable1)[XIO(stsLoadSeqStepEnable) ONS(ONSLoadSeqStepEnable2) OTL(stsLoadSeqStepEnable) ,XIC(stsLoadSeqStepEnable) XIO(ONSLoadSeqStepEnable2) OTU(stsLoadSeqStepEnable) ];
				N: XIC(ocmdBypassReqPerms)ONS(ONSByPassReqPerms1)[XIO(stsByPassReqPerms) ONS(ONSBypReqPerms2) OTL(stsByPassReqPerms) ,XIC(stsByPassReqPerms) XIO(ONSBypReqPerms2) OTU(stsByPassReqPerms) ];
				N: XIC(ocmdHideSeq)ONS(ONSHideSeq1)[XIO(stsHideSeq) ONS(ONSHideSeq2) OTL(stsHideSeq) ,XIC(stsHideSeq) XIO(ONSHideSeq2) OTU(stsHideSeq) ];
				N: EQU(wrkActKnwonPos,wrkActUsed)XIC(stsLoadSeqStepEnable)XIC(ocmdLoadSeqStep)ONS(ONSLoad)[XIC(Seq0LoadedMem) SQL(SeqInArr,FixtureCurrentPosition,SeqControl,?,?) ,XIO(Seq0LoadedMem) MOV(FixtureCurrentPosition,SeqInArr[0]) OTL(Seq0LoadedMem) ];
				N: MOV(-1,SeqInMask);
				N: XIO(stsLoadSeqStepEnable)XIO(inpTLHomePos.stsAtPosition)SQI(SeqInArr,SeqInMask,FixtureCurrentPosition,SeqControl,?,?)SQO(SeqInArr,SeqInMask,SeqReq,SeqControl,?,?);
				N: XIO(stsLoadSeqStepEnable)XIC(inpTLHomePos.stsAtPosition)MOV(SeqInArr[0],SeqReq)MOV(0,SeqControl.POS)OTU(Seq0LoadedMem);
				N: OTU(SeqReqOff);
				N: XIC(stsLoadSeqStepEnable)OTL(SeqReqOff);
				N: XIO(stsByPassReqPerms)XIC(inpTLHomePos.stsAtPosition)XIO(stsHMI_WorkPosPermStsOK[0])OTL(SeqReqOff);
				N: LBL(Loop_SeqPosition)NOP();
				N: XIO(stsByPassReqPerms)GRT(wrkMaxIndexTLPosPerm,1)XIC(stsHMI_TLWorkPos[PosIndex].stsAtPosition)XIO(stsHMI_WorkPosPermStsOK[PosIndex+1])OTL(SeqReqOff);
				N: ADD(1,PosIndex,PosIndex)[LES(PosIndex,wrkMaxIndexTLPosPerm) JMP(Loop_SeqPosition) ,GEQ(PosIndex,wrkMaxIndexTLPosPerm) NOP() ];
				N: XIO(stsByPassReqPerms)XIC(stsHMI_TLWorkPos[wrkMaxIndexTLPosPerm].stsAtPosition)XIO(inpTLHomePosPerm.Sts_PermOK)OTL(SeqReqOff);
				N: LBL(Loop_ReqPosition)NOP();
				N: XIO(stsHideSeq)XIO(SeqReqOff)XIC(SeqReq.[ReqIndex])XIO(inpActuator[ReqIndex].stsAdvanced)XIC(Flasher1)OTE(inpActuator[ReqIndex].stsAdvanceSeqReq);
				N: XIO(stsHideSeq)XIO(SeqReqOff)XIO(SeqReq.[ReqIndex])XIO(inpActuator[ReqIndex].stsReturned)XIC(Flasher1)OTE(inpActuator[ReqIndex].stsReturnSeqReq);
				N: ADD(1,ReqIndex,ReqIndex)[LES(ReqIndex,wrkMaxSizeAct) JMP(Loop_ReqPosition) ,GEQ(ReqIndex,wrkMaxSizeAct) NOP() ];
				N: [XIO(Seq0LoadedMem) MOV(-1,stsSeqStep) ,XIC(Seq0LoadedMem) MOV(SeqControl.POS,stsSeqStep) ];
				RC: "Position Guide$N"
				    "*";
				N: NOP();
				N: [XIC(PBHomePosGuide) XIO(IndHomePosGuide) ,NEQ(PBWorkPosGuide,0) XIC(IndHomePosGuide) ]ONS(ONSHomePosGuide1)[XIO(IndHomePosGuide) ONS(ONSHomePosGuide2) OTL(IndHomePosGuide) ,XIC(IndHomePosGuide) XIO(ONSHomePosGuide2) OTU(IndHomePosGuide) ]CLR(IndWorkPosGuide);
				N: NEQ(PBWorkPosGuide,0)NEQ(PBWorkPosGuide,IndWorkPosGuide)XIO(IndHomePosGuide)ONS(ONSWorkPosGuide)[NEQ(PBWorkPosGuide,IndWorkPosGuide) CLR(IndWorkPosGuide) ,XOR(PBWorkPosGuide,IndWorkPosGuide,IndWorkPosGuide) ];
				N: BitCheck_INT(TLWrkPosGd,IndWorkPosGuide,WorkPosGuideSelected);
				N: [XIC(IndHomePosGuide) [MOV(inpTLHomePos.ActuatorsPosGuide,outActuatorsPosGuide) ,COP(inpTLHomePosPerm,stsHMI_WorkPosPermSelected,1) ] ,XIO(IndHomePosGuide) XIC(WorkPosGuideSelected) [MOV(stsHMI_TLWorkPos[TLWrkPosGd.outBitSeld].ActuatorsPosGuide,outActuatorsPosGuide) ,MOV(stsHMI_TLWorkPosPerm[TLWrkPosGd.outBitSeld],wrkTemporalIndex) LES(wrkTemporalIndex,wrkMaxSizeTLPosPerm) COP(inpTLWorkPosPerm[wrkTemporalIndex],stsHMI_WorkPosPermSelected,1) ] ];
				N: LBL(End)NOP();
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION BitCheck_DINT (Description := "Verify DINT$NOnly One Set Bit",
	                                             Class := Standard,
	                                             Revision := "1.0",
	                                             RevisionExtension := "20191220",
	                                             RevisionNote := "v1.0 Release",
	                                             Vendor := "Hokuto",
	                                             ExecutePrescan := No,
	                                             ExecutePostscan := No,
	                                             ExecuteEnableInFalse := No,
	                                             CreatedDate := "2019-12-18T21:28:52.106Z",
	                                             CreatedBy := "LAPTOP-KKSRL2SB\ucarr",
	                                             EditedDate := "2022-01-05T16:13:14.192Z",
	                                             EditedBy := "LUCID\DanWeinhold",
	                                             SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpDINT : DINT (Usage := Input,
			                   RADIX := Decimal,
			                   Required := Yes,
			                   Visible := Yes,
			                   DefaultData := 0);
			outBitSeld : DINT (Description := "Bit Selected",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			outSingleBit : BOOL (Description := "Single Set$NBit DINT",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := Yes,
			                        Visible := Yes,
			                        ExternalAccess := None,
			                        DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			wrkIndex : DINT (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			wrkSum : DINT (RADIX := Decimal,
			                 ExternalAccess := None,
			                 DefaultData := 0);
			wrkBitMem : DINT (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Bit Check DINT AOI$N"
				    "************************************************************";
				N: CLR(wrkIndex)CLR(wrkSum)CLR(wrkBitMem);
				N: LBL(NextIndex)XIC(inpDINT.[wrkIndex])ADD(1,wrkSum,wrkSum)MOV(wrkIndex,wrkBitMem);
				N: LES(wrkIndex,31)ADD(wrkIndex,1,wrkIndex)JMP(NextIndex);
				N: EQU(wrkSum,1)OTE(outSingleBit)MOV(wrkBitMem,outBitSeld);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION ShiftRegiEdit (Class := Standard,
	                                             Revision := "1.6",
	                                             RevisionExtension := "20210708",
	                                             RevisionNote := "v1.1 Changes to inpOptionMask array due to Manager update.$Nv1.2 AOI_BitCheck naming update.$Nv1.3 MES Updates$Nv1.4 ocmdUpload debug$Nv1.5 Clipboard Copy & Paste Functonality$Nv1.6 Added MES Dictionary for names flexibility.",
	                                             Vendor := "Hokuto",
	                                             ExecutePrescan := No,
	                                             ExecutePostscan := No,
	                                             ExecuteEnableInFalse := No,
	                                             CreatedDate := "2019-10-10T21:34:22.383Z",
	                                             CreatedBy := "LAPTOP-KKSRL2SB\ucarr",
	                                             EditedDate := "2022-01-05T16:13:14.571Z",
	                                             EditedBy := "LUCID\DanWeinhold",
	                                             SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpOptionMask : INT[16] (Usage := InOut,
			                         RADIX := Decimal,
			                         Required := Yes,
			                         Visible := Yes);
			inpPartData : p_udt_Shift_Register_Data (Usage := InOut,
			                       Required := Yes,
			                       Visible := Yes);
			inpEmptyData : p_udt_Shift_Register_Data (Usage := InOut,
			                        Required := Yes,
			                        Visible := Yes);
			inpManual : BOOL (Description := "Manual Enable",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			ClipBoard : h_udt_HMI_Model_Ind (Usage := InOut,
			                     Required := Yes,
			                     Visible := Yes);
			MESDictionary : p_udt_MES_Dictionary (Usage := InOut,
			                         Required := Yes,
			                         Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
			SR_HMI : h_udt_HMI_Shift_Register (ExternalAccess := Read/Write,
			                 DefaultData
			wrkOns : DINT (RADIX := Decimal,
			                 ExternalAccess := None,
			                 DefaultData := 0);
			CheckModel : BitCheck_DINT (ExternalAccess := None,
			                     DefaultData := "[1,0,0,0,0,0]");
			ModelSelected : BOOL (Description := "Model$NSelected",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Options_ONS : DINT (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			CheckOption : BitCheck_DINT[2] (ExternalAccess := None,
			                      DefaultData := "[[1,0,0,0,0,0],[0,0,0,0,0,0]]");
			OptionsSelected : DINT (Description := "New Options$NSelected",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			ValidOptionSelected : BOOL (Description := "Valid Options Selected",
			                              RADIX := Decimal,
			                              ExternalAccess := Read Only,
			                              DefaultData := 0);
			ocmdUpload : BOOL (RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			ocmdClear : BOOL (RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
			ocmdDownload : BOOL (RADIX := Decimal,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			wrkOcmdData : DINT[13] (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := "[0,0,0,0,0,0,0,0,0,0,0,0,0]");
			ocmdDataEmpty : BOOL (RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			CheckJobType : BitCheck_INT (ExternalAccess := None,
			                       DefaultData := "[1,0,0,0,0,0]");
			VariantSelected : BOOL (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			JobTypeSelected : BOOL (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			CheckState : BitCheck_INT (ExternalAccess := None,
			                     DefaultData := "[1,0,0,0,0,0]");
			StateSelected : BOOL (RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			CheckPartStatus : BitCheck_INT (ExternalAccess := None,
			                          DefaultData := "[1,0,0,0,0,0]");
			PartStatusSelected : BOOL (RADIX := Decimal,
			                             ExternalAccess := None,
			                             DefaultData := 0);
			CheckRoute_to_Repair : BitCheck_DINT (ExternalAccess := None,
			                               DefaultData := "[1,0,0,0,0,0]");
			Route_to_RepairSelected : BOOL (RADIX := Decimal,
			                                  ExternalAccess := None,
			                                  DefaultData := 0);
			wrkJobTypeValue : INT (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			wrkStateValue : INT (RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			wrkPartStatusValue : INT (RADIX := Decimal,
			                             ExternalAccess := None,
			                             DefaultData := 0);
			wrkRoute_to_RepairValue : DINT (RADIX := Decimal,
			                                  ExternalAccess := Read Only,
			                                  DefaultData := 0);
			wrkModelValue : DINT (RADIX := Decimal,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			wrkStyleValue : DINT (RADIX := Decimal,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			wrkVariantValue : DINT (RADIX := Decimal,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			ONSocmdUpload : BOOL (RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			ocmdCopy : BOOL (RADIX := Decimal,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
			ONSocmdCopy : BOOL (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			ocmdPaste : BOOL (RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
			ONSocmdPaste : BOOL (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			wrkMaxSize : DINT (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			wrkIndex : DINT (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			wrkBWRTR : BOOL (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			wrkFWRTR : BOOL (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			wrkRTRIndex : DINT (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			wrkMaxIndex : DINT (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			SR_CurRoute_to_Repair : STRING_20 (ExternalAccess := Read Only,
			                                DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			wrkModelIndex : DINT (RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			SR_CurModel : STRING_20 (ExternalAccess := Read Only,
			                      DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			wrkStyleIndex : DINT (RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			SR_CurStyle : STRING_20 (ExternalAccess := Read Only,
			                      DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			wrkVariantIndex : DINT (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			SR_CurVariant : STRING_20 (ExternalAccess := Read Only,
			                        DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			wrkModelSelected : BOOL (RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			wrkStyleSelected : BOOL (RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			CheckStyle : BitCheck_DINT (ExternalAccess := None,
			                     DefaultData := "[1,0,0,0,0,0]");
			CheckVariant : BitCheck_DINT (ExternalAccess := None,
			                       DefaultData := "[1,0,0,0,0,0]");
			CheckIndModel : BitCheck_DINT (ExternalAccess := None,
			                        DefaultData := "[1,0,0,0,0,0]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Shift Register Edit AOI$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    "Job Type Edit$N"
				    "************************************************************";
				N: NOP();
				N: NEQ(SR_HMI.PB.ocmdData.JobType,0)NEQ(SR_HMI.PB.ocmdData.JobType,SR_HMI.Ind.ocmdData.JobType)ONS(wrkOns.0)[NEQ(SR_HMI.PB.ocmdData.JobType,SR_HMI.Ind.ocmdData.JobType) CLR(SR_HMI.Ind.ocmdData.JobType) ,XOR(SR_HMI.PB.ocmdData.JobType,SR_HMI.Ind.ocmdData.JobType,SR_HMI.Ind.ocmdData.JobType) ];
				N: BitCheck_INT(CheckJobType,SR_HMI.Ind.ocmdData.JobType,JobTypeSelected)[XIC(JobTypeSelected) ADD(CheckJobType.outBitSeld,1,wrkJobTypeValue) ,XIO(JobTypeSelected) MOV(0,wrkJobTypeValue) ];
				RC: "************************************************************$N"
				    "Job State Edit$N"
				    "************************************************************";
				N: NOP();
				N: NEQ(SR_HMI.PB.ocmdData.State,0)NEQ(SR_HMI.PB.ocmdData.State,SR_HMI.Ind.ocmdData.State)ONS(wrkOns.1)[NEQ(SR_HMI.PB.ocmdData.State,SR_HMI.Ind.ocmdData.State) CLR(SR_HMI.Ind.ocmdData.State) ,XOR(SR_HMI.PB.ocmdData.State,SR_HMI.Ind.ocmdData.State,SR_HMI.Ind.ocmdData.State) ];
				N: BitCheck_INT(CheckState,SR_HMI.Ind.ocmdData.State,StateSelected)[XIC(StateSelected) ADD(CheckState.outBitSeld,1,wrkStateValue) ,XIO(StateSelected) MOV(0,wrkStateValue) ];
				RC: "************************************************************$N"
				    "Part Status Edit$N"
				    "************************************************************";
				N: NOP();
				N: NEQ(SR_HMI.PB.ocmdData.PartStatus,0)NEQ(SR_HMI.PB.ocmdData.PartStatus,SR_HMI.Ind.ocmdData.PartStatus)ONS(wrkOns.2)[NEQ(SR_HMI.PB.ocmdData.PartStatus,SR_HMI.Ind.ocmdData.PartStatus) CLR(SR_HMI.Ind.ocmdData.PartStatus) ,XOR(SR_HMI.PB.ocmdData.PartStatus,SR_HMI.Ind.ocmdData.PartStatus,SR_HMI.Ind.ocmdData.PartStatus) ];
				N: BitCheck_INT(CheckPartStatus,SR_HMI.Ind.ocmdData.PartStatus,PartStatusSelected)[XIC(PartStatusSelected) ADD(CheckPartStatus.outBitSeld,1,wrkPartStatusValue) ,XIO(PartStatusSelected) MOV(0,wrkPartStatusValue) ];
				RC: "************************************************************$N"
				    "Route to Repair Edit$N"
				    "************************************************************";
				N: NOP();
				N: [XIC(ocmdUpload) ONS(wrkOns.16) BitCheck_DINT(CheckRoute_to_Repair,inpPartData.Route_to_Repair,Route_to_RepairSelected) [XIC(Route_to_RepairSelected) ADD(CheckRoute_to_Repair.outBitSeld,1,wrkRTRIndex) ,XIO(Route_to_RepairSelected) MOV(0,wrkRTRIndex) ] ,[XIC(SR_HMI.PB.ocmdBWRouteToRepair) ONS(wrkOns.17) SUB(wrkRTRIndex,1,wrkRTRIndex) ,XIC(SR_HMI.PB.ocmdFWRouteToRepair) ONS(wrkOns.18) ADD(wrkRTRIndex,1,wrkRTRIndex) ] SIZE(MESDictionary.Route_to_Repair,0,wrkMaxSize) MOV(0,SR_HMI.Ind.ocmdData.Route_to_Repair) SUB(wrkMaxSize,1,wrkMaxIndex) [LIM(0,wrkRTRIndex,wrkMaxIndex) ,LIM(wrkMaxSize,wrkRTRIndex,-1) MOV(0,wrkRTRIndex) ] ][EQU(wrkRTRIndex,0) MOV('No Repair',SR_HMI.Ind.ocmdRouteToRepair) ,[NEQ(wrkRTRIndex,0) EQU(MESDictionary.Route_to_Repair[wrkRTRIndex - 1],'') MOV(0,wrkRTRIndex) MOV('No Repair',SR_HMI.Ind.ocmdRouteToRepair) ,NEQ(wrkRTRIndex,0) NEQ(MESDictionary.Route_to_Repair[wrkRTRIndex - 1],'') MOV(MESDictionary.Route_to_Repair[wrkRTRIndex - 1],SR_HMI.Ind.ocmdRouteToRepair) OTL(SR_HMI.Ind.ocmdData.Route_to_Repair.[wrkRTRIndex - 1]) ] ];
				N: BitCheck_DINT(CheckRoute_to_Repair,inpPartData.Route_to_Repair,Route_to_RepairSelected)[XIC(Route_to_RepairSelected) ADD(CheckRoute_to_Repair.outBitSeld,1,wrkRoute_to_RepairValue) ,XIO(Route_to_RepairSelected) MOV(0,wrkRoute_to_RepairValue) ][EQU(wrkRoute_to_RepairValue,0) MOV('No Repair',SR_CurRoute_to_Repair) ,NEQ(wrkRoute_to_RepairValue,0) [EQU(MESDictionary.Route_to_Repair[wrkRoute_to_RepairValue - 1],'') MOV('No Repair',SR_CurRoute_to_Repair) ,NEQ(MESDictionary.Route_to_Repair[wrkRoute_to_RepairValue - 1],'') MOV(MESDictionary.Route_to_Repair[wrkRoute_to_RepairValue - 1],SR_CurRoute_to_Repair) ] ];
				RC: "************************************************************$N"
				    "Model Edit$N"
				    "************************************************************";
				N: NOP();
				N: [XIC(ocmdUpload) ONS(wrkOns.19) BitCheck_DINT(CheckIndModel,inpPartData.Model,wrkModelSelected) [XIC(wrkModelSelected) ADD(CheckIndModel.outBitSeld,1,wrkModelIndex) ,XIO(wrkModelSelected) MOV(0,wrkModelIndex) ] ,[XIC(SR_HMI.PB.ocmdBWModel) ONS(wrkOns.20) SUB(wrkModelIndex,1,wrkModelIndex) ,XIC(SR_HMI.PB.ocmdFWModel) ONS(wrkOns.21) ADD(wrkModelIndex,1,wrkModelIndex) ] SIZE(MESDictionary.Models,0,wrkMaxSize) MOV(0,SR_HMI.Ind.ocmdData.Model) SUB(wrkMaxSize,1,wrkMaxIndex) [LIM(0,wrkModelIndex,wrkMaxIndex) ,LIM(wrkMaxSize,wrkModelIndex,-1) MOV(0,wrkModelIndex) ] ][EQU(wrkModelIndex,0) MOV('No Model',SR_HMI.Ind.ocmdModel) ,[NEQ(wrkModelIndex,0) EQU(MESDictionary.Models[wrkModelIndex - 1],'') MOV(0,wrkModelIndex) MOV('No Model',SR_HMI.Ind.ocmdModel) ,NEQ(wrkModelIndex,0) NEQ(MESDictionary.Models[wrkModelIndex - 1],'') MOV(MESDictionary.Models[wrkModelIndex - 1],SR_HMI.Ind.ocmdModel) OTL(SR_HMI.Ind.ocmdData.Model.[wrkModelIndex - 1]) ] ];
				N: BitCheck_DINT(CheckIndModel,inpPartData.Model,wrkModelSelected)[XIC(wrkModelSelected) ADD(CheckIndModel.outBitSeld,1,wrkModelValue) ,XIO(wrkModelSelected) MOV(0,wrkModelValue) ][EQU(wrkModelValue,0) MOV('No Model',SR_CurModel) ,NEQ(wrkModelValue,0) [EQU(MESDictionary.Models[wrkModelValue - 1],'') MOV('No Model',SR_CurModel) ,NEQ(MESDictionary.Models[wrkModelValue - 1],'') MOV(MESDictionary.Models[wrkModelValue - 1],SR_CurModel) ] ];
				RC: "************************************************************$N"
				    "Style Edit$N"
				    "************************************************************";
				N: NOP();
				N: [XIC(ocmdUpload) ONS(wrkOns.22) BitCheck_DINT(CheckStyle,inpPartData.Style,wrkStyleSelected) [XIC(wrkStyleSelected) ADD(CheckStyle.outBitSeld,1,wrkStyleIndex) ,XIO(wrkStyleSelected) MOV(0,wrkStyleIndex) ] ,[XIC(SR_HMI.PB.ocmdBWStyle) ONS(wrkOns.23) SUB(wrkStyleIndex,1,wrkStyleIndex) ,XIC(SR_HMI.PB.ocmdFWStyle) ONS(wrkOns.24) ADD(wrkStyleIndex,1,wrkStyleIndex) ] SIZE(MESDictionary.Styles,0,wrkMaxSize) MOV(0,SR_HMI.Ind.ocmdData.Style) SUB(wrkMaxSize,1,wrkMaxIndex) [LIM(0,wrkStyleIndex,wrkMaxIndex) ,LIM(wrkMaxSize,wrkStyleIndex,-1) MOV(0,wrkStyleIndex) ] ][EQU(wrkStyleIndex,0) MOV('No Style',SR_HMI.Ind.ocmdStyle) ,[NEQ(wrkStyleIndex,0) EQU(MESDictionary.Styles[wrkStyleIndex - 1],'') MOV(0,wrkStyleIndex) MOV('No Style',SR_HMI.Ind.ocmdStyle) ,NEQ(wrkStyleIndex,0) NEQ(MESDictionary.Styles[wrkStyleIndex - 1],'') MOV(MESDictionary.Styles[wrkStyleIndex - 1],SR_HMI.Ind.ocmdStyle) OTL(SR_HMI.Ind.ocmdData.Style.[wrkStyleIndex - 1]) ] ];
				N: BitCheck_DINT(CheckStyle,inpPartData.Style,wrkStyleSelected)[XIC(wrkStyleSelected) ADD(CheckStyle.outBitSeld,1,wrkStyleValue) ,XIO(wrkStyleSelected) MOV(0,wrkStyleValue) ][EQU(wrkStyleValue,0) MOV('No Style',SR_CurStyle) ,NEQ(wrkStyleValue,0) [EQU(MESDictionary.Styles[wrkStyleValue - 1],'') MOV('No Style',SR_CurStyle) ,NEQ(MESDictionary.Styles[wrkStyleValue - 1],'') MOV(MESDictionary.Styles[wrkStyleValue - 1],SR_CurStyle) ] ];
				RC: "************************************************************$N"
				    "Variant Edit$N"
				    "************************************************************";
				N: NOP();
				N: [XIC(ocmdUpload) ONS(wrkOns.25) BitCheck_DINT(CheckVariant,inpPartData.Variant,VariantSelected) [XIC(VariantSelected) ADD(CheckVariant.outBitSeld,1,wrkVariantIndex) ,XIO(VariantSelected) MOV(0,wrkVariantIndex) ] ,[XIC(SR_HMI.PB.ocmdBWVariant) ONS(wrkOns.26) SUB(wrkVariantIndex,1,wrkVariantIndex) ,XIC(SR_HMI.PB.ocmdFWVariant) ONS(wrkOns.27) ADD(wrkVariantIndex,1,wrkVariantIndex) ] SIZE(MESDictionary.Variants,0,wrkMaxSize) MOV(0,SR_HMI.Ind.ocmdData.Variant) SUB(wrkMaxSize,1,wrkMaxIndex) [LIM(0,wrkVariantIndex,wrkMaxIndex) ,LIM(wrkMaxSize,wrkVariantIndex,-1) MOV(0,wrkVariantIndex) ] ][EQU(wrkVariantIndex,0) MOV('No Variant',SR_HMI.Ind.ocmdVariant) ,[NEQ(wrkVariantIndex,0) EQU(MESDictionary.Variants[wrkVariantIndex - 1],'') MOV(0,wrkVariantIndex) MOV('No Variant',SR_HMI.Ind.ocmdVariant) ,NEQ(wrkVariantIndex,0) NEQ(MESDictionary.Variants[wrkVariantIndex - 1],'') MOV(MESDictionary.Variants[wrkVariantIndex - 1],SR_HMI.Ind.ocmdVariant) OTL(SR_HMI.Ind.ocmdData.Variant.[wrkVariantIndex - 1]) ] ];
				N: BitCheck_DINT(CheckVariant,inpPartData.Variant,VariantSelected)[XIC(VariantSelected) ADD(CheckVariant.outBitSeld,1,wrkVariantValue) ,XIO(VariantSelected) MOV(0,wrkVariantValue) ][EQU(wrkVariantValue,0) MOV('No Variant',SR_CurVariant) ,NEQ(wrkVariantValue,0) [EQU(MESDictionary.Variants[wrkVariantValue - 1],'') MOV('No Variant',SR_CurVariant) ,NEQ(MESDictionary.Variants[wrkVariantValue - 1],'') MOV(MESDictionary.Variants[wrkVariantValue - 1],SR_CurVariant) ] ];
				RC: "************************************************************$N"
				    "Valid Option Selected$N"
				    "************************************************************";
				N: [BitCheck_DINT(CheckModel,SR_HMI.Ind.ocmdData.Model,ModelSelected) BitCheck_DINT(CheckOption[0],SR_HMI.Ind.ocmdData.Style,OptionsSelected.0) BitCheck_DINT(CheckOption[1],SR_HMI.Ind.ocmdData.Variant,OptionsSelected.1) ,EQU(OptionsSelected,inpOptionMask[CheckModel.outBitSeld]) OTE(ValidOptionSelected) ];
				RC: "************************************************************$N"
				    "Valid Empty$N"
				    "************************************************************";
				N: [COP(SR_HMI.Ind.ocmdData.Model,wrkOcmdData[0],1) ,COP(SR_HMI.Ind.ocmdData.Style,wrkOcmdData[1],1) ,COP(SR_HMI.Ind.ocmdData.Variant,wrkOcmdData[2],1) ,COP(SR_HMI.Ind.ocmdData.SeqNum,wrkOcmdData[3],1) ,COP(SR_HMI.Ind.ocmdData.Route_to_Repair,wrkOcmdData[4],1) ,COP(SR_HMI.Ind.ocmdData.RFID.LEN,wrkOcmdData[5],1) ,COP(SR_HMI.Ind.ocmdData.JobNum.LEN,wrkOcmdData[6],1) ,COP(SR_HMI.Ind.ocmdData.PartNum.LEN,wrkOcmdData[7],1) ,COP(SR_HMI.Ind.ocmdData.PartID,wrkOcmdData[8],1) ,COP(SR_HMI.Ind.ocmdData.JobType,wrkOcmdData[9],1) ,COP(SR_HMI.Ind.ocmdData.State,wrkOcmdData[10],1) ,COP(SR_HMI.Ind.ocmdData.ReqQty,wrkOcmdData[11],1) ,COP(SR_HMI.Ind.ocmdData.PartStatus,wrkOcmdData[12],1) ];
				N: EQU(wrkOcmdData[0],0)EQU(wrkOcmdData[1],0)EQU(wrkOcmdData[2],0)EQU(wrkOcmdData[3],0)EQU(wrkOcmdData[4],0)EQU(wrkOcmdData[5],0)EQU(wrkOcmdData[6],0)EQU(wrkOcmdData[7],0)EQU(wrkOcmdData[8],0)EQU(wrkOcmdData[9],0)EQU(wrkOcmdData[10],0)EQU(wrkOcmdData[11],0)EQU(wrkOcmdData[12],0)OTE(ocmdDataEmpty);
				RC: "************************************************************$N"
				    "Clear ocmdData$N"
				    "************************************************************";
				N: XIC(inpManual)XIC(ocmdClear)FLL(0,SR_HMI.Ind,1);
				RC: "************************************************************$N"
				    "Update ocmdData$N"
				    "with the Current Shift register part data$N"
				    "************************************************************$N"
				    "";
				N: XIC(inpManual)XIC(ocmdUpload)[ONS(ONSocmdUpload) [CPS(inpPartData,SR_HMI.Ind.ocmdData,1) ,CLR(SR_HMI.Ind.ocmdData.JobType) ,CLR(SR_HMI.Ind.ocmdData.State) ,CLR(SR_HMI.Ind.ocmdData.PartStatus) ] ,LIM(1,inpPartData.JobType,16) OTL(SR_HMI.Ind.ocmdData.JobType.[inpPartData.JobType-1]) ,LIM(1,inpPartData.State,16) OTL(SR_HMI.Ind.ocmdData.State.[inpPartData.State-1]) ,LIM(1,inpPartData.PartStatus,16) OTL(SR_HMI.Ind.ocmdData.PartStatus.[inpPartData.PartStatus-1]) ];
				RC: "************************************************************$N"
				    "Update Current Shift Register part data $N"
				    "with the ocmdData$N"
				    "************************************************************$N"
				    "";
				N: XIC(inpManual)[NEQ(SR_HMI.Ind.ocmdData.Model,0) XIC(ValidOptionSelected) ,XIC(ocmdDataEmpty) ]XIC(ocmdDownload)[CPS(SR_HMI.Ind.ocmdData,inpPartData,1) ,MOV(wrkJobTypeValue,inpPartData.JobType) ,MOV(wrkStateValue,inpPartData.State) ,MOV(wrkPartStatusValue,inpPartData.PartStatus) ];
				RC: "************************************************************$N"
				    "Copy to Clipboard$N"
				    "with the Current Shift register part data$N"
				    "************************************************************$N"
				    "";
				N: XIC(inpManual)XIC(ocmdCopy)ONS(ONSocmdCopy)CPS(SR_HMI.Ind,ClipBoard,1);
				RC: "************************************************************$N"
				    "Paste from Clipboard$N"
				    "with the Current Shift register part data$N"
				    "************************************************************$N"
				    "";
				N: XIC(inpManual)XIC(ocmdPaste)ONS(ONSocmdPaste)CPS(ClipBoard,SR_HMI.Ind,1);
				RC: "Reset all Commands$N"
				    "";
				N: NOP();
				N: OTU(ocmdCopy)OTU(ocmdPaste)OTU(ocmdDownload)OTU(ocmdUpload)OTU(ocmdClear);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ENCODED_DATA (EncodedType := ADD_ON_INSTRUCTION_DEFINITION,
	              Name := "PartPresent",
	              Description := "PART PRESENT",
	              Class := Standard,
	              Revision := "2.0",
	              RevisionNote := "v1.1 Standard tag names$Nv1.2 Added Status for HMI$Nv2.0 Major Revision for Phase 2. Updated by Lucid Motors BIW Controls Department",
	              RevisionExtension := "20230607",
	              Vendor := "Hokuto/Lucid BIW Controls",
	              SignatureID := 9F7488A8,
	              SignatureTimestamp := "2023-06-07T15:32:57.767Z",
	              EditedDate := "2023-06-07T15:32:57.767Z",
	              EncryptionConfig := 9) 
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpPPSensor : SINT (Description := "PART PRESENT SWITCH",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := Yes,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			inpOnCondition : BOOL (Description := "CONDITION FOR WHICH PP SHOULD BE ON",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := Yes,
			                          Visible := Yes,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			inpOffCondition : BOOL (Description := "CONDITION FOR WHICH PP SHOULD BE OFF",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := Yes,
			                           Visible := Yes,
			                           DefaultData := 0);
			inpDryCycle : BOOL (Description := "DRY CYCLE MODE",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := Yes,
			                       Visible := Yes,
			                       DefaultData := 0);
			inpEnableError : BOOL (Description := "ENABLE FAULTS",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := Yes,
			                          Visible := Yes,
			                          DefaultData := 0);
			stsPPOn : BOOL (Description := "PART PRESENTS$NALL SENSORS ON",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
			stsPPOff : BOOL (Description := "PART PRESENTS$NALL SENSORS OFF",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			stsPPOK : BOOL (Description := "PP OK",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			stsPPNotOK : BOOL (Description := "PP NOT OK",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			cfgOffDebounceSec : REAL (Description := "Debounce time for PP off",
			                             Usage := Input,
			                             RADIX := Float,
			                             Required := No,
			                             Visible := Yes,
			                             DefaultData := 0.00000000e+000);
			cfgOnDebounceSec : REAL (Description := "Debounce time for PP on",
			                            Usage := Input,
			                            RADIX := Float,
			                            Required := No,
			                            Visible := Yes,
			                            DefaultData := 0.00000000e+000);
			cfgAlarmDelaySec : REAL (Description := "Time before stsNotOK is alarmed",
			                            Usage := Input,
			                            RADIX := Float,
			                            Required := No,
			                            Visible := Yes,
			                            DefaultData := 1.00000000e+000);
			stsNotONFault : BOOL (Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read/Write,
			                         DefaultData := 0);
			stsStillONFault : BOOL (Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
			ocmdONSHighlight : SINT (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			hmiHighlight : BOOL (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			ocmdHighlight : BOOL (Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			stsPPMem : BOOL (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			inpPPDryCycleLoadTrgr : BOOL (Description := "Part Present$NDry Cycle$NLoad Trigger",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 DefaultData := 0);
			inpPPDryCycleUnldTrgr : BOOL (Description := "Part Present$NDry Cycle$NUnload Trigger",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 DefaultData := 0);
			inpPPCommOK : BOOL (Description := "Part Present$NModule Communication OK",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			inpPPAllSensor : BOOL (Description := "All Part Present Switches",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			PPAnySensor : BOOL (Description := "Any Part Present Switch On",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			inpPPSensorInst : SINT (Description := "Part Present Installed Bits",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			stsPPAll : BOOL (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			stsPPAny : BOOL (Description := "PART PRESENTS$NANY SENSOR ON",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
		END_PARAMETERS

			
	END_ENCODED_DATA
	ADD_ON_INSTRUCTION_DEFINITION HMI_ProductionPart (Description := "Highlights PP on HMI$NUse 0 on Index if not used",
	                                                  Class := Standard,
	                                                  Revision := "1.0",
	                                                  RevisionExtension := "20201210",
	                                                  RevisionNote := "v1.0 Release",
	                                                  Vendor := "Hokuto",
	                                                  ExecutePrescan := No,
	                                                  ExecutePostscan := No,
	                                                  ExecuteEnableInFalse := No,
	                                                  CreatedDate := "2020-12-11T00:54:48.266Z",
	                                                  CreatedBy := "LAPTOP-1BK8GLC9\ucarr",
	                                                  EditedDate := "2021-02-26T17:50:53.007Z",
	                                                  EditedBy := "LAPTOP-1BK8GLC9\ucarr",
	                                                  SoftwareRevision := "v32.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpPPArray : PartPresent[1] (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			stsInpPPNOK : BOOL (Description := "Input Part Present Array Index Invalid$NFault",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			inpPPIndex1 OF PartPresent[1] (Usage := Input,
			                       RADIX := Decimal,
			                       Required := Yes,
			                       Visible := Yes,
			                       ExternalAccess := None);
			inpPPIndex2 OF PartPresent[2] (Usage := Input,
			                       RADIX := Decimal,
			                       Required := Yes,
			                       Visible := Yes,
			                       ExternalAccess := None);
			inpPPIndex3 OF PartPresent[3] (Usage := Input,
			                       RADIX := Decimal,
			                       Required := Yes,
			                       Visible := Yes,
			                       ExternalAccess := None);
			inpPPIndex4 OF PartPresent[4] (Usage := Input,
			                       RADIX := Decimal,
			                       Required := Yes,
			                       Visible := Yes,
			                       ExternalAccess := None);
			inpPPIndex5 OF PartPresent[5] (Usage := Input,
			                       RADIX := Decimal,
			                       Required := Yes,
			                       Visible := Yes,
			                       ExternalAccess := None);
			inpPPIndex6 OF PartPresent[6] (Usage := Input,
			                       RADIX := Decimal,
			                       Required := Yes,
			                       Visible := Yes,
			                       ExternalAccess := None);
			inpPPIndex7 OF PartPresent[7] (Usage := Input,
			                       RADIX := Decimal,
			                       Required := Yes,
			                       Visible := Yes,
			                       ExternalAccess := None);
		END_PARAMETERS

		LOCAL_TAGS
			hmiDeviceName : STRING_40 (ExternalAccess := Read/Write,
			                        DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			ocmdHighlight : BOOL (RADIX := Decimal,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			hmiHighlight : BOOL (RADIX := Decimal,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			ONS : DINT (RADIX := Decimal,
			              ExternalAccess := None,
			              DefaultData := 0);
			wrkPP : PartPresent (ExternalAccess := None,
			                DefaultData := "[1,0,0.00000000e+000,0.00000000e+000,1.00000000e+000,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,1000,0],[0,0,0],[0,0,0],0,[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],[0,0,0,0,0,0,0,0],[0,0,0],[0,1000,0]]");
			wrkMaxSize : DINT (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			wrkPPUsed : DINT (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			wrkSubIndex : DINT (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			PartPresent : SINT[8] (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := "[0,0,0,0,0,0,0,0]");
			wrkIndex : SINT (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Production Part AOI$N"
				    "************************************************************";
				N: JMP(skiptext)LOWER(hmiDeviceName,hmiDeviceName);
				N: LBL(skiptext)SIZE(inpPPArray,0,wrkMaxSize)SUB(wrkMaxSize,1,wrkPPUsed)MOV(0,wrkSubIndex);
				RC: "HMI Parts Present Highlighting$N"
				    "*$N"
				    "";
				N: XIC(ocmdHighlight)ONS(ONS.0)[XIO(hmiHighlight) ONS(ONS.1) OTL(hmiHighlight) ,XIC(hmiHighlight) XIO(ONS.1) OTU(hmiHighlight) ];
				N: LBL(PP_Loop)COP(PartPresent[wrkSubIndex],wrkIndex,1)[LIM(0,wrkIndex,wrkPPUsed) COP(inpPPArray[wrkIndex],wrkPP,1) ,[LES(wrkIndex,0) ,GRT(wrkIndex,wrkPPUsed) ] OTL(stsInpPPNOK) JMP(End) ];
				RC: "HMI Parts Present Highlighting$N"
				    "*$N"
				    "";
				N: XIC(wrkPP.ocmdHighlight)ONS(wrkPP.ocmdONSHighlight.0)[XIO(hmiHighlight) ONS(wrkPP.ocmdONSHighlight.1) OTL(hmiHighlight) ,XIC(hmiHighlight) XIO(wrkPP.ocmdONSHighlight.1) OTU(hmiHighlight) ];
				N: XIC(hmiHighlight)OTE(wrkPP.hmiHighlight);
				N: COP(wrkPP,inpPPArray[wrkIndex],1);
				N: ADD(1,wrkSubIndex,wrkSubIndex)[LES(wrkSubIndex,8) JMP(PP_Loop) ,GEQ(wrkSubIndex,8) OTU(stsInpPPNOK) ];
				N: LBL(End)NOP();
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION P_Intlk (Description := "Interlocks$N[Edit not Allowed]",
	                                       Class := Standard,
	                                       Revision := "4.10",
	                                       RevisionExtension := ".00 Release",
	                                       RevisionNote := "See Instruction Help for a summary of changes, and see 4.10 Release Notes for details.",
	                                       Vendor := "Rockwell Automation",
	                                       ExecutePrescan := Yes,
	                                       ExecutePostscan := No,
	                                       ExecuteEnableInFalse := Yes,
	                                       CreatedDate := "2008-04-02T16:58:50.551Z",
	                                       CreatedBy := "Not Available",
	                                       EditedDate := "2022-01-05T16:13:14.435Z",
	                                       EditedBy := "LUCID\DanWeinhold",
	                                       SoftwareRevision := "v33.00",
	                                       AdditionalHelpText := "Copyright Â© Rockwell Automation, Inc.  All Rights Reserved.$N$NThis Instruction monitors up to 16 Interlock conditions.  It provides these features:$N$N*  The $QOK$Q state of each Interlock Input is configurable.  By default,$N    each Input is 1 to trip, 0 when OK to run.$N*  Interlocks may be configured as Latched.  Latched Interlocks$N    require a Reset Command to clear.  The latching function can be$N    inhibited via a Latch Defeat input, for example, to avoid latching$N    Interlocks for a stopped motor.$N*  Interlocks may be configured as Bypassable; Non-Bypassable$N    Interlocks are reported separately so the destination object can$N    decide whether to bypass (ignore) bypassable interlocks, such$N    as in Maintenance Mode.$N*  First-Out reporting indicates the first condition that caused the$N    running equipment to be tripped.$N*  For each Interlock condition, a Tag may be defined for navigation.$N    Clicking the Interlock description will call up the associated Tag$'s$N    Faceplate.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (4.00.00)$NSee 4.10 Release Notes for details.$N* Changed type of Val_FirstOutTxt to STRING_Cond.$N* Corrected Scan Mode selection to execute Prescan logic.$N* Added Cfg_HasMoreObj.$N$NSUMMARY OF CHANGES FROM PREVIOUS VERSION (3.5-05)$NSee 4.00 Release Notes for details.$N* Changed Inf_ items to HMI_, and added Cfg_Area for security.$N* Added Val_FirstOutTxt string (Local, read-only) for use in$N   IntlkTrip alarm message  (ref: KnowledgeBase answer ID 672568).$N* Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.$N* All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N* Added Sts_RdyReset for use by external objects.")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inp_Intlk00 OF Wrk_Inp.0 (Description := "Interlock Cond. 00, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk01 OF Wrk_Inp.1 (Description := "Interlock Cond. 01, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk02 OF Wrk_Inp.2 (Description := "Interlock Cond. 02, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk03 OF Wrk_Inp.3 (Description := "Interlock Cond. 03, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk04 OF Wrk_Inp.4 (Description := "Interlock Cond. 04, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk05 OF Wrk_Inp.5 (Description := "Interlock Cond. 05, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk06 OF Wrk_Inp.6 (Description := "Interlock Cond. 06, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk07 OF Wrk_Inp.7 (Description := "Interlock Cond. 07, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk08 OF Wrk_Inp.8 (Description := "Interlock Cond. 08, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk09 OF Wrk_Inp.9 (Description := "Interlock Cond. 09, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk10 OF Wrk_Inp.10 (Description := "Interlock Cond. 10, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk11 OF Wrk_Inp.11 (Description := "Interlock Cond. 11, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk12 OF Wrk_Inp.12 (Description := "Interlock Cond. 12, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk13 OF Wrk_Inp.13 (Description := "Interlock Cond. 13, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk14 OF Wrk_Inp.14 (Description := "Interlock Cond. 14, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_Intlk15 OF Wrk_Inp.15 (Description := "Interlock Cond. 15, Stop if not in configured OK state",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No);
			Inp_BypActive : BOOL (Description := "1=Interlock Bypassing is currently active",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 0);
			Inp_LatchDefeat : BOOL (Description := "Latch Defeat 1=Do$Nnot latch inputs even if configured for latching",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           DefaultData := 0);
			Inp_Reset : BOOL (Description := "1=Reset Latched Interlocks and First-Out",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			Cfg_OKState : INT (Description := "Bits indicate which state (0 or 1) of each input is OK to run",
			                       Usage := Input,
			                       RADIX := Binary,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := -1);
			Cfg_Latched : INT (Description := "Set bits indicate which conditions are latched (sealed in)",
			                       Usage := Input,
			                       RADIX := Binary,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Cfg_Bypassable : INT (Description := "Set bits indicate which conditions can be bypassed",
			                          Usage := Input,
			                          RADIX := Binary,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			Cfg_HasNav : INT (Description := "Set bits indicate which Navigation buttons are enabled",
			                      Usage := Input,
			                      RADIX := Binary,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Cfg_HasMoreObj : BOOL (Description := "1=Tells HMI an object with more info is available",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			PCmd_Reset : BOOL (Description := "Program Command to Reset Latched Interlocks",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Sts_IntlkOK : BOOL (Description := "Overall Interlock Status (1=OK to run, 0=Stop)",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 1);
			Sts_NBIntlkOK : BOOL (Description := "Non-Bypassable Interlock Status (1=All NB Interlocks OK to run)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read Only,
			                         DefaultData := 1);
			Sts_BypActive : BOOL (Description := "1=Interlock Bypassing is Active (ignore bypassable interlocks)",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			Sts_RdyReset OF ORdy_Reset (Description := "1=A latched interlock (returned to OK) is ready to be reset",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only);
			Sts_Intlk : INT (Description := "Individual Interlock Status (1=Stop, 0=OK)",
			                     Usage := Output,
			                     RADIX := Binary,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			Sts_FirstOut : INT (Description := "Interlock First Out Status (bit 1 is First Not-OK condition)",
			                        Usage := Output,
			                        RADIX := Binary,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			P_Intlk : BOOL (Description := "Unique Parameter Name for auto - discovery",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Cfg_CondTxt : STRING_Cond[16] (Description := "Short HMI description of Interlock Conditions",
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[[20,'Enter Description
			Wrk_Inp : INT (Description := "Collection copy of Inp_IntlkXXs",
			                  RADIX := Binary,
			                  ExternalAccess := Read/Write,
			                  DefaultData := -1);
			Wrk_NB : INT (Description := "Working register for Non-Bypassable Interlock ogic",
			                 RADIX := Binary,
			                 ExternalAccess := None,
			                 DefaultData := 0);
			Wrk_Intlk : INT (Description := "Working register for Interlock logic",
			                    RADIX := Binary,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			Wrk_FirstOut : INT (Description := "Working register for First Out logic",
			                       RADIX := Binary,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			Wrk_Sts : INT (Description := "Working register for generating Interlock status",
			                  RADIX := Binary,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Wrk_PrevSts : INT (Description := "Interlock Status previous scan",
			                      RADIX := Binary,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			Wrk_LatchEnable : BOOL (Description := "1=Latch interlock if configured to latch, 0=don$'t latch",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 1);
			HMI_Tab : SINT (Description := "Tab to display (FTView ME)",
			                  RADIX := Decimal,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			Wrk_InpInv : INT (Description := "Input states after inversion based on Cfg_OKState",
			                     RADIX := Binary,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			HMI_Type : STRING_16_UDT (Description := "Type identifier for HMI navigation",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[7,'P_Intlk$00$00$00$00$00$00$00$00$00']");
			Cfg_Label : STRING_20 (Description := "Label for graphic symbol displayed on HMI",
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[10,'Interlocks$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Tag : STRING_20 (Description := "Tagname for display on HMI",
			                  ExternalAccess := Read/Write,
			                  DefaultData := "[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_Desc : STRING_40 (Description := "Description for display on HMI",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[25,'Interlocks with First Out$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Cfg_NavTag : STRING_NavTag[16] (Description := "Tagnames for destinations of Navigation buttons",
			                     ExternalAccess := Read/Write,
			                     DefaultData
			HMI_Lib : STRING_16_UDT (Description := "Display Library for Faceplate call-up",
			                  ExternalAccess := Read Only,
			                  DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			MSet_Bypass : INT (Description := "Individual condition Maintenance Bypass toggles",
			                      RADIX := Binary,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			Cfg_Area : STRING_Area (Description := "Process Area for security",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[6,'area01$00$00']");
			Val_FirstOutTxt : STRING_Cond (Description := "Text Description of First-Out Condition",
			                          ExternalAccess := Read Only,
			                          DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			Wrk_NonIntlkStop : BOOL (Description := "One-Shot store: Stop OTHER than Interlock Stop occurred.",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			Wrk_SetFirstOut : BOOL (Description := "One-Shot store: First Out update triggered",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			ORdy_Reset : BOOL (Description := "1=Ready for OCmd_Reset (enables HMI button)",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			OCmd_Reset : BOOL (Description := "Operator Command to Reset Latched Interlocks",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE EnableInFalse (Description := "Set summary $QOK$Q Status bits to FALSE (0)")
				RC: "************************************************************$N"
				    "OFF-SCAN (EnableIn is False) STATUS$N"
				    "************************************************************$N"
				    " Clear $QLurking$Q Commands (received while on false rung).$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####";
				N: OTU(OCmd_Reset)OTU(PCmd_Reset);
				RC: " $N"
				    "Since we$'re not processing Operator Commands, we$'re not READY for them either!";
				N: OTU(ORdy_Reset);
				RC: "If this Interlocks instruction is OFF-SCAN (rung is false or EnableIn is false in FBD),$N"
				    "then set the summary Interlock OK Status bits to FALSE (0).";
				N: OTU(Sts_IntlkOK)OTU(Sts_NBIntlkOK);
				RC: "Individual Interlock Bypasses can only be set for conditions that are$N"
				    "configured as Bypassable.  This AND clears all the MSets for inputs$N"
				    "that are NOT Bypassable.";
				N: AND(MSet_Bypass,Cfg_Bypassable,MSet_Bypass);
		END_ROUTINE

		ROUTINE Logic (Description := "Check Interlock Conditions")
				RC: "Copyright Â© Rockwell Automation, Inc.  All Rights Reserved.$N"
				    "************************************************************$N"
				    "P_Intlk:  PROCESS -- INTERLOCKS$N"
				    "************************************************************$N"
				    "Revision 4.10.00 Release  2019-03-08:  See V4.10.xx Release Notes for details.$N"
				    "V1.x, V2.x, and V3.x Revision History archived.$N"
				    "V4.00.00  2018-07-16:  Changed Inf_ items to HMI_, and added Cfg_Area for security.$N"
				    "Added Val_FirstOutTxt string (Local, read-only) for use in$N"
				    "IntlkTrip alarm message  (ref: KnowledgeBase answer ID 672568).$N"
				    "Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.$N"
				    "All OCmds/MCmds and ORdys/MRdys are now Local Tags.$N"
				    "Added Sts_RdyReset for use by external objects.$N"
				    "V4.10.00  2019-03-08:  Changed type of Val_FirstOutTxt to STRING_Cond.$N"
				    "Corrected Scan Mode selection to execute Prescan logic. Added Cfg_HasMoreObj.$N"
				    "************************************************************$N"
				    "This Instruction monitors up to 16 Interlock conditions.  It provides these features:$N"
				    "$N"
				    "*  The $QOK$Q state of each Interlock Input is configurable.$N"
				    "By default, each Input is 1 to trip, 0 when OK to run.$N"
				    "*  Interlocks may be configured as Latched.  Latched Interlocks$N"
				    "require a Reset Command to clear.  The latching function can be inhibited$N"
				    "via a Latch Defeat input, for example, to avoid latching Interlocks for a stopped motor.$N"
				    "*  Interlocks may be configured as Bypassable.  Bypassable Interlocks are reported$N"
				    "separately; the destination object can use this information to bypass these$N"
				    "Interlocks in Maintenance Mode or upon command.$N"
				    "*  First-Out reporting indicates the first condition that$N"
				    "caused the running equipment to be tripped.$N"
				    "* For each Interlock condition, a Tag may be defined for navigation. Clicking$N"
				    "the Interlock description will call up the associated Tag$'s Faceplate.$N"
				    "************************************************************$N"
				    "SHOW LOCAL STRINGS$N"
				    "************************************************************$N"
				    "The STRINGs containing the text associated with each instance of this$N"
				    "instruction cannot be Input or Output Parameters, because STRINGs are not$N"
				    " $'atomic$' types. (Inputs and Outputs must be SINT, INT, DINT, REAL, or BOOL.)$N"
				    "$N"
				    "In order to make it easier to find and configure these STRINGs, this rung$N"
				    "was added.  THE JMP (and the LBL on the following rung)$N"
				    "MUST NOT BE REMOVED!!!$N"
				    "$N"
				    "To view the STRINGs, go to the instruction instance (in LD or FBD), RIGHT-click$N"
				    "to bring up the context menu and select $QOpen Instruction Logic$Q.$N"
				    "This rung will appear with the STRING values for the selected instance.$N"
				    "You may double-click the STRING values here to modify them as well.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Added string for Cfg_Area, Val_FirstOutTxt; renamed Inf_* to HMI_*.  #####";
				N: JMP(SkipText)[LOWER(Cfg_Desc,Cfg_Label) LOWER(Cfg_Tag,Cfg_Area) CONCAT(HMI_Lib,HMI_Type,Val_FirstOutTxt) ,LOWER(Cfg_CondTxt[0],Cfg_CondTxt[1]) LOWER(Cfg_CondTxt[2],Cfg_CondTxt[3]) LOWER(Cfg_CondTxt[4],Cfg_CondTxt[5]) LOWER(Cfg_CondTxt[6],Cfg_CondTxt[7]) ,LOWER(Cfg_CondTxt[8],Cfg_CondTxt[9]) LOWER(Cfg_CondTxt[10],Cfg_CondTxt[11]) LOWER(Cfg_CondTxt[12],Cfg_CondTxt[13]) LOWER(Cfg_CondTxt[14],Cfg_CondTxt[15]) ,LOWER(Cfg_NavTag[0],Cfg_NavTag[1]) LOWER(Cfg_NavTag[2],Cfg_NavTag[3]) LOWER(Cfg_NavTag[4],Cfg_NavTag[5]) LOWER(Cfg_NavTag[6],Cfg_NavTag[7]) ,LOWER(Cfg_NavTag[8],Cfg_NavTag[9]) LOWER(Cfg_NavTag[10],Cfg_NavTag[11]) LOWER(Cfg_NavTag[12],Cfg_NavTag[13]) LOWER(Cfg_NavTag[14],Cfg_NavTag[15]) ];
				RC: "************************************************************$N"
				    "INPUT GATHERING$N"
				    "************************************************************$N"
				    "This object uses word-wise logic.  The 16 interlock inputs are aliased$N"
				    "to the Wrk_Inp word, so no logic is needed to collect the individual$N"
				    "conditions.  We can immediately start processing the interlock logic.$N"
				    "************************************************************$N"
				    "HANDLE $QOK STATE$Q INVERSIONS$N"
				    "************************************************************$N"
				    "This rung inverts the Input bits whose $QOK State$Q is 1 (0 to Stop).$N"
				    "The resulting Wrk_Inp word is ZERO if all interlock inputs are $QOK$Q.";
				N: LBL(SkipText)XOR(Wrk_Inp,Cfg_OKState,Wrk_InpInv);
				RC: "************************************************************$N"
				    "COMMAND PROCESSING$N"
				    "************************************************************$N"
				    "On receipt of a Reset Command, the output$N"
				    "Interlock Status (internal copy, actually) is cleared.$N"
				    "(Later logic may fill this in again if some Interlock conditions are true...)$N"
				    "$N"
				    "NOTE:  This object is $QModeless$Q -- Operator and Program Commands$N"
				    "are accepted at any time.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Deleted Cfg_PCmdClear; all Program Commands are now self-clearing.  #####";
				N: [XIC(PCmd_Reset) OTU(PCmd_Reset) ,XIC(OCmd_Reset) OTU(OCmd_Reset) ,XIC(Inp_Reset) ]CLR(Wrk_Sts);
				RC: "If the Latch Defeat Input is ON (say, motor not running) and the stored interlock$N"
				    "status is clear (typically, after we get a reset in the rung above),$N"
				    "switch to $Qnot latching$Q for all interlock inputs (regardless of Cfg_Latched).$N"
				    "$N"
				    "This has the effect of keeping the Latch Enable work bit ON until a Reset is received.$N"
				    "Hence this is part of the $Qreset command processing$Q logic....";
				N: EQU(Wrk_Sts,0)XIC(Inp_LatchDefeat)OTU(Wrk_LatchEnable);
				RC: "************************************************************$N"
				    "INTERLOCK PROCESSING$N"
				    "************************************************************$N"
				    "This rung clears any bits in the stored Interlock status for which the$N"
				    "Input bit is OFF and the bit is NOT configured as Latched.$N"
				    "$N"
				    "If the LatchDefeat input in OFF, set the internal Latch Enable work bit.$N"
				    "If this bit is ON, don$'t clear any latched bits with this rung (keep them latched).$N"
				    "If this bit is OFF, clear any bits that are NOT on in the input, whether$N"
				    "configured for latching or not!";
				N: [XIO(Inp_LatchDefeat) OTL(Wrk_LatchEnable) ,XIC(Wrk_LatchEnable) OR(Cfg_Latched,Wrk_InpInv,Wrk_Intlk) ,XIO(Wrk_LatchEnable) MOV(Wrk_InpInv,Wrk_Intlk) ]AND(Wrk_Sts,Wrk_Intlk,Wrk_Sts);
				RC: "This rung SETS Interlock status bits for any Interlock condition Input that is true.";
				N: OR(Wrk_Sts,Wrk_InpInv,Wrk_Sts);
				RC: "Individual Interlock Bypasses can only be set for conditions that are$N"
				    "configured as Bypassable.  This AND clears all the MSets for inputs$N"
				    "that are NOT Bypassable.$N"
				    "$N"
				    "The internal Non-Bypassable Interlocks word has bits set only if the Input is TRUE$N"
				    "AND the bit is configured as a NON-bypassable Interlock OR NOT bypassed..";
				N: AND(MSet_Bypass,Cfg_Bypassable,MSet_Bypass)NOT(MSet_Bypass,Wrk_NB)AND(Wrk_Sts,Wrk_NB,Wrk_NB);
				RC: "If the stored Interlock status is now clear (all bits 0), then the$N"
				    "First Out storage is cleared.$N"
				    "$N"
				    "Which stored Interlock status we check depends on whether$N"
				    "bypassable interlocks are bypassed or not.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Added Val_FirstOutTxt string (Local, read-only) for use in IntlkTrip alarm message.  #####";
				N: XIC(Inp_LatchDefeat)ONS(Wrk_NonIntlkStop)[XIO(Inp_BypActive) EQU(Wrk_Sts,0) ,XIC(Inp_BypActive) EQU(Wrk_NB,0) ]CLR(Wrk_FirstOut)FLL(0,Val_FirstOutTxt,1);
				RC: "If an interlock condition occurs (which interlocks depends on the$N"
				    "bypass status!) and the Latch Defeat input is NOT set,$N"
				    "the equipment is running and will be shut down.$N"
				    "If this happens, record the First Out status.$N"
				    "$N"
				    "#####  V4.00.00  2018-07-16:  Added Val_FirstOutTxt string (Local, read-only) for use in IntlkTrip alarm message.  #####$N"
				    "#####  V4.10.00  2019-03-08:  Changed type of Val_FirstOutTxt to STRING_Cond.  #####";
				N: [XIO(Inp_BypActive) NEQ(Wrk_Sts,0) ,XIC(Inp_BypActive) NEQ(Wrk_NB,0) ]XIO(Inp_LatchDefeat)ONS(Wrk_SetFirstOut)[XIO(Inp_BypActive) CPT(Wrk_FirstOut,(Wrk_Sts)AND(NOT(Wrk_PrevSts))) ,XIC(Inp_BypActive) CPT(Wrk_FirstOut,(Wrk_NB)AND(NOT(Wrk_PrevSts))) ,NEQ(Wrk_FirstOut,0) [XIC(Wrk_FirstOut.15) COP(Cfg_CondTxt[15],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.14) COP(Cfg_CondTxt[14],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.13) COP(Cfg_CondTxt[13],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.12) COP(Cfg_CondTxt[12],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.11) COP(Cfg_CondTxt[11],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.10) COP(Cfg_CondTxt[10],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.9) COP(Cfg_CondTxt[9],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.8) COP(Cfg_CondTxt[8],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.7) COP(Cfg_CondTxt[7],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.6) COP(Cfg_CondTxt[6],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.5) COP(Cfg_CondTxt[5],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.4) COP(Cfg_CondTxt[4],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.3) COP(Cfg_CondTxt[3],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.2) COP(Cfg_CondTxt[2],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.1) COP(Cfg_CondTxt[1],Val_FirstOutTxt,1) ,XIC(Wrk_FirstOut.0) COP(Cfg_CondTxt[0],Val_FirstOutTxt,1) ] ];
				RC: "The value used for $QFirst Out$Q generation this scan is stored$N"
				    "as the $Qprevious$Q value for use in the above logic next scan.";
				N: [XIO(Inp_BypActive) MOV(Wrk_Sts,Wrk_PrevSts) ,XIC(Inp_BypActive) MOV(Wrk_NB,Wrk_PrevSts) ];
				RC: "************************************************************$N"
				    "STATUS GENERATION$N"
				    "************************************************************$N"
				    "This rung generates the public Status for this object.$N"
				    "If all the Interlock Status bits are zero, there is no condition to$N"
				    "shut down the affected equipment.  In that case, show the Interlock Status as $QOK$Q$N"
				    "$N"
				    "Similar logic applies for the Non-Bypassable Interlocks OK Status.$N"
				    "$N"
				    "Also show the individual Interlock Status bits and the First Out Status bits.$N"
				    "$N"
				    "NOTE:  Working registers are used to prevent outside writes to the Sts_xxx$N"
				    "parameters from affecting the state of this object!";
				N: [[EQU(Wrk_Sts,0) OTE(Sts_IntlkOK) ,EQU(Wrk_NB,0) OTE(Sts_NBIntlkOK) ] ,XIC(Inp_BypActive) OTE(Sts_BypActive) ,MOV(Wrk_Sts,Sts_Intlk) ,MOV(Wrk_FirstOut,Sts_FirstOut) ];
				RC: "************************************************************$N"
				    "COMMAND READIES$N"
				    "************************************************************$N"
				    "This Interlock ojbect is ready for (needs) a RESET Command$N"
				    "if any Latched Interlocks are SET.";
				N: CMP((NOT(Wrk_InpInv))AND(Wrk_Sts)AND(Cfg_Latched))OTE(ORdy_Reset);
		END_ROUTINE

		ROUTINE Prescan (Description := "Clear $Qlurking$Q Commands")
				RC: "************************************************************$N"
				    "PRESCAN (POWERUP) HANDLING$N"
				    "************************************************************$N"
				    "On Prescan, clear any $Qlurking$Q Commands.";
				N: OTU(OCmd_Reset)OTU(PCmd_Reset);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION SICK_CCOM_EIP (Description := "Communication AOI for SICK AutoIdent devices",
	                                             Class := Standard,
	                                             Revision := "1.2",
	                                             RevisionNote := "Fix arithmetic error every 128 received telegrams",
	                                             Vendor := "SICK AG",
	                                             ExecutePrescan := No,
	                                             ExecutePostscan := No,
	                                             ExecuteEnableInFalse := No,
	                                             CreatedDate := "2015-11-26T13:43:46.213Z",
	                                             CreatedBy := "SICKCN\verdean",
	                                             EditedDate := "2015-11-26T13:45:08.086Z",
	                                             EditedBy := "SICKCN\verdean",
	                                             SoftwareRevision := "v16.04",
	                                             AdditionalHelpText := "The function block use a Ethernet/IP connection to communicate with a SICK device.$NThe FB makes it possible to send and receive sensor data. The Confirmed$NMessaging protocol (CM) is used to receive even long, fragmented read results.$N$NSend a command:$NThe bReq parameter must be triggered with a rising edge (signal change FALSE to $NTRUE) in order to carry out the function. For the time during which a valid response $Nhas yet to be received from the device, the bReqBusy parameter is used to signal $Nthat a response is still pending.The module signals the bReqDone = TRUE output $Nparameter when the function has been successfully completed. If data was requested $Nby the device, this data is copied into the Record. The bReqDone indicates that new $Ndata has been received  for a PLC cycle. Only one CoLa command request can be $Nsend to the same device at one time. $N$NReceive a reading result:$NData sent via trigger command or directly by the device (e.g., direct trigger via a light $Nbarrier) is stored in the Record. The bReadDone output indicates that new data has$Nbeen received for a PLC cycle. The iReadCount counter also increases by one. $NThe data sent by the device can be changed or adapted in SOPAS output format. $N$NThis AOI supports the folowing SICK devices:$N- LECTOR62x$N- RFU63x$N- CLV6xx (Read data only)$N- RFH62x (Read data only)")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			arrInputAssembly : SINT[1] (Usage := InOut,
			                            RADIX := Decimal,
			                            Required := Yes,
			                            Visible := Yes);
			arrOutputAssebly : SINT[1] (Usage := InOut,
			                            RADIX := Decimal,
			                            Required := Yes,
			                            Visible := Yes);
			arrRecord : SINT[1] (Usage := InOut,
			                     RADIX := Decimal,
			                     Required := Yes,
			                     Visible := Yes);
			arrCommand : SINT[1] (Usage := InOut,
			                      RADIX := Decimal,
			                      Required := Yes,
			                      Visible := Yes);
			iTimeout : INT (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    DefaultData := 5000);
			arrControl : SINT[3] (Usage := InOut,
			                      RADIX := Decimal,
			                      Required := Yes,
			                      Visible := Yes);
			bReq : BOOL (Usage := Input,
			                RADIX := Decimal,
			                Required := No,
			                Visible := Yes,
			                DefaultData := 0);
			iCommandLength : INT (Usage := Input,
			                          RADIX := Decimal,
			                          Required := Yes,
			                          Visible := Yes,
			                          DefaultData := 0);
			bReadDone : BOOL (Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			iReadLength : INT (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			iReadCount : INT (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			bReqDone : BOOL (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			bReqBusy : BOOL (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			iReqLength : INT (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			bError : BOOL (Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0);
			iErrorcode : DINT (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			iWriteStep : INT (RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			iWriteIndex : INT (RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			iWriteHeaderLengthSwap : INT (RADIX := Decimal,
			                                 ExternalAccess := Read/Write,
			                                 DefaultData := 0);
			iWriteHeaderLength : INT (RADIX := Decimal,
			                             ExternalAccess := Read/Write,
			                             DefaultData := 0);
			iWriteFragLength : INT (RADIX := Decimal,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
			iWriteErrorcode : INT (RADIX := Decimal,
			                          ExternalAccess := Read/Write,
			                          DefaultData := 0);
			iRecordSize : INT (RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			iReadStep : INT (RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
			iReadIndex : INT (RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			iReadHeaderLength : INT (RADIX := Decimal,
			                            ExternalAccess := Read/Write,
			                            DefaultData := 0);
			iReadFragmentLength : INT (RADIX := Decimal,
			                              ExternalAccess := Read/Write,
			                              DefaultData := 0);
			iInputSize : INT (RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			iPrefixOut : DINT (RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			iPrefixIn : DINT (RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
			iOutputSize : DINT (RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			iIndex : DINT (RADIX := Decimal,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
			iCommandSize : INT (RADIX := Decimal,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			fbTON : FBD_TIMER (ExternalAccess := Read/Write,
			                DefaultData := "[1,0,0,0,0,0,0,0,0,4,0,0]");
			fbOneShot : FBD_ONESHOT (ExternalAccess := Read/Write,
			                    DefaultData := "[1,0,5.60519386e-045]");
			bWriteFrag : BOOL (RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			bReadFrag : BOOL (RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
			bLongTelegram : BOOL (RADIX := Decimal,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			arrOutputImage : SINT[500] (RADIX := Decimal,
			                         ExternalAccess := Read/Write,
			                         DefaultData := "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]");
			arrInputImage : SINT[500] (RADIX := Decimal,
			                        ExternalAccess := Read/Write,
			                        DefaultData := "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]");
		END_LOCAL_TAGS

		ST_ROUTINE Logic 
			'(*=================================================================================
			'Name:		SICK_COLA_COMM
			'Author:	SICK AG
			'
			'===================================================================================
			'Description: 
			'The function block use a Ethernet/IP connection to communicate with a SICK device.
			'The FB makes it possible to send and receive sensor data. The Confirmed
			'Messaging protocol (CM) is used to receive even long, fragmented read results.
			'
			'Send a command:
			'The bReq parameter must be triggered with a rising edge (signal change FALSE to 
			'TRUE) in order to carry out the function. For the time during which a valid response 
			'has yet to be received from the device, the bReqBusy parameter is used to signal 
			'that a response is still pending.The module signals the bReqDone = TRUE output 
			'parameter when the function has been successfully completed. If data was requested 
			'by the device, this data is copied into the Record. The bReqDone indicates that new 
			'data has been received  for a PLC cycle. Only one CoLa command request can be 
			'send to the same device at one time. 
			'
			'Receive a reading result:
			'Data sent via trigger command or directly by the device (e.g., direct trigger via a light 
			'barrier) is stored in the Record. The bReadDone output indicates that new data has
			'been received for a PLC cycle. The iReadCount counter also increases by one. 
			'The data sent by the device can be changed or adapted in SOPAS output format. 
			'
			'This AOI supports the folowing SICK devices:
			'- LECTOR62x
			'- RFU63x
			'- CLV6xx (Read only, sending of a telgram is not supported)
			'- RFH62x (Read only, sending of a telgram is not supported)
			'
			'===================================================================================
			'Confirmed Messaging Protocol definitions:
			'arrInputImage[0]		= Control byte 1
			'arrInputImage[1]		= Control byte 2 
			'arrInputImage[2]		= Status byte 
			'arrInputImage[3]		= Receive counter
			'arrInputImage[4]		= Transmit counter back
			'arrInputImage[5]		= Command length MSB
			'arrInputImage[6]		= Command length LSB
			'arrInputImage[7..499]	= Device answer
			'
			'arrOutputImage[0]		= Control byte 1
			'arrOutputImage[1]		= Control byte 2
			'arrOutputImage[2]		= Status byte 
			'arrOutputImage[3]		= Receive counter back
			'arrOutputImage[4]		= Transmit counter
			'arrOutputImage[5]		= Command length MSB
			'arrOutputImage[6]		= Command length LSB
			'arrOutputImage[7..499]	= CoLa Command
			'
			'===================================================================================
			'Version history:
			'Date        | Version | created under          | Author     | Remark
			'-----------------------------------------------------------------------------------
			'14/08/2012  | 1.0     | V20.01.00 (CPR 9 SR 5) | SICK AG    | Release version
			'10/07/2013  | 1.1     | V20.01.00 (CPR 9 SR 5) | SICK AG    | Fix arithmetic error every 32768 incoming reading results
			'26/11/2015  | 1.2     | V20.01.00 (CPR 9 SR 5) | SICK AG    | Fix arithmetic error every 128 received telegrams
			'==================================================================================*)
			'
			'(*================================== FIRST SCAN ==================================*)
			'IF s:Fs THEN
			'	bReadDone:= 0;
			'	iReadCount:= 0;
			'	bReqDone:= 0;
			'	bReqBusy:= 0;
			'	bError:= 0;
			'	iErrorcode:= 16#0;
			'	iReadLength:= 0;
			'	iReqLength:= 0;
			'END_IF;
			'
			'
			'(*================================ INITIALISATION ================================*)
			'(*Rising edge detection*)
			'fbOneShot.InputBit:= bReq;
			'OSRI(fbOneShot);
			'
			'(*Time out request action*)
			'fbTON.PRE:= iTimeout;
			'fbTON.TimerEnable:= bReqBusy;
			'TONR(fbTON);
			'
			'(*Get array dimensions*)
			'SIZE(arrInputAssembly,0,iInputSize);	(*Size of the input data array*)						
			'SIZE(arrOutputAssebly,0,iOutputSize);	(*Size of the output data array*)
			'SIZE(arrRecord,0,iRecordSize);			(*Size of the record array*)
			'SIZE(arrCommand,0,iCommandSize);		(*Size of the command array*)
			'
			'(*Reset read done flag*)
			'bReadDone:= 0;
			'
			'(*Reset read step*)
			'iReadStep:= 0;
			'
			'(*Check record length*)
			'IF iRecordSize < 4 THEN
			'	bReadDone:= 0;
			'	bReqDone:= 0;
			'	bReqBusy:= 0;
			'	bError:= 1;
			'	iErrorcode:= 16#5;											(*Error: Invalid record length*)  
			'	TND();
			'END_IF;
			'
			'(*================================ COMMUNICATION =================================*)
			'(*Set output data*)																						
			'IF (iOutputSize >= 10) AND (iOutputSize <= 500) THEN
			'	COP(arrControl[0], arrOutputImage[0], 3);				
			'	CPS(arrOutputImage[0], arrOutputAssebly[0], iOutputSize);	(*Copy data into the output record*)
			'ELSE
			'	bReadDone:= 0;
			'	bReqDone:= 0;
			'	bReqBusy:= 0;
			'	bError:= 1;
			'	iErrorcode:= 16#3;											(*Error: Invalid output assembly size*)  
			'	TND();
			'END_IF;
			'
			'(*Get input data*)																					
			'IF (iInputSize >= 10) AND (iInputSize <= 500) THEN
			'	CPS(arrInputAssembly[0], arrInputImage[0], iInputSize);		(*Copy input into the input record*)
			'ELSE
			'	bReadDone:= 0;
			'	bReqDone:= 0;
			'	bReqBusy:= 0;
			'	bError:= 1;
			'	iErrorcode:= 16#2;											(*Error: Invalid input assembly size*)  
			'	TND();
			'END_IF;
			'
			'(*Match counters on the first scan*)
			'IF s:Fs THEN
			'	arrOutputImage[3]:= arrInputImage[3];	
			'	arrOutputImage[4]:= 0;
			'	TND();
			'END_IF;
			'
			'(*Receive counter == 0 && Receive counter back <>0*)
			'IF arrInputImage[3] = 0 AND arrOutputImage[3] <> 0 THEN				
			'	arrOutputImage[3]:= arrInputImage[3];						(*Receive counter back = 0*)
			'	TND();
			'END_IF;
			'
			'(*Transmit counter <> Trasmit counter back if bReqBusy == FALSE*)
			'IF NOT bReqBusy AND (arrInputImage[4] <> arrOutputImage[4]) THEN		
			'	arrOutputImage[4]:= 0;										(*Transmit counter = 0*)
			'	TND();
			'END_IF;
			'
			'(*======================== HANDLING OF THE RECEIVING DATA =========================*)
			'(*New data available*)
			'IF NOT (arrInputImage[3] = arrOutputImage[3]) THEN				
			'	
			'	(*Check if the FB is used only to reading data*)
			'	IF iCommandSize <= 0 THEN	
			'		bError:= 0;				(*Reset errors*)
			'		iErrorcode:= 16#00;		(*Reset errors*)
			'	END_IF;
			'	
			'	(*Confirm receive counter*)	
			'	arrOutputImage[3]:= arrInputImage[3];								
			'
			'	(*Get telegram length from the received header*)
			'	iReadHeaderLength:= arrInputImage[5]*16#100 XOR arrInputImage[6];
			'
			'	(*Check if fragmentation is not busy at the moment*)
			'	IF NOT bReadFrag THEN
			'		iReadIndex:= 0;
			'
			'		(*Check if fragmentation is needed*)
			'		IF (iInputSize-7) < iReadHeaderLength THEN
			'			bReadFrag:= 1;		
			'		END_IF;
			'	END_IF;
			'
			'	(*Fragmentation is needed*)
			'	IF bReadFrag THEN
			'		IF (iInputSize-7) < iReadHeaderLength THEN
			'			iReadFragmentLength:= iInputSize-7;			
			'		ELSE
			'			iReadFragmentLength:= iReadHeaderLength;
			'		END_IF;
			'
			'	(*No fragmentation needed*)
			'	ELSE
			'		iReadFragmentLength:= iReadHeaderLength;
			'	END_IF;
			'
			'	(*Copy input data into the output record*)
			'	IF (iReadIndex+iReadFragmentLength) <= iRecordSize THEN
			'		COP(arrInputImage[7],arrRecord[iReadIndex], iReadFragmentLength); 
			'	END_IF;
			'
			'	(*Check if all data has been received*)
			'	IF (iInputSize-7) < iReadHeaderLength THEN
			'		iReadIndex:= iReadIndex+iReadFragmentLength;	(*Increment index for the fragmented reading*)
			'
			'	(*All data has been received*)
			'	ELSE
			'		bReadFrag:= 0;		
			'		iReadStep:= 1;	(*Check telegram content*)
			'	END_IF;
			'
			'	(*Data filter*)
			'	(* - Check if the receiving telegram is a CoLa answer on a requested command or a reading result
			'		sRA  sWA  sMA  sAN  sAI  sEA  sPX  s{  sSI  sSN  sFA
			'	sRN  X                                      X    X    X
			'	sRI  X                                      X    X    X
			'	sWN       X                                 X    X    X
			'	sWI       X                                 X    X    X
			'	sMN            X    X                       X    X    X
			'	sMI            X         X                  X    X    X 
			'	sEN                           X             X    X    X
			'	sEI                           X             X    X    X
			'	sPE                                X        X    X    X
			'	s{                                      X   X    X    X
			'	*)
			'	IF iReadStep = 1 THEN
			'		
			'		(*Clear unused record items*)
			'		FOR iIndex:= (iReadIndex+iReadFragmentLength) TO iRecordSize-1 DO
			'			arrRecord[iIndex]:= 0;
			'		END_FOR;
			'
			'		(*Filter is only active while requested data expected*)
			'		IF bReqBusy THEN		
			'			(*Get command prefix*)
			'			COP(arrCommand[0], iPrefixOut, 1);
			'			iPrefixOut:= iPrefixOut AND 16#00FFFFFF + 16#20000000;
			'			SWPB(iPrefixOut, REVERSE, iPrefixOut);
			'
			'			(*Get result prefix*)
			'			COP(arrRecord[0], iPrefixIn,1);
			'			iPrefixIn:= iPrefixIn AND 16#00FFFFFF + 16#20000000;
			'			SWPB(iPrefixIn, REVERSE, iPrefixIn);
			'
			'			CASE iPrefixIn OF
			'			(*s{  *)
			'			16#737B2020:	IF iPrefixOut = 16#737B2020 THEN 
			'								iReadStep:= 2;	(*Command request*)
			'							ELSE
			'								iReadStep:= 3;	(*Reading result*)
			'							END_IF;	
			'			
			'			(*'sRA '*)
			'			16#73524120:	IF (iPrefixOut = 16#73524E20) OR (iPrefixOut = 16#73524920) THEN
			'								iReadStep:= 2;	(*Command request*)
			'							ELSE
			'								iReadStep:= 3;	(*Reading result*)
			'							END_IF;
			'
			'			(*'sWA '*)
			'			16#73574120:	IF (iPrefixOut = 16#73574E20) OR (iPrefixOut = 16#73574920) THEN
			'								iReadStep:= 2;	(*Command request*)
			'							ELSE
			'								iReadStep:= 3;	(*Reading result*)
			'							END_IF; 
			'
			'			(*'sMA '*)
			'			16#734D4120: 	IF (iPrefixOut = 16#734D4E20) OR (iPrefixOut = 16#734D4920) THEN
			'								iReadStep:= 2;	(*Command request*)
			'							ELSE
			'								iReadStep:= 3;	(*Reading result*)
			'							END_IF; 
			'
			'			(*'sAN '*)
			'			16#73414E20: 	IF iPrefixOut = 16#734D4E20 THEN
			'								iReadStep:= 2;	(*Command request*)
			'							ELSE
			'								iReadStep:= 3;	(*Reading result*)
			'							END_IF; 
			'
			'			(*'sAI '*)
			'			16#73414920: 	IF iPrefixOut = 16#734D4920 THEN
			'								iReadStep:= 2;	(*Command request*)
			'							ELSE
			'								iReadStep:= 3;	(*Reading result*)
			'							END_IF; 
			'
			'			(*'sEA '*)
			'			16#73454120: 	IF (iPrefixOut = 16#73454E20) OR (iPrefixOut = 16#73454920) THEN
			'								iReadStep:= 2;	(*Command request*)
			'							ELSE
			'								iReadStep:= 3;	(*Reading result*)
			'							END_IF; 
			'
			'			(*'sPX '*)
			'			16#73505820: 	IF iPrefixOut = 16#73504520 THEN
			'								iReadStep:= 2;	(*Command request*)
			'							ELSE
			'								iReadStep:= 3;	(*Reading result*)
			'							END_IF; 
			'
			'			(*'sSI '*)
			'			16#73534920: 	iReadStep:= 3;		(*Reading result*)
			'
			'			(*'sSN '*)
			'			16#73534E20: 	iReadStep:= 3;		(*Reading result*)
			'
			'			(*'sFA '*)
			'			16#73464120: 	iReadStep:= 2;		(*Command request*)
			'			
			'			ELSE
			'				(*User defined trigger command*)
			'				IF iPrefixIn = iPrefixOut THEN
			'					iReadStep:= 2;		(*Command request*)					
			'
			'				(*Reading result*)
			'				ELSE				
			'					iReadStep:= 3;		(*Reading result*)
			'				END_IF;
			'			END_CASE;
			'		
			'		(*Reading result*)
			'		ELSE
			'			iReadStep:= 3;	(*Reading result*)
			'		END_IF;
			'	END_IF;
			'
			'	(*Incoming telegram is a command request*)
			'	IF iReadStep = 2 THEN
			'		IF (iReadIndex+iReadFragmentLength) <= iRecordSize THEN
			'			iReqLength:= iReadIndex+iReadFragmentLength;
			'			bReqDone:= 1;
			'			bReqBusy:= 0;
			'			bError:= 0;	
			'		ELSE
			'			iReqLength:= 0;
			'			bReqDone:= 0;
			'			bReqBusy:= 0;
			'			bError:= 1;
			'			iErrorcode:= 16#08;	(*Error Incoming command request > record size*)	
			'		END_IF;
			'	END_IF;
			'
			'	(*Incoming telegram is a reading result*)
			'	IF iReadStep = 3 THEN
			'		IF (iReadIndex+iReadFragmentLength) <= iRecordSize THEN
			'			iReadLength:= iReadIndex+iReadFragmentLength;
			'			bReadDone:= 1;
			'
			'			IF (iReadCount >=32767) or (iReadCount <0)  THEN
			'				iReadCount:= 0;	
			'			ELSE
			'				iReadCount:= iReadCount + 1;
			'			END_IF;
			'		ELSE
			'			iReadLength:= -1;	(*Incoming telegram > record size*)
			'			bReadDone:= 0;
			'		END_IF;
			'	END_IF;
			'END_IF;											
			'
			'
			'(*====================== HANDLING OF THE DATA TO BE WRITTEN ======================*)
			'(*Dectect timeout*)
			'IF fbTON.DN THEN
			'	bReqDone:= 0;
			'	bReqBusy:= 0;
			'	bError:= 1;
			'	iErrorcode:= 16#0001;	(*Error: Time out*)	
			'	iWriteStep:= 0;
			'	TND();
			'END_IF;
			'
			'
			'IF fbOneShot.OutputBit AND NOT bReqBusy THEN	(*Rising edge bReq-Bit*)
			'	bReqDone:= 0;
			'	bReqBusy:= 1;
			'	bError:= 0;
			'	iErrorcode:= 0;
			'	iWriteIndex:= 0;
			'
			'
			'	(*Check command length*)
			'	IF iCommandLength <= 0 THEN
			'		bReqDone:= 0;
			'		bReqBusy:= 0;
			'		bError:= 1;
			'		iErrorcode:= 16#0004;	(*Error: Command length <= 0*)	
			'		iWriteStep:= 0;
			'		TND();
			'	END_IF;	
			'	
			'	(*Check command length*)
			'	IF iCommandLength > iCommandSize THEN
			'		bReqDone:= 0;
			'		bReqBusy:= 0;
			'		bError:= 1;
			'		iErrorcode:= 16#0006;	(*Error: Command length > command array*)	
			'		iWriteStep:= 0;
			'		TND();
			'	END_IF;	
			'
			'	(*Check command fragmentation*)
			'	IF (iOutputSize-7) < iCommandLength THEN
			'		iWriteFragLength:= iOutputSize-7;
			'	ELSE
			'		iWriteFragLength:= iCommandLength;		
			'	END_IF;
			'
			'	iWriteHeaderLength:= iCommandLength;
			'	iWriteStep:= 1;	
			'END_IF;
			'
			'
			'(*Write step 1*)
			'IF (iWriteStep = 1) AND (arrInputImage[4] = arrOutputImage[4])THEN	(*Transmit counter back == Transmit counter*)
			'
			'	(*Copy command data into the output record*)
			'	IF ((iWriteIndex + iWriteFragLength) <= iCommandSize) AND (iWriteFragLength <= (iOutputSize-7)) THEN
			'		COP(arrCommand[iWriteIndex],arrOutputImage[7], iWriteFragLength); 
			'		(*Increment transmit counter*)
			'		IF arrOutputImage[4] = -1 THEN	(*Counter overflow (16#FF)*)
			'			arrOutputImage[4]:= 1;
			'		ELSIF arrOutputImage[4] = 127 THEN
			'			arrOutputImage[4]:= -128;
			'		ELSE
			'			arrOutputImage[4]:= arrOutputImage[4] + 1;
			'		END_IF;
			'
			'		(*Set command/fragment length*)
			'		SWPB(iWriteHeaderLength,REVERSE,iWriteHeaderLengthSwap);
			'		COP(iWriteHeaderLengthSwap, arrOutputImage[5],2);
			'	
			'		(*Set next step*)
			'		iWriteStep:= 2;
			'		TND();
			'	ELSE
			'		bReqDone:= 0;
			'		bReqBusy:= 0;
			'		bError:= 1;
			'		iErrorcode:= 16#07;		(*Error: Fragmentation error*)
			'		iWriteStep:= 0;
			'	END_IF;
			'END_IF;
			'
			'
			'(*Write step 2: Fragmentation*)
			'IF iWriteStep = 2 THEN
			'	
			'	(*Fragmentation is needed*)
			'	IF (iOutputSize-7) < iWriteHeaderLength THEN
			'		bWriteFrag:= 1;	
			'		
			'		(*Next index*)
			'		iWriteIndex:= iWriteIndex+iWriteFragLength;
			'
			'		(*Set next header length*)
			'		iWriteHeaderLength:= iWriteHeaderLength-iWriteFragLength;
			'
			'		(*Set next fragment length*)
			'		IF (iOutputSize-7) < iWriteHeaderLength THEN
			'			iWriteFragLength:= iOutputSize-7;  
			'		ELSE
			'			iWriteFragLength:= iWriteHeaderLength;
			'		END_IF;
			'	ELSE
			'		bWriteFrag:= 0;
			'	END_IF;
			'
			'	iWriteStep:= 3;
			'END_IF;
			'
			'
			'(*Write step 3*)
			'IF iWriteStep = 3 THEN
			'	IF arrInputImage[4] = arrOutputImage[4] THEN (*Transmit counter back == Transmit counter*)
			'		IF bWriteFrag THEN
			'			iWriteStep:= 1;			
			'		ELSE
			'			iWriteStep:= 0;
			'		END_IF;
			'	END_IF;
			'END_IF;
		END_ST_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION SICK_COLA_ACCESS (Description := "Converting AOI for SICK AutoIdent devices.",
	                                                Class := Standard,
	                                                Revision := "1.1",
	                                                RevisionNote := "Fix arithmetic overflow during bit shift function",
	                                                Vendor := "SICK AG",
	                                                ExecutePrescan := No,
	                                                ExecutePostscan := No,
	                                                ExecuteEnableInFalse := No,
	                                                CreatedDate := "2015-11-27T12:35:44.310Z",
	                                                CreatedBy := "SICKCN\verdean",
	                                                EditedDate := "2017-10-04T13:15:25.801Z",
	                                                EditedBy := "SICKCN\verdean",
	                                                SoftwareRevision := "v16.04",
	                                                AdditionalHelpText := "Description:$N$NMode 1 (bRW= FALSE):$NGet the selected HEX-Value out of the CoLa telegram and convert it into a $Nnumeric value.$N$NMode 2 (bRW= TRUE):$NConvert a numeric value into a ASCII value.")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			arrRecord : SINT[500] (Description := "Data record (contains the whole CoLa telegram)",
			                     Usage := InOut,
			                     RADIX := Decimal,
			                     Required := Yes,
			                     Visible := Yes);
			iConvertValue : INT (Description := "Value that should be convert into a ASCII value",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			bRW : BOOL (Description := "TRUE= Convert a value into a ASCII format ; FALSE= Read a ASCII value and convert it into a numeric value",
			               Usage := Input,
			               RADIX := Decimal,
			               Required := Yes,
			               Visible := Yes,
			               DefaultData := 0);
			bError : BOOL (Description := "TRUE= Error detected",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0);
			iNextPosition : INT (Description := "Start position of the next value in the ASCII telegram",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			iReadValue : DINT (Description := "Read value (numeric)",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			iPosition : INT (Description := "Current start position index of value that should be read",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			iTelegramLength : INT (Description := "Telegram length",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			arrConvertValue : SINT[4] (Description := "ASCII value",
			                           Usage := InOut,
			                           RADIX := Decimal,
			                           Required := Yes,
			                           Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
			iTemp2 : DINT (Description := "Temporarily variable",
			                 RADIX := Decimal,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
			iTemp1 : DINT (Description := "Temporarily variable",
			                 RADIX := Decimal,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
			iSegmentLength : INT (Description := "Length of the value to be read",
			                         RADIX := Decimal,
			                         ExternalAccess := Read/Write,
			                         DefaultData := 0);
			iLoop : INT (Description := "Temporarily variable",
			                RADIX := Decimal,
			                ExternalAccess := Read/Write,
			                DefaultData := 0);
			arrValue : SINT[4] (Description := "Temporarily value",
			                   RADIX := Decimal,
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[0,0,0,0]");
			fbBitShift : FBD_BIT_FIELD_DISTRIBUTE (Description := "Bit shift instance",
			                     ExternalAccess := Read/Write,
			                     DefaultData := "[1,0,0,1,0,0,0]");
		END_LOCAL_TAGS

		ST_ROUTINE Logic 
			'(*=================================================================================
			'Name:		SICK_COLA_ACCESS
			'Author:		SICK AG
			'===================================================================================
			'Description:
			'This AOI is for internal use only.
			'
			'Mode 1 (bRW= FALSE):
			'Get the selected HEX-Value out of the CoLa telegram and convert it into a 
			'decimal value.
			'
			'Mode 2 (bRW= TRUE):
			'Converts a numeric value into a ASCII value.
			'===================================================================================
			'Version history:
			'Date       | Version | Author  | Remark
			'-----------------------------------------------------------------------------------
			'20/12/2012 | 1.0.0   | SICK AG | Release version
			'04/10/2017 | 1.1.0   | SICK AG | Fix arithmetic overflow during bit shift function
			'==================================================================================*)
			'
			'(*================================ INITIALIZATION ================================*)
			'iReadValue:= 0;
			'iNextPosition:= 0;
			'bError:= 0;
			'iSegmentLength:= 0;
			'iTemp1:= 0;
			'iTemp2:= 0;
			'arrConvertValue[0]:= 0;
			'arrConvertValue[1]:= 0;
			'arrConvertValue[2]:= 0;
			'arrConvertValue[3]:= 0;
			'
			'(*================================== WRITE VALUE =================================*)
			'IF bRW THEN
			'	COP(iConvertValue,arrValue[0], 4);
			'	FOR iLoop:= 0 to 1 do
			'		iTemp1:= (arrValue[1 - iLoop] AND 16#FF) / 16;
			'		FOR iTemp2:= 0 TO 1 DO
			'			IF iTemp1 >= 0 AND iTemp1 <= 9 THEN
			'				arrConvertValue[(iLoop * 2) + iTemp2]:= iTemp1 + 48;
			'			ELSIF iTemp1 >= 10 AND iTemp1 <= 15 THEN
			'				arrConvertValue[(iLoop * 2) + iTemp2]:= iTemp1 + 55;
			'			ELSE
			'				bError:= 1; (*Error: Conversion failed*)		
			'				TND();
			'			END_IF;	
			'			iTemp1:= arrValue[1 - iLoop] AND 2#1111;
			'		END_FOR;
			'	END_FOR;
			'
			'(*================================== READ VALUE ==================================*)
			'ELSE
			'	(*Check telegram length*)
			'	IF iTelegramLength < 0 THEN
			'		bError:= 1; (*Error: Conversion failed*)
			'		TND();
			'	END_IF;
			'
			'	(*Check current position of the value*)
			'	IF (iPosition > (iTelegramLength - 1)) OR (iPosition < 0) THEN
			'		bError:= 1; (*Error: Conversion failed*)
			'		TND();
			'	END_IF;
			'
			'	FOR iLoop:= iPosition TO iTelegramLength - 1 DO
			'		
			'		(*Check if a blank or a [ETX] is detected*)
			'		IF (arrRecord[iLoop] = 32) OR (arrRecord[iLoop] = 3) THEN
			'			EXIT;
			'		END_IF;
			'		
			'		(*Length of the current value segement*)
			'		iSegmentLength:= iSegmentLength + 1;
			'	END_FOR;
			'
			'	(*Check segment length*)
			'	IF iSegmentLength > 8 OR iSegmentLength = 0 THEN
			'		bError:= 1;	(*Error: Conversion failed*)
			'		TND();
			'	END_IF;
			'
			'	(*Convert ASCII into a numeric value*)
			'	iTemp2:= 0;
			'	FOR iLoop:= iPosition TO (iPosition + iSegmentLength - 1) DO 
			'
			'		(*ASCII value = (0..9)*)
			'		IF arrRecord[iLoop] >= 48 AND arrRecord[iLoop] <= 57 THEN
			'			iTemp1:= arrRecord[iLoop] - 48;
			'
			'		(*ASCII value = (A..F)*)
			'		ELSIF arrRecord[iLoop] >= 65 AND arrRecord[iLoop] <= 70 THEN
			'			iTemp1:= arrRecord[iLoop] - 55;
			'
			'		(*Invalid ASCII value*)
			'		ELSE
			'			bError:= 1; (*Error: Conversion failed*)
			'			TND();	
			'		END_IF;
			'
			'		(*Create numeric value*)
			'		fbBitShift.Source:= iTemp2;
			'		fbBitShift.SourceBit:= 0;
			'		fbBitShift.Length:= 28;
			'		fbBitShift.DestBit:= 4;
			'		fbBitShift.Target:= iTemp1;
			'		BTDT(fbBitShift);
			'
			'		iTemp2:= fbBitShift.Dest;
			'	END_FOR;
			'	
			'	(*Set the read value*)
			'	iReadValue:= iTemp2;
			'
			'	(*Set the position of the next element*)
			'	iNextPosition:= iPosition + iSegmentLength + 1;
			'END_IF;
		END_ST_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION SICK_RFU_EIP (Description := "Communication AOI for a SICK RFU6xx RFID interrogator",
	                                            Class := Standard,
	                                            Revision := "1.4",
	                                            RevisionNote := "Fix arithmetic overflow problem during read or write job",
	                                            Vendor := "SICK AG",
	                                            ExecutePrescan := No,
	                                            ExecutePostscan := No,
	                                            ExecuteEnableInFalse := No,
	                                            CreatedDate := "2015-11-27T12:37:04.345Z",
	                                            CreatedBy := "SICKCN\verdean",
	                                            EditedDate := "2017-10-04T13:15:13.599Z",
	                                            EditedBy := "SICKCN\verdean",
	                                            SoftwareRevision := "v16.04",
	                                            AdditionalHelpText := "Description:$NThis Add-On instruction is used for a communication between a SICK RFU6xx RFID $Ninterrogator and a Logix5000 PLC via EtherNet/IP.                         $N$NFeatures:          $N- Receive reading results of the RFU, triggered by a command or by fieldbus. The$N  content of the result can be modified in the $QOutput Format$Q option in SOPAS-ET.                                           $N- Open a close a reading gate (software trigger)$N- Read and write Tag-Data                                                                                $N- Communication test$N- Send a free defined CoLa-A telegram and receive the result                                       $N                                                                          $NPlease connect only a instance of the SICK_RFU_DATA UDT to the stData-Input.")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			arrOutputAssembly : SINT[1] (Description := "Output assembly of the conneced device",
			                             Usage := InOut,
			                             RADIX := Decimal,
			                             Required := Yes,
			                             Visible := Yes);
			arrInputAssembly : SINT[1] (Description := "Input assembly of the connected device",
			                            Usage := InOut,
			                            RADIX := Decimal,
			                            Required := Yes,
			                            Visible := Yes);
			arrControl : SINT[3] (Description := "Control Word. (contains the fieldbs trigger bit etc.)",
			                      COMMENT[0].0 := "Trigger bit",
			                      Usage := InOut,
			                      RADIX := Decimal,
			                      Required := Yes,
			                      Visible := Yes);
			iTimeout : DINT (Description := "Time out of the routine [ms]",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    DefaultData := 5000);
			iCanID : INT (Description := "CAN ID (0= Master / No CAN network)",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  DefaultData := 0);
			bRequest : BOOL (Description := "Starts the selected  action with a rising edge",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := Yes,
			                    Visible := Yes,
			                    DefaultData := 0);
			bTriggerOn : BOOL (Description := "Select: Trigger On to open the reading gate via a SW-Trigger command",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			bTriggerOff : BOOL (Description := "Select: Trigger Off to close the reading gate via a SW-Trigger command",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			bReadTag : BOOL (Description := "Select: Read Tag (details at stData)",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    DefaultData := 0);
			bWriteTag : BOOL (Description := "Select: Write Tag (details at stData)",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			bComTest : BOOL (Description := "Select: Communication test",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    DefaultData := 0);
			bFreeCommand : BOOL (Description := "Select: Free command (details at stData)",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        DefaultData := 0);
			bRDDone : BOOL (Description := "New Reading Result has arrived see stData (Rising edge)",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			bReqDone : BOOL (Description := "TRUE= Requested job done (Rising edge)",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			bReqBusy : BOOL (Description := "Request in process",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			bError : BOOL (Description := "TRUE= Error detected",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0);
			iErrorcode : DINT (Description := "Error code (see AI documentation)",
			                      Usage := Output,
			                      RADIX := Hex,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stData : SICK_RFU_Data (Usage := InOut,
			                  Required := Yes,
			                  Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
			iTemp3 : DINT (Description := "Temporarily variable",
			                 RADIX := Decimal,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
			iTemp2 : DINT (Description := "Temporarily variable",
			                 RADIX := Decimal,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
			iTemp1 : DINT (Description := "Temporarily variable",
			                 RADIX := Decimal,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
			iStep : INT (Description := "Current step of the routine",
			                RADIX := Decimal,
			                ExternalAccess := Read/Write,
			                DefaultData := 0);
			iIndex : INT (Description := "Index variable",
			                 RADIX := Decimal,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
			iSaveErrorcode : DINT (Description := "Errorcode of the last PLC cycle",
			                         RADIX := Hex,
			                         ExternalAccess := Read/Write,
			                         DefaultData := 0);
			iLoop : DINT (Description := "Loop variable",
			                RADIX := Decimal,
			                ExternalAccess := Read/Write,
			                DefaultData := 0);
			iCommandLength : INT (Description := "Byte length of the command that should be sent",
			                         RADIX := Decimal,
			                         ExternalAccess := Read/Write,
			                         DefaultData := 0);
			iCommandIndex : DINT (Description := "Command index",
			                        RADIX := Decimal,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			fbTOut : FBD_TIMER (Description := "Instance of the IEC timer (TON)",
			                 ExternalAccess := Read/Write,
			                 DefaultData := "[1,0,0,0,0,0,0,0,0,4,0,0]");
			fbCCOM : SICK_CCOM_EIP (ExternalAccess := Read/Write,
			                 DefaultData := "[1,5000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,0,0,0,0,0,0,0,0,4,0,0],[1,0,5.60519386e-045],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]");
			fbAccess : SICK_COLA_ACCESS (Description := "Instance of the SICK_COLA_ACCESS AOI (Used to convert ASCII values into numeric values)",
			                   ExternalAccess := Read/Write,
			                   DefaultData := "[1,0,0,0,0,0,0,0,0,0,[0,0,0,0],[1,0,0,1,0,0,0]]");
			bCANActive : BOOL (Description := "Can flag: TRUE= CAN active, FALSE= No CAN",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			arrSelection : BOOL[32] (Description := "Input bit selection",
			                       RADIX := Decimal,
			                       ExternalAccess := Read/Write,
			                       DefaultData := "[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0]");
			arrRTrigger : FBD_ONESHOT[3] (Description := "Rising edge detection",
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[[1,0,5.60519386e-045],[1,0,5.60519386e-045],[1,0,5.60519386e-045]]");
			arrRecord : SINT[500] (Description := "Record (contains the command responses)",
			                    RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]");
			arrCommand4 : SINT[4] (Description := "Command: Communication test ($'sRI0$')",
			                      RADIX := ASCII,
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[115,82,73,48]");
			arrCommand3 : SINT[22] (Description := "Command: Write Tag ($'sMN TAextWriteTagData $')",
			                      RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[115,77,78,32,84,65,101,120,116,87,114,105,116,101,84,97,103,68,97,116,97,32]");
			arrCommand2 : SINT[21] (Description := "Command: Read Tag ($'sMN TAextReadTagData $')",
			                      RADIX := ASCII,
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[115,77,78,32,84,65,101,120,116,82,101,97,100,84,97,103,68,97,116,97,32]");
			arrCommand1 : SINT[14] (Description := "Command: Trigger off ($'sMN mTCgateoff$')",
			                      RADIX := ASCII,
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[115,77,78,32,109,84,67,103,97,116,101,111,102,102]");
			arrCommand0 : SINT[13] (Description := "Command: Trigger on ($'sMN mTCgateon$')",
			                      RADIX := ASCII,
			                      ExternalAccess := Read/Write,
			                      DefaultData := "[115,77,78,32,109,84,67,103,97,116,101,111,110]");
			arrCommand : SINT[255] (Description := "The Command array contains the whole CoLa-Command which is sent to the device.",
			                     RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]");
			arrASCIIValue : SINT[4] (Description := "Is used to convert a numeric value into a ASCII value",
			                        RADIX := Decimal,
			                        ExternalAccess := Read/Write,
			                        DefaultData := "[0,0,0,0]");
			iTemp4 : DINT (Description := "Temporarily variable",
			                 RADIX := Decimal,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
		END_LOCAL_TAGS

		ST_ROUTINE Logic 
			'(*=================================================================================
			'Name:	SICK_RFU_EIP
			'Author:	SICK AG
			'
			'===================================================================================
			'Description:
			'This Add-On instruction is used for a communication between a SICK RFU6xx RFID 
			'interrogator and a Logix5000 PLC via EtherNet/IP.                         
			'
			'===================================================================================
			'Features:          
			'- Receive reading results of the RFU, triggered by a command or by fieldbus. The
			'  content of the result can be modified in the "Output Format" option in SOPAS-ET.                                           
			'- Open a close a reading gate (software trigger)
			'- Read and write Tag-Data                                                                                
			'- Communication test
			'- Send a free defined CoLa-A telegram and receive the result                                       
			'                                                                          
			'Please connect only an instance of the SICK_RFU_DATA UDT to the stData-Input.
			'
			'===================================================================================
			'Version history:
			'Date       | Version | Author  | Remark
			'-----------------------------------------------------------------------------------
			'02/01/2013 | 1.0     | SICK AG | Release version
			'10/07/2013 | 1.1     | SICK AG | Fix arithmetic error every  32768 incoming reading results
			'27/11/2015 | 1.2     | SICK AG | Update CCOM AOI (arithmetic error every 128 outgoing telegrams)
			'15/09/2017 | 1.3     | SICK AG | Fix a problem with the fieldbus trigger option
			'04/10/2017 | 1.4     | SICK AG | Fix arithmetic overflow problem during read or write job
			'==================================================================================*)
			'
			'
			'(*=========================== FIRST SCAN INITIAIZATION ===========================*)
			'(*Initialize variables on first scan*)
			'IF s:Fs THEN
			'	bReqDone:= 0;
			'	bReqBusy:= 0;
			'	bError:= 0;
			'	iErrorcode:= 0;
			'	iSaveErrorcode:= 0;
			'	iStep:= 0;
			'END_IF;
			'
			'
			'(*================================ INITIALIZATION ================================*)
			'(*Rising edge detection*)
			'arrRTrigger[0].InputBit:= bRequest;
			'arrRTrigger[1].InputBit:= fbCCOM.bReqDone;
			'arrRTrigger[2].InputBit:= fbCCOM.bError;
			'OSRI(arrRTrigger[0]);	
			'OSRI(arrRTrigger[1]);	
			'OSRI(arrRTrigger[2]);	
			'
			'(*Time out*)
			'fbTOut.TimerEnable:= bReqBusy;
			'fbTOut.PRE:= iTimeout;
			'TONR(fbTOut);
			'
			'IF fbTOut.DN THEN
			'	iSaveErrorcode:= 16#0000_0001;	(*Error: Time out*)
			'END_IF;
			'
			'
			'(*================================ ERROR HANDLING ================================*)
			'(*Block errors*)
			'IF iSaveErrorcode <> 0 THEN	
			'	bReqDone:= 0;
			'	bReqBusy:= 0;
			'	bError:= 1;
			'	iErrorcode:= iSaveErrorcode;
			'	iSaveErrorcode:= 0;
			'	iStep:= 0;
			'END_IF;
			'
			'(*Check if a device error is detected: 'sFA XX*)
			'IF arrRTrigger[1].OutputBit AND ((NOT bCANActive AND
			'	arrRecord[0] = 115 AND
			'	arrRecord[1] = 70 AND 
			'	arrRecord[2] = 65) OR (bCANActive AND
			'	arrRecord[0] = 115 AND
			'	arrRecord[12] = 70 AND
			'	arrRecord[13] = 65)) THEN	
			'
			'	IF bCANActive THEN
			'		IF fbCCOM.iReqLength = 16 THEN
			'			(*1 Byte error code*)
			'			iTemp2:= 15;
			'		ELSE
			'			(*2 Byte error code*)
			'			iTemp2:= 16;
			'		END_IF;
			'		iIndex:= 15;
			'	ELSE
			'		IF fbCCOM.iReqLength = 5 THEN
			'			(*1 Byte error code*)
			'			iTemp2:= 4;
			'		ELSE
			'			(*2 Byte error code*)
			'			iTemp2:= 5;
			'		END_IF;	
			'		iIndex:= 4;
			'	END_IF;		
			'	
			'	(*Convert ASCII to numeric*)
			'	iTemp3:= 0;
			'	FOR iLoop:= iIndex to iTemp2 do 
			'		
			'		(*ASCII value = (0..9)*)
			'		IF arrRecord[iLoop] >=48 AND arrRecord[iLoop] <= 57 THEN
			'			iTemp1:= arrRecord[iLoop]-48;
			'		
			'		(*ASCII value = (A..F)*)
			'		ELSIF arrRecord[iLoop] >=65 AND arrRecord[iLoop] <= 70 THEN
			'			iTemp1:= arrRecord[iLoop]-55;
			'
			'		(*Invalid ASCII value*)
			'		ELSE
			'			iSaveErrorcode:= 16#0002;	(*Error: Internal error*)
			'			EXIT;		
			'		END_IF;
			'
			'		(*Create numeric value*)
			'		iTemp3:= iTemp3*16;		(*Shift left 4Bits*)
			'		iTemp3:= iTemp3+iTemp1;
			'	END_FOR;
			'
			'	(*Create device error*)
			'	IF iSaveErrorcode = 0 THEN
			'		iSaveErrorcode:= 16#000A_0000 XOR iTemp3 ;	
			'		SWPB(iSaveErrorcode, WORD, iSaveErrorcode);	(*Error: Device error detected ('sFA XX')*)
			'	END_IF;
			'
			'	(*Next step*)
			'	iStep:= 0;
			'END_IF;
			'
			'
			'(*======================== STEP1: CHECK CAN COMMUNICATION ========================*)
			'IF NOT bReqBusy AND arrRTrigger[0].OutputBit THEN		
			'	bReqDone:= 0;
			'	bReqBusy:= 1;
			'	bError:= 0;
			'	iErrorcode:= 0;
			'	iSaveErrorcode:= 0;
			'
			'	(*Save the current bit selection for the job*)
			'	arrSelection[0]:= bTriggerOn;
			'	arrSelection[1]:= bTriggerOff;
			'	arrSelection[2]:= bReadTag;
			'	arrSelection[3]:= bWriteTag;
			'	arrSelection[4]:= bComTest;
			'	arrSelection[5]:= bFreeCommand;
			'
			'	(*Check CAN-ID*)
			'	IF iCanID < 0 OR iCanID > 63 THEN
			'		iSaveErrorcode:= 16#0000_0007;		(*Invalid CAN-ID*)
			'	ELSE
			'		(*Next step*)
			'		IF iCanID = 0 THEN
			'			bCANActive:= 0;
			'			iStep:= 3;
			'		ELSE
			'			bCANActive:= 1;
			'			iStep:= 2;
			'		END_IF;		
			'	END_IF;
			'END_IF;
			'
			'
			'(*======================== STEP2: ADD CAN IDENTIFICATION =========================*)
			'IF iStep = 2 THEN
			'	arrCommand[0]:= 115;	(*'s'*)
			'	arrCommand[1]:= 123;	(*'{'*)
			'	arrCommand[2]:= 32;		(*' '*)
			'	arrCommand[3]:= 48;		(*'0'*)
			'	arrCommand[4]:= 48;		(*'0'*)
			'	arrCommand[5]:= 32;		(*' '*)
			'	arrCommand[6]:= 48;		(*'0'*)
			'	arrCommand[7]:= 49;		(*'1'*)
			'	arrCommand[8]:= 32;		(*' '*)
			'
			'	(*Add CAN ID (ASCII-Format)*)	
			'	iTemp3:= (iCanID AND 2#11110000)/16;
			'	FOR iLoop:= 0 to 1 Do
			'		IF iTemp3 >=0 AND iTemp3 <=9 THEN
			'			arrCommand[9+iLoop]:= iTemp3+48;
			'		ELSE 
			'			arrCommand[9+iLoop]:= iTemp3+55;
			'		END_IF;	
			'		iTemp3:= iCanID AND 2#1111;
			'	END_FOR;
			'
			'	arrCommand[11]:= 125;	(*'}'*)
			'
			'	(*Next step*)
			'	iStep:= 3;
			'END_IF;
			'
			'
			'(*========================= STEP3: CHECK PARAMETER INPUT =========================*)
			'IF iStep = 3 THEN
			'	iTemp1:= 0;
			'	
			'	(*Trigger On*)
			'	IF arrSelection[0] THEN
			'		iTemp1:= iTemp1+1;
			'		iCommandIndex:= 0;
			'	END_IF;
			'	
			'	(*Trigger Off*)
			'	IF arrSelection[1] THEN
			'		iTemp1:= iTemp1+1;
			'		iCommandIndex:= 1;
			'	END_IF;	
			'
			'	(*Read Tag*)
			'	IF arrSelection[2] THEN	
			'	
			'		(*Check Bank selection*)
			'		IF stData.ReadTag.iBank <0 OR stData.ReadTag.iBank >3 THEN
			'			iSaveErrorcode:= 16#0000_0011; 	(*Error: Invalid bank selected*)
			'		END_IF;
			'		
			'		(*Check Start Word*)
			'		IF stData.ReadTag.iStartWord <0 THEN
			'			iSaveErrorcode:= 16#0000_001C; 	(*Error: Invalid Start Word*)
			'		END_IF;
			'
			'		(*Check Start Word*)
			'		IF stData.ReadTag.iWordCount <1 OR stData.ReadTag.iWordCount > 32 THEN
			'			iSaveErrorcode:= 16#0000_0012; 	(*Error: Invalid Word Count*)
			'		END_IF;
			'
			'		(*Check Retry*)
			'		IF ((stData.ReadTag.iRetry AND 16#0F) > 7) OR ((stData.ReadTag.iRetry AND 16#F0) > 80)  THEN
			'			iSaveErrorcode:= 16#0000_0013; 	(*Error: Invalid Retry*)
			'		END_IF;
			'
			'		(*Check Antenna selection*)
			'		IF stData.ReadTag.iAntenna < 1 OR stData.ReadTag.iAntenna > 15 THEN
			'			iSaveErrorcode:= 16#0000_0014; 	(*Error: Invalid Antenna selection*)
			'		END_IF;
			'
			'		(*Check address mode*)
			'		IF stData.AddressMode.bMode THEN
			'			(*Check UII length*)
			'			IF stData.AddressMode.iPCUIILength <2 OR stData.AddressMode.iPCUIILength >32 THEN
			'				IF  stData.AddressMode.iPCUIILength <> 0 THEN
			'					iSaveErrorcode:= 16#0000_0010;	(*Error: Invalid PC+UII length*)
			'				END_IF;
			'			END_IF;	
			'			iCommandIndex:= 2;
			'		ELSE
			'			iCommandIndex:= 0;
			'		END_IF;
			'	
			'		iTemp1:= iTemp1+1;
			'	END_IF;
			'
			'	(*Write Tag*)
			'	IF arrSelection[3] THEN
			'		
			'		(*Check Bank selection*)
			'		IF stData.WriteTag.iBank <0 OR stData.WriteTag.iBank >3 THEN
			'			iSaveErrorcode:= 16#0000_0015; 	(*Error: Invalid bank selected*)
			'		END_IF;
			'		
			'		(*Check Start Word*)
			'		IF stData.WriteTag.iStartWord <0 THEN
			'			iSaveErrorcode:= 16#0000_001D; 	(*Error: Invalid Start Word*)
			'		END_IF;
			'
			'		(*Check Start Word*)
			'		IF stData.WriteTag.iWordCount <1 OR stData.WriteTag.iWordCount > 32 THEN
			'			iSaveErrorcode:= 16#0000_0016; 	(*Error: Invalid Word Count*)
			'		END_IF;
			'
			'		(*Check Retry*)
			'		IF ((stData.WriteTag.iRetry AND 16#0F) > 7) OR ((stData.WriteTag.iRetry AND 16#F0) > 80)  THEN
			'			iSaveErrorcode:= 16#0000_0017; 	(*Error: Invalid Retry*)
			'		END_IF;
			'
			'		(*Check Antenna selection*)
			'		IF stData.WriteTag.iAntenna < 1 OR stData.WriteTag.iAntenna > 15 THEN
			'			iSaveErrorcode:= 16#0000_0018; 	(*Error: Invalid Antenna selection*)
			'		END_IF;
			'		
			'		(*Check PC+UII length*)
			'		IF stData.AddressMode.bMode THEN
			'			(*Check UII length*)
			'			IF stData.AddressMode.iPCUIILength <2 OR stData.AddressMode.iPCUIILength >32 THEN
			'				IF  stData.AddressMode.iPCUIILength <> 0 THEN
			'					iSaveErrorcode:= 16#0000_0010;	(*Error: Invalid PC+UII length*)
			'				END_IF;
			'			END_IF;	
			'			iCommandIndex:= 3;
			'		ELSE
			'			iCommandIndex:= 0;
			'		END_IF;
			'
			'		iTemp1:= iTemp1+1;
			'	END_IF;
			'
			'	(*Communication test*)
			'	IF arrSelection[4] THEN
			'		iTemp1:= iTemp1+1;
			'		iCommandIndex:= 4;
			'	END_IF;
			'
			'	(*Free Command*)
			'	IF arrSelection[5] THEN
			'		(*Check "Free Command" length*)
			'		SIZE(arrCommand,0, iTemp3);							(*arrCommand size*)
			'		IF bCANActive THEN
			'			iTemp2:= 11+stData.FreeCommand.sCommand.LEN;	(*Coammand length with CAN ident*)
			'		ELSE
			'			iTemp2:= stData.FreeCommand.sCommand.LEN;		(*Command length without CAN ident*)
			'		END_IF;
			'
			'		IF iTemp2 <=0 OR iTemp2 >iTemp3 THEN
			'			iSaveErrorcode:= 16#0000_0005; 					(*Error: Invalid Free Command length*)
			'		END_IF;
			'
			'		iTemp1:= iTemp1+1;
			'		iCommandIndex:= 5;
			'	END_IF;
			'		
			'	
			'	(*Check bit selection*)
			'	IF iTemp1 <> 1 THEN
			'		iSaveErrorcode:= 16#0000_0003;	(*Error: More than one or no parameter selected*)
			'	ELSIF iSaveErrorcode = 0 THEN
			'			
			'		(*Next step*)
			'		iStep:= 4;
			'	END_IF;
			'END_IF;
			'
			'
			'(*========================== STEP4: CREATE COLA COMMAND ==========================*)
			'IF iStep = 4 THEN
			'	CASE iCommandIndex OF
			'	
			'	(*Create "Trigger On" command*)
			'	0:	IF bCANActive THEN
			'			(*Command with CAN identification*)
			'			iIndex:= 12;
			'			iCommandLength:= 24;
			'		ELSE
			'			(*Command without CAN identification*)
			'			iIndex:= 1;
			'			iCommandLength:= 13;
			'			arrCommand[0]:= 115;	(*'s'*)
			'	
			'		END_IF;
			'	
			'		(*Copy command: 'sMN mTCgateon'*)
			'		COP(arrCommand0[1], arrCommand[iIndex], 12);
			'
			'		(*Next step*)
			'		iStep:= 5;
			'
			'	(*Create "Trigger Off" command*)
			'	1:	IF bCANActive THEN
			'			(*Command with CAN identification*)
			'			iIndex:= 12;
			'			iCommandLength:= 25;
			'		ELSE
			'			(*Command without CAN identification*)
			'			iIndex:= 1;
			'			iCommandLength:= 14;
			'			arrCommand[0]:= 115;	(*'s'*)
			'		END_IF;
			'	
			'		(*Copy command: 'sMN mTCgateoff'*)
			'		COP(arrCommand1[1], arrCommand[iIndex], 13);
			'
			'		(*Next step*)
			'		iStep:= 5;
			'	
			'	(*Create "Read Tag" command*)
			'	2:	IF bCANActive THEN
			'			(*Command with CAN identification*)
			'			iIndex:= 12;
			'			iCommandLength:= 32;
			'		ELSE
			'			(*Command without CAN identification*)
			'			iIndex:= 1;
			'			iCommandLength:= 21;
			'			arrCommand[0]:= 115;	(*'s'*)
			'		END_IF;
			'	
			'		(*Copy command: 'sMN TAextReadTagData '*)
			'		COP(arrCommand2[1], arrCommand[iIndex], 20);
			'		iIndex:= iCommandLength;	(*Next attribute position*)
			'
			'		(*Add selector (2= Use UII only)*)
			'		arrCommand[iIndex]:= 50;	(*'2'*)
			'		arrCommand[iIndex+1]:= 32;	(*' '*)
			'		iIndex:= iIndex+2;
			'
			'		(*Add the length of the UII*)
			'		IF stData.AddressMode.iPCUIILength = 0 THEN
			'			arrCommand[iIndex]:= 48;	(*'0'*)
			'			arrCommand[iIndex+1]:= 32;	(*' '*)
			'			iIndex:= iIndex+2;
			'		ELSE
			'			iTemp1:= (stData.AddressMode.iPCUIILength-2)*2; (*ASCII length of the UII only*)
			'			fbAccess.iConvertValue:= iTemp1;
			'			SICK_COLA_ACCESS(fbAccess, arrRecord,1,arrASCIIValue);
			'			IF fbAccess.bError THEN
			'				iSaveErrorcode:= 16#0000_0002; 	(*Error: Internal error*)
			'			ELSE
			'				COP(arrASCIIValue[0],arrCommand[iIndex],4);
			'				arrCommand[iIndex+4]:= 32;	(*' '*)
			'				iIndex:= iIndex+5;
			'			END_IF;
			'		END_IF;
			'		
			'		(*Add UII*)
			'		IF iSaveErrorcode = 0 AND stData.AddressMode.iPCUIILength > 0 THEN
			'			iTemp2:= 0;
			'			iTemp3:= 0;
			'			FOR iLoop:= 2 TO stData.AddressMode.iPCUIILength-1 DO	
			'				iTemp2:= (stData.AddressMode.arrPCUII[iLoop] AND 16#F0)/16;		
			'				FOR iTemp3:= 0 TO 1 DO 
			'					IF iTemp2 >=0 AND iTemp2 <=9 THEN
			'						arrCommand[iIndex]:= iTemp2+48;	(*0..9*)
			'					ELSIF iTemp2 >=10 AND iTemp2 <=15 THEN
			'						arrCommand[iIndex]:= iTemp2+55;	(*A..F*)
			'					END_IF;
			'					iTemp2:= stData.AddressMode.arrPCUII[iLoop] AND 16#0F;
			'					iIndex:= iIndex+1;		
			'				END_FOR;
			'				IF iSaveErrorcode <> 0 THEN
			'					EXIT;
			'				END_IF;
			'			END_FOR;
			'			
			'		END_IF;
			'
			'		(*Add Bank, StartWord, WordCount, Retry and Antenna value*)
			'		IF iSaveErrorcode = 0 THEN
			'			arrCommand[iIndex]:= 32;	(*' '*)
			'			iIndex:= iIndex+1;
			'
			'			FOR iLoop:= 1 TO 5 DO
			'				CASE iLoop OF
			'				1:	fbAccess.iConvertValue:= stData.ReadTag.iBank;
			'				2:	fbAccess.iConvertValue:= stData.ReadTag.iStartWord;
			'				3:	fbAccess.iConvertValue:= stData.ReadTag.iWordCount;
			'				4:	fbAccess.iConvertValue:= stData.ReadTag.iRetry;
			'				5:	fbAccess.iConvertValue:= stData.ReadTag.iAntenna;
			'				END_CASE;
			'				
			'				SICK_COLA_ACCESS(fbAccess, arrRecord,1,arrASCIIValue);
			'				IF fbAccess.bError THEN
			'					iSaveErrorcode:= 16#0000_0002; 	(*Internal error*)
			'					EXIT;
			'				ELSE
			'					COP(arrASCIIValue[0],arrCommand[iIndex],4);
			'					arrCommand[iIndex+4]:= 32;	(*' '*)
			'					iIndex:= iIndex+5;
			'				END_IF;
			'			END_FOR;
			'		END_IF;
			'
			'		IF iSaveErrorcode = 0 THEN
			'			(*Calculate command length*)
			'			iCommandLength:= iIndex-1;
			'		 
			'			(*Next step*)
			'			iStep:= 5;
			'		END_IF;
			'
			'	(*Create "Write Tag" command*)
			'	3:	IF bCANActive THEN
			'			(*Command with CAN identification*)
			'			iIndex:= 12;
			'			iCommandLength:= 33;
			'		ELSE
			'			(*Command without CAN identification*)
			'			iIndex:= 1;
			'			iCommandLength:= 22;
			'			arrCommand[0]:= 115;	(*'s'*)
			'		END_IF;
			'	
			'		(*Copy command: 'sMN TAextWriteTagData '*)
			'		COP(arrCommand3[1], arrCommand[iIndex], 21);
			'		iIndex:= iCommandLength;						(*Next attribute position*)
			'
			'		(*Add selector (2= Use UII only)*)
			'		arrCommand[iIndex]:= 50;	(*'2'*)
			'		arrCommand[iIndex+1]:= 32;	(*' '*)
			'		iIndex:= iIndex+2;
			'
			'		(*Add the length of the UII*)
			'		IF stData.AddressMode.iPCUIILength = 0 THEN
			'			arrCommand[iIndex]:= 48;	(*'0'*)
			'			arrCommand[iIndex+1]:= 32;	(*' '*)
			'			iIndex:= iIndex+2;
			'		ELSE
			'			iTemp1:= (stData.AddressMode.iPCUIILength-2)*2; (*ASCII length of the UII only*)
			'			fbAccess.iConvertValue:= iTemp1;
			'			SICK_COLA_ACCESS(fbAccess, arrRecord,1,arrASCIIValue);
			'			IF fbAccess.bError THEN
			'				iSaveErrorcode:= 16#0000_0002; 	(*Error: Internal error*)
			'			ELSE
			'				COP(arrASCIIValue[0],arrCommand[iIndex],4);
			'				arrCommand[iIndex+4]:= 32;	(*' '*)
			'				iIndex:= iIndex+5;
			'			END_IF;
			'		END_IF;
			'		
			'		(*Add UII*)
			'		IF iSaveErrorcode = 0 AND stData.AddressMode.iPCUIILength > 0 THEN
			'			iTemp2:= 0;
			'			iTemp3:= 0;
			'
			'			FOR iLoop:= 2 TO stData.AddressMode.iPCUIILength-1 DO					
			'			iTemp2:= (stData.AddressMode.arrPCUII[iLoop] AND 16#F0)/16;	
			'				FOR iTemp3:= 0 TO 1 DO 
			'					IF iTemp2 >=0 AND iTemp2 <=9 THEN
			'						arrCommand[iIndex]:= iTemp2+48;	(*0..9*)
			'					ELSIF iTemp2 >=10 AND iTemp2 <=15 THEN
			'						arrCommand[iIndex]:= iTemp2+55;	(*A..F*)
			'					END_IF;
			'					iTemp2:= stData.AddressMode.arrPCUII[iLoop] AND 16#0F;
			'					iIndex:= iIndex+1;		
			'				END_FOR;
			'				IF iSaveErrorcode <> 0 THEN
			'					EXIT;
			'				END_IF;
			'			END_FOR;
			'		END_IF;
			'
			'		(*Add Bank, StartWord, WordCount, Retry, Antenna value, Content length*)
			'		IF iSaveErrorcode = 0 THEN
			'			arrCommand[iIndex]:= 32;	(*' '*)
			'			iIndex:= iIndex+1;
			'			
			'			FOR iLoop:= 1 TO 5 DO
			'				CASE iLoop OF
			'				1:	fbAccess.iConvertValue:= stData.WriteTag.iBank;
			'				2:	fbAccess.iConvertValue:= stData.WriteTag.iStartWord;
			'				3:	fbAccess.iConvertValue:= stData.WriteTag.iWordCount;
			'				4:	fbAccess.iConvertValue:= stData.WriteTag.iRetry;
			'				5:	fbAccess.iConvertValue:= stData.WriteTag.iWordCount*4;
			'				END_CASE;
			'				
			'				SICK_COLA_ACCESS(fbAccess, arrRecord,1,arrASCIIValue);
			'				IF fbAccess.bError THEN
			'					iSaveErrorcode:= 16#0000_0002; 	(*Internal error*)
			'					EXIT;
			'				ELSE
			'					COP(arrASCIIValue[0],arrCommand[iIndex],4);
			'					arrCommand[iIndex+4]:= 32;	(*' '*)
			'					iIndex:= iIndex+5;
			'				END_IF;
			'			END_FOR;
			'		END_IF;
			'		
			'		(*Add data to be written*)
			'		IF iSaveErrorcode = 0 THEN
			'			FOR iLoop:= 0 TO (stData.WriteTag.iWordCount*2)-1 DO					
			'				iTemp2:= (stData.WriteTag.arrData[iLoop] AND 16#F0)/16;
			'				FOR iTemp3:= 0 TO 1 DO 
			'					IF iTemp2 >=0 AND iTemp2 <=9 THEN
			'						arrCommand[iIndex]:= iTemp2+48;	(*0..9*)
			'					ELSE
			'						arrCommand[iIndex]:= iTemp2+55;	(*A..F*)
			'					END_IF;
			'					iTemp2:= stData.WriteTag.arrData[iLoop] AND 16#0F;
			'					iIndex:= iIndex+1;		
			'				END_FOR;
			'			END_FOR;
			'			arrCommand[iIndex]:= 32;	(*' '*)
			'			iIndex:= iIndex+1;
			'		END_IF;
			'
			'		(*Add Antenna mask*)
			'		IF iSaveErrorcode = 0 THEN
			'		
			'			fbAccess.iConvertValue:= stData.WriteTag.iAntenna;
			'			SICK_COLA_ACCESS(fbAccess, arrRecord,1,arrASCIIValue);
			'			IF fbAccess.bError THEN
			'				iSaveErrorcode:= 16#0000_0002; 	(*Internal error*)
			'			ELSE
			'				COP(arrASCIIValue[0],arrCommand[iIndex],4);
			'				iIndex:= iIndex+5;
			'			END_IF;
			'		END_IF;
			'
			'		IF iSaveErrorcode = 0 THEN
			'			(*Calculate command length*)
			'			iCommandLength:= iIndex-1;
			'		 
			'			(*Next step*)
			'			iStep:= 5;
			'		END_IF;
			'
			'	(*Create "Communication test" command*)
			'	4:	IF bCANActive THEN
			'			(*Command with CAN identification*)
			'			iIndex:= 12;
			'			iCommandLength:= 15;
			'		ELSE
			'			(*Command without CAN identification*)
			'			iIndex:= 1;
			'			iCommandLength:= 4;
			'			arrCommand[0]:= 115;	(*'s'*)
			'		END_IF;
			'	
			'		(*Copy command: 'sRI0'*)
			'		COP(arrCommand4[1], arrCommand[iIndex], 3);
			'
			'		(*Next step*)
			'		iStep:= 5;
			'
			'	(*Create "Free Command" command*)
			'	5:	IF bCANActive THEN
			'			(*Create command with CAN identification*)
			'			iTemp1:= stData.FreeCommand.sCommand.LEN -1;
			'			iCommandLength:= 11+stData.FreeCommand.sCommand.LEN;
			'			COP(stData.FreeCommand.sCommand.DATA[1], arrCommand[12], iTemp1);
			'		ELSE
			'			(*Create command without CAN identification*)
			'			iCommandLength:= stData.FreeCommand.sCommand.LEN;	
			'			COP(stData.FreeCommand.sCommand.DATA[0], arrCommand[0], stData.FreeCommand.sCommand.LEN);		
			'		END_IF;
			'	
			'		(*Next step*)
			'		iStep:= 5;
			'	ELSE
			'		iSaveErrorcode:= 16#0000_0002;	(*Error: Internal error*)
			'	END_CASE;
			'END_IF;
			'
			'
			'(*=========================== STEP5: SEND COLA COMMAND ===========================*)
			'IF iStep = 5 THEN
			'	IF 	NOT fbCCOM.bReqBusy AND 
			'		NOT arrRTrigger[1].OutputBit AND 
			'		NOT arrRTrigger[2].OutputBit THEN
			'		
			'		(*Transmit command*)
			'		fbCCOM.bReq:= 1;
			'		
			'		(*Next step*)
			'		iStep:= 6;
			'	END_IF;
			'END_IF;
			'
			'
			'(*====================== STEP6: WAIT OF THE COMMAND ANSWER =======================*)
			'IF iStep = 6 THEN
			'
			'	(*Communication error detected*)
			'	IF arrRTrigger[2].OutputBit THEN		(*SICK_CCOM_EIP = ERROR*)
			'		iSaveErrorcode:= fbCCOM.iErrorcode AND 16#0000_FFFF;
			'		iSaveErrorcode:= iSaveErrorcode XOR 16#0009_0000;	
			'		SWPB(iSaveErrorcode, WORD, iSaveErrorcode);	(*Error: Communication error*)
			'
			'	(*Communication done*)
			'	ELSIF arrRTrigger[1].OutputBit THEN		(*SICK_CCOM_EIP = DONE*)
			'		iStep:= 7;
			'	END_IF;
			'END_IF;
			'
			'
			'(*======================== STEP7: CHECK COMMAND RESPONSE =========================*)
			'IF iStep = 7 THEN
			'	CASE iCommandIndex OF
			'	
			'	(*Check "Trigger On" response*)
			'	0:	IF bCANActive THEN
			'			IF  NOT (arrRecord[0] = 115 AND	(*'s'*) 
			'				arrRecord[12] = 65 AND		(*'A'*)
			'				arrRecord[13] = 78 AND		(*'N'*)
			'				arrRecord[22] = 111 AND		(*'o'*)
			'				arrRecord[23] = 110 AND		(*'n'*)
			'				arrRecord[24] = 32 AND		(*' '*)
			'				arrRecord[25] = 49) THEN	(*'1'*)
			'	
			'				iSaveErrorcode:= 16#0000_000B;	(*Unknown device answer*)
			'			END_IF;
			'		ELSE
			'			IF 	NOT (arrRecord[0] = 115 AND	(*'s'*) 
			'				arrRecord[1] = 65 AND		(*'A'*)
			'				arrRecord[2] = 78 AND		(*'N'*)
			'				arrRecord[11] = 111 AND		(*'o'*)
			'				arrRecord[12] = 110 AND		(*'n'*)
			'				arrRecord[13] = 32 AND		(*' '*)
			'				arrRecord[14] = 49) THEN	(*'1'*)	
			'
			'				iSaveErrorcode:= 16#0000_000B;	(*Unknown device answer*)
			'			END_IF;
			'		END_IF;
			'
			'		IF iSaveErrorcode = 0 THEN
			'			IF arrSelection[2] OR arrSelection[3] THEN
			'				(*Next step*)
			'				iStep:= 8;
			'			ELSE
			'				(*Next step*)
			'				iStep:= 9;
			'			END_IF;
			'		END_IF;	
			'		
			'	(*Check "Trigger Off" resonse*)
			'	1:	IF bCANActive THEN
			'			IF  arrRecord[0] = 115 AND		(*'s'*) 
			'				arrRecord[12] = 65 AND		(*'A'*)
			'				arrRecord[13] = 78 AND		(*'N'*)
			'				arrRecord[22] = 111 AND		(*'o'*)
			'				arrRecord[23] = 102 AND		(*'f'*)
			'				arrRecord[24] = 102 AND		(*'f'*)
			'				arrRecord[25] = 32 AND		(*' '*)
			'				arrRecord[26] = 49 THEN		(*'1'*)
			'											
			'				(*Next step*)
			'				iStep:= 9;
			'			ELSE
			'				iSaveErrorcode:= 16#0000_000B;	(*Unknown device answer*)
			'			END_IF;
			'		ELSE
			'			IF 	arrRecord[0] = 115 AND		(*'s'*) 
			'				arrRecord[1] = 65 AND		(*'A'*)
			'				arrRecord[2] = 78 AND		(*'N'*)
			'				arrRecord[11] = 111 AND		(*'o'*)
			'				arrRecord[12] = 102 AND		(*'f'*)
			'				arrRecord[13] = 102 AND		(*'f'*)
			'				arrRecord[14] = 32 AND		(*' '*)
			'				arrRecord[15] = 49 THEN		(*'1'*)
			'				
			'				(*Next step*)
			'				iStep:= 9;
			'			ELSE
			'				iSaveErrorcode:= 16#0000_000B;	(*Unknown device answer*)
			'			END_IF;
			'		END_IF;
			'
			'	(*Check "Read Tag" response*)
			'	2:	IF bCANActive THEN
			'			IF  arrRecord[0] = 115 AND		(*'s'*) 
			'				arrRecord[12] = 65 AND		(*'A'*)
			'				arrRecord[13] = 78 AND		(*'N'*)
			'				arrRecord[14] = 32 AND		(*' '*)
			'				arrRecord[29] = 116 AND		(*'t'*)
			'				arrRecord[30] = 97 AND		(*'a'*)
			'				arrRecord[31] = 32 AND		(*' '*)
			'				arrRecord[32] = 49 THEN		(*'1'*)				
			'				
			'				iIndex:= 34;	(*Position of the content length in the telegram*)
			'			
			'			ELSE
			'				iSaveErrorcode:= 16#0000_000B;	(*Unknown device answer*)
			'			END_IF;
			'		ELSE
			'			IF  arrRecord[0] = 115 AND		(*'s'*) 
			'				arrRecord[1] = 65 AND		(*'A'*)
			'				arrRecord[2] = 78 AND		(*'N'*)
			'				arrRecord[3] = 32 AND		(*' '*)
			'				arrRecord[18] = 116 AND		(*'t'*)
			'				arrRecord[19] = 97 AND		(*'a'*)
			'				arrRecord[20] = 32 AND		(*' '*)
			'				arrRecord[21] = 49 THEN		(*'1'*)	
			'
			'				iIndex:= 23;	(*Position of the content length in the telegram*)
			'		
			'			ELSE
			'				iSaveErrorcode:= 16#0000_000B;	(*Unknown device answer*)
			'			END_IF;
			'		END_IF;
			'
			'		(*Get content length*)
			'		IF iSaveErrorcode = 0 THEN
			'			fbAccess.iTelegramLength:= fbCCOM.iReqLength;	(*Current Telegram length*)
			'			fbAccess.iPosition:= iIndex;					(*Content length*)
			'			
			'			SICK_COLA_ACCESS(fbAccess, arrRecord,0,arrASCIIValue);
			'			IF fbAccess.bError THEN
			'				iSaveErrorcode:= 16#0000_0002;	(*Error: Internal error*)
			'			ELSE
			'				// stData.ReadTag.sData.LEN:= fbAccess.iReadValue/2;
			'				iIndex:= fbAccess.iNextPosition;
			'			END_IF;
			'		END_IF;
			'
			'		(*Get content*)	
			'		IF iSaveErrorcode = 0 THEN
			'			iTemp2:= 0;
			'			iTemp3:= 0;
			'			FOR iLoop:= iIndex TO iIndex+fbAccess.iReadValue-1 DO	
			'				IF arrRecord[iLoop] >=48 AND arrRecord[iLoop] <=57 THEN
			'					iTemp1:= arrRecord[iLoop]-48;	(*0..9*)
			'				ELSIF arrRecord[iLoop] >=65 AND arrRecord[iLoop] <=70 THEN
			'					iTemp1:= arrRecord[iLoop]-55;	(*A..F*)
			'				ELSE
			'					iSaveErrorcode:= 16#0000_0002; (*Error: Internal error*)		
			'					EXIT;
			'				END_IF;	
			'
			'				iTemp4:= (stData.ReadTag.arrData[iTemp3] * 16) + iTemp1;
			'				COP(iTemp4, stData.ReadTag.arrData[iTemp3], 1);
			'			
			'				iTemp2:= iTemp2+1;
			'				IF iTemp2 >= 2 THEN
			'					iTemp3:= iTemp3+1;
			'					iTemp2:= 0;
			'				END_IF;
			'			END_FOR;
			'			
			'			IF iSaveErrorcode = 0 THEN
			'				SIZE(stData.ReadTag.arrData,0,iTemp1);
			'				WHILE iTemp3 <= iTemp1-1 DO
			'					stData.ReadTag.arrData[iTemp3]:= 0;
			'					iTemp3:= iTemp3+1;
			'				END_WHILE;
			'			END_IF;
			'		END_IF;
			'		
			'		IF iSaveErrorcode = 0 THEN
			'			
			'			(*Next step*)
			'			iStep:= 9;
			'		END_IF;	
			'
			'	(*Check "Write Tag" response*)
			'	3:	IF bCANActive THEN
			'			IF  arrRecord[0] = 115 AND		(*'s'*) 
			'				arrRecord[12] = 65 AND		(*'A'*)
			'				arrRecord[13] = 78 AND		(*'N'*)
			'				arrRecord[14] = 32 AND		(*' '*)
			'				arrRecord[30] = 116 AND		(*'t'*)
			'				arrRecord[31] = 97 AND		(*'a'*)
			'				arrRecord[32] = 32 AND		(*' '*)
			'				arrRecord[33] = 49 THEN		(*'1'*)				
			'			
			'				(*Next step*)
			'				iStep:= 9;
			'			ELSE
			'				iSaveErrorcode:= 16#0000_000B;	(*Unknown device answer*)
			'			END_IF;
			'		ELSE
			'			IF  arrRecord[0] = 115 AND		(*'s'*) 
			'				arrRecord[1] = 65 AND		(*'A'*)
			'				arrRecord[2] = 78 AND		(*'N'*)
			'				arrRecord[3] = 32 AND		(*' '*)
			'				arrRecord[19] = 116 AND		(*'t'*)
			'				arrRecord[20] = 97 AND		(*'a'*)
			'				arrRecord[21] = 32 AND		(*' '*)
			'				arrRecord[22] = 49 THEN		(*'1'*)	
			'
			'				(*Next step*)
			'				iStep:= 9;
			'			ELSE
			'				iSaveErrorcode:= 16#0000_000B;	(*Unknown device answer*)
			'			END_IF;
			'		END_IF;
			'	
			'	(*Next step*)
			'		iStep:= 9;
			'
			'	(*Check "Communication Test" response*)
			'	4:	IF bCANActive THEN
			'			IF  arrRecord[0] = 115 AND		(*'s'*) 
			'				arrRecord[12] = 82 AND		(*'R'*)
			'				arrRecord[13] = 65 AND		(*'A'*)
			'				arrRecord[14] = 32 THEN		(*' '*)
			'				
			'				(*Next step*)
			'				iStep:= 9;
			'			ELSE
			'				iSaveErrorcode:= 16#0000_000B;	(*Unknown device answer*)
			'			END_IF;
			'		ELSE
			'			IF  arrRecord[0] = 115 AND		(*'s'*) 
			'				arrRecord[1] = 82 AND		(*'R'*)
			'				arrRecord[2] = 65 AND		(*'A'*)
			'				arrRecord[3] = 32 THEN		(*' '*)
			'				
			'				(*Next step*)
			'				iStep:= 9;
			'			ELSE
			'				iSaveErrorcode:= 16#0000_000B;	(*Unknown device answer*)
			'			END_IF;
			'		END_IF;
			'
			'	(*Check "Free Command" response*)
			'	5:	SIZE(stData.FreeCommand.sResult.DATA,0, iTemp1);
			'		IF fbCCOM.iReqLength <= iTemp1 THEN 
			'			(*Copy data*)
			'			COP(arrRecord[0],stData.FreeCommand.sResult.DATA[0],fbCCOM.iReqLength);
			'			stData.FreeCommand.sResult.LEN:= fbCCOM.iReqLength;
			'
			'			(*Next step*)
			'			iStep:= 9;
			'		ELSE
			'			iSaveErrorcode:= 16#0000_0006;	(*Error: Free Command result > Result Array*)
			'		END_IF;
			'
			'	ELSE
			'		iSaveErrorcode:= 16#0000_0002; 		(*Error: Internal error*)
			'	END_CASE;
			'END_IF;
			'
			'
			'(*==================== STEP8: GET TRANSPONDER INDENTIFICATION ======================*)
			'IF iStep = 8 AND fbCCOM.bReadDone THEN
			'	IF 	arrRecord[0] = 2 AND	(*'[STX]'*)
			'		arrRecord[1] = 48 AND	(*'0'*)
			'		arrRecord[2] = 48 AND	(*'0'*)
			'		arrRecord[3] = 3 THEN	(*'[ETX]'*)
			'		
			'		iSaveErrorcode:= 16#0000_001A;	(*Error: No Tag in the field*)		
			'	ELSIF arrRecord[0] = 2 AND	(*'[STX]'*)
			'		  arrRecord[1] = 48 AND	(*'0'*)
			'		  arrRecord[2] = 88 AND	(*'X'*)
			'		  arrRecord[3] = 3 THEN	(*'[ETX]'*)
			'
			'		iSaveErrorcode:= 16#0000_001B;	(*Error: More than one Tag in the field*)
			'	ELSIF NOT (arrRecord[0] = 2 AND	(*'[STX]'*)
			'		  arrRecord[1] = 48 AND	(*'0'*)
			'		  arrRecord[2] = 49 AND (*'1'*)
			'		  arrRecord[3] = 59 AND (*';'*)
			'		  fbCCOM.iReadLength > 20) THEN
			'
			'		iSaveErrorcode:= 16#0000_00019;	(*Error: Invalid output format*)
			'	END_IF;
			'
			'	(*Get transponder identification*)
			'	IF iSaveErrorcode = 0 THEN
			'		
			'		(*Get RSSI values*)
			'		fbAccess.iTelegramLength:= fbCCOM.iReadLength;	(*Current Telegram length*)
			'		fbAccess.iPosition:= 4;							(*First RSSI value offset*)
			'		FOR iLoop:= 0 TO 3 DO
			'			SICK_COLA_ACCESS(fbAccess, arrRecord,0,arrASCIIValue);
			'			IF fbAccess.bError THEN
			'				iSaveErrorcode:= 16#0000_0002;	(*Error: Internal error*)
			'				EXIT;
			'			ELSE
			'				stData.AddressMode.arrRSSI[iLoop]:= fbAccess.iReadValue;
			'				fbAccess.iPosition:= fbAccess.iNextPosition;
			'			END_IF;
			'		END_FOR;
			'	END_IF;
			'
			'	(*Get PC+UII*)
			'	IF iSaveErrorcode = 0 THEN
			'		iTemp2:= 0;
			'		iTemp3:= 0;
			'		FOR iLoop:= fbAccess.iNextPosition TO fbCCOM.iReadLength-2 DO
			'			IF arrRecord[iLoop] >=48 AND arrRecord[iLoop] <=57 THEN
			'				iTemp1:= arrRecord[iLoop]-48;	(*0..9*)
			'			ELSIF arrRecord[iLoop] >=65 AND arrRecord[iLoop] <=70 THEN
			'				iTemp1:= arrRecord[iLoop]-55;	(*A..F*)
			'			ELSE
			'				iSaveErrorcode:= 16#0000_0002; (*Error: Internal error*)		
			'				EXIT;
			'			END_IF;	
			'
			'			iTemp4:= (stData.AddressMode.arrPCUII[iTemp3]*16)+iTemp1;
			'			COP(iTemp4, stData.AddressMode.arrPCUII[iTemp3], 1);
			'			
			'			iTemp2:= iTemp2+1;
			'			IF iTemp2 >= 2 THEN
			'				iTemp3:= iTemp3+1;
			'				iTemp2:= 0;
			'			END_IF;
			'		END_FOR;
			'
			'		IF iSaveErrorcode = 0 THEN
			'			(*Byte length of the PC+UII*)
			'			stData.AddressMode.iPCUIILength:= iTemp3;
			'			SIZE(stData.AddressMode.arrPCUII,0,iTemp1);
			'			WHILE iTemp3 <= iTemp1-1 DO
			'				stData.AddressMode.arrPCUII[iTemp3]:= 0;
			'				iTemp3:= iTemp3+1;
			'			END_WHILE;
			'		END_IF;
			'	END_IF;
			'
			'	IF iSaveErrorcode = 0 THEN
			'		IF arrSelection[2] THEN
			'			
			'			(*Next step*)
			'			iCommandIndex:= 2;	(*Next command: Read Tag*)
			'			iStep:= 4;
			'		ELSIF arrSelection[3] THEN
			'		
			'			(*Next step*)
			'			iCommandIndex:= 3;	(*Next commnad: Write Tag*)
			'			iStep:= 4;
			'		ELSE
			'			iSaveErrorcode:= 16#0000_0002;	(*Error: Internal error*)
			'		END_IF;
			'	END_IF;	
			'END_IF;
			'
			'
			'(*=========================== STEP9: ACTION PERFORMED ============================*)
			'IF iStep = 9 THEN
			'	bReqDone:= 1;
			'	bReqBusy:= 0;
			'	bError:= 0;
			'	iErrorcode:= 0;
			'	iStep:= 0;
			'END_IF;
			'
			'
			'(*================================ COMMUNICATION =================================*)
			'(*Call SICK_CCOM_EIP block*)
			'SICK_CCOM_EIP(
			'fbCCOM,
			'arrInputAssembly, 
			'arrOutputAssembly,
			'arrRecord,
			'arrCommand,
			'arrControl,
			'iCommandLength);
			'
			'(*Create a rising edge*)
			'fbCCOM.bReq:= 0;
			'
			'(*Read Result error*)
			'IF fbCCOM.iReadLength < 0 THEN
			'	SIZE(stData.ReadingResult.sResult.DATA,0, iTemp1);	(*Read Result Array size*)
			'	FOR iLoop:= 0 TO iTemp1 - 1 DO
			'		stData.ReadingResult.sResult.DATA[iLoop]:= 0;
			'	END_FOR; 
			'	stData.ReadingResult.sResult.LEN:= -1;	(*Error: Reading result > arrRecord*)
			'END_IF;
			'
			'(*Read Result handling*)
			'IF fbCCOM.bReadDone AND NOT ((arrSelection[2] OR arrSelection[3]) AND bReqBusy) THEN
			'	(*Get Reading Result array size*)
			'	SIZE(stData.ReadingResult.sResult.DATA,0, iTemp1);	(*Read Result Array size*)
			'	IF fbCCOM.iReadLength <= iTemp1 THEN
			'		(*Copy Reading Result data*)
			'		COP(arrRecord[0],stData.ReadingResult.sResult.DATA[0], fbCCOM.iReadLength);
			'		stData.ReadingResult.sResult.LEN:= fbCCOM.iReadLength;
			'		
			'		IF (stData.ReadingResult.iCounter >= 32767) or (stData.ReadingResult.iCounter <0)  Then
			'			stData.ReadingResult.iCounter:= 0;	
			'		ELSE
			'			stData.ReadingResult.iCounter:= stData.ReadingResult.iCounter + 1;
			'		END_IF;
			'		bRDDone:= 1;
			'	ELSE
			'		FOR iLoop:= 0 TO iTemp1 - 1 DO
			'			stData.ReadingResult.sResult.DATA[iLoop]:= 0;
			'		END_FOR; 
			'		stData.ReadingResult.sResult.LEN:= -1;	(*Error: Reading result > Read result string*)
			'	END_IF;
			'ELSE
			'	bRDDone:= 0;
			'END_IF;
		END_ST_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION RFU63x (Class := Standard,
	                                      Revision := "1.0",
	                                      RevisionExtension := "20201210",
	                                      RevisionNote := "v1.0 Trigger, Read & Write Commands Can be enabled from outside AOI.",
	                                      Vendor := "GV Automation",
	                                      ExecutePrescan := No,
	                                      ExecutePostscan := No,
	                                      ExecuteEnableInFalse := No,
	                                      CreatedDate := "2020-11-17T18:36:35.872Z",
	                                      CreatedBy := "LAPTOP-2CUQA63B\marco",
	                                      EditedDate := "2020-12-17T16:03:54.223Z",
	                                      EditedBy := "LAPTOP-1BK8GLC9\ucarr",
	                                      SoftwareRevision := "v32.00",
	                                      AdditionalHelpText := "For Current MES purpouses, Only Read Command should be enabled.")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			arrOutputAssembly : SINT[1] (Usage := InOut,
			                             RADIX := Decimal,
			                             Required := Yes,
			                             Visible := Yes);
			arrInputAssembly : SINT[1] (Usage := InOut,
			                            RADIX := Decimal,
			                            Required := Yes,
			                            Visible := Yes);
			inpRFU : p_udt_RFU (Usage := InOut,
			                  Required := Yes,
			                  Visible := Yes);
			outTagRead : STRING_12 (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			inpStation : p_udt_Station (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			inpRFIDWrite : STRING_12 (Usage := InOut,
			                        Required := Yes,
			                        Visible := Yes);
			inpReset : BOOL (Usage := Input,
			                    RADIX := Decimal,
			                    Required := Yes,
			                    Visible := Yes,
			                    DefaultData := 0);
			stsBusy : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			stsDone : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			stsError : BOOL (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			cfgTriggerEnable : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			cfgReadEnable : BOOL (Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			cfgWriteEnable : BOOL (Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			stsTrigger : BOOL (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsRead : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			stsWrite : BOOL (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			stsErrorCode : DINT (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			wrkOns : DINT (RADIX := Decimal,
			                 ExternalAccess := None,
			                 DefaultData := 0);
			RFU_EIP : SICK_RFU_EIP (ExternalAccess := None,
			                  DefaultData := "[1,5000,0,0,0,0,0,0,0,0,0,0,0,[1,0,0,0,0,0,0,0,0,4,0,0],[1,5000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,0,0,0,0,0,0,0,0,4,0,0],[1,0,5.60519386e-045],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[1,0,0,0,0,0,0,0,0,0,[0,0,0,0],[1,0,0,1,0,0,0]],[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],[[1,0,5.60519386e-045],[1,0,5.60519386e-045],[1,0,5.60519386e-045]],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[115,82,73,48],[115,77,78,32,84,65,101,120,116,87,114,105,116,101,84,97,103,68,97,116,97,32],[115,77,78,32,84,65,101,120,116,82,101,97,100,84,97,103,68,97,116,97,32],[115,77,78,32,109,84,67,103,97,116,101,111,102,102],[115,77,78,32,109,84,67,103,97,116,101,111,110],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0],0]");
			wrkUIILenght : INT (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			wrkLastCharIndex : INT (RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			wrkFirstCharIndex : INT (RADIX := Decimal,
			                            ExternalAccess := None,
			                            DefaultData := 0);
			wrkLastChar : STRING_2 (ExternalAccess := None,
			                      DefaultData := "[1,'}$00']");
			wrkFirstChar : STRING_2 (ExternalAccess := None,
			                       DefaultData := "[1,'{$00']");
			wrkRequest : BOOL (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			wrkTriggerRead : STRING (ExternalAccess := None,
			                         DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			wrk_Year : STRING_6 (ExternalAccess := None,
			                   DefaultData := "[0,'$00$00$00$00$00$00']");
			wrk_Month : STRING_2 (ExternalAccess := None,
			                    DefaultData := "[0,'$00$00']");
			wrk_Day : STRING_2 (ExternalAccess := None,
			                  DefaultData := "[0,'$00$00']");
			wrkTmrRequest : TIMER (ExternalAccess := None,
			                        DefaultData := "[0,50,0]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "Read Tag Parameter Setup$N"
				    "$N"
				    "************************************************************";
				N: [OTU(inpRFU.stData.AddressMode.bMode) ,MOV(0,inpRFU.stData.AddressMode.iPCUIILength) ,FLL(0,inpRFU.stData.AddressMode.arrPCUII[0],32) ];
				RC: "Read Tag Parameter Setup$N"
				    "$N"
				    "************************************************************";
				N: [MOV(1,inpRFU.stData.ReadTag.iBank) ,MOV(2,inpRFU.stData.ReadTag.iStartWord) ,MOV(6,inpRFU.stData.ReadTag.iWordCount) ,MOV(16#52,inpRFU.stData.ReadTag.iRetry) ,MOV(2#0000_0001,inpRFU.stData.ReadTag.iAntenna) ];
				RC: "Write Tag Parameter Setup$N"
				    "$N"
				    "************************************************************";
				N: [MOV(1,inpRFU.stData.WriteTag.iBank) ,MOV(2,inpRFU.stData.WriteTag.iStartWord) ,MOV(6,inpRFU.stData.WriteTag.iWordCount) ,MOV(16#52,inpRFU.stData.WriteTag.iRetry) ,MOV(2#0000_0001,inpRFU.stData.WriteTag.iAntenna) ];
				N: [XIC(RFU_EIP.bTriggerOn) ,XIC(RFU_EIP.bTriggerOff) ,XIC(RFU_EIP.bReadTag) ,XIC(RFU_EIP.bWriteTag) ,XIC(RFU_EIP.bComTest) ,XIC(RFU_EIP.bFreeCommand) ]XIO(stsError)ONS(wrkOns.7)TOF(wrkTmrRequest,?,?);
				N: XIC(wrkTmrRequest.DN)OTE(wrkRequest);
				N: XIO(stsError)XIO(stsDone)XIC(cfgTriggerEnable)[XIO(RFU_EIP.bTriggerOff) XIO(RFU_EIP.bReadTag) XIO(RFU_EIP.bWriteTag) XIO(RFU_EIP.bReqBusy) [XIC(inpStation.AutoRunning) XIC(inpRFU.pCmdTrigger) OTU(inpRFU.pCmdTrigger) ,XIC(inpStation.Manual) XIC(inpRFU.oCmdTrigger) OTU(inpRFU.oCmdTrigger) ] ,XIC(RFU_EIP.bTriggerOn) ]OTE(RFU_EIP.bTriggerOn);
				N: XIC(RFU_EIP.bReqBusy)ONS(wrkOns.1)[GRT(inpRFU.stData.ReadingResult.sResult.LEN,0) FLL(0,inpRFU.stData.ReadingResult.sResult,1) ,FLL(0,inpRFU.stData.ReadTag.arrData[0],64) ,FLL(0,inpRFU.stData.WriteTag.arrData[0],64) ];
				N: XIO(RFU_EIP.bTriggerOn)[ONS(wrkOns.0) XIO(RFU_EIP.bTriggerOn) XIO(RFU_EIP.bReadTag) XIO(RFU_EIP.bWriteTag) ,XIC(RFU_EIP.bTriggerOff) XIO(RFU_EIP.bReqDone) ]OTE(RFU_EIP.bTriggerOff);
				N: XIO(stsError)XIO(stsDone)XIC(cfgReadEnable)[XIO(RFU_EIP.bTriggerOn) XIO(RFU_EIP.bTriggerOff) XIO(RFU_EIP.bWriteTag) XIO(RFU_EIP.bReqBusy) [XIC(inpStation.AutoRunning) XIC(inpRFU.pCmdRead) OTU(inpRFU.pCmdRead) ,XIC(inpStation.Manual) XIC(inpRFU.oCmdRead) OTU(inpRFU.oCmdRead) ] ,XIC(RFU_EIP.bReadTag) ]OTE(RFU_EIP.bReadTag);
				N: XIO(stsError)XIO(stsDone)XIC(cfgWriteEnable)[GRT(inpRFIDWrite.LEN,0) COP(inpRFIDWrite.DATA[0],inpRFU.stData.WriteTag.arrData[0],12) XIO(RFU_EIP.bTriggerOn) XIO(RFU_EIP.bTriggerOff) XIO(RFU_EIP.bReadTag) XIO(RFU_EIP.bReqBusy) [XIC(inpStation.AutoRunning) XIC(inpRFU.pCmdWrite) OTU(inpRFU.pCmdWrite) ,XIC(inpStation.Manual) XIC(inpRFU.oCmdWrite) OTU(inpRFU.oCmdWrite) ] ,XIC(RFU_EIP.bWriteTag) ]OTE(RFU_EIP.bWriteTag);
				N: OTU(RFU_EIP.bComTest)OTU(RFU_EIP.bFreeCommand);
				N: [XIC(RFU_EIP.bError) ONS(wrkOns.5) ,XIC(stsError) XIO(inpReset) ]OTE(stsError);
				N: [XIC(inpRFU.ResetCmd) ,[XIC(inpRFU.oCmdTrigger) ,XIC(inpRFU.oCmdRead) ,XIC(inpRFU.oCmdWrite) ] ONS(wrkOns.6) XIC(stsDone) ]OTU(stsDone)OTU(inpRFU.ResetCmd);
				N: [SICK_RFU_EIP(RFU_EIP,arrOutputAssembly,arrInputAssembly,inpRFU.arrControl,wrkRequest,inpRFU.stData) ,XIC(RFU_EIP.bTriggerOn) OTE(stsTrigger) ,XIC(RFU_EIP.bReadTag) OTE(stsRead) ,XIC(RFU_EIP.bWriteTag) OTE(stsWrite) ,XIC(RFU_EIP.bReqBusy) OTE(stsBusy) ,MOV(RFU_EIP.iErrorcode,stsErrorCode) ];
				N: XIC(RFU_EIP.bTriggerOn)XIC(RFU_EIP.bReqBusy)GRT(inpRFU.stData.ReadingResult.sResult.LEN,0)ONS(wrkOns.2)INSERT(inpRFU.stData.ReadingResult.sResult,wrkTriggerRead,1,wrkTriggerRead)OTL(stsDone);
				N: XIC(RFU_EIP.bReqDone)[GRT(inpRFU.stData.ReadTag.arrData[11],0) ONS(wrkOns.3) XIC(RFU_EIP.bReadTag) MOV(12,outTagRead.LEN) COP(inpRFU.stData.ReadTag.arrData[0],outTagRead.DATA[0],12) ,ONS(wrkOns.4) XIC(RFU_EIP.bWriteTag) ]OTL(stsDone);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION AOI_BNI004A_40_27_041 (Description := "BNI EIP-502-105-Z015",
	                                                     Class := Standard,
	                                                     Revision := "0.4",
	                                                     RevisionExtension := "1",
	                                                     Vendor := "Balluff Inc",
	                                                     ExecutePrescan := No,
	                                                     ExecutePostscan := No,
	                                                     ExecuteEnableInFalse := No,
	                                                     CreatedDate := "2010-12-10T15:19:55.163Z",
	                                                     CreatedBy := "US\harmonj",
	                                                     EditedDate := "2022-01-05T16:13:14.143Z",
	                                                     EditedBy := "LUCID\DanWeinhold",
	                                                     SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			BNI_EIP_502_Raw_Input_Data : SINT[200] (COMMENT[0].0 := "Input$NPort 0$NPin 4",
			                                      COMMENT[0].1 := "Input$NPort 0$NPin 2",
			                                      COMMENT[0].2 := "Input$NPort 1$NPin 4",
			                                      COMMENT[0].3 := "Input$NPort 1$NPin 2",
			                                      COMMENT[0].4 := "Input$NPort 2$NPin 4",
			                                      COMMENT[0].5 := "Input$NPort 2$NPin 2",
			                                      COMMENT[0].6 := "Input$NPort 3$NPin 4",
			                                      COMMENT[0].7 := "Input$NPort 3$NPin 2",
			                                      COMMENT[1].0 := "Input$NPort 4$NPin 4",
			                                      COMMENT[1].1 := "Input$NPort 4$NPin 2",
			                                      COMMENT[1].2 := "Input$NPort 5$NPin 4",
			                                      COMMENT[1].3 := "Input$NPort 5$NPin 2",
			                                      COMMENT[1].4 := "Input$NPort 6$NPin 4",
			                                      COMMENT[1].5 := "Input$NPort 6$NPin 2",
			                                      COMMENT[1].6 := "Input$NPort 7$NPin 4",
			                                      COMMENT[1].7 := "Input$NPort 7$NPin 2",
			                                      COMMENT[2].0 := "Port 0 Pin 4$NShort Circuit",
			                                      COMMENT[2].1 := "Port 0 Pin 2$NShort Circuit",
			                                      COMMENT[2].2 := "Port 1 Pin 4$NShort Circuit",
			                                      COMMENT[2].3 := "Port 1 Pin 2$NShort Circuit",
			                                      COMMENT[2].4 := "Port 2 Pin 4$NShort Circuit",
			                                      COMMENT[2].5 := "Port 2 Pin 2$NShort Circuit",
			                                      COMMENT[2].6 := "Port 3 Pin 4$NShort Circuit",
			                                      COMMENT[2].7 := "Port 3 Pin 2$NShort Circuit",
			                                      COMMENT[3].0 := "Port 4 Pin 4$NShort Circuit",
			                                      COMMENT[3].1 := "Port 4 Pin 2$NShort Circuit",
			                                      COMMENT[3].2 := "Port 5 Pin 4$NShort Circuit",
			                                      COMMENT[3].3 := "Port 5 Pin 2$NShort Circuit",
			                                      COMMENT[3].4 := "Port 6 Pin 4$NShort Circuit",
			                                      COMMENT[3].5 := "Port 6 Pin 2$NShort Circuit",
			                                      COMMENT[3].6 := "Port 7 Pin 4$NShort Circuit",
			                                      COMMENT[3].7 := "Port 7 Pin 2$NShort Circuit",
			                                      COMMENT[4].0 := "Port 0 Pin 4$NOutput Overload Status",
			                                      COMMENT[4].1 := "Port 0 Pin 2$NOutput Overload Status",
			                                      COMMENT[4].2 := "Port 1 Pin 4$NOutput Overload Status",
			                                      COMMENT[4].3 := "Port 1 Pin 2$NOutput Overload Status",
			                                      COMMENT[4].4 := "Port 2 Pin 4$NOutput Overload Status",
			                                      COMMENT[4].5 := "Port 2 Pin 2$NOutput Overload Status",
			                                      COMMENT[4].6 := "Port 3 Pin 4$NOutput Overload Status",
			                                      COMMENT[4].7 := "Port 3 Pin 2$NOutput Overload Status",
			                                      COMMENT[5].0 := "Port 4 Pin 4$NOutput Overload Status",
			                                      COMMENT[5].1 := "Port 4 Pin 2$NOutput Overload Status",
			                                      COMMENT[5].2 := "Port 5 Pin 4$NOutput Overload Status",
			                                      COMMENT[5].3 := "Port 5 Pin 2$NOutput Overload Status",
			                                      COMMENT[5].4 := "Port 6 Pin 4$NOutput Overload Status",
			                                      COMMENT[5].5 := "Port 6 Pin 2$NOutput Overload Status",
			                                      COMMENT[5].6 := "Port 7 Pin 4$NOutput Overload Status",
			                                      COMMENT[5].7 := "Port 7 Pin 2$NOutput Overload Status",
			                                      COMMENT[6].0 := "Output Power from$NAux Power cable$NUnder Voltage",
			                                      COMMENT[6].1 := "Module Power$Nfrom IO-Link Communication Cable$NUnder Voltage",
			                                      COMMENT[6].2 := "Not used",
			                                      COMMENT[6].3 := "Not used",
			                                      COMMENT[6].4 := "Not used",
			                                      COMMENT[6].5 := "Not used",
			                                      COMMENT[6].6 := "Not used",
			                                      COMMENT[6].7 := "Not used",
			                                      COMMENT[7] := "Port 1 Input Byte 0",
			                                      COMMENT[8] := "Port 1 Input Byte 1",
			                                      COMMENT[9] := "Port 1 Input Byte 2",
			                                      COMMENT[10] := "Port 1 Input Byte 3",
			                                      COMMENT[11] := "Port 1 Input Byte 4",
			                                      COMMENT[32].0 := "Port 1$NEP bit$NEvent Present",
			                                      COMMENT[32].1 := "Reserved",
			                                      COMMENT[32].2 := "Reserved",
			                                      COMMENT[32].3 := "Reserved",
			                                      COMMENT[32].4 := "Reserved",
			                                      COMMENT[32].5 := "Port 1$NVF bit$NValidation Failed",
			                                      COMMENT[32].6 := "Port 1$NDC bit$NDevice Connected",
			                                      COMMENT[32].7 := "Port 1$NIOL bit$NPort in IO-Link Mode",
			                                      COMMENT[33].0 := "Reserved",
			                                      COMMENT[33].1 := "Reserved",
			                                      COMMENT[33].2 := "Reserved",
			                                      COMMENT[33].3 := "Reserved",
			                                      COMMENT[33].4 := "Reserved",
			                                      COMMENT[33].5 := "Reserved",
			                                      COMMENT[33].6 := "Reserved",
			                                      COMMENT[33].7 := "Reserved",
			                                      COMMENT[34] := "Port 1$NVendor ID Number$NByte 1 (High byte)",
			                                      COMMENT[35] := "Port 1$NVendor ID Number$NByte 2 (Middle byte)",
			                                      COMMENT[36] := "Port 1$NVendor ID Number$NByte 3 (Low byte)",
			                                      COMMENT[37] := "Port 1$NDevice ID Number$NByte 1 (High byte)",
			                                      COMMENT[38] := "Port 1$NDevice ID Number$NByte 2 (Middle byte)",
			                                      COMMENT[39] := "Port 1$NDevice ID Number$NByte 3 (Low byte)",
			                                      COMMENT[40].0 := "Port 1$NIn I/O Link$NMode",
			                                      COMMENT[40].1 := "Port 1$NI/O Link$NDevice Connected",
			                                      COMMENT[41].0 := "Port 1$NI/O Link$NDevice Configuration$NMismatch",
			                                      COMMENT[52] := "Port 1 Input Byte 46",
			                                      COMMENT[53] := "Port 1 Input Byte 47",
			                                      COMMENT[54] := "Port 1 Input Byte 48",
			                                      COMMENT[55] := "Port 2 Input Byte 0",
			                                      COMMENT[56] := "Port 2 Input Byte 1",
			                                      COMMENT[57] := "Port 2 Input Byte 2",
			                                      COMMENT[58] := "Port 2 Input Byte 3",
			                                      COMMENT[59] := "Port 2 Input Byte 4",
			                                      COMMENT[88].0 := "Port 2$NIn I/O Link$NMode",
			                                      COMMENT[88].1 := "Port 2$NI/O Link$NDevice Connected",
			                                      COMMENT[89].0 := "Port 2$NI/O Link$NDevice Configuration$NMismatch",
			                                      COMMENT[100] := "Port 2 Input Byte 46",
			                                      COMMENT[101] := "Port 2 Input Byte 47",
			                                      COMMENT[102] := "Port 2 Input Byte 48",
			                                      COMMENT[103] := "Port 3 Input Byte 0",
			                                      COMMENT[104] := "Port 3 Input Byte 1",
			                                      COMMENT[105] := "Port 3 Input Byte 2",
			                                      COMMENT[106] := "Port 3 Input Byte 3",
			                                      COMMENT[107] := "Port 3 Input Byte 4",
			                                      COMMENT[136].0 := "Port 3$NIn I/O Link$NMode",
			                                      COMMENT[136].1 := "Port 3$NI/O Link$NDevice Connected",
			                                      COMMENT[137].0 := "Port 3$NI/O Link$NDevice Configuration$NMismatch",
			                                      COMMENT[148] := "Port 3 Input Byte 46",
			                                      COMMENT[149] := "Port 3 Input Byte 47",
			                                      COMMENT[150] := "Port 3 Input Byte 48",
			                                      COMMENT[151] := "Port 4 Input Byte 0",
			                                      COMMENT[152] := "Port 4 Input Byte 1",
			                                      COMMENT[153] := "Port 4 Input Byte 2",
			                                      COMMENT[154] := "Port 4 Input Byte 3",
			                                      COMMENT[184].0 := "Port 4$NIn I/O Link$NMode",
			                                      COMMENT[184].1 := "Port 4$NI/O Link$NDevice Connected",
			                                      COMMENT[185].0 := "Port 4$NI/O Link$NDevice Configuration$NMismatch",
			                                      COMMENT[196] := "Port 4 Input Byte 46",
			                                      COMMENT[197] := "Port 4 Input Byte 47",
			                                      COMMENT[198] := "Port 4 Input Byte 48",
			                                      Usage := InOut,
			                                      RADIX := Decimal,
			                                      Required := Yes,
			                                      Visible := Yes);
			BNI_EIP_502_Raw_Output_Data : SINT[134] (COMMENT[0].0 := "Output$NPort 0$NPin 4",
			                                       COMMENT[0].1 := "Output$NPort 0$NPin 2",
			                                       COMMENT[0].2 := "Output$NPort 1$NPin 4",
			                                       COMMENT[0].3 := "Output$NPort 1$NPin 2",
			                                       COMMENT[0].4 := "Output$NPort 2$NPin 4",
			                                       COMMENT[0].5 := "Output$NPort 2$NPin 2",
			                                       COMMENT[0].6 := "Output$NPort 3$NPin 4",
			                                       COMMENT[0].7 := "Output$NPort 3$NPin 2",
			                                       COMMENT[1].0 := "Output$NPort 4$NPin 4",
			                                       COMMENT[1].1 := "Output$NPort 4$NPin 2",
			                                       COMMENT[1].2 := "Output$NPort 5$NPin 4",
			                                       COMMENT[1].3 := "Output$NPort 5$NPin 2",
			                                       COMMENT[1].4 := "Output$NPort 6$NPin 4",
			                                       COMMENT[1].5 := "Output$NPort 6$NPin 2",
			                                       COMMENT[1].6 := "Output$NPort 7$NPin 4",
			                                       COMMENT[1].7 := "Output$NPort 7$NPin 2",
			                                       COMMENT[2].0 := "Port 0$NPin 4$NOutput Restart",
			                                       COMMENT[2].1 := "Port 0$NPin 2$NOutput Restart",
			                                       COMMENT[2].2 := "Port 1$NPin 4$NOutput Restart",
			                                       COMMENT[2].3 := "Port 1$NPin 2$NOutput Restart",
			                                       COMMENT[2].4 := "Port 2$NPin 4$NOutput Restart",
			                                       COMMENT[2].5 := "Port 2$NPin 2$NOutput Restart",
			                                       COMMENT[2].6 := "Port 3$NPin 4$NOutput Restart",
			                                       COMMENT[2].7 := "Port 3$NPin 2$NOutput Restart",
			                                       COMMENT[3].0 := "Port 4$NPin 4$NOutput Restart",
			                                       COMMENT[3].1 := "Port 4$NPin 2$NOutput Restart",
			                                       COMMENT[3].2 := "Port 5$NPin 4$NOutput Restart",
			                                       COMMENT[3].3 := "Port 5$NPin 2$NOutput Restart",
			                                       COMMENT[3].4 := "Port 6$NPin 4$NOutput Restart",
			                                       COMMENT[3].5 := "Port 6$NPin 2$NOutput Restart",
			                                       COMMENT[3].6 := "Port 7$NPin 4$NOutput Restart",
			                                       COMMENT[3].7 := "Port 7$NPin 2$NOutput Restart",
			                                       COMMENT[4].0 := "Red LED$NDisplay$NOutput",
			                                       COMMENT[4].1 := "Green LED$NDisplay$NOutput",
			                                       COMMENT[4].2 := "Lock$NDisplay$NOutput",
			                                       COMMENT[5] := "Port 1$NOutput Data$NByte 0",
			                                       COMMENT[6] := "Port 1$NOutput Data$NByte 1",
			                                       COMMENT[7] := "Port 1$NOutput Data$NByte 2",
			                                       COMMENT[8] := "Port 1$NOutput Data$NByte 3",
			                                       COMMENT[9] := "Port 1$NOutput Data$NByte 4",
			                                       COMMENT[10] := "Port 1$NOutput Data$NByte 5",
			                                       COMMENT[11] := "Port 1$NOutput Data$NByte 6",
			                                       COMMENT[12] := "Port 1$NOutput Data$NByte 7",
			                                       COMMENT[13] := "Port 1$NOutput Data$NByte 8",
			                                       COMMENT[14] := "Port 1$NOutput Data$NByte 9",
			                                       COMMENT[15] := "Port 1$NOutput Data$NByte 10",
			                                       COMMENT[16] := "Port 1$NOutput Data$NByte 11",
			                                       COMMENT[17] := "Port 1$NOutput Data$NByte 12",
			                                       COMMENT[18] := "Port 1$NOutput Data$NByte 13",
			                                       COMMENT[19] := "Port 1$NOutput Data$NByte 14",
			                                       COMMENT[20] := "Port 1$NOutput Data$NByte 15",
			                                       COMMENT[21] := "Port 1$NOutput Data$NByte 16",
			                                       COMMENT[22] := "Port 1$NOutput Data$NByte 17",
			                                       COMMENT[23] := "Port 1$NOutput Data$NByte 18",
			                                       COMMENT[24] := "Port 1$NOutput Data$NByte 19",
			                                       COMMENT[25] := "Port 1$NOutput Data$NByte 20",
			                                       COMMENT[26] := "Port 1$NOutput Data$NByte 21",
			                                       COMMENT[27] := "Port 1$NOutput Data$NByte 22",
			                                       COMMENT[28] := "Port 1$NOutput Data$NByte 23",
			                                       COMMENT[29] := "Port 1$NOutput Data$NByte 24",
			                                       COMMENT[30] := "Port 1$NOutput Data$NByte 25",
			                                       COMMENT[31] := "Port 1$NOutput Data$NByte 26",
			                                       COMMENT[32] := "Port 1$NOutput Data$NByte 27",
			                                       COMMENT[33] := "Port 1$NOutput Data$NByte 28",
			                                       COMMENT[34] := "Port 1$NOutput Data$NByte 29",
			                                       COMMENT[35] := "Port 1$NOutput Data$NByte 30",
			                                       COMMENT[36] := "Port 1$NOutput Data$NByte 31",
			                                       COMMENT[37] := "Port 2$NOutput Data$NByte 0",
			                                       COMMENT[38] := "Port 2$NOutput Data$NByte 1",
			                                       COMMENT[69] := "Port 3$NOutput Data$NByte 0",
			                                       COMMENT[70] := "Port 3$NOutput Data$NByte 1",
			                                       COMMENT[101] := "Port 4$NOutput Data$NByte 0",
			                                       COMMENT[102] := "Port 4$NOutput Data$NByte 1",
			                                       Usage := InOut,
			                                       RADIX := Decimal,
			                                       Required := Yes,
			                                       Visible := Yes);
			BNI_EIP_502_Raw_Config_Data : SINT[98] (COMMENT[0] := "Port 1 (Bits 4_5)$NPort 2 (Bits 6_7)$NFunction$N00d=0x00=Standrd I/O$N01d=0x01=IO-Link Mod$N02d=0x02=Fallback Md",
			                                       COMMENT[1] := "Port 3 (Bits 4_5)$NPort 4 (Bits 6_7)$NFunction$NFunction$N00d=0x00=Standrd I/O$N01d=0x01=IO-Link Mod$N02d=0x02=Fallback Md",
			                                       COMMENT[2].0 := "Parameter$NData Conflict",
			                                       COMMENT[2].1 := "Enable$NParameter$NUpload",
			                                       COMMENT[2].2 := "Enable$NParameter$NDownload",
			                                       COMMENT[2].7 := "Enable$NParameter$NServer",
			                                       COMMENT[3] := "RESERVED",
			                                       COMMENT[4] := "Port 1 IO-Link$NCycle Time$NTime (Bytes 5-0)$NBase (Bytes 7-6)",
			                                       COMMENT[5] := "Port 1$NVendor ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[6] := "Port 1$NVendor ID Number$NByte 2$NLow Byte",
			                                       COMMENT[7] := "Port 1$NDevice ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[8] := "Port 1$NDevice ID Number$NByte 2$NMiddle Byte",
			                                       COMMENT[9] := "Port 1$NDevice ID Number$NByte 3$NLow Byte",
			                                       COMMENT[10] := "Port 2 IO-Link$NCycle Time$NTime (Bytes 5-0)$NBase (Bytes 7-6)",
			                                       COMMENT[11] := "Port 2$NVendor ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[12] := "Port 2$NVendor ID Number$NByte 2$NLow Byte",
			                                       COMMENT[13] := "Port 2$NDevice ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[14] := "Port 2$NDevice ID Number$NByte 2$NMiddle Byte",
			                                       COMMENT[15] := "Port 2$NDevice ID Number$NByte 3$NLow Byte",
			                                       COMMENT[16] := "Port 3 IO-Link$NCycle Time$NTime (Bytes 5-0)$NBase (Bytes 7-6)",
			                                       COMMENT[17] := "Port 3$NVendor ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[18] := "Port 3$NVendor ID Number$NByte 2$NLow Byte",
			                                       COMMENT[19] := "Port 3$NDevice ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[20] := "Port 3$NDevice ID Number$NByte 2$NMiddle Byte",
			                                       COMMENT[21] := "Port 3$NDevice ID Number$NByte 3$NLow Byte",
			                                       COMMENT[22] := "Port 4 IO-Link$NCycle Time$NTime (Bytes 5-0)$NBase (Bytes 7-6)",
			                                       COMMENT[23] := "Port 4$NVendor ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[24] := "Port 4$NVendor ID Number$NByte 2$NLow Byte",
			                                       COMMENT[25] := "Port 1 Enable",
			                                       COMMENT[25].1 := "Port 1 Enable$NUpload Parameters",
			                                       COMMENT[25].2 := "Port 1 Enable$NDownload Parameters",
			                                       COMMENT[25].7 := "Port 1 Enable$NParameters Server",
			                                       COMMENT[26] := "Port 4$NDevice ID Number$NByte 2$NMiddle Byte",
			                                       COMMENT[27] := "Port 4$NDevice ID Number$NByte 3$NLow Byte",
			                                       COMMENT[49].1 := "Port 2 Enable$NUpload Parameters",
			                                       COMMENT[49].2 := "Port 2 Enable$NDownload Parameters",
			                                       COMMENT[49].7 := "Port 2 Enable$NParameters Server",
			                                       COMMENT[73].1 := "Port 3 Enable$NUpload Parameters",
			                                       COMMENT[73].2 := "Port 3 Enable$NDownload Parameters",
			                                       COMMENT[73].7 := "Port 3 Enable$NParameters Server",
			                                       COMMENT[97].1 := "Port 4 Enable$NUpload Parameters",
			                                       COMMENT[97].2 := "Port 4 Enable$NDownload Parameters",
			                                       COMMENT[97].7 := "Port 4 Enable$NParameters Server",
			                                       Usage := InOut,
			                                       RADIX := Decimal,
			                                       Required := Yes,
			                                       Visible := Yes);
			BNI_EIP_502_Port_1_Data : IO_Link_Port_Data (COMMENT.INPUTS[0] := "Port 1$NInput Data",
			                                   Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
			BNI_EIP_502_Port_2_Data : IO_Link_Port_Data (COMMENT.INPUTS[0] := "Port 2$NInput Data",
			                                   Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
			BNI_EIP_502_Port_3_Data : IO_Link_Port_Data (COMMENT.INPUTS[0] := "Port 3$NInput Data",
			                                   Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
			BNI_EIP_502_Port_4_Data : IO_Link_Port_Data (COMMENT.INPUTS[0] := "Port 4$NInput Data",
			                                   Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
			Mapped_BNI_EIP_502_Data : UDT_BNI004A_40_27_041 (Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "Copyright 2013 Balluff, Inc.$N"
				    "Licensed under the Apache License, Version 2.0 (the $QLicense$Q); you may$N"
				    "not use this file except in compliance with the License.  You may obtain$N"
				    "a copy of the License at:$N"
				    "http://www.apache.org/licenses/LICENSE-2.0$N"
				    "Unless required by applicable law or agreed to in writing, software$N"
				    "distributed under the License is distributed on an $QAS IS$Q BASIS$N"
				    "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or$N"
				    "implied.  See the License for the specific language governing$N"
				    "permissions and limitations under the License.";
				N: NOP();
				RC: "$N"
				    "Distribute Raw Input data into separate arrays for each port.$N"
				    "$N"
				    "";
				N: [COP(BNI_EIP_502_Raw_Input_Data[8],BNI_EIP_502_Port_1_Data.Inputs[0],48) ,COP(BNI_EIP_502_Raw_Input_Data[56],BNI_EIP_502_Port_2_Data.Inputs[0],48) ,COP(BNI_EIP_502_Raw_Input_Data[104],BNI_EIP_502_Port_3_Data.Inputs[0],48) ,COP(BNI_EIP_502_Raw_Input_Data[152],BNI_EIP_502_Port_4_Data.Inputs[0],48) ];
				RC: "$N"
				    "The next 16 rungs map the raw input data to defined Parameters.$N"
				    "$N"
				    "";
				N: XIC(BNI_EIP_502_Raw_Input_Data[0].0)OTE(Mapped_BNI_EIP_502_Data.I.Data.0);
				N: XIC(BNI_EIP_502_Raw_Input_Data[0].1)OTE(Mapped_BNI_EIP_502_Data.I.Data.1);
				N: XIC(BNI_EIP_502_Raw_Input_Data[0].2)OTE(Mapped_BNI_EIP_502_Data.I.Data.2);
				N: XIC(BNI_EIP_502_Raw_Input_Data[0].3)OTE(Mapped_BNI_EIP_502_Data.I.Data.3);
				N: XIC(BNI_EIP_502_Raw_Input_Data[0].4)OTE(Mapped_BNI_EIP_502_Data.I.Data.4);
				N: XIC(BNI_EIP_502_Raw_Input_Data[0].5)OTE(Mapped_BNI_EIP_502_Data.I.Data.5);
				N: XIC(BNI_EIP_502_Raw_Input_Data[0].6)OTE(Mapped_BNI_EIP_502_Data.I.Data.6);
				N: XIC(BNI_EIP_502_Raw_Input_Data[0].7)OTE(Mapped_BNI_EIP_502_Data.I.Data.7);
				N: XIC(BNI_EIP_502_Raw_Input_Data[1].0)OTE(Mapped_BNI_EIP_502_Data.I.Data.8);
				N: XIC(BNI_EIP_502_Raw_Input_Data[1].1)OTE(Mapped_BNI_EIP_502_Data.I.Data.9);
				N: XIC(BNI_EIP_502_Raw_Input_Data[1].2)OTE(Mapped_BNI_EIP_502_Data.I.Data.10);
				N: XIC(BNI_EIP_502_Raw_Input_Data[1].3)OTE(Mapped_BNI_EIP_502_Data.I.Data.11);
				N: XIC(BNI_EIP_502_Raw_Input_Data[1].4)OTE(Mapped_BNI_EIP_502_Data.I.Data.12);
				N: XIC(BNI_EIP_502_Raw_Input_Data[1].5)OTE(Mapped_BNI_EIP_502_Data.I.Data.13);
				N: XIC(BNI_EIP_502_Raw_Input_Data[1].6)OTE(Mapped_BNI_EIP_502_Data.I.Data.14);
				N: XIC(BNI_EIP_502_Raw_Input_Data[1].7)OTE(Mapped_BNI_EIP_502_Data.I.Data.15);
				RC: "$N"
				    "The next 16 rungs map the Input Short Circuit data to defined Parameters.$N"
				    "$N"
				    "";
				N: XIC(BNI_EIP_502_Raw_Input_Data[2].0)OTE(Mapped_BNI_EIP_502_Data.I.Short_Circuit.0);
				N: XIC(BNI_EIP_502_Raw_Input_Data[2].1)OTE(Mapped_BNI_EIP_502_Data.I.Short_Circuit.1);
				N: XIC(BNI_EIP_502_Raw_Input_Data[2].2)OTE(Mapped_BNI_EIP_502_Data.I.Short_Circuit.2);
				N: XIC(BNI_EIP_502_Raw_Input_Data[2].3)OTE(Mapped_BNI_EIP_502_Data.I.Short_Circuit.3);
				N: XIC(BNI_EIP_502_Raw_Input_Data[2].4)OTE(Mapped_BNI_EIP_502_Data.I.Short_Circuit.4);
				N: XIC(BNI_EIP_502_Raw_Input_Data[2].5)OTE(Mapped_BNI_EIP_502_Data.I.Short_Circuit.5);
				N: XIC(BNI_EIP_502_Raw_Input_Data[2].6)OTE(Mapped_BNI_EIP_502_Data.I.Short_Circuit.6);
				N: XIC(BNI_EIP_502_Raw_Input_Data[2].7)OTE(Mapped_BNI_EIP_502_Data.I.Short_Circuit.7);
				N: XIC(BNI_EIP_502_Raw_Input_Data[3].0)OTE(Mapped_BNI_EIP_502_Data.I.Short_Circuit.8);
				N: XIC(BNI_EIP_502_Raw_Input_Data[3].1)OTE(Mapped_BNI_EIP_502_Data.I.Short_Circuit.9);
				N: XIC(BNI_EIP_502_Raw_Input_Data[3].2)OTE(Mapped_BNI_EIP_502_Data.I.Short_Circuit.10);
				N: XIC(BNI_EIP_502_Raw_Input_Data[3].3)OTE(Mapped_BNI_EIP_502_Data.I.Short_Circuit.11);
				N: XIC(BNI_EIP_502_Raw_Input_Data[3].4)OTE(Mapped_BNI_EIP_502_Data.I.Short_Circuit.12);
				N: XIC(BNI_EIP_502_Raw_Input_Data[3].5)OTE(Mapped_BNI_EIP_502_Data.I.Short_Circuit.13);
				N: XIC(BNI_EIP_502_Raw_Input_Data[3].6)OTE(Mapped_BNI_EIP_502_Data.I.Short_Circuit.14);
				N: XIC(BNI_EIP_502_Raw_Input_Data[3].7)OTE(Mapped_BNI_EIP_502_Data.I.Short_Circuit.15);
				RC: "$N"
				    "The next 16 rungs map the Output Overload data to defined Parameters.$N"
				    "$N"
				    "";
				N: XIC(BNI_EIP_502_Raw_Input_Data[4].0)OTE(Mapped_BNI_EIP_502_Data.I.Overload.0);
				N: XIC(BNI_EIP_502_Raw_Input_Data[4].1)OTE(Mapped_BNI_EIP_502_Data.I.Overload.1);
				N: XIC(BNI_EIP_502_Raw_Input_Data[4].2)OTE(Mapped_BNI_EIP_502_Data.I.Overload.2);
				N: XIC(BNI_EIP_502_Raw_Input_Data[4].3)OTE(Mapped_BNI_EIP_502_Data.I.Overload.3);
				N: XIC(BNI_EIP_502_Raw_Input_Data[4].4)OTE(Mapped_BNI_EIP_502_Data.I.Overload.4);
				N: XIC(BNI_EIP_502_Raw_Input_Data[4].5)OTE(Mapped_BNI_EIP_502_Data.I.Overload.5);
				N: XIC(BNI_EIP_502_Raw_Input_Data[4].6)OTE(Mapped_BNI_EIP_502_Data.I.Overload.6);
				N: XIC(BNI_EIP_502_Raw_Input_Data[4].7)OTE(Mapped_BNI_EIP_502_Data.I.Overload.7);
				N: XIC(BNI_EIP_502_Raw_Input_Data[5].0)OTE(Mapped_BNI_EIP_502_Data.I.Overload.8);
				N: XIC(BNI_EIP_502_Raw_Input_Data[5].1)OTE(Mapped_BNI_EIP_502_Data.I.Overload.9);
				N: XIC(BNI_EIP_502_Raw_Input_Data[5].2)OTE(Mapped_BNI_EIP_502_Data.I.Overload.10);
				N: XIC(BNI_EIP_502_Raw_Input_Data[5].3)OTE(Mapped_BNI_EIP_502_Data.I.Overload.11);
				N: XIC(BNI_EIP_502_Raw_Input_Data[5].4)OTE(Mapped_BNI_EIP_502_Data.I.Overload.12);
				N: XIC(BNI_EIP_502_Raw_Input_Data[5].5)OTE(Mapped_BNI_EIP_502_Data.I.Overload.13);
				N: XIC(BNI_EIP_502_Raw_Input_Data[5].6)OTE(Mapped_BNI_EIP_502_Data.I.Overload.14);
				N: XIC(BNI_EIP_502_Raw_Input_Data[5].7)OTE(Mapped_BNI_EIP_502_Data.I.Overload.15);
				RC: "$N"
				    "This rung maps the Actuator/Emergency Stop Power bit to the defined Parameter.$N"
				    "$N"
				    "";
				N: XIC(BNI_EIP_502_Raw_Input_Data[6].0)OTE(Mapped_BNI_EIP_502_Data.I.UA_Fault);
				RC: "$N"
				    "This rung maps the Sensor Power bit to the defined Parameter.$N"
				    "$N"
				    "";
				N: XIC(BNI_EIP_502_Raw_Input_Data[6].1)OTE(Mapped_BNI_EIP_502_Data.I.US_Fault);
				RC: "$N"
				    "The next 16 rungs write the defined Parameter output arrays to Raw Outputs.$N"
				    "$N"
				    "";
				N: XIC(Mapped_BNI_EIP_502_Data.O.Data.0)OTE(BNI_EIP_502_Raw_Output_Data[0].0);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Data.1)OTE(BNI_EIP_502_Raw_Output_Data[0].1);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Data.2)OTE(BNI_EIP_502_Raw_Output_Data[0].2);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Data.3)OTE(BNI_EIP_502_Raw_Output_Data[0].3);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Data.4)OTE(BNI_EIP_502_Raw_Output_Data[0].4);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Data.5)OTE(BNI_EIP_502_Raw_Output_Data[0].5);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Data.6)OTE(BNI_EIP_502_Raw_Output_Data[0].6);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Data.7)OTE(BNI_EIP_502_Raw_Output_Data[0].7);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Data.8)OTE(BNI_EIP_502_Raw_Output_Data[1].0);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Data.9)OTE(BNI_EIP_502_Raw_Output_Data[1].1);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Data.10)OTE(BNI_EIP_502_Raw_Output_Data[1].2);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Data.11)OTE(BNI_EIP_502_Raw_Output_Data[1].3);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Data.12)OTE(BNI_EIP_502_Raw_Output_Data[1].4);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Data.13)OTE(BNI_EIP_502_Raw_Output_Data[1].5);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Data.14)OTE(BNI_EIP_502_Raw_Output_Data[1].6);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Data.15)OTE(BNI_EIP_502_Raw_Output_Data[1].7);
				RC: "$N"
				    "The next 16 rungs write the defined Parameter Restart arrays to Raw Outputs.$N"
				    "$N"
				    "";
				N: XIC(Mapped_BNI_EIP_502_Data.O.Restart.0)OTE(BNI_EIP_502_Raw_Output_Data[2].0);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Restart.1)OTE(BNI_EIP_502_Raw_Output_Data[2].1);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Restart.2)OTE(BNI_EIP_502_Raw_Output_Data[2].2);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Restart.3)OTE(BNI_EIP_502_Raw_Output_Data[2].3);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Restart.4)OTE(BNI_EIP_502_Raw_Output_Data[2].4);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Restart.5)OTE(BNI_EIP_502_Raw_Output_Data[2].5);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Restart.6)OTE(BNI_EIP_502_Raw_Output_Data[2].6);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Restart.7)OTE(BNI_EIP_502_Raw_Output_Data[2].7);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Restart.8)OTE(BNI_EIP_502_Raw_Output_Data[3].0);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Restart.9)OTE(BNI_EIP_502_Raw_Output_Data[3].1);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Restart.10)OTE(BNI_EIP_502_Raw_Output_Data[3].2);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Restart.11)OTE(BNI_EIP_502_Raw_Output_Data[3].3);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Restart.12)OTE(BNI_EIP_502_Raw_Output_Data[3].4);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Restart.13)OTE(BNI_EIP_502_Raw_Output_Data[3].5);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Restart.14)OTE(BNI_EIP_502_Raw_Output_Data[3].6);
				N: XIC(Mapped_BNI_EIP_502_Data.O.Restart.15)OTE(BNI_EIP_502_Raw_Output_Data[3].7);
				RC: "$N"
				    "This rung writes the defined Parameter Red Display LED to its Raw Output.$N"
				    "$N"
				    "";
				N: XIC(Mapped_BNI_EIP_502_Data.O.Display_RED)OTE(BNI_EIP_502_Raw_Output_Data[5].0);
				RC: "$N"
				    "This rung writes the defined Parameter Green Display LED to its Raw Output.$N"
				    "$N"
				    "";
				N: XIC(Mapped_BNI_EIP_502_Data.O.Display_GREEN)OTE(BNI_EIP_502_Raw_Output_Data[5].1);
				RC: "$N"
				    "This rung writes the defined Parameter Display Lock to its Raw Output.$N"
				    "$N"
				    "";
				N: XIC(Mapped_BNI_EIP_502_Data.O.Display_LOCK)OTE(BNI_EIP_502_Raw_Output_Data[5].2);
				RC: "This rung sets the four configurable ports based on the values of Port_x_Function$N"
				    "$N"
				    "**IMPORTANT - Power to the BNI EIP-502 module must be cycled for any change in port function to take effect.**";
				N: [CPT(BNI_EIP_502_Raw_Config_Data[0],(Mapped_BNI_EIP_502_Data.C.Port_1_Function*16)+(Mapped_BNI_EIP_502_Data.C.Port_2_Function*64)) ,CPT(BNI_EIP_502_Raw_Config_Data[1],(Mapped_BNI_EIP_502_Data.C.Port_3_Function*16)+(Mapped_BNI_EIP_502_Data.C.Port_4_Function*64)) ];
				RC: "This rung maps the configuration values to the raw data for Port 1.$N"
				    "These values include Enable Upload/Download/ParamterSvr;$N"
				    "Validation Type, Cycle Time, Vendor ID, Device ID and Serial Number.";
				N: [XIC(Mapped_BNI_EIP_502_Data.C.Enable_Upload_Port_1) OTE(BNI_EIP_502_Raw_Config_Data[25].0) ,XIC(Mapped_BNI_EIP_502_Data.C.Enable_Download_Port_1) OTE(BNI_EIP_502_Raw_Config_Data[25].1) ,XIC(Mapped_BNI_EIP_502_Data.C.Enable_Parameter_Server_Port_1) OTE(BNI_EIP_502_Raw_Config_Data[25].7) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_1_Validation_Type,BNI_EIP_502_Raw_Config_Data[3]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_1_Cycle_Time,BNI_EIP_502_Raw_Config_Data[2]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_1_Vendor_ID_1,BNI_EIP_502_Raw_Config_Data[4]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_1_Vendor_ID_2,BNI_EIP_502_Raw_Config_Data[5]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_1_Device_ID_1,BNI_EIP_502_Raw_Config_Data[6]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_1_Device_ID_2,BNI_EIP_502_Raw_Config_Data[7]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_1_Device_ID_3,BNI_EIP_502_Raw_Config_Data[8]) ,COP(Mapped_BNI_EIP_502_Data.C.Port_1_Serial_Number[0],BNI_EIP_502_Raw_Config_Data[9],16) ];
				RC: "This rung maps the configuration values to the raw data for Port 2.$N"
				    "These values include Enable Upload/Download/ParamterSvr;$N"
				    "Validation Type, Cycle Time, Vendor ID, Device ID and Serial Number.";
				N: [XIC(Mapped_BNI_EIP_502_Data.C.Enable_Upload_Port_2) OTE(BNI_EIP_502_Raw_Config_Data[49].0) ,XIC(Mapped_BNI_EIP_502_Data.C.Enable_Download_Port_2) OTE(BNI_EIP_502_Raw_Config_Data[49].1) ,XIC(Mapped_BNI_EIP_502_Data.C.Enable_Parameter_Server_Port_2) OTE(BNI_EIP_502_Raw_Config_Data[49].7) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_2_Cycle_Time,BNI_EIP_502_Raw_Config_Data[26]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_2_Validation_Type,BNI_EIP_502_Raw_Config_Data[27]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_2_Vendor_ID_1,BNI_EIP_502_Raw_Config_Data[28]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_2_Vendor_ID_2,BNI_EIP_502_Raw_Config_Data[29]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_2_Device_ID_1,BNI_EIP_502_Raw_Config_Data[30]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_2_Device_ID_2,BNI_EIP_502_Raw_Config_Data[31]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_2_Device_ID_3,BNI_EIP_502_Raw_Config_Data[32]) ,COP(Mapped_BNI_EIP_502_Data.C.Port_2_Serial_Number[0],BNI_EIP_502_Raw_Config_Data[33],16) ];
				RC: "This rung maps the configuration values to the raw data for Port 3.$N"
				    "These values include Enable Upload/Download/ParamterSvr;$N"
				    "Validation Type, Cycle Time, Vendor ID, Device ID and Serial Number.";
				N: [XIC(Mapped_BNI_EIP_502_Data.C.Enable_Upload_Port_3) OTE(BNI_EIP_502_Raw_Config_Data[73].0) ,XIC(Mapped_BNI_EIP_502_Data.C.Enable_Download_Port_3) OTE(BNI_EIP_502_Raw_Config_Data[73].1) ,XIC(Mapped_BNI_EIP_502_Data.C.Enable_Parameter_Server_Port_3) OTE(BNI_EIP_502_Raw_Config_Data[73].7) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_3_Cycle_Time,BNI_EIP_502_Raw_Config_Data[50]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_3_Validation_Type,BNI_EIP_502_Raw_Config_Data[51]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_3_Vendor_ID_1,BNI_EIP_502_Raw_Config_Data[52]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_3_Vendor_ID_2,BNI_EIP_502_Raw_Config_Data[53]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_3_Device_ID_1,BNI_EIP_502_Raw_Config_Data[54]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_3_Device_ID_2,BNI_EIP_502_Raw_Config_Data[55]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_3_Device_ID_3,BNI_EIP_502_Raw_Config_Data[56]) ,COP(Mapped_BNI_EIP_502_Data.C.Port_3_Serial_Number[0],BNI_EIP_502_Raw_Config_Data[57],16) ];
				RC: "This rung maps the configuration values to the raw data for Port 4.$N"
				    "These values include Enable Upload/Download/ParamterSvr;$N"
				    "Validation Type, Cycle Time, Vendor ID, Device ID and Serial Number.";
				N: [XIC(Mapped_BNI_EIP_502_Data.C.Enable_Upload_Port_4) OTE(BNI_EIP_502_Raw_Config_Data[97].0) ,XIC(Mapped_BNI_EIP_502_Data.C.Enable_Download_Port_4) OTE(BNI_EIP_502_Raw_Config_Data[97].1) ,XIC(Mapped_BNI_EIP_502_Data.C.Enable_Parameter_Server_Port_4) OTE(BNI_EIP_502_Raw_Config_Data[97].7) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_4_Cycle_Time,BNI_EIP_502_Raw_Config_Data[74]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_4_Validation_Type,BNI_EIP_502_Raw_Config_Data[75]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_4_Vendor_ID_1,BNI_EIP_502_Raw_Config_Data[76]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_4_Vendor_ID_2,BNI_EIP_502_Raw_Config_Data[77]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_4_Device_ID_1,BNI_EIP_502_Raw_Config_Data[78]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_4_Device_ID_2,BNI_EIP_502_Raw_Config_Data[79]) ,MOV(Mapped_BNI_EIP_502_Data.C.Port_4_Device_ID_3,BNI_EIP_502_Raw_Config_Data[80]) ,COP(Mapped_BNI_EIP_502_Data.C.Port_4_Serial_Number[0],BNI_EIP_502_Raw_Config_Data[81],16) ];
				RC: "$N"
				    "Distribute Accumulated Output data for each Port into a single defined Parameter by using offsets (5, 37, 69 and 101).$N"
				    "$N"
				    "";
				N: [COP(BNI_EIP_502_Port_1_Data.Outputs[0],BNI_EIP_502_Raw_Output_Data[6],32) ,COP(BNI_EIP_502_Port_2_Data.Outputs[0],BNI_EIP_502_Raw_Output_Data[38],32) ,COP(BNI_EIP_502_Port_3_Data.Outputs[0],BNI_EIP_502_Raw_Output_Data[70],32) ,COP(BNI_EIP_502_Port_4_Data.Outputs[0],BNI_EIP_502_Raw_Output_Data[102],32) ];
				RC: "$N"
				    "The next four rungs map diagnostic bits for Ports 1-4 to:$N"
				    "IO-Link Status, Device Connected and Validation Failed$N"
				    "";
				N: [XIC(BNI_EIP_502_Raw_Input_Data[40].0) OTE(Mapped_BNI_EIP_502_Data.I.Port_1_IO_Link_Status) ,XIC(BNI_EIP_502_Raw_Input_Data[40].1) OTE(Mapped_BNI_EIP_502_Data.I.Port_1_Device_Connected) ,XIC(BNI_EIP_502_Raw_Input_Data[41].0) OTE(Mapped_BNI_EIP_502_Data.I.Port_1_Validation_Failed) ];
				N: [XIC(BNI_EIP_502_Raw_Input_Data[88].0) OTE(Mapped_BNI_EIP_502_Data.I.Port_2_IO_Link_Status) ,XIC(BNI_EIP_502_Raw_Input_Data[88].1) OTE(Mapped_BNI_EIP_502_Data.I.Port_2_Device_Connected) ,XIC(BNI_EIP_502_Raw_Input_Data[89].0) OTE(Mapped_BNI_EIP_502_Data.I.Port_2_Validation_Failed) ];
				N: [XIC(BNI_EIP_502_Raw_Input_Data[136].0) OTE(Mapped_BNI_EIP_502_Data.I.Port_3_IO_Link_Status) ,XIC(BNI_EIP_502_Raw_Input_Data[136].1) OTE(Mapped_BNI_EIP_502_Data.I.Port_3_Device_Connected) ,XIC(BNI_EIP_502_Raw_Input_Data[137].0) OTE(Mapped_BNI_EIP_502_Data.I.Port_3_Validation_Failed) ];
				N: [XIC(BNI_EIP_502_Raw_Input_Data[184].0) OTE(Mapped_BNI_EIP_502_Data.I.Port_4_IO_Link_Status) ,XIC(BNI_EIP_502_Raw_Input_Data[184].1) OTE(Mapped_BNI_EIP_502_Data.I.Port_4_Device_Connected) ,XIC(BNI_EIP_502_Raw_Input_Data[185].0) OTE(Mapped_BNI_EIP_502_Data.I.Port_4_Validation_Failed) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION AOI_BNI006A_50_31_040 (Description := "BNI EIP-508-105-Z015",
	                                                     Class := Standard,
	                                                     Revision := "0.4",
	                                                     Vendor := "Balluff Inc",
	                                                     ExecutePrescan := No,
	                                                     ExecutePostscan := No,
	                                                     ExecuteEnableInFalse := No,
	                                                     CreatedDate := "2010-12-10T15:19:55.163Z",
	                                                     CreatedBy := "US\harmonj",
	                                                     EditedDate := "2022-01-05T16:13:14.161Z",
	                                                     EditedBy := "LUCID\DanWeinhold",
	                                                     SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			BNI_EIP_508_Raw_Input_Data : SINT[392] (COMMENT[0].0 := "Input$NPort 0$NPin 4",
			                                      COMMENT[0].1 := "Input$NPort 0$NPin 2",
			                                      COMMENT[0].2 := "Input$NPort 1$NPin 4",
			                                      COMMENT[0].3 := "Input$NPort 1$NPin 2",
			                                      COMMENT[0].4 := "Input$NPort 2$NPin 4",
			                                      COMMENT[0].5 := "Input$NPort 2$NPin 2",
			                                      COMMENT[0].6 := "Input$NPort 3$NPin 4",
			                                      COMMENT[0].7 := "Input$NPort 3$NPin 2",
			                                      COMMENT[1].0 := "Input$NPort 4$NPin 4",
			                                      COMMENT[1].1 := "Input$NPort 4$NPin 2",
			                                      COMMENT[1].2 := "Input$NPort 5$NPin 4",
			                                      COMMENT[1].3 := "Input$NPort 5$NPin 2",
			                                      COMMENT[1].4 := "Input$NPort 6$NPin 4",
			                                      COMMENT[1].5 := "Input$NPort 6$NPin 2",
			                                      COMMENT[1].6 := "Input$NPort 7$NPin 4",
			                                      COMMENT[1].7 := "Input$NPort 7$NPin 2",
			                                      COMMENT[2].0 := "Port 0 Pin 4$NShort Circuit",
			                                      COMMENT[2].1 := "Port 0 Pin 2$NShort Circuit",
			                                      COMMENT[2].2 := "Port 1 Pin 4$NShort Circuit",
			                                      COMMENT[2].3 := "Port 1 Pin 2$NShort Circuit",
			                                      COMMENT[2].4 := "Port 2 Pin 4$NShort Circuit",
			                                      COMMENT[2].5 := "Port 2 Pin 2$NShort Circuit",
			                                      COMMENT[2].6 := "Port 3 Pin 4$NShort Circuit",
			                                      COMMENT[2].7 := "Port 3 Pin 2$NShort Circuit",
			                                      COMMENT[3].0 := "Port 4 Pin 4$NShort Circuit",
			                                      COMMENT[3].1 := "Port 4 Pin 2$NShort Circuit",
			                                      COMMENT[3].2 := "Port 5 Pin 4$NShort Circuit",
			                                      COMMENT[3].3 := "Port 5 Pin 2$NShort Circuit",
			                                      COMMENT[3].4 := "Port 6 Pin 4$NShort Circuit",
			                                      COMMENT[3].5 := "Port 6 Pin 2$NShort Circuit",
			                                      COMMENT[3].6 := "Port 7 Pin 4$NShort Circuit",
			                                      COMMENT[3].7 := "Port 7 Pin 2$NShort Circuit",
			                                      COMMENT[4].0 := "Port 0 Pin 4$NOutput Overload Status",
			                                      COMMENT[4].1 := "Port 0 Pin 2$NOutput Overload Status",
			                                      COMMENT[4].2 := "Port 1 Pin 4$NOutput Overload Status",
			                                      COMMENT[4].3 := "Port 1 Pin 2$NOutput Overload Status",
			                                      COMMENT[4].4 := "Port 2 Pin 4$NOutput Overload Status",
			                                      COMMENT[4].5 := "Port 2 Pin 2$NOutput Overload Status",
			                                      COMMENT[4].6 := "Port 3 Pin 4$NOutput Overload Status",
			                                      COMMENT[4].7 := "Port 3 Pin 2$NOutput Overload Status",
			                                      COMMENT[5].0 := "Port 4 Pin 4$NOutput Overload Status",
			                                      COMMENT[5].1 := "Port 4 Pin 2$NOutput Overload Status",
			                                      COMMENT[5].2 := "Port 5 Pin 4$NOutput Overload Status",
			                                      COMMENT[5].3 := "Port 5 Pin 2$NOutput Overload Status",
			                                      COMMENT[5].4 := "Port 6 Pin 4$NOutput Overload Status",
			                                      COMMENT[5].5 := "Port 6 Pin 2$NOutput Overload Status",
			                                      COMMENT[5].6 := "Port 7 Pin 4$NOutput Overload Status",
			                                      COMMENT[5].7 := "Port 7 Pin 2$NOutput Overload Status",
			                                      COMMENT[6].0 := "Output Power from$NAux Power cable$NUnder Voltage",
			                                      COMMENT[6].1 := "Module Power$Nfrom IO-Link Communication Cable$NUnder Voltage",
			                                      COMMENT[6].2 := "Not used",
			                                      COMMENT[6].3 := "Not used",
			                                      COMMENT[6].4 := "Not used",
			                                      COMMENT[6].5 := "Not used",
			                                      COMMENT[6].6 := "Not used",
			                                      COMMENT[6].7 := "Not used",
			                                      COMMENT[7] := "Port 1 Input Byte 0",
			                                      COMMENT[8] := "Port 1 Input Byte 1",
			                                      COMMENT[9] := "Port 1 Input Byte 2",
			                                      COMMENT[10] := "Port 1 Input Byte 3",
			                                      COMMENT[11] := "Port 1 Input Byte 4",
			                                      COMMENT[32].0 := "Port 1$NEP bit$NEvent Present",
			                                      COMMENT[32].1 := "Reserved",
			                                      COMMENT[32].2 := "Reserved",
			                                      COMMENT[32].3 := "Reserved",
			                                      COMMENT[32].4 := "Reserved",
			                                      COMMENT[32].5 := "Port 1$NVF bit$NValidation Failed",
			                                      COMMENT[32].6 := "Port 1$NDC bit$NDevice Connected",
			                                      COMMENT[32].7 := "Port 1$NIOL bit$NPort in IO-Link Mode",
			                                      COMMENT[33].0 := "Reserved",
			                                      COMMENT[33].1 := "Reserved",
			                                      COMMENT[33].2 := "Reserved",
			                                      COMMENT[33].3 := "Reserved",
			                                      COMMENT[33].4 := "Reserved",
			                                      COMMENT[33].5 := "Reserved",
			                                      COMMENT[33].6 := "Reserved",
			                                      COMMENT[33].7 := "Reserved",
			                                      COMMENT[34] := "Port 1$NVendor ID Number$NByte 1 (High byte)",
			                                      COMMENT[35] := "Port 1$NVendor ID Number$NByte 2 (Middle byte)",
			                                      COMMENT[36] := "Port 1$NVendor ID Number$NByte 3 (Low byte)",
			                                      COMMENT[37] := "Port 1$NDevice ID Number$NByte 1 (High byte)",
			                                      COMMENT[38] := "Port 1$NDevice ID Number$NByte 2 (Middle byte)",
			                                      COMMENT[39] := "Port 1$NDevice ID Number$NByte 3 (Low byte)",
			                                      COMMENT[40].0 := "Port 1$NIn I/O Link$NMode",
			                                      COMMENT[40].1 := "Port 1$NI/O Link$NDevice Connected",
			                                      COMMENT[41].0 := "Port 1$NI/O Link$NDevice Configuration$NMismatch",
			                                      COMMENT[52] := "Port 1 Input Byte 46",
			                                      COMMENT[53] := "Port 1 Input Byte 47",
			                                      COMMENT[54] := "Port 1 Input Byte 48",
			                                      COMMENT[55] := "Port 2 Input Byte 0",
			                                      COMMENT[56] := "Port 2 Input Byte 1",
			                                      COMMENT[57] := "Port 2 Input Byte 2",
			                                      COMMENT[58] := "Port 2 Input Byte 3",
			                                      COMMENT[59] := "Port 2 Input Byte 4",
			                                      COMMENT[88].0 := "Port 2$NIn I/O Link$NMode",
			                                      COMMENT[88].1 := "Port 2$NI/O Link$NDevice Connected",
			                                      COMMENT[89].0 := "Port 2$NI/O Link$NDevice Configuration$NMismatch",
			                                      COMMENT[100] := "Port 2 Input Byte 46",
			                                      COMMENT[101] := "Port 2 Input Byte 47",
			                                      COMMENT[102] := "Port 2 Input Byte 48",
			                                      COMMENT[103] := "Port 3 Input Byte 0",
			                                      COMMENT[104] := "Port 3 Input Byte 1",
			                                      COMMENT[105] := "Port 3 Input Byte 2",
			                                      COMMENT[106] := "Port 3 Input Byte 3",
			                                      COMMENT[107] := "Port 3 Input Byte 4",
			                                      COMMENT[136].0 := "Port 3$NIn I/O Link$NMode",
			                                      COMMENT[136].1 := "Port 3$NI/O Link$NDevice Connected",
			                                      COMMENT[137].0 := "Port 3$NI/O Link$NDevice Configuration$NMismatch",
			                                      COMMENT[148] := "Port 3 Input Byte 46",
			                                      COMMENT[149] := "Port 3 Input Byte 47",
			                                      COMMENT[150] := "Port 3 Input Byte 48",
			                                      COMMENT[151] := "Port 4 Input Byte 0",
			                                      COMMENT[152] := "Port 4 Input Byte 1",
			                                      COMMENT[153] := "Port 4 Input Byte 2",
			                                      COMMENT[154] := "Port 4 Input Byte 3",
			                                      COMMENT[184].0 := "Port 4$NIn I/O Link$NMode",
			                                      COMMENT[184].1 := "Port 4$NI/O Link$NDevice Connected",
			                                      COMMENT[185].0 := "Port 4$NI/O Link$NDevice Configuration$NMismatch",
			                                      COMMENT[196] := "Port 4 Input Byte 46",
			                                      COMMENT[197] := "Port 4 Input Byte 47",
			                                      COMMENT[198] := "Port 4 Input Byte 48",
			                                      Usage := InOut,
			                                      RADIX := Decimal,
			                                      Required := Yes,
			                                      Visible := Yes);
			BNI_EIP_508_Raw_Output_Data : SINT[262] (COMMENT[0].0 := "Output$NPort 0$NPin 4",
			                                       COMMENT[0].1 := "Output$NPort 0$NPin 2",
			                                       COMMENT[0].2 := "Output$NPort 1$NPin 4",
			                                       COMMENT[0].3 := "Output$NPort 1$NPin 2",
			                                       COMMENT[0].4 := "Output$NPort 2$NPin 4",
			                                       COMMENT[0].5 := "Output$NPort 2$NPin 2",
			                                       COMMENT[0].6 := "Output$NPort 3$NPin 4",
			                                       COMMENT[0].7 := "Output$NPort 3$NPin 2",
			                                       COMMENT[1].0 := "Output$NPort 4$NPin 4",
			                                       COMMENT[1].1 := "Output$NPort 4$NPin 2",
			                                       COMMENT[1].2 := "Output$NPort 5$NPin 4",
			                                       COMMENT[1].3 := "Output$NPort 5$NPin 2",
			                                       COMMENT[1].4 := "Output$NPort 6$NPin 4",
			                                       COMMENT[1].5 := "Output$NPort 6$NPin 2",
			                                       COMMENT[1].6 := "Output$NPort 7$NPin 4",
			                                       COMMENT[1].7 := "Output$NPort 7$NPin 2",
			                                       COMMENT[2].0 := "Port 0$NPin 4$NOutput Restart",
			                                       COMMENT[2].1 := "Port 0$NPin 2$NOutput Restart",
			                                       COMMENT[2].2 := "Port 1$NPin 4$NOutput Restart",
			                                       COMMENT[2].3 := "Port 1$NPin 2$NOutput Restart",
			                                       COMMENT[2].4 := "Port 2$NPin 4$NOutput Restart",
			                                       COMMENT[2].5 := "Port 2$NPin 2$NOutput Restart",
			                                       COMMENT[2].6 := "Port 3$NPin 4$NOutput Restart",
			                                       COMMENT[2].7 := "Port 3$NPin 2$NOutput Restart",
			                                       COMMENT[3].0 := "Port 4$NPin 4$NOutput Restart",
			                                       COMMENT[3].1 := "Port 4$NPin 2$NOutput Restart",
			                                       COMMENT[3].2 := "Port 5$NPin 4$NOutput Restart",
			                                       COMMENT[3].3 := "Port 5$NPin 2$NOutput Restart",
			                                       COMMENT[3].4 := "Port 6$NPin 4$NOutput Restart",
			                                       COMMENT[3].5 := "Port 6$NPin 2$NOutput Restart",
			                                       COMMENT[3].6 := "Port 7$NPin 4$NOutput Restart",
			                                       COMMENT[3].7 := "Port 7$NPin 2$NOutput Restart",
			                                       COMMENT[4].0 := "Red LED$NDisplay$NOutput",
			                                       COMMENT[4].1 := "Green LED$NDisplay$NOutput",
			                                       COMMENT[4].2 := "Lock$NDisplay$NOutput",
			                                       COMMENT[5] := "Port 1$NOutput Data$NByte 0",
			                                       COMMENT[6] := "Port 1$NOutput Data$NByte 1",
			                                       COMMENT[7] := "Port 1$NOutput Data$NByte 2",
			                                       COMMENT[8] := "Port 1$NOutput Data$NByte 3",
			                                       COMMENT[9] := "Port 1$NOutput Data$NByte 4",
			                                       COMMENT[10] := "Port 1$NOutput Data$NByte 5",
			                                       COMMENT[11] := "Port 1$NOutput Data$NByte 6",
			                                       COMMENT[12] := "Port 1$NOutput Data$NByte 7",
			                                       COMMENT[13] := "Port 1$NOutput Data$NByte 8",
			                                       COMMENT[14] := "Port 1$NOutput Data$NByte 9",
			                                       COMMENT[15] := "Port 1$NOutput Data$NByte 10",
			                                       COMMENT[16] := "Port 1$NOutput Data$NByte 11",
			                                       COMMENT[17] := "Port 1$NOutput Data$NByte 12",
			                                       COMMENT[18] := "Port 1$NOutput Data$NByte 13",
			                                       COMMENT[19] := "Port 1$NOutput Data$NByte 14",
			                                       COMMENT[20] := "Port 1$NOutput Data$NByte 15",
			                                       COMMENT[21] := "Port 1$NOutput Data$NByte 16",
			                                       COMMENT[22] := "Port 1$NOutput Data$NByte 17",
			                                       COMMENT[23] := "Port 1$NOutput Data$NByte 18",
			                                       COMMENT[24] := "Port 1$NOutput Data$NByte 19",
			                                       COMMENT[25] := "Port 1$NOutput Data$NByte 20",
			                                       COMMENT[26] := "Port 1$NOutput Data$NByte 21",
			                                       COMMENT[27] := "Port 1$NOutput Data$NByte 22",
			                                       COMMENT[28] := "Port 1$NOutput Data$NByte 23",
			                                       COMMENT[29] := "Port 1$NOutput Data$NByte 24",
			                                       COMMENT[30] := "Port 1$NOutput Data$NByte 25",
			                                       COMMENT[31] := "Port 1$NOutput Data$NByte 26",
			                                       COMMENT[32] := "Port 1$NOutput Data$NByte 27",
			                                       COMMENT[33] := "Port 1$NOutput Data$NByte 28",
			                                       COMMENT[34] := "Port 1$NOutput Data$NByte 29",
			                                       COMMENT[35] := "Port 1$NOutput Data$NByte 30",
			                                       COMMENT[36] := "Port 1$NOutput Data$NByte 31",
			                                       COMMENT[37] := "Port 2$NOutput Data$NByte 0",
			                                       COMMENT[38] := "Port 2$NOutput Data$NByte 1",
			                                       COMMENT[69] := "Port 3$NOutput Data$NByte 0",
			                                       COMMENT[70] := "Port 3$NOutput Data$NByte 1",
			                                       COMMENT[101] := "Port 4$NOutput Data$NByte 0",
			                                       COMMENT[102] := "Port 4$NOutput Data$NByte 1",
			                                       Usage := InOut,
			                                       RADIX := Decimal,
			                                       Required := Yes,
			                                       Visible := Yes);
			BNI_EIP_508_Raw_Config_Data : SINT[194] (COMMENT[0] := "Port 1(Bits 0_1)$NPort 2 (Bits 2_3)$NPort 3 (Bits 4_5)$NPort 4 (Bits 6_7)$NFunction$N00d=0x00=Standrd I/O$N01d=0x01=IO-Link Mod$N02d=0x02=Fallback Md",
			                                       COMMENT[1] := "Port 5 (Bits 0_1)$NPort 6 (Bits 2_3)$NPort 7 (Bits 4_5)$NPort 8 (Bits 6_7)$NFunction$NFunction$N00d=0x00=Standrd I/O$N01d=0x01=IO-Link Mod$N02d=0x02=Fallback Md",
			                                       COMMENT[2].0 := "Parameter$NData Conflict",
			                                       COMMENT[2].1 := "Enable$NParameter$NUpload",
			                                       COMMENT[2].2 := "Enable$NParameter$NDownload",
			                                       COMMENT[2].7 := "Enable$NParameter$NServer",
			                                       COMMENT[3] := "RESERVED",
			                                       COMMENT[4] := "Port 1 IO-Link$NCycle Time$NTime (Bytes 5-0)$NBase (Bytes 7-6)",
			                                       COMMENT[5] := "Port 1$NVendor ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[6] := "Port 1$NVendor ID Number$NByte 2$NLow Byte",
			                                       COMMENT[7] := "Port 1$NDevice ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[8] := "Port 1$NDevice ID Number$NByte 2$NMiddle Byte",
			                                       COMMENT[9] := "Port 1$NDevice ID Number$NByte 3$NLow Byte",
			                                       COMMENT[10] := "Port 2 IO-Link$NCycle Time$NTime (Bytes 5-0)$NBase (Bytes 7-6)",
			                                       COMMENT[11] := "Port 2$NVendor ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[12] := "Port 2$NVendor ID Number$NByte 2$NLow Byte",
			                                       COMMENT[13] := "Port 2$NDevice ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[14] := "Port 2$NDevice ID Number$NByte 2$NMiddle Byte",
			                                       COMMENT[15] := "Port 2$NDevice ID Number$NByte 3$NLow Byte",
			                                       COMMENT[16] := "Port 3 IO-Link$NCycle Time$NTime (Bytes 5-0)$NBase (Bytes 7-6)",
			                                       COMMENT[17] := "Port 3$NVendor ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[18] := "Port 3$NVendor ID Number$NByte 2$NLow Byte",
			                                       COMMENT[19] := "Port 3$NDevice ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[20] := "Port 3$NDevice ID Number$NByte 2$NMiddle Byte",
			                                       COMMENT[21] := "Port 3$NDevice ID Number$NByte 3$NLow Byte",
			                                       COMMENT[22] := "Port 4 IO-Link$NCycle Time$NTime (Bytes 5-0)$NBase (Bytes 7-6)",
			                                       COMMENT[23] := "Port 4$NVendor ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[24] := "Port 4$NVendor ID Number$NByte 2$NLow Byte",
			                                       COMMENT[25] := "Port 1 Enable",
			                                       COMMENT[25].1 := "Port 1 Enable$NUpload Parameters",
			                                       COMMENT[25].2 := "Port 1 Enable$NDownload Parameters",
			                                       COMMENT[25].7 := "Port 1 Enable$NParameters Server",
			                                       COMMENT[26] := "Port 4$NDevice ID Number$NByte 2$NMiddle Byte",
			                                       COMMENT[27] := "Port 4$NDevice ID Number$NByte 3$NLow Byte",
			                                       COMMENT[49].1 := "Port 2 Enable$NUpload Parameters",
			                                       COMMENT[49].2 := "Port 2 Enable$NDownload Parameters",
			                                       COMMENT[49].7 := "Port 2 Enable$NParameters Server",
			                                       COMMENT[73].1 := "Port 3 Enable$NUpload Parameters",
			                                       COMMENT[73].2 := "Port 3 Enable$NDownload Parameters",
			                                       COMMENT[73].7 := "Port 3 Enable$NParameters Server",
			                                       COMMENT[97].1 := "Port 4 Enable$NUpload Parameters",
			                                       COMMENT[97].2 := "Port 4 Enable$NDownload Parameters",
			                                       COMMENT[97].7 := "Port 4 Enable$NParameters Server",
			                                       Usage := InOut,
			                                       RADIX := Decimal,
			                                       Required := Yes,
			                                       Visible := Yes);
			BNI_EIP_508_Port_1_Data : IO_Link_Port_Data (COMMENT.INPUTS[0] := "Port 1$NInput Data",
			                                   Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
			BNI_EIP_508_Port_2_Data : IO_Link_Port_Data (COMMENT.INPUTS[0] := "Port 2$NInput Data",
			                                   Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
			BNI_EIP_508_Port_3_Data : IO_Link_Port_Data (COMMENT.INPUTS[0] := "Port 3$NInput Data",
			                                   Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
			BNI_EIP_508_Port_4_Data : IO_Link_Port_Data (COMMENT.INPUTS[0] := "Port 4$NInput Data",
			                                   Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
			BNI_EIP_508_Port_5_Data : IO_Link_Port_Data (Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
			BNI_EIP_508_Port_6_Data : IO_Link_Port_Data (Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
			BNI_EIP_508_Port_7_Data : IO_Link_Port_Data (Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
			BNI_EIP_508_Port_8_Data : IO_Link_Port_Data (Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
			Mapped_BNI_EIP_508_Data : UDT_BNI006A_50_31_040 (COMMENT.I.DATA.0 := "Input$NPort 0$NPin 4",
			                                   COMMENT.I.DATA.1 := "Input$NPort 0$NPin 2",
			                                   COMMENT.I.DATA.2 := "Input$NPort 1$NPin 4",
			                                   COMMENT.I.DATA.3 := "Input$NPort 1$NPin 2",
			                                   COMMENT.I.DATA.4 := "Input$NPort 2$NPin 4",
			                                   COMMENT.I.DATA.5 := "Input$NPort 2$NPin 2",
			                                   COMMENT.I.DATA.6 := "Input$NPort 3$NPin 4",
			                                   COMMENT.I.DATA.7 := "Input$NPort 3$NPin 2",
			                                   COMMENT.I.DATA.8 := "Input$NPort 4$NPin 4",
			                                   COMMENT.I.DATA.9 := "Input$NPort 4$NPin 2",
			                                   COMMENT.I.DATA.10 := "Input$NPort 5$NPin 4",
			                                   COMMENT.I.DATA.11 := "Input$NPort 5$NPin 2",
			                                   COMMENT.I.DATA.12 := "Input$NPort 6$NPin 4",
			                                   COMMENT.I.DATA.13 := "Input$NPort 6$NPin 2",
			                                   COMMENT.I.DATA.14 := "Input$NPort 7$NPin 4",
			                                   COMMENT.I.DATA.15 := "Input$NPort 7$NPin 2",
			                                   COMMENT.I.SHORT_CIRCUIT.0 := "Port 0 Pin 4$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.1 := "Port 0 Pin 2$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.2 := "Port 1 Pin 4$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.3 := "Port 1 Pin 2$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.4 := "Port 2 Pin 4$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.5 := "Port 2 Pin 2$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.6 := "Port 3 Pin 4$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.7 := "Port 3 Pin 2$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.8 := "Port 4 Pin 4$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.9 := "Port 4 Pin 2$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.10 := "Port 5 Pin 4$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.11 := "Port 5 Pin 2$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.12 := "Port 6 Pin 4$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.13 := "Port 6 Pin 2$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.14 := "Port 7 Pin 4$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.15 := "Port 7 Pin 2$NShort Circuit",
			                                   COMMENT.I.OVERLOAD.0 := "Port 0 Pin 4$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.1 := "Port 0 Pin 2$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.2 := "Port 1 Pin 4$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.3 := "Port 1 Pin 2$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.4 := "Port 2 Pin 4$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.5 := "Port 2 Pin 2$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.6 := "Port 3 Pin 4$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.7 := "Port 3 Pin 2$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.8 := "Port 4 Pin 4$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.9 := "Port 4 Pin 2$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.10 := "Port 5 Pin 4$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.11 := "Port 5 Pin 2$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.12 := "Port 6 Pin 4$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.13 := "Port 6 Pin 2$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.14 := "Port 7 Pin 4$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.15 := "Port 7 Pin 2$NOutput Overload Status",
			                                   COMMENT.I.UA_FAULT := "Output Power from$NAux Power cable$NUnder Voltage",
			                                   COMMENT.I.US_FAULT := "Module Power$Nfrom IO-Link Communication Cable$NUnder Voltage",
			                                   COMMENT.I.PORT_1_IO_LINK_STATUS := "Port 1$NIn I/O Link$NMode",
			                                   COMMENT.I.PORT_1_DEVICE_CONNECTED := "Port 1$NI/O Link$NDevice Connected",
			                                   COMMENT.I.PORT_1_VALIDATION_FAILED := "Port 1$NI/O Link$NDevice Configuration$NMismatch",
			                                   COMMENT.I.PORT_2_IO_LINK_STATUS := "Port 2$NIn I/O Link$NMode",
			                                   COMMENT.I.PORT_2_DEVICE_CONNECTED := "Port 2$NI/O Link$NDevice Connected",
			                                   COMMENT.I.PORT_2_VALIDATION_FAILED := "Port 2$NI/O Link$NDevice Configuration$NMismatch",
			                                   COMMENT.I.PORT_3_IO_LINK_STATUS := "Port 3$NIn I/O Link$NMode",
			                                   COMMENT.I.PORT_3_DEVICE_CONNECTED := "Port 3$NI/O Link$NDevice Connected",
			                                   COMMENT.I.PORT_3_VALIDATION_FAILED := "Port 3$NI/O Link$NDevice Configuration$NMismatch",
			                                   COMMENT.I.PORT_4_IO_LINK_STATUS := "Port 4$NIn I/O Link$NMode",
			                                   COMMENT.I.PORT_4_DEVICE_CONNECTED := "Port 4$NI/O Link$NDevice Connected",
			                                   COMMENT.I.PORT_4_VALIDATION_FAILED := "Port 4$NI/O Link$NDevice Configuration$NMismatch",
			                                   COMMENT.O.DATA.0 := "Output$NPort 0$NPin 4",
			                                   COMMENT.O.DATA.1 := "Output$NPort 0$NPin 2",
			                                   COMMENT.O.DATA.2 := "Output$NPort 1$NPin 4",
			                                   COMMENT.O.DATA.3 := "Output$NPort 1$NPin 2",
			                                   COMMENT.O.DATA.4 := "Output$NPort 2$NPin 4",
			                                   COMMENT.O.DATA.5 := "Output$NPort 2$NPin 2",
			                                   COMMENT.O.DATA.6 := "Output$NPort 3$NPin 4",
			                                   COMMENT.O.DATA.7 := "Output$NPort 3$NPin 2",
			                                   COMMENT.O.DATA.8 := "Output$NPort 4$NPin 4",
			                                   COMMENT.O.DATA.9 := "Output$NPort 4$NPin 2",
			                                   COMMENT.O.DATA.10 := "Output$NPort 5$NPin 4",
			                                   COMMENT.O.DATA.11 := "Output$NPort 5$NPin 2",
			                                   COMMENT.O.DATA.12 := "Output$NPort 6$NPin 4",
			                                   COMMENT.O.DATA.13 := "Output$NPort 6$NPin 2",
			                                   COMMENT.O.DATA.14 := "Output$NPort 7$NPin 4",
			                                   COMMENT.O.DATA.15 := "Output$NPort 7$NPin 2",
			                                   COMMENT.O.RESTART.0 := "Port 0$NPin 4$NOutput Restart",
			                                   COMMENT.O.RESTART.1 := "Port 0$NPin 2$NOutput Restart",
			                                   COMMENT.O.RESTART.2 := "Port 1$NPin 4$NOutput Restart",
			                                   COMMENT.O.RESTART.3 := "Port 1$NPin 2$NOutput Restart",
			                                   COMMENT.O.RESTART.4 := "Port 2$NPin 4$NOutput Restart",
			                                   COMMENT.O.RESTART.5 := "Port 2$NPin 2$NOutput Restart",
			                                   COMMENT.O.RESTART.6 := "Port 3$NPin 4$NOutput Restart",
			                                   COMMENT.O.RESTART.7 := "Port 3$NPin 2$NOutput Restart",
			                                   COMMENT.O.RESTART.8 := "Port 4$NPin 4$NOutput Restart",
			                                   COMMENT.O.RESTART.9 := "Port 4$NPin 2$NOutput Restart",
			                                   COMMENT.O.RESTART.10 := "Port 5$NPin 4$NOutput Restart",
			                                   COMMENT.O.RESTART.11 := "Port 5$NPin 2$NOutput Restart",
			                                   COMMENT.O.RESTART.12 := "Port 6$NPin 4$NOutput Restart",
			                                   COMMENT.O.RESTART.13 := "Port 6$NPin 2$NOutput Restart",
			                                   COMMENT.O.RESTART.14 := "Port 7$NPin 4$NOutput Restart",
			                                   COMMENT.O.RESTART.15 := "Port 7$NPin 2$NOutput Restart",
			                                   COMMENT.O.DISPLAY_RED := "Red LED$NOn",
			                                   COMMENT.O.DISPLAY_GREEN := "Green LED$NOn",
			                                   COMMENT.O.DISPLAY_LOCK := "Display Lock$NPLC Lock",
			                                   Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
			Clear_Parameter_Server_Port_1 : BOOL (RADIX := Decimal,
			                                        ExternalAccess := None,
			                                        DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "Copyright 2013 Balluff, Inc.$N"
				    "Licensed under the Apache License, Version 2.0 (the $QLicense$Q); you may$N"
				    "not use this file except in compliance with the License.  You may obtain$N"
				    "a copy of the License at:$N"
				    "http://www.apache.org/licenses/LICENSE-2.0$N"
				    "Unless required by applicable law or agreed to in writing, software$N"
				    "distributed under the License is distributed on an $QAS IS$Q BASIS$N"
				    "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or$N"
				    "implied.  See the License for the specific language governing$N"
				    "permissions and limitations under the License.";
				N: NOP();
				RC: "$N"
				    "Distribute Raw Input data into separate arrays for each port.$N"
				    "$N"
				    "";
				N: [COP(BNI_EIP_508_Raw_Input_Data[8],BNI_EIP_508_Port_1_Data.Inputs[0],48) ,COP(BNI_EIP_508_Raw_Input_Data[56],BNI_EIP_508_Port_2_Data.Inputs[0],48) ,COP(BNI_EIP_508_Raw_Input_Data[104],BNI_EIP_508_Port_3_Data.Inputs[0],48) ,COP(BNI_EIP_508_Raw_Input_Data[152],BNI_EIP_508_Port_4_Data.Inputs[0],48) ,COP(BNI_EIP_508_Raw_Input_Data[200],BNI_EIP_508_Port_5_Data.Inputs[0],48) ,COP(BNI_EIP_508_Raw_Input_Data[248],BNI_EIP_508_Port_6_Data.Inputs[0],48) ,COP(BNI_EIP_508_Raw_Input_Data[296],BNI_EIP_508_Port_7_Data.Inputs[0],48) ,COP(BNI_EIP_508_Raw_Input_Data[344],BNI_EIP_508_Port_8_Data.Inputs[0],48) ];
				RC: "$N"
				    "The next 16 rungs map the raw input data to defined Parameters.$N"
				    "$N"
				    "";
				N: XIC(BNI_EIP_508_Raw_Input_Data[0].0)OTE(Mapped_BNI_EIP_508_Data.I.Data.0);
				N: XIC(BNI_EIP_508_Raw_Input_Data[0].1)OTE(Mapped_BNI_EIP_508_Data.I.Data.1);
				N: XIC(BNI_EIP_508_Raw_Input_Data[0].2)OTE(Mapped_BNI_EIP_508_Data.I.Data.2);
				N: XIC(BNI_EIP_508_Raw_Input_Data[0].3)OTE(Mapped_BNI_EIP_508_Data.I.Data.3);
				N: XIC(BNI_EIP_508_Raw_Input_Data[0].4)OTE(Mapped_BNI_EIP_508_Data.I.Data.4);
				N: XIC(BNI_EIP_508_Raw_Input_Data[0].5)OTE(Mapped_BNI_EIP_508_Data.I.Data.5);
				N: XIC(BNI_EIP_508_Raw_Input_Data[0].6)OTE(Mapped_BNI_EIP_508_Data.I.Data.6);
				N: XIC(BNI_EIP_508_Raw_Input_Data[0].7)OTE(Mapped_BNI_EIP_508_Data.I.Data.7);
				N: XIC(BNI_EIP_508_Raw_Input_Data[1].0)OTE(Mapped_BNI_EIP_508_Data.I.Data.8);
				N: XIC(BNI_EIP_508_Raw_Input_Data[1].1)OTE(Mapped_BNI_EIP_508_Data.I.Data.9);
				N: XIC(BNI_EIP_508_Raw_Input_Data[1].2)OTE(Mapped_BNI_EIP_508_Data.I.Data.10);
				N: XIC(BNI_EIP_508_Raw_Input_Data[1].3)OTE(Mapped_BNI_EIP_508_Data.I.Data.11);
				N: XIC(BNI_EIP_508_Raw_Input_Data[1].4)OTE(Mapped_BNI_EIP_508_Data.I.Data.12);
				N: XIC(BNI_EIP_508_Raw_Input_Data[1].5)OTE(Mapped_BNI_EIP_508_Data.I.Data.13);
				N: XIC(BNI_EIP_508_Raw_Input_Data[1].6)OTE(Mapped_BNI_EIP_508_Data.I.Data.14);
				N: XIC(BNI_EIP_508_Raw_Input_Data[1].7)OTE(Mapped_BNI_EIP_508_Data.I.Data.15);
				RC: "$N"
				    "The next 16 rungs map the Input Short Circuit data to defined Parameters.$N"
				    "$N"
				    "";
				N: XIC(BNI_EIP_508_Raw_Input_Data[2].0)OTE(Mapped_BNI_EIP_508_Data.I.Short_Circuit.0);
				N: XIC(BNI_EIP_508_Raw_Input_Data[2].1)OTE(Mapped_BNI_EIP_508_Data.I.Short_Circuit.1);
				N: XIC(BNI_EIP_508_Raw_Input_Data[2].2)OTE(Mapped_BNI_EIP_508_Data.I.Short_Circuit.2);
				N: XIC(BNI_EIP_508_Raw_Input_Data[2].3)OTE(Mapped_BNI_EIP_508_Data.I.Short_Circuit.3);
				N: XIC(BNI_EIP_508_Raw_Input_Data[2].4)OTE(Mapped_BNI_EIP_508_Data.I.Short_Circuit.4);
				N: XIC(BNI_EIP_508_Raw_Input_Data[2].5)OTE(Mapped_BNI_EIP_508_Data.I.Short_Circuit.5);
				N: XIC(BNI_EIP_508_Raw_Input_Data[2].6)OTE(Mapped_BNI_EIP_508_Data.I.Short_Circuit.6);
				N: XIC(BNI_EIP_508_Raw_Input_Data[2].7)OTE(Mapped_BNI_EIP_508_Data.I.Short_Circuit.7);
				N: XIC(BNI_EIP_508_Raw_Input_Data[3].0)OTE(Mapped_BNI_EIP_508_Data.I.Short_Circuit.8);
				N: XIC(BNI_EIP_508_Raw_Input_Data[3].1)OTE(Mapped_BNI_EIP_508_Data.I.Short_Circuit.9);
				N: XIC(BNI_EIP_508_Raw_Input_Data[3].2)OTE(Mapped_BNI_EIP_508_Data.I.Short_Circuit.10);
				N: XIC(BNI_EIP_508_Raw_Input_Data[3].3)OTE(Mapped_BNI_EIP_508_Data.I.Short_Circuit.11);
				N: XIC(BNI_EIP_508_Raw_Input_Data[3].4)OTE(Mapped_BNI_EIP_508_Data.I.Short_Circuit.12);
				N: XIC(BNI_EIP_508_Raw_Input_Data[3].5)OTE(Mapped_BNI_EIP_508_Data.I.Short_Circuit.13);
				N: XIC(BNI_EIP_508_Raw_Input_Data[3].6)OTE(Mapped_BNI_EIP_508_Data.I.Short_Circuit.14);
				N: XIC(BNI_EIP_508_Raw_Input_Data[3].7)OTE(Mapped_BNI_EIP_508_Data.I.Short_Circuit.15);
				RC: "$N"
				    "The next 16 rungs map the Output Overload data to defined Parameters.$N"
				    "$N"
				    "";
				N: XIC(BNI_EIP_508_Raw_Input_Data[4].0)OTE(Mapped_BNI_EIP_508_Data.I.Overload.0);
				N: XIC(BNI_EIP_508_Raw_Input_Data[4].1)OTE(Mapped_BNI_EIP_508_Data.I.Overload.1);
				N: XIC(BNI_EIP_508_Raw_Input_Data[4].2)OTE(Mapped_BNI_EIP_508_Data.I.Overload.2);
				N: XIC(BNI_EIP_508_Raw_Input_Data[4].3)OTE(Mapped_BNI_EIP_508_Data.I.Overload.3);
				N: XIC(BNI_EIP_508_Raw_Input_Data[4].4)OTE(Mapped_BNI_EIP_508_Data.I.Overload.4);
				N: XIC(BNI_EIP_508_Raw_Input_Data[4].5)OTE(Mapped_BNI_EIP_508_Data.I.Overload.5);
				N: XIC(BNI_EIP_508_Raw_Input_Data[4].6)OTE(Mapped_BNI_EIP_508_Data.I.Overload.6);
				N: XIC(BNI_EIP_508_Raw_Input_Data[4].7)OTE(Mapped_BNI_EIP_508_Data.I.Overload.7);
				N: XIC(BNI_EIP_508_Raw_Input_Data[5].0)OTE(Mapped_BNI_EIP_508_Data.I.Overload.8);
				N: XIC(BNI_EIP_508_Raw_Input_Data[5].1)OTE(Mapped_BNI_EIP_508_Data.I.Overload.9);
				N: XIC(BNI_EIP_508_Raw_Input_Data[5].2)OTE(Mapped_BNI_EIP_508_Data.I.Overload.10);
				N: XIC(BNI_EIP_508_Raw_Input_Data[5].3)OTE(Mapped_BNI_EIP_508_Data.I.Overload.11);
				N: XIC(BNI_EIP_508_Raw_Input_Data[5].4)OTE(Mapped_BNI_EIP_508_Data.I.Overload.12);
				N: XIC(BNI_EIP_508_Raw_Input_Data[5].5)OTE(Mapped_BNI_EIP_508_Data.I.Overload.13);
				N: XIC(BNI_EIP_508_Raw_Input_Data[5].6)OTE(Mapped_BNI_EIP_508_Data.I.Overload.14);
				N: XIC(BNI_EIP_508_Raw_Input_Data[5].7)OTE(Mapped_BNI_EIP_508_Data.I.Overload.15);
				RC: "$N"
				    "This rung maps the Actuator/Emergency Stop Power bit to the defined Parameter.$N"
				    "$N"
				    "";
				N: XIC(BNI_EIP_508_Raw_Input_Data[6].0)OTE(Mapped_BNI_EIP_508_Data.I.UA_Fault);
				RC: "$N"
				    "This rung maps the Sensor Power bit to the defined Parameter.$N"
				    "$N"
				    "";
				N: XIC(BNI_EIP_508_Raw_Input_Data[6].1)OTE(Mapped_BNI_EIP_508_Data.I.US_Fault);
				RC: "$N"
				    "The next 16 rungs write the defined Parameter output arrays to Raw Outputs.$N"
				    "$N"
				    "";
				N: XIC(Mapped_BNI_EIP_508_Data.O.Data.0)OTE(BNI_EIP_508_Raw_Output_Data[0].0);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Data.1)OTE(BNI_EIP_508_Raw_Output_Data[0].1);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Data.2)OTE(BNI_EIP_508_Raw_Output_Data[0].2);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Data.3)OTE(BNI_EIP_508_Raw_Output_Data[0].3);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Data.4)OTE(BNI_EIP_508_Raw_Output_Data[0].4);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Data.5)OTE(BNI_EIP_508_Raw_Output_Data[0].5);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Data.6)OTE(BNI_EIP_508_Raw_Output_Data[0].6);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Data.7)OTE(BNI_EIP_508_Raw_Output_Data[0].7);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Data.8)OTE(BNI_EIP_508_Raw_Output_Data[1].0);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Data.9)OTE(BNI_EIP_508_Raw_Output_Data[1].1);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Data.10)OTE(BNI_EIP_508_Raw_Output_Data[1].2);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Data.11)OTE(BNI_EIP_508_Raw_Output_Data[1].3);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Data.12)OTE(BNI_EIP_508_Raw_Output_Data[1].4);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Data.13)OTE(BNI_EIP_508_Raw_Output_Data[1].5);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Data.14)OTE(BNI_EIP_508_Raw_Output_Data[1].6);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Data.15)OTE(BNI_EIP_508_Raw_Output_Data[1].7);
				RC: "$N"
				    "The next 16 rungs write the defined Parameter Restart arrays to Raw Outputs.$N"
				    "$N"
				    "";
				N: XIC(Mapped_BNI_EIP_508_Data.O.Restart.0)OTE(BNI_EIP_508_Raw_Output_Data[2].0);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Restart.1)OTE(BNI_EIP_508_Raw_Output_Data[2].1);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Restart.2)OTE(BNI_EIP_508_Raw_Output_Data[2].2);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Restart.3)OTE(BNI_EIP_508_Raw_Output_Data[2].3);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Restart.4)OTE(BNI_EIP_508_Raw_Output_Data[2].4);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Restart.5)OTE(BNI_EIP_508_Raw_Output_Data[2].5);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Restart.6)OTE(BNI_EIP_508_Raw_Output_Data[2].6);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Restart.7)OTE(BNI_EIP_508_Raw_Output_Data[2].7);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Restart.8)OTE(BNI_EIP_508_Raw_Output_Data[3].0);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Restart.9)OTE(BNI_EIP_508_Raw_Output_Data[3].1);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Restart.10)OTE(BNI_EIP_508_Raw_Output_Data[3].2);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Restart.11)OTE(BNI_EIP_508_Raw_Output_Data[3].3);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Restart.12)OTE(BNI_EIP_508_Raw_Output_Data[3].4);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Restart.13)OTE(BNI_EIP_508_Raw_Output_Data[3].5);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Restart.14)OTE(BNI_EIP_508_Raw_Output_Data[3].6);
				N: XIC(Mapped_BNI_EIP_508_Data.O.Restart.15)OTE(BNI_EIP_508_Raw_Output_Data[3].7);
				RC: "$N"
				    "This rung writes the defined Parameter Red Display LED to its Raw Output.$N"
				    "$N"
				    "";
				N: XIC(Mapped_BNI_EIP_508_Data.O.Display_RED)OTE(BNI_EIP_508_Raw_Output_Data[5].0);
				RC: "$N"
				    "This rung writes the defined Parameter Green Display LED to its Raw Output.$N"
				    "$N"
				    "";
				N: XIC(Mapped_BNI_EIP_508_Data.O.Display_GREEN)OTE(BNI_EIP_508_Raw_Output_Data[5].1);
				RC: "$N"
				    "This rung writes the defined Parameter Display Lock to its Raw Output.$N"
				    "$N"
				    "";
				N: XIC(Mapped_BNI_EIP_508_Data.O.Display_LOCK)OTE(BNI_EIP_508_Raw_Output_Data[5].2);
				RC: "This rung sets the eight configurable ports based on the values of Port_x_Function$N"
				    "$N"
				    "**IMPORTANT - Power to the BNI EIP-508 module must be cycled for any change in port function to take effect.**";
				N: [CPT(BNI_EIP_508_Raw_Config_Data[0],(Mapped_BNI_EIP_508_Data.C.Port_1_Function*1)+(Mapped_BNI_EIP_508_Data.C.Port_2_Function*4)+(Mapped_BNI_EIP_508_Data.C.Port_3_Function*16)+(Mapped_BNI_EIP_508_Data.C.Port_4_Function*64)) ,CPT(BNI_EIP_508_Raw_Config_Data[1],(Mapped_BNI_EIP_508_Data.C.Port_5_Function*1)+(Mapped_BNI_EIP_508_Data.C.Port_6_Function*4)+(Mapped_BNI_EIP_508_Data.C.Port_7_Function*16)+(Mapped_BNI_EIP_508_Data.C.Port_8_Function*64)) ];
				RC: "This rung maps the configuration values to the raw data for Port 1.$N"
				    "These values include Enable Upload/Download/ParamterSvr;$N"
				    "Validation Type, Cycle Time, Vendor ID, Device ID and Serial Number.";
				N: [XIC(Mapped_BNI_EIP_508_Data.C.Enable_Upload_Port_1) OTE(BNI_EIP_508_Raw_Config_Data[25].0) ,XIC(Mapped_BNI_EIP_508_Data.C.Enable_Download_Port_1) OTE(BNI_EIP_508_Raw_Config_Data[25].1) ,XIC(Mapped_BNI_EIP_508_Data.C.Clear_Parameter_Server_Port_1) OTE(BNI_EIP_508_Raw_Config_Data[25].6) ,XIC(Mapped_BNI_EIP_508_Data.C.Enable_Parameter_Server_Port_1) OTE(BNI_EIP_508_Raw_Config_Data[25].7) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_1_Cycle_Time,BNI_EIP_508_Raw_Config_Data[2]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_1_Validation_Type,BNI_EIP_508_Raw_Config_Data[3]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_1_Vendor_ID_1,BNI_EIP_508_Raw_Config_Data[4]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_1_Vendor_ID_2,BNI_EIP_508_Raw_Config_Data[5]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_1_Device_ID_1,BNI_EIP_508_Raw_Config_Data[6]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_1_Device_ID_2,BNI_EIP_508_Raw_Config_Data[7]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_1_Device_ID_3,BNI_EIP_508_Raw_Config_Data[8]) ,COP(Mapped_BNI_EIP_508_Data.C.Port_1_Serial_Number[0],BNI_EIP_508_Raw_Config_Data[9],16) ];
				RC: "This rung maps the configuration values to the raw data for Port 2.$N"
				    "These values include Enable Upload/Download/ParamterSvr;$N"
				    "Validation Type, Cycle Time, Vendor ID, Device ID and Serial Number.";
				N: [XIC(Mapped_BNI_EIP_508_Data.C.Enable_Upload_Port_2) OTE(BNI_EIP_508_Raw_Config_Data[49].0) ,XIC(Mapped_BNI_EIP_508_Data.C.Enable_Download_Port_2) OTE(BNI_EIP_508_Raw_Config_Data[49].1) ,XIC(Mapped_BNI_EIP_508_Data.C.Clear_Parameter_Server_Port_2) OTE(BNI_EIP_508_Raw_Config_Data[49].6) ,XIC(Mapped_BNI_EIP_508_Data.C.Enable_Parameter_Server_Port_2) OTE(BNI_EIP_508_Raw_Config_Data[49].7) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_2_Cycle_Time,BNI_EIP_508_Raw_Config_Data[26]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_2_Validation_Type,BNI_EIP_508_Raw_Config_Data[27]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_2_Vendor_ID_1,BNI_EIP_508_Raw_Config_Data[28]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_2_Vendor_ID_2,BNI_EIP_508_Raw_Config_Data[29]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_2_Device_ID_1,BNI_EIP_508_Raw_Config_Data[30]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_2_Device_ID_2,BNI_EIP_508_Raw_Config_Data[31]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_2_Device_ID_3,BNI_EIP_508_Raw_Config_Data[32]) ,COP(Mapped_BNI_EIP_508_Data.C.Port_2_Serial_Number[0],BNI_EIP_508_Raw_Config_Data[33],16) ];
				RC: "This rung maps the configuration values to the raw data for Port 3.$N"
				    "These values include Enable Upload/Download/ParamterSvr;$N"
				    "Validation Type, Cycle Time, Vendor ID, Device ID and Serial Number.";
				N: [XIC(Mapped_BNI_EIP_508_Data.C.Enable_Upload_Port_3) OTE(BNI_EIP_508_Raw_Config_Data[73].0) ,XIC(Mapped_BNI_EIP_508_Data.C.Enable_Download_Port_3) OTE(BNI_EIP_508_Raw_Config_Data[73].1) ,XIC(Mapped_BNI_EIP_508_Data.C.Clear_Parameter_Server_Port_3) OTE(BNI_EIP_508_Raw_Config_Data[73].6) ,XIC(Mapped_BNI_EIP_508_Data.C.Enable_Parameter_Server_Port_3) OTE(BNI_EIP_508_Raw_Config_Data[73].7) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_3_Cycle_Time,BNI_EIP_508_Raw_Config_Data[50]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_3_Validation_Type,BNI_EIP_508_Raw_Config_Data[51]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_3_Vendor_ID_1,BNI_EIP_508_Raw_Config_Data[52]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_3_Vendor_ID_2,BNI_EIP_508_Raw_Config_Data[53]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_3_Device_ID_1,BNI_EIP_508_Raw_Config_Data[54]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_3_Device_ID_2,BNI_EIP_508_Raw_Config_Data[55]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_3_Device_ID_3,BNI_EIP_508_Raw_Config_Data[56]) ,COP(Mapped_BNI_EIP_508_Data.C.Port_3_Serial_Number[0],BNI_EIP_508_Raw_Config_Data[57],16) ];
				RC: "This rung maps the configuration values to the raw data for Port 4.$N"
				    "These values include Enable Upload/Download/ParamterSvr;$N"
				    "Validation Type, Cycle Time, Vendor ID, Device ID and Serial Number.";
				N: [XIC(Mapped_BNI_EIP_508_Data.C.Enable_Upload_Port_4) OTE(BNI_EIP_508_Raw_Config_Data[97].0) ,XIC(Mapped_BNI_EIP_508_Data.C.Enable_Download_Port_4) OTE(BNI_EIP_508_Raw_Config_Data[97].1) ,XIC(Mapped_BNI_EIP_508_Data.C.Clear_Parameter_Server_Port_4) OTE(BNI_EIP_508_Raw_Config_Data[97].6) ,XIC(Mapped_BNI_EIP_508_Data.C.Enable_Parameter_Server_Port_4) OTE(BNI_EIP_508_Raw_Config_Data[97].7) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_4_Cycle_Time,BNI_EIP_508_Raw_Config_Data[74]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_4_Validation_Type,BNI_EIP_508_Raw_Config_Data[75]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_4_Vendor_ID_1,BNI_EIP_508_Raw_Config_Data[76]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_4_Vendor_ID_2,BNI_EIP_508_Raw_Config_Data[77]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_4_Device_ID_1,BNI_EIP_508_Raw_Config_Data[78]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_4_Device_ID_2,BNI_EIP_508_Raw_Config_Data[79]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_4_Device_ID_3,BNI_EIP_508_Raw_Config_Data[80]) ,COP(Mapped_BNI_EIP_508_Data.C.Port_4_Serial_Number[0],BNI_EIP_508_Raw_Config_Data[81],16) ];
				RC: "This rung maps the configuration values to the raw data for Port 5.$N"
				    "These values include Enable Upload/Download/ParamterSvr;$N"
				    "Validation Type, Cycle Time, Vendor ID, Device ID and Serial Number.";
				N: [XIC(Mapped_BNI_EIP_508_Data.C.Enable_Upload_Port_5) OTE(BNI_EIP_508_Raw_Config_Data[121].0) ,XIC(Mapped_BNI_EIP_508_Data.C.Enable_Download_Port_5) OTE(BNI_EIP_508_Raw_Config_Data[121].1) ,XIC(Mapped_BNI_EIP_508_Data.C.Clear_Parameter_Server_Port_5) OTE(BNI_EIP_508_Raw_Config_Data[121].6) ,XIC(Mapped_BNI_EIP_508_Data.C.Enable_Parameter_Server_Port_5) OTE(BNI_EIP_508_Raw_Config_Data[121].7) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_5_Cycle_Time,BNI_EIP_508_Raw_Config_Data[98]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_5_Validation_Type,BNI_EIP_508_Raw_Config_Data[99]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_5_Vendor_ID_1,BNI_EIP_508_Raw_Config_Data[100]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_5_Vendor_ID_2,BNI_EIP_508_Raw_Config_Data[101]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_5_Device_ID_1,BNI_EIP_508_Raw_Config_Data[102]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_5_Device_ID_2,BNI_EIP_508_Raw_Config_Data[103]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_5_Device_ID_3,BNI_EIP_508_Raw_Config_Data[104]) ,COP(Mapped_BNI_EIP_508_Data.C.Port_5_Serial_Number[0],BNI_EIP_508_Raw_Config_Data[105],16) ];
				RC: "This rung maps the configuration values to the raw data for Port 6.$N"
				    "These values include Enable Upload/Download/ParamterSvr;$N"
				    "Validation Type, Cycle Time, Vendor ID, Device ID and Serial Number.";
				N: [XIC(Mapped_BNI_EIP_508_Data.C.Enable_Upload_Port_6) OTE(BNI_EIP_508_Raw_Config_Data[145].0) ,XIC(Mapped_BNI_EIP_508_Data.C.Enable_Download_Port_6) OTE(BNI_EIP_508_Raw_Config_Data[145].1) ,XIC(Mapped_BNI_EIP_508_Data.C.Clear_Parameter_Server_Port_6) OTE(BNI_EIP_508_Raw_Config_Data[145].6) ,XIC(Mapped_BNI_EIP_508_Data.C.Enable_Parameter_Server_Port_6) OTE(BNI_EIP_508_Raw_Config_Data[145].7) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_6_Cycle_Time,BNI_EIP_508_Raw_Config_Data[122]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_6_Validation_Type,BNI_EIP_508_Raw_Config_Data[123]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_6_Vendor_ID_1,BNI_EIP_508_Raw_Config_Data[124]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_6_Vendor_ID_2,BNI_EIP_508_Raw_Config_Data[125]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_6_Device_ID_1,BNI_EIP_508_Raw_Config_Data[126]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_6_Device_ID_2,BNI_EIP_508_Raw_Config_Data[127]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_6_Device_ID_3,BNI_EIP_508_Raw_Config_Data[128]) ,COP(Mapped_BNI_EIP_508_Data.C.Port_6_Serial_Number[0],BNI_EIP_508_Raw_Config_Data[129],16) ];
				RC: "This rung maps the configuration values to the raw data for Port 7.$N"
				    "These values include Enable Upload/Download/ParamterSvr;$N"
				    "Validation Type, Cycle Time, Vendor ID, Device ID and Serial Number.";
				N: [XIC(Mapped_BNI_EIP_508_Data.C.Enable_Upload_Port_7) OTE(BNI_EIP_508_Raw_Config_Data[169].0) ,XIC(Mapped_BNI_EIP_508_Data.C.Enable_Download_Port_7) OTE(BNI_EIP_508_Raw_Config_Data[169].1) ,XIC(Mapped_BNI_EIP_508_Data.C.Clear_Parameter_Server_Port_7) OTE(BNI_EIP_508_Raw_Config_Data[169].6) ,XIC(Mapped_BNI_EIP_508_Data.C.Enable_Parameter_Server_Port_7) OTE(BNI_EIP_508_Raw_Config_Data[169].7) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_7_Cycle_Time,BNI_EIP_508_Raw_Config_Data[146]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_7_Validation_Type,BNI_EIP_508_Raw_Config_Data[147]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_7_Vendor_ID_1,BNI_EIP_508_Raw_Config_Data[148]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_7_Vendor_ID_2,BNI_EIP_508_Raw_Config_Data[149]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_7_Device_ID_1,BNI_EIP_508_Raw_Config_Data[150]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_7_Device_ID_2,BNI_EIP_508_Raw_Config_Data[151]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_7_Device_ID_3,BNI_EIP_508_Raw_Config_Data[152]) ,COP(Mapped_BNI_EIP_508_Data.C.Port_7_Serial_Number[0],BNI_EIP_508_Raw_Config_Data[153],16) ];
				RC: "This rung maps the configuration values to the raw data for Port 8.$N"
				    "These values include Enable Upload/Download/ParamterSvr;$N"
				    "Validation Type, Cycle Time, Vendor ID, Device ID and Serial Number.";
				N: [XIC(Mapped_BNI_EIP_508_Data.C.Enable_Upload_Port_8) OTE(BNI_EIP_508_Raw_Config_Data[193].0) ,XIC(Mapped_BNI_EIP_508_Data.C.Enable_Download_Port_8) OTE(BNI_EIP_508_Raw_Config_Data[193].1) ,XIC(Mapped_BNI_EIP_508_Data.C.Clear_Parameter_Server_Port_8) OTE(BNI_EIP_508_Raw_Config_Data[193].6) ,XIC(Mapped_BNI_EIP_508_Data.C.Enable_Parameter_Server_Port_8) OTE(BNI_EIP_508_Raw_Config_Data[193].7) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_8_Cycle_Time,BNI_EIP_508_Raw_Config_Data[170]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_8_Validation_Type,BNI_EIP_508_Raw_Config_Data[171]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_8_Vendor_ID_1,BNI_EIP_508_Raw_Config_Data[172]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_8_Vendor_ID_2,BNI_EIP_508_Raw_Config_Data[173]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_8_Device_ID_1,BNI_EIP_508_Raw_Config_Data[174]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_8_Device_ID_2,BNI_EIP_508_Raw_Config_Data[175]) ,MOV(Mapped_BNI_EIP_508_Data.C.Port_8_Device_ID_3,BNI_EIP_508_Raw_Config_Data[176]) ,COP(Mapped_BNI_EIP_508_Data.C.Port_8_Serial_Number[0],BNI_EIP_508_Raw_Config_Data[177],16) ];
				RC: "$N"
				    "Distribute Accumulated Output data for each Port into a single defined Parameter by using offsets (5, 37, 69, 101, 133, 165, 197, and 229).$N"
				    "$N"
				    "";
				N: [COP(BNI_EIP_508_Port_1_Data.Outputs[0],BNI_EIP_508_Raw_Output_Data[6],32) ,COP(BNI_EIP_508_Port_2_Data.Outputs[0],BNI_EIP_508_Raw_Output_Data[38],32) ,COP(BNI_EIP_508_Port_3_Data.Outputs[0],BNI_EIP_508_Raw_Output_Data[70],32) ,COP(BNI_EIP_508_Port_4_Data.Outputs[0],BNI_EIP_508_Raw_Output_Data[102],32) ,COP(BNI_EIP_508_Port_5_Data.Outputs[0],BNI_EIP_508_Raw_Output_Data[134],32) ,COP(BNI_EIP_508_Port_6_Data.Outputs[0],BNI_EIP_508_Raw_Output_Data[166],32) ,COP(BNI_EIP_508_Port_7_Data.Outputs[0],BNI_EIP_508_Raw_Output_Data[198],32) ,COP(BNI_EIP_508_Port_8_Data.Outputs[0],BNI_EIP_508_Raw_Output_Data[230],32) ];
				RC: "$N"
				    "The next eight rungs map diagnostic bits for Ports 1-8 to:$N"
				    "IO-Link Status, Device Connected and Validation Failed$N"
				    "";
				N: [XIC(BNI_EIP_508_Raw_Input_Data[40].0) OTE(Mapped_BNI_EIP_508_Data.I.Port_1_IO_Link_Status) ,XIC(BNI_EIP_508_Raw_Input_Data[40].1) OTE(Mapped_BNI_EIP_508_Data.I.Port_1_Device_Connected) ,XIC(BNI_EIP_508_Raw_Input_Data[41].0) OTE(Mapped_BNI_EIP_508_Data.I.Port_1_Validation_Failed) ];
				N: [XIC(BNI_EIP_508_Raw_Input_Data[88].0) OTE(Mapped_BNI_EIP_508_Data.I.Port_2_IO_Link_Status) ,XIC(BNI_EIP_508_Raw_Input_Data[88].1) OTE(Mapped_BNI_EIP_508_Data.I.Port_2_Device_Connected) ,XIC(BNI_EIP_508_Raw_Input_Data[89].0) OTE(Mapped_BNI_EIP_508_Data.I.Port_2_Validation_Failed) ];
				N: [XIC(BNI_EIP_508_Raw_Input_Data[136].0) OTE(Mapped_BNI_EIP_508_Data.I.Port_3_IO_Link_Status) ,XIC(BNI_EIP_508_Raw_Input_Data[136].1) OTE(Mapped_BNI_EIP_508_Data.I.Port_3_Device_Connected) ,XIC(BNI_EIP_508_Raw_Input_Data[137].0) OTE(Mapped_BNI_EIP_508_Data.I.Port_3_Validation_Failed) ];
				N: [XIC(BNI_EIP_508_Raw_Input_Data[184].0) OTE(Mapped_BNI_EIP_508_Data.I.Port_4_IO_Link_Status) ,XIC(BNI_EIP_508_Raw_Input_Data[184].1) OTE(Mapped_BNI_EIP_508_Data.I.Port_4_Device_Connected) ,XIC(BNI_EIP_508_Raw_Input_Data[185].0) OTE(Mapped_BNI_EIP_508_Data.I.Port_4_Validation_Failed) ];
				N: [XIC(BNI_EIP_508_Raw_Input_Data[232].0) OTE(Mapped_BNI_EIP_508_Data.I.Port_5_IO_Link_Status) ,XIC(BNI_EIP_508_Raw_Input_Data[232].1) OTE(Mapped_BNI_EIP_508_Data.I.Port_5_Device_Connected) ,XIC(BNI_EIP_508_Raw_Input_Data[233].0) OTE(Mapped_BNI_EIP_508_Data.I.Port_5_Validation_Failed) ];
				N: [XIC(BNI_EIP_508_Raw_Input_Data[280].0) OTE(Mapped_BNI_EIP_508_Data.I.Port_6_IO_Link_Status) ,XIC(BNI_EIP_508_Raw_Input_Data[280].1) OTE(Mapped_BNI_EIP_508_Data.I.Port_6_Device_Connected) ,XIC(BNI_EIP_508_Raw_Input_Data[281].0) OTE(Mapped_BNI_EIP_508_Data.I.Port_6_Validation_Failed) ];
				N: [XIC(BNI_EIP_508_Raw_Input_Data[328].0) OTE(Mapped_BNI_EIP_508_Data.I.Port_7_IO_Link_Status) ,XIC(BNI_EIP_508_Raw_Input_Data[328].1) OTE(Mapped_BNI_EIP_508_Data.I.Port_7_Device_Connected) ,XIC(BNI_EIP_508_Raw_Input_Data[329].0) OTE(Mapped_BNI_EIP_508_Data.I.Port_7_Validation_Failed) ];
				N: [XIC(BNI_EIP_508_Raw_Input_Data[376].0) OTE(Mapped_BNI_EIP_508_Data.I.Port_8_IO_Link_Status) ,XIC(BNI_EIP_508_Raw_Input_Data[376].1) OTE(Mapped_BNI_EIP_508_Data.I.Port_8_Device_Connected) ,XIC(BNI_EIP_508_Raw_Input_Data[377].0) OTE(Mapped_BNI_EIP_508_Data.I.Port_8_Validation_Failed) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION APM_Cell_V2 (Class := Standard,
	                                           Revision := "1.1",
	                                           ExecutePrescan := No,
	                                           ExecutePostscan := No,
	                                           ExecuteEnableInFalse := No,
	                                           CreatedDate := "2022-12-27T17:14:47.792Z",
	                                           CreatedBy := "CJVR-VM\Neomatrix",
	                                           EditedDate := "2023-04-10T15:48:21.939Z",
	                                           EditedBy := "MFG\oscarsandoval",
	                                           SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Running : BOOL (Description := "Set True when cell is Running",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   DefaultData := 0);
			RunningBypass : BOOL (Description := "Set True when cell is Running Bypass",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 0);
			RunningTransfer : BOOL (Description := "Set True when cell is Running Transfer",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           DefaultData := 0);
			DownManual : BOOL (Description := "Set True when cell is Manual Down",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			DownPlanned : BOOL (Description := "Set True when cell is Planned Down",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			Blocked : BOOL (Description := "Set True when cell is Blocked",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   DefaultData := 0);
			Starved : BOOL (Description := "Set True when cell is Starved",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   DefaultData := 0);
			Faulted : BOOL (Description := "Set True when cell is Faulted",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   DefaultData := 0);
			WorkComplete : BOOL (Description := "GA - When Work is Complete set to True",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        DefaultData := 0);
			JobDone : BOOL (Description := "GA - When Job Done set to True",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   DefaultData := 0);
			InProduction : BOOL (Description := "Set True by Ignition when the line is in Production Mode",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        DefaultData := 0);
			PlantDown : BOOL (Description := "Set True by Ignition when the Plant is Down",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			IsShopGA : BOOL (Description := "Set to true if in GA so JobDone and WorkComplete bits will set Overcycle states correctly",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    DefaultData := 0);
			Overcycle : BOOL (Description := "When cell is in Overcycle this is set to True",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			CountIn_Increment : BOOL (Description := "Set True when Count In should increment by 1",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 0);
			CountIn_RolloverFlag : BOOL (Description := "True when Count In has rolled over",
			                                Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := Yes,
			                                ExternalAccess := Read Only,
			                                DefaultData := 0);
			CountOut_Increment : BOOL (Description := "Set True when Count Out should increment by 1",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              DefaultData := 0);
			CountOut_RolloverFlag : BOOL (Description := "True when Count Out has rolled over",
			                                 Usage := Output,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := Yes,
			                                 ExternalAccess := Read Only,
			                                 DefaultData := 0);
			CountReject_Increment : BOOL (Description := "Set True when Reject Count should increment by 1",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 DefaultData := 0);
			CountReject_RolloverFlag : BOOL (Description := "True when Reject Counts has rolled over",
			                                    Usage := Output,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := Yes,
			                                    ExternalAccess := Read Only,
			                                    DefaultData := 0);
			State : INT (Description := "Current Cell State",
			                 Usage := Output,
			                 RADIX := Decimal,
			                 Required := No,
			                 Visible := Yes,
			                 ExternalAccess := Read Only,
			                 DefaultData := 0);
			CountIn_Count : DINT (Description := "Current Count In",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			CountOut_Count : DINT (Description := "Current Count Out",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			CountReject_Count : DINT (Description := "Current Reject Count",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := Yes,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0);
			StandardCycleTime : DINT (Description := "The Standard Cycle Time for the cell and is set by Ignition",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := Yes,
			                             DefaultData := 0);
			CurrentCycleTime : DINT (Description := "Current Cycle Time",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			CurrentOvercycleTime : DINT (Description := "Current Overcycle Time",
			                                Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := Yes,
			                                ExternalAccess := Read Only,
			                                DefaultData := 0);
			StateOverride : INT (Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			StarvedSec : BOOL (Description := "Set True when cell is Starved by a Secondary Source",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			BlockedSec : BOOL (Description := "Set True when cell is Blocked by a Secondary Source",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			InAction : BOOL (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			InOneShot : BOOL (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			OutOneShot : BOOL (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			OutAction : BOOL (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			CycleTimer : TIMER (ExternalAccess := None,
			                     DefaultData := "[0,2147483647,0]");
			OvercycleTimer : TIMER (ExternalAccess := None,
			                         DefaultData := "[0,2147483647,0]");
			RejectOneShot : BOOL (RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			RejectAction : BOOL (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			CountIN_ResetTimer : TIMER (ExternalAccess := None,
			                             DefaultData := "[0,0,0]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "**************************************$N"
				    "* Set State based on boolean inputs  *$N"
				    "**************************************";
				N: NOP();
				RC: "Set default State to Down - Planned - 10";
				N: MOV(10,State);
				RC: "Running Bypass Mode State - 2";
				N: XIC(RunningBypass)MOV(2,State);
				RC: "Down - Planned State - 10";
				N: XIO(RunningBypass)XIC(DownPlanned)MOV(10,State);
				RC: "Down - Manual Stop State - 8";
				N: XIO(RunningBypass)XIO(DownPlanned)XIC(DownManual)MOV(8,State);
				RC: "Faulted State - 7";
				N: XIO(RunningBypass)XIO(DownPlanned)XIO(DownManual)XIC(Faulted)MOV(7,State);
				RC: "Running Transfer Mode State - 3";
				N: XIO(RunningBypass)XIO(DownPlanned)XIO(DownManual)XIO(Faulted)XIC(RunningTransfer)MOV(3,State);
				RC: "Starved State - 6";
				N: XIO(RunningBypass)XIO(DownPlanned)XIO(DownManual)XIO(Faulted)XIO(RunningTransfer)XIC(Starved)MOV(6,State);
				RC: "Secondary Starved State - 11";
				N: XIO(RunningBypass)XIO(DownPlanned)XIO(DownManual)XIO(Faulted)XIO(RunningTransfer)XIO(Starved)XIC(StarvedSec)MOV(11,State);
				RC: "Blocked State - 5";
				N: XIO(RunningBypass)XIO(DownPlanned)XIO(DownManual)XIO(Faulted)XIO(RunningTransfer)XIO(Starved)XIC(Blocked)MOV(5,State);
				RC: "Secondary Blocked State - 12";
				N: XIO(RunningBypass)XIO(DownPlanned)XIO(DownManual)XIO(Faulted)XIO(RunningTransfer)XIO(Starved)XIO(Blocked)XIC(BlockedSec)MOV(12,State);
				RC: "Running State - 1$N"
				    "$N"
				    "- Set State to 1$N"
				    "- Enable CycleTimer$N"
				    "- If CycleTimer ACC is greater than StandardCycleTime then set Overcycle bit and enable OvercycleTimer$N"
				    "$N"
				    "";
				N: XIO(RunningBypass)XIO(DownPlanned)XIO(DownManual)XIO(Faulted)XIO(RunningTransfer)XIO(Starved)XIO(Blocked)XIC(Running)[MOV(1,State) ,XIC(InProduction) [RTO(CycleTimer,?,?) ,GEQ(CycleTimer.ACC,StandardCycleTime) [RTO(OvercycleTimer,?,?) ,OTE(Overcycle) ] ] ];
				RC: "Overcycle State - 30+$N"
				    "$N"
				    "- Set correct Overcycle State based on WorkComplete, JobDone, and IsShopGA bits";
				N: XIC(Overcycle)[XIC(IsShopGA) XIO(JobDone) XIO(WorkComplete) MOV(31,State) ,XIC(IsShopGA) XIC(JobDone) XIO(WorkComplete) MOV(32,State) ,[XIO(IsShopGA) ,XIC(JobDone) XIC(WorkComplete) ] MOV(30,State) ];
				RC: "Copy CycleTimer.ACC to CurrentCycleTime tag and OvercycleTimer.ACC to CurrentOvercycleTimer tag";
				N: MOV(CycleTimer.ACC,CurrentCycleTime)MOV(OvercycleTimer.ACC,CurrentOvercycleTime);
				RC: "State Override$N"
				    "$N"
				    "- If the StateOverride INT is > 0 then set the state to the override state value";
				N: GRT(StateOverride,0)MOV(StateOverride,State);
				RC: "**************************************$N"
				    "* Handle In Counter                  *$N"
				    "**************************************$N"
				    "$N"
				    "When CountIn_Increment goes true increment the counter unless it is about roll over. In that case reset to 0 and set the CountIn_RolloverFlag true.";
				N: NOP();
				N: XIC(CountIn_Increment)ONS(InOneShot)OTL(InAction);
				N: XIC(InAction)[LES(CountIn_Count,254) ADD(CountIn_Count,1,CountIn_Count) OTU(CountIn_RolloverFlag) ,GEQ(CountIn_Count,254) SUB(CountIn_Count,254,CountIn_Count) OTL(CountIn_RolloverFlag) ,OTU(InAction) ];
				N: GEQ(CountIn_Count,10)TON(CountIN_ResetTimer,?,?);
				RC: "**************************************$N"
				    "* Handle Out Counter                 *$N"
				    "**************************************";
				N: NOP();
				N: XIC(CountOut_Increment)ONS(OutOneShot)OTL(OutAction);
				RC: "When CountOut_Increment goes true increment the counter unless it is about roll over. In that case reset to 0 and set the CountOut_RolloverFlag true. Reset Overcycle timers.";
				N: XIC(OutAction)[LES(CountOut_Count,254) ADD(CountOut_Count,1,CountOut_Count) OTU(CountOut_RolloverFlag) ,GEQ(CountOut_Count,254) SUB(CountOut_Count,254,CountOut_Count) OTL(CountOut_RolloverFlag) ,OTU(OutAction) ,RES(CycleTimer) RES(OvercycleTimer) ];
				RC: "**************************************$N"
				    "* Handle Reject Counter                  *$N"
				    "**************************************$N"
				    "$N"
				    "When CountReject_Increment goes true increment the counter unless it is about roll over. In that case reset to 0 and set the CountReject_RolloverFlag true.";
				N: NOP();
				N: XIC(CountReject_Increment)ONS(RejectOneShot)OTL(RejectAction);
				RC: "When CountReject_Increment goes true increment the counter unless it is about roll over. In that case reset to 0 and set the CountOut_RolloverFlag true. Reset Overcycle timers.";
				N: XIC(RejectAction)[LES(CountReject_Count,254) ADD(CountReject_Count,1,CountReject_Count) OTU(CountReject_RolloverFlag) ,GEQ(CountReject_Count,254) SUB(CountReject_Count,254,CountReject_Count) OTL(CountReject_RolloverFlag) ,OTU(RejectAction) ,RES(CycleTimer) RES(OvercycleTimer) ];
				RC: "Reset Cycle and Overcycle timers when the plant is down";
				N: XIC(PlantDown)RES(CycleTimer)RES(OvercycleTimer);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION APM_Counter (Class := Standard,
	                                           Revision := "1.0",
	                                           Vendor := "NeoMatrix Inc.",
	                                           ExecutePrescan := No,
	                                           ExecutePostscan := No,
	                                           ExecuteEnableInFalse := No,
	                                           CreatedDate := "2020-10-20T15:30:06.909Z",
	                                           CreatedBy := "WIN-EGM9T0SJB6T\Neomatrix",
	                                           EditedDate := "2020-12-03T20:05:49.719Z",
	                                           EditedBy := "WIN-EGM9T0SJB6T\Neomatrix",
	                                           SoftwareRevision := "v20.04")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Increment : BOOL (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			RolloverFlag : BOOL (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			Count : DINT (Usage := Output,
			                 RADIX := Decimal,
			                 Required := No,
			                 Visible := Yes,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			OneShot : BOOL (RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Action : BOOL (RADIX := Decimal,
			                 ExternalAccess := None,
			                 DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: XIC(Increment)ONS(OneShot)OTL(Action);
				N: XIC(Action)LES(Count,2147483647)ADD(Count,1,Count)OTU(Action);
				N: XIC(Action)GEQ(Count,2147483647)SUB(Count,2147483647,Count)OTL(RolloverFlag)OTU(Action);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION APM_State (Class := Standard,
	                                         Revision := "1.0",
	                                         Vendor := "NeoMatrix Inc.",
	                                         ExecutePrescan := No,
	                                         ExecutePostscan := No,
	                                         ExecuteEnableInFalse := No,
	                                         CreatedDate := "2020-10-20T14:52:48.080Z",
	                                         CreatedBy := "WIN-EGM9T0SJB6T\Neomatrix",
	                                         EditedDate := "2020-12-03T20:45:56.465Z",
	                                         EditedBy := "WIN-EGM9T0SJB6T\Neomatrix",
	                                         SoftwareRevision := "v20.04")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Running : BOOL (Description := "Running",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0);
			RunningBypass : BOOL (Description := "Running in Bypass Mode",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			RunningTransfer : BOOL (Description := "Running Transfer",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			DownManual : BOOL (Description := "Down - Manual Stop",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
			Blocked : BOOL (Description := "Equipment is Blocked",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0);
			Starved : BOOL (Description := "Equipment is Starved",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0);
			Faulted : BOOL (Description := "Equipment is Faulted",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0);
			FaultsAcked : BOOL (Description := "Faults are Acknowledged",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 1);
			Overcycle : BOOL (Description := "Overcycle",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			HelpCall : BOOL (Description := "Help Call Signaled",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 0);
			HelpAcked : BOOL (Description := "Help Call Acknowledged",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 1);
			State : DINT (Description := "OEE Equipment State",
			                 Usage := Output,
			                 RADIX := Decimal,
			                 Required := No,
			                 Visible := No,
			                 ExternalAccess := Read Only,
			                 DefaultData := 8);
			Color : DINT (Description := "Color Code for Workstation Status",
			                 Usage := Output,
			                 RADIX := Decimal,
			                 Required := No,
			                 Visible := No,
			                 ExternalAccess := Read Only,
			                 DefaultData := 10);
		END_PARAMETERS

		LOCAL_TAGS
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "2=Running Bypass Mode";
				N: XIC(RunningBypass)MOV(2,State);
				RC: "8=Down - Manual Stop";
				N: XIO(RunningBypass)XIC(DownManual)MOV(8,State);
				RC: "7=Faulted";
				N: XIO(RunningBypass)XIO(DownManual)XIC(Faulted)MOV(7,State);
				RC: "3=Running Transfer Mode";
				N: XIO(RunningBypass)XIO(DownManual)XIO(Faulted)XIC(RunningTransfer)MOV(3,State);
				RC: "6=Starved";
				N: XIO(RunningBypass)XIO(DownManual)XIO(Faulted)XIO(RunningTransfer)XIC(Starved)MOV(6,State);
				RC: "5=Blocked";
				N: XIO(RunningBypass)XIO(DownManual)XIO(Faulted)XIO(RunningTransfer)XIO(Starved)XIC(Blocked)MOV(5,State);
				RC: "1=Running";
				N: XIO(RunningBypass)XIO(DownManual)XIO(Faulted)XIO(RunningTransfer)XIO(Starved)XIO(Blocked)XIC(Running)MOV(1,State);
				N: XIC(DownManual)MOV(10,Color);
				RC: "6=Red Flashing, Faulted - Unacknowledged";
				N: XIO(DownManual)XIC(Faulted)XIO(FaultsAcked)MOV(6,Color);
				RC: "7=Red Solid, Faulted - Acknowleged";
				N: XIO(DownManual)XIC(Faulted)XIC(FaultsAcked)MOV(7,Color);
				RC: "4=Yellow Flashing";
				N: XIO(DownManual)XIO(Faulted)XIC(Overcycle)MOV(4,Color);
				RC: "3=Orange Flashing, Starved";
				N: XIO(DownManual)XIO(Faulted)XIO(Overcycle)XIC(Starved)MOV(3,Color);
				RC: "2=Orange Solid, Blocked";
				N: XIO(DownManual)XIO(Faulted)XIO(Overcycle)XIO(Starved)XIC(Blocked)MOV(2,Color);
				RC: "1=Green, Running";
				N: XIO(DownManual)XIO(Faulted)XIO(Overcycle)XIO(Starved)XIO(Blocked)[XIC(Running) ,XIC(RunningBypass) ,XIC(RunningTransfer) ]MOV(1,Color);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION Banner_TL50_PD_v2 (Description := "AOI that controls the state of the TL50 Light and Audible Segments.",
	                                                 Class := Standard,
	                                                 Revision := "2.0",
	                                                 Vendor := "Banner Engineering",
	                                                 ExecutePrescan := No,
	                                                 ExecutePostscan := No,
	                                                 ExecuteEnableInFalse := No,
	                                                 CreatedDate := "2017-08-02T15:08:26.506Z",
	                                                 CreatedBy := "DUKE\2011324",
	                                                 EditedDate := "2022-01-05T16:13:14.181Z",
	                                                 EditedBy := "LUCID\DanWeinhold",
	                                                 SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			SINT0 : SINT (Usage := InOut,
			                 RADIX := Decimal,
			                 Required := Yes,
			                 Visible := Yes);
			SINT1 : SINT (Usage := InOut,
			                 RADIX := Decimal,
			                 Required := Yes,
			                 Visible := Yes);
			Process_Data : Banner_TL50_PDO_v2 (Usage := InOut,
			                        Required := Yes,
			                        Visible := Yes);
			Byte_Swap : BOOL (Usage := Input,
			                     RADIX := Decimal,
			                     Required := Yes,
			                     Visible := Yes,
			                     DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Temp_Byte_Array : SINT[2] (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := "[0,0]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "The Process Data Segment variable controls what state the segment should be in.  A value of 0 is segment off, value of 1 is segment on, and a value of 2 is segement flashing.  This is repeated for all seven segments.";
				N: EQU(0,Process_Data.Segment_1)[XIC(Byte_Swap) OTU(SINT0.1) OTU(SINT0.0) ,XIO(Byte_Swap) OTU(SINT1.1) OTU(SINT1.0) ];
				N: EQU(1,Process_Data.Segment_1)[XIC(Byte_Swap) OTU(SINT0.1) OTL(SINT0.0) ,XIO(Byte_Swap) OTU(SINT1.1) OTL(SINT1.0) ];
				N: EQU(2,Process_Data.Segment_1)[XIC(Byte_Swap) OTL(SINT0.1) OTU(SINT0.0) ,XIO(Byte_Swap) OTL(SINT1.1) OTU(SINT1.0) ];
				N: NOP();
				N: EQU(0,Process_Data.Segment_2)[XIC(Byte_Swap) OTU(SINT0.3) OTU(SINT0.2) ,XIO(Byte_Swap) OTU(SINT1.3) OTU(SINT1.2) ];
				N: EQU(1,Process_Data.Segment_2)[XIC(Byte_Swap) OTU(SINT0.3) OTL(SINT0.2) ,XIO(Byte_Swap) OTU(SINT1.3) OTL(SINT1.2) ];
				N: EQU(2,Process_Data.Segment_2)[XIC(Byte_Swap) OTL(SINT0.3) OTU(SINT0.2) ,XIO(Byte_Swap) OTL(SINT1.3) OTU(SINT1.2) ];
				N: NOP();
				N: EQU(0,Process_Data.Segment_3)[XIC(Byte_Swap) OTU(SINT0.5) OTU(SINT0.4) ,XIO(Byte_Swap) OTU(SINT1.5) OTU(SINT1.4) ];
				N: EQU(1,Process_Data.Segment_3)[XIC(Byte_Swap) OTU(SINT0.5) OTL(SINT0.4) ,XIO(Byte_Swap) OTU(SINT1.5) OTL(SINT1.4) ];
				N: EQU(2,Process_Data.Segment_3)[XIC(Byte_Swap) OTL(SINT0.5) OTU(SINT0.4) ,XIO(Byte_Swap) OTL(SINT1.5) OTU(SINT1.4) ];
				N: NOP();
				N: EQU(0,Process_Data.Segment_4)[XIC(Byte_Swap) OTU(SINT0.7) OTU(SINT0.6) ,XIO(Byte_Swap) OTU(SINT1.7) OTU(SINT1.6) ];
				N: EQU(1,Process_Data.Segment_4)[XIC(Byte_Swap) OTU(SINT0.7) OTL(SINT0.6) ,XIO(Byte_Swap) OTU(SINT1.7) OTL(SINT1.6) ];
				N: EQU(2,Process_Data.Segment_4)[XIC(Byte_Swap) OTL(SINT0.7) OTU(SINT0.6) ,XIO(Byte_Swap) OTL(SINT1.7) OTU(SINT1.6) ];
				N: NOP();
				N: EQU(0,Process_Data.Segment_5)[XIC(Byte_Swap) OTU(SINT1.1) OTU(SINT1.0) ,XIO(Byte_Swap) OTU(SINT0.1) OTU(SINT0.0) ];
				N: EQU(1,Process_Data.Segment_5)[XIC(Byte_Swap) OTU(SINT1.1) OTL(SINT1.0) ,XIO(Byte_Swap) OTU(SINT0.1) OTL(SINT0.0) ];
				N: EQU(2,Process_Data.Segment_5)[XIC(Byte_Swap) OTL(SINT1.1) OTU(SINT1.0) ,XIO(Byte_Swap) OTL(SINT0.1) OTU(SINT0.0) ];
				N: NOP();
				N: EQU(0,Process_Data.Segment_6)[XIC(Byte_Swap) OTU(SINT1.3) OTU(SINT1.2) ,XIO(Byte_Swap) OTU(SINT0.3) OTU(SINT0.2) ];
				N: EQU(1,Process_Data.Segment_6)[XIC(Byte_Swap) OTU(SINT1.3) OTL(SINT1.2) ,XIO(Byte_Swap) OTU(SINT0.3) OTL(SINT0.2) ];
				N: EQU(2,Process_Data.Segment_6)[XIC(Byte_Swap) OTU(SINT1.3) OTL(SINT1.2) ,XIO(Byte_Swap) OTL(SINT0.3) OTU(SINT0.2) ];
				N: NOP();
				N: EQU(0,Process_Data.Segment_7)[XIC(Byte_Swap) OTU(SINT1.5) OTU(SINT1.4) ,XIO(Byte_Swap) OTU(SINT0.5) OTU(SINT0.4) ];
				N: EQU(1,Process_Data.Segment_7)[XIC(Byte_Swap) OTU(SINT1.5) OTL(SINT1.4) ,XIO(Byte_Swap) OTU(SINT0.5) OTL(SINT0.4) ];
				N: EQU(2,Process_Data.Segment_7)[XIC(Byte_Swap) OTL(SINT1.5) OTU(SINT1.4) ,XIO(Byte_Swap) OTL(SINT0.5) OTU(SINT0.4) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION Fanuc_RB_Style (Description := "Robot Satus and Style Initiation for Fanuc Robot",
	                                              Class := Standard,
	                                              Revision := "2.2",
	                                              RevisionExtension := "20201227",
	                                              RevisionNote := "v2.0 Rework and redundancy debug.$Nv2.1 Auto reset after hold and in process timeout$Nv2.2 In process timeout only after inpAutoMode is off",
	                                              Vendor := "Hokuto",
	                                              ExecutePrescan := Yes,
	                                              ExecutePostscan := No,
	                                              ExecuteEnableInFalse := No,
	                                              CreatedDate := "2019-09-23T15:32:58.406Z",
	                                              CreatedBy := "LAPTOP-KKSRL2SB\ucarr",
	                                              EditedDate := "2022-10-11T16:07:28.723Z",
	                                              EditedBy := "MFG\JulioGranillo",
	                                              SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpRobotIO : p_udt_Fanuc_RB_D_IO (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			inpStylePermHMI : P_Perm (Usage := InOut,
			                           Required := Yes,
			                           Visible := Yes);
			inpDecisionPermHMI : P_Perm (Usage := InOut,
			                              Required := Yes,
			                              Visible := Yes);
			inpPNPerm1 : P_Perm (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			inpPNPerm2 : P_Perm (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			inpDecisionNmbr : SINT (Description := "Decision Number",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           DefaultData := 0);
			inpReqDecision : BOOL (Description := "Robot Request Decision",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          DefaultData := 0);
			inpAutoMode : BOOL (Description := "Cell Running in$NAuto",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			inpDryCycle : BOOL (Description := "Cell Running in$NDry Cycle",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			inpNewSpeed : SINT (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			inpClearToWork : BOOL (Description := "Robot is Clear to Work",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          DefaultData := 0);
			InpExtMtrOn : BOOL (Description := "External Motor On",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			InpAbortPickSeld : BOOL (Description := "Abort Pick Selected",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := None,
			                            DefaultData := 0);
			pcmdStyleSelect : INT (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           DefaultData := 0);
			ocmdReset : BOOL (Description := "Operator$NReset$NCommand",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			ocmdFaster : BOOL (Description := "Faster Button on HMI$NArrow Up",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			ocmdSlower : BOOL (Description := "Slower Button on HMI$NArrow Down",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			stsReady : BOOL (Description := "Robot$NReady to Start",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			stsHome : BOOL (Description := "Robot$NHome$NPosition",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			stsPaused : BOOL (Description := "Robot$NPaused",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			stsHeld : BOOL (Description := "Robot$NHeld",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			stsStyleSelectInProgress : BOOL (Description := "Select In Progress",
			                                    Usage := Output,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := Yes,
			                                    ExternalAccess := Read Only,
			                                    DefaultData := 0);
			stsStyleSelectDone : BOOL (Description := "Style Select Done",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := Yes,
			                              ExternalAccess := Read Only,
			                              DefaultData := 0);
			stsProgRunning : BOOL (Description := "Robot$NProgram Running",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			stsPNPermOK : BOOL (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			stsSpeed : SINT (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			stsAuto : BOOL (Description := "Robot$NAuto Mode",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			stsFault : BOOL (Description := "Robot$NFaulted",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			stsTPEnabled : BOOL (Description := "Robot$NTeach Pendant$NEnabled",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			stsT1 : BOOL (Description := "Robot$NT1 Enabled",
			                 Usage := Output,
			                 RADIX := Decimal,
			                 Required := No,
			                 Visible := Yes,
			                 ExternalAccess := Read Only,
			                 DefaultData := 0);
			stsT2 : BOOL (Description := "Robot$NT2 Enabled",
			                 Usage := Output,
			                 RADIX := Decimal,
			                 Required := No,
			                 Visible := Yes,
			                 ExternalAccess := Read Only,
			                 DefaultData := 0);
			stsProgFinished : BOOL (Description := "Robot$NProgram Finished$NMemory",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			inpProgFinished : BOOL (Description := "Robot$NProgram Finished",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			inpProgFinishedReset : BOOL (Description := "Robot$NProgram Finished$NReset",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                DefaultData := 0);
			stsFaultCmdEnable : BOOL (Description := "Fault$NCommand Enable$NOFF",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0);
			stsSystemNotReady : BOOL (Description := "Fault$NSystem Not Ready",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0);
			stsWaitingOnInput : BOOL (Description := "Robot$NWaiting on$NInput",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0);
			stsDialogPending : BOOL (Description := "Robot$NDialog Pending",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			stsBatteryAlarm : BOOL (Description := "Robot$NBattery Alarm",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			stsInputSimulated : BOOL (Description := "Robot$NInput$NSimulated",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0);
			stsOutputSimulated : BOOL (Description := "Robot$NOutput$NSimulated",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read Only,
			                              DefaultData := 0);
			stsPN0 OF wrkPN.PN[0] (Description := "No Active PN",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read Only);
			stsPN1 OF wrkPN.PN[1] (Description := "PROGRAM FINISH",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read Only);
			stsPN2 OF wrkPN.PN[2] (Description := "TASK FINISH",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read Only);
			stsPN3 OF wrkPN.PN[3] (Description := "AT MAINT POSITION",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read Only);
			stsPN4 OF wrkPN.PN[4] (Description := "AT PURGE POSITION",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read Only);
			stsPN5 OF wrkPN.PN[5] (Description := "SEALER INSPECTION$NCOMPLETE",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read Only);
			stsPN6 OF wrkPN.PN[6] (Description := "SEALER REPAIR$NCOMPLETE",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read Only);
			stsPN7 OF wrkPN.PN[7] (Description := "(RESERVED)",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read Only);
			stsPN8 OF wrkPN.PN[8] (Description := "(RESERVED)",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read Only);
			stsPN9 OF wrkPN.PN[9] (Description := "(RESERVED)",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read Only);
			stsPN10 OF wrkPN.PN[10] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN11 OF wrkPN.PN[11] (Description := "P/N 11",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN13 OF wrkPN.PN[13] (Description := "P/N 13",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN14 OF wrkPN.PN[14] (Description := "P/N 14",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN15 OF wrkPN.PN[15] (Description := "P/N 15",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN12 OF wrkPN.PN[12] (Description := "P/N 12",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN16 OF wrkPN.PN[16] (Description := "P/N 16",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN17 OF wrkPN.PN[17] (Description := "P/N 17",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN18 OF wrkPN.PN[18] (Description := "P/N 18",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN19 OF wrkPN.PN[19] (Description := "P/N 19",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN20 OF wrkPN.PN[20] (Description := "P/N 20",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN21 OF wrkPN.PN[21] (Description := "P/N 21",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN22 OF wrkPN.PN[22] (Description := "P/N 22",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN23 OF wrkPN.PN[23] (Description := "P/N 23",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN24 OF wrkPN.PN[24] (Description := "P/N 24",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN25 OF wrkPN.PN[25] (Description := "P/N 25",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN26 OF wrkPN.PN[26] (Description := "P/N 26",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN27 OF wrkPN.PN[27] (Description := "P/N 27",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN28 OF wrkPN.PN[28] (Description := "P/N 28",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN29 OF wrkPN.PN[29] (Description := "P/N 29",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN31 OF wrkPN.PN[31] (Description := "P/N 31",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN30 OF wrkPN.PN[30] (Description := "P/N 30",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN32 OF wrkPN.PN[32] (Description := "P/N 32",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN33 OF wrkPN.PN[33] (Description := "P/N 33",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN34 OF wrkPN.PN[34] (Description := "P/N 34",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN35 OF wrkPN.PN[35] (Description := "P/N 35",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN36 OF wrkPN.PN[36] (Description := "P/N 36",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN37 OF wrkPN.PN[37] (Description := "P/N 37",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN38 OF wrkPN.PN[38] (Description := "P/N 38",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN39 OF wrkPN.PN[39] (Description := "P/N 39",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN40 OF wrkPN.PN[40] (Description := "P/N 40",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN41 OF wrkPN.PN[41] (Description := "P/N 41",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN42 OF wrkPN.PN[42] (Description := "P/N 42",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN43 OF wrkPN.PN[43] (Description := "P/N 43",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN44 OF wrkPN.PN[44] (Description := "P/N 44",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN45 OF wrkPN.PN[45] (Description := "P/N 45",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN46 OF wrkPN.PN[46] (Description := "P/N 46",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN47 OF wrkPN.PN[47] (Description := "P/N 47",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN48 OF wrkPN.PN[48] (Description := "P/N 48",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN49 OF wrkPN.PN[49] (Description := "P/N 49",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN50 OF wrkPN.PN[50] (Description := "P/N 50",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN51 OF wrkPN.PN[51] (Description := "P/N 51",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN52 OF wrkPN.PN[52] (Description := "P/N 52",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN53 OF wrkPN.PN[53] (Description := "P/N 53",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN54 OF wrkPN.PN[54] (Description := "P/N 54",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN55 OF wrkPN.PN[55] (Description := "P/N 55",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN56 OF wrkPN.PN[56] (Description := "P/N 56",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN57 OF wrkPN.PN[57] (Description := "P/N 57",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN58 OF wrkPN.PN[58] (Description := "P/N 58",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN59 OF wrkPN.PN[59] (Description := "P/N 59",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN60 OF wrkPN.PN[60] (Description := "P/N 60",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN61 OF wrkPN.PN[61] (Description := "P/N 61",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN62 OF wrkPN.PN[62] (Description := "P/N 62",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN63 OF wrkPN.PN[63] (Description := "P/N 63",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN64 OF wrkPN.PN[64] (Description := "P/N 64",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN65 OF wrkPN.PN[65] (Description := "P/N 65",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN66 OF wrkPN.PN[66] (Description := "P/N 66",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN67 OF wrkPN.PN[67] (Description := "P/N 67",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN68 OF wrkPN.PN[68] (Description := "P/N 68",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN69 OF wrkPN.PN[69] (Description := "P/N 69",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN70 OF wrkPN.PN[70] (Description := "P/N 70",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN71 OF wrkPN.PN[71] (Description := "P/N 71",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN72 OF wrkPN.PN[72] (Description := "P/N 72",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN73 OF wrkPN.PN[73] (Description := "P/N 73",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN74 OF wrkPN.PN[74] (Description := "P/N 74",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN75 OF wrkPN.PN[75] (Description := "P/N 75",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN76 OF wrkPN.PN[76] (Description := "P/N 76",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN77 OF wrkPN.PN[77] (Description := "P/N 77",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN78 OF wrkPN.PN[78] (Description := "P/N 78",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN79 OF wrkPN.PN[79] (Description := "P/N 79",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN80 OF wrkPN.PN[80] (Description := "P/N 80",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN81 OF wrkPN.PN[81] (Description := "P/N 81",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN82 OF wrkPN.PN[82] (Description := "P/N 82",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN83 OF wrkPN.PN[83] (Description := "P/N 83",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN84 OF wrkPN.PN[84] (Description := "P/N 84",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN85 OF wrkPN.PN[85] (Description := "P/N 85",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN86 OF wrkPN.PN[86] (Description := "P/N 86",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN87 OF wrkPN.PN[87] (Description := "P/N 87",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN88 OF wrkPN.PN[88] (Description := "P/N 88",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN90 OF wrkPN.PN[90] (Description := "P/N 90",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN91 OF wrkPN.PN[91] (Description := "P/N 91",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN92 OF wrkPN.PN[92] (Description := "P/N 92",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN93 OF wrkPN.PN[93] (Description := "P/N 93",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN94 OF wrkPN.PN[94] (Description := "P/N 94",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN89 OF wrkPN.PN[89] (Description := "P/N 89",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN95 OF wrkPN.PN[95] (Description := "P/N 95",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN96 OF wrkPN.PN[96] (Description := "P/N 96",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN97 OF wrkPN.PN[97] (Description := "P/N 97",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN98 OF wrkPN.PN[98] (Description := "P/N 98",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN99 OF wrkPN.PN[99] (Description := "P/N 99",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only);
			stsPN100 OF wrkPN.PN[100] (Description := "P/N 100",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN101 OF wrkPN.PN[101] (Description := "P/N 101",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN102 OF wrkPN.PN[102] (Description := "P/N 102",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN103 OF wrkPN.PN[103] (Description := "P/N 103",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN104 OF wrkPN.PN[104] (Description := "P/N 104",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN105 OF wrkPN.PN[105] (Description := "P/N 105",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN106 OF wrkPN.PN[106] (Description := "P/N 106",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN107 OF wrkPN.PN[107] (Description := "P/N 107",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN108 OF wrkPN.PN[108] (Description := "P/N 108",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN109 OF wrkPN.PN[109] (Description := "P/N 109",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN110 OF wrkPN.PN[110] (Description := "P/N 110",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN111 OF wrkPN.PN[111] (Description := "P/N 111",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN112 OF wrkPN.PN[112] (Description := "P/N 112",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN113 OF wrkPN.PN[113] (Description := "P/N 113",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN114 OF wrkPN.PN[114] (Description := "P/N 114",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN115 OF wrkPN.PN[115] (Description := "P/N 115",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN116 OF wrkPN.PN[116] (Description := "P/N 116",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN117 OF wrkPN.PN[117] (Description := "P/N 117",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN118 OF wrkPN.PN[118] (Description := "P/N 118",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN119 OF wrkPN.PN[119] (Description := "P/N 119",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN120 OF wrkPN.PN[120] (Description := "P/N 120",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN121 OF wrkPN.PN[121] (Description := "P/N 121",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN122 OF wrkPN.PN[122] (Description := "P/N 122",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN123 OF wrkPN.PN[123] (Description := "P/N 123",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN124 OF wrkPN.PN[124] (Description := "P/N 124",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN125 OF wrkPN.PN[125] (Description := "P/N 125",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN126 OF wrkPN.PN[126] (Description := "P/N 126",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN127 OF wrkPN.PN[127] (Description := "P/N 127",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN128 OF wrkPN.PN[128] (Description := "P/N 128",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN129 OF wrkPN.PN[129] (Description := "P/N 129",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN130 OF wrkPN.PN[130] (Description := "P/N 130",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN131 OF wrkPN.PN[131] (Description := "P/N 131",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN132 OF wrkPN.PN[132] (Description := "P/N 132",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN133 OF wrkPN.PN[133] (Description := "P/N 133",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN134 OF wrkPN.PN[134] (Description := "P/N 134",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN135 OF wrkPN.PN[135] (Description := "P/N 135",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN136 OF wrkPN.PN[136] (Description := "P/N 136",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN138 OF wrkPN.PN[138] (Description := "P/N 138",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN139 OF wrkPN.PN[139] (Description := "P/N 139",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN140 OF wrkPN.PN[140] (Description := "P/N 140",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN142 OF wrkPN.PN[142] (Description := "P/N 142",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN143 OF wrkPN.PN[143] (Description := "P/N 143",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN144 OF wrkPN.PN[144] (Description := "P/N 144",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN137 OF wrkPN.PN[137] (Description := "P/N 137",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN141 OF wrkPN.PN[141] (Description := "P/N 141",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN145 OF wrkPN.PN[145] (Description := "P/N 145",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN146 OF wrkPN.PN[146] (Description := "P/N 146",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN147 OF wrkPN.PN[147] (Description := "P/N 147",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN148 OF wrkPN.PN[148] (Description := "P/N 148",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN149 OF wrkPN.PN[149] (Description := "P/N 149",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN151 OF wrkPN.PN[151] (Description := "P/N 151",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN150 OF wrkPN.PN[150] (Description := "P/N 150",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN152 OF wrkPN.PN[152] (Description := "P/N 152",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN153 OF wrkPN.PN[153] (Description := "P/N 153",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN154 OF wrkPN.PN[154] (Description := "P/N 154",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN155 OF wrkPN.PN[155] (Description := "P/N 155",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN157 OF wrkPN.PN[157] (Description := "P/N 157",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN158 OF wrkPN.PN[158] (Description := "P/N 158",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN159 OF wrkPN.PN[159] (Description := "P/N 159",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN160 OF wrkPN.PN[160] (Description := "P/N 160",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN162 OF wrkPN.PN[162] (Description := "P/N 162",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN163 OF wrkPN.PN[163] (Description := "P/N 163",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN156 OF wrkPN.PN[156] (Description := "P/N 156",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN161 OF wrkPN.PN[161] (Description := "P/N 161",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN164 OF wrkPN.PN[164] (Description := "P/N 164",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN165 OF wrkPN.PN[165] (Description := "P/N 165",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN166 OF wrkPN.PN[166] (Description := "P/N 166",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN168 OF wrkPN.PN[168] (Description := "P/N 168",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN169 OF wrkPN.PN[169] (Description := "P/N 169",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN167 OF wrkPN.PN[167] (Description := "P/N 167",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN170 OF wrkPN.PN[170] (Description := "P/N 170",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN171 OF wrkPN.PN[171] (Description := "P/N 171",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN172 OF wrkPN.PN[172] (Description := "P/N 172",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN173 OF wrkPN.PN[173] (Description := "P/N 173",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN174 OF wrkPN.PN[174] (Description := "P/N 174",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN175 OF wrkPN.PN[175] (Description := "P/N 175",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN176 OF wrkPN.PN[176] (Description := "P/N 176",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN177 OF wrkPN.PN[177] (Description := "P/N 177",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN178 OF wrkPN.PN[178] (Description := "P/N 178",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN179 OF wrkPN.PN[179] (Description := "P/N 179",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN180 OF wrkPN.PN[180] (Description := "P/N 180",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN181 OF wrkPN.PN[181] (Description := "P/N 181",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN182 OF wrkPN.PN[182] (Description := "P/N 182",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN184 OF wrkPN.PN[184] (Description := "P/N 184",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN185 OF wrkPN.PN[185] (Description := "P/N 185",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN186 OF wrkPN.PN[186] (Description := "P/N 186",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN188 OF wrkPN.PN[188] (Description := "P/N 188",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN189 OF wrkPN.PN[189] (Description := "P/N 189",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN190 OF wrkPN.PN[190] (Description := "P/N 190",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN183 OF wrkPN.PN[183] (Description := "P/N 183",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN187 OF wrkPN.PN[187] (Description := "P/N 187",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN191 OF wrkPN.PN[191] (Description := "P/N 191",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN192 OF wrkPN.PN[192] (Description := "P/N 192",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN193 OF wrkPN.PN[193] (Description := "P/N 193",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN195 OF wrkPN.PN[195] (Description := "P/N 195",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN194 OF wrkPN.PN[194] (Description := "P/N 194",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN196 OF wrkPN.PN[196] (Description := "P/N 196",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN197 OF wrkPN.PN[197] (Description := "P/N 197",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN198 OF wrkPN.PN[198] (Description := "P/N 198",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN199 OF wrkPN.PN[199] (Description := "P/N 199",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN201 OF wrkPN.PN[201] (Description := "P/N 201",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN202 OF wrkPN.PN[202] (Description := "P/N 202",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN200 OF wrkPN.PN[200] (Description := "P/N 200",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN203 OF wrkPN.PN[203] (Description := "P/N 203",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN204 OF wrkPN.PN[204] (Description := "P/N 204",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN205 OF wrkPN.PN[205] (Description := "P/N 205",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN206 OF wrkPN.PN[206] (Description := "P/N 206",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN207 OF wrkPN.PN[207] (Description := "P/N 207",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN208 OF wrkPN.PN[208] (Description := "P/N 208",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN209 OF wrkPN.PN[209] (Description := "P/N 209",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN211 OF wrkPN.PN[211] (Description := "P/N 211",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN212 OF wrkPN.PN[212] (Description := "P/N 212",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN213 OF wrkPN.PN[213] (Description := "P/N 213",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN214 OF wrkPN.PN[214] (Description := "P/N 214",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN215 OF wrkPN.PN[215] (Description := "P/N 215",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN217 OF wrkPN.PN[217] (Description := "P/N 217",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN218 OF wrkPN.PN[218] (Description := "P/N 218",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN219 OF wrkPN.PN[219] (Description := "P/N 219",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN220 OF wrkPN.PN[220] (Description := "P/N 220",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN210 OF wrkPN.PN[210] (Description := "P/N 210",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN216 OF wrkPN.PN[216] (Description := "P/N 216",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN221 OF wrkPN.PN[221] (Description := "P/N 221",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN222 OF wrkPN.PN[222] (Description := "P/N 222",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN223 OF wrkPN.PN[223] (Description := "P/N 223",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN225 OF wrkPN.PN[225] (Description := "P/N 225",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN226 OF wrkPN.PN[226] (Description := "P/N 226",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN224 OF wrkPN.PN[224] (Description := "P/N 224",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN227 OF wrkPN.PN[227] (Description := "P/N 227",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN228 OF wrkPN.PN[228] (Description := "P/N 228",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN230 OF wrkPN.PN[230] (Description := "P/N 230",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN231 OF wrkPN.PN[231] (Description := "P/N 231",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN232 OF wrkPN.PN[232] (Description := "P/N 232",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN229 OF wrkPN.PN[229] (Description := "P/N 229",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN233 OF wrkPN.PN[233] (Description := "P/N 233",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN234 OF wrkPN.PN[234] (Description := "P/N 234",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN236 OF wrkPN.PN[236] (Description := "P/N 236",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN237 OF wrkPN.PN[237] (Description := "P/N 237",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN239 OF wrkPN.PN[239] (Description := "P/N 239",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN241 OF wrkPN.PN[241] (Description := "P/N 241",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN235 OF wrkPN.PN[235] (Description := "P/N 235",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN238 OF wrkPN.PN[238] (Description := "P/N 238",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN240 OF wrkPN.PN[240] (Description := "P/N 240",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN242 OF wrkPN.PN[242] (Description := "P/N 242",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN243 OF wrkPN.PN[243] (Description := "P/N 243",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN244 OF wrkPN.PN[244] (Description := "P/N 244",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN245 OF wrkPN.PN[245] (Description := "P/N 245",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN246 OF wrkPN.PN[246] (Description := "P/N 246",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN247 OF wrkPN.PN[247] (Description := "P/N 247",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN248 OF wrkPN.PN[248] (Description := "P/N 248",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN249 OF wrkPN.PN[249] (Description := "P/N 249",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN250 OF wrkPN.PN[250] (Description := "P/N 250",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN251 OF wrkPN.PN[251] (Description := "P/N 251",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN252 OF wrkPN.PN[252] (Description := "P/N 252",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN253 OF wrkPN.PN[253] (Description := "P/N 253",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN254 OF wrkPN.PN[254] (Description := "P/N 254",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			stsPN255 OF wrkPN.PN[255] (Description := "P/N 255",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			StyleNmbrPermSeld : DINT (Description := "Style Number$NPerm Selected",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read/Write,
			                             DefaultData := 0);
			visStylePermHMI OF StyleHMI.PB_Vis (Description := "Style Number$NPush Buttons Visibility",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			DecisionNmbrPermSeld : DINT (Description := "Decision Number$NPerm Selected",
			                                Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                ExternalAccess := Read/Write,
			                                DefaultData := 0);
			visDecisionPermHMI OF DecisionHMI.PB_Vis (Description := "Decision Code$NPush Buttons Visibility",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No);
			stsProgNmbrEcho : SINT (Description := "Program Number Echo",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			visAdhesiveHMI : BOOL (Description := "Adhesive Application$NPush Buttons Visibility",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			InspectionReqPB : BOOL (Description := "Inspection Request$NPB",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			InspectionReqInd : BOOL (Description := "Inspection Request$NInd",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read/Write,
			                            DefaultData := 0);
			InspectionCompletePB : BOOL (Description := "Inspection Complete$NPB",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                DefaultData := 0);
			InspectionPosInd : BOOL (Description := "Inspection Position$NInd",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read/Write,
			                            DefaultData := 0);
			RepairCompletePB : BOOL (Description := "Repair Complete$NPB",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			RepairPosInd : BOOL (Description := "Repair Position$NInd",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			MaintenanceCompletePB : BOOL (Description := "Maintenance Complete PB",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 DefaultData := 0);
			MaintenancePosInd : BOOL (Description := "Maintenance Position Ind",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read/Write,
			                             DefaultData := 0);
			PurgeCompletePB : BOOL (Description := "Purge Complete PB",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			PurgePosInd : BOOL (Description := "Purge Position Ind",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			Application : INT (Description := "1-MH$N2-SPR$N3-ADH$N4-FDS$N5-LSR$N6-HEM",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			visMaintPosReq OF MaintPosReqHMI.PB_Vis (Description := "Maintenance Position Request Push Buttons Visibility",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			stsMaintPosReq : INT (Description := "Maintenance Position Requested$NBit # = Tool #",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read/Write,
			                          DefaultData := 0);
			visProcessCompleteHMI : BOOL (Description := "Process Complete Push Button Visibility",
			                                 Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 DefaultData := 0);
			stsPN : INT (Description := "Process Number",
			                 Usage := Output,
			                 RADIX := Decimal,
			                 Required := No,
			                 Visible := Yes,
			                 ExternalAccess := Read Only,
			                 DefaultData := 0);
			ProcessTimeout : DINT (Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			cfgRBinProcTOut : DINT (Description := "Config Time in Seconds for$NRobot in Process$NTime Out",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			inpExtRunEnbl : BOOL (Description := "External Run Enable",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			stsAtPick1 : BOOL (Description := "Robot At Pick Position #1",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsAtPick2 : BOOL (Description := "Robot At Pick Position #2",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsAtPick3 : BOOL (Description := "Robot At Pick Position #3",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsAtPick4 : BOOL (Description := "Robot At Pick Position #4",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsAtPick5 : BOOL (Description := "Robot At Pick Position #5",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsAtPick6 : BOOL (Description := "Robot At Pick Position #6",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsAtDrop1 : BOOL (Description := "Robot At Drop Position #1",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsAtDrop2 : BOOL (Description := "Robot At Drop Position #2",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsAtDrop3 : BOOL (Description := "Robot At Drop Position #3",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsAtDrop4 : BOOL (Description := "Robot At Drop Position #4",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsAtDrop5 : BOOL (Description := "Robot At Drop Position #5",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsAtDrop6 : BOOL (Description := "Robot At Drop Position #6",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			InpRetHomeSeld : BOOL (Description := "Return To Home",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			CycleTimeStore : DINT (Description := "Robot Cycle Time Storage",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			TackTimeStore : DINT (Description := "Robot Tack Time Storage",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			OverTime : BOOL (Description := "Robot Overtime",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 0);
			AbortPickPB : BOOL (Description := "Abort Pick PB",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			ReturnHomePB : BOOL (Description := "Return Home PB",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			AbortPickCancelPB : BOOL (Description := "Abort Pick Cancel PB",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 0);
			ReturnHomeCancelPB : BOOL (Description := "Return To Home Cancel PB",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              DefaultData := 0);
			stsCycleTMREnbd : BOOL (Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			stsTackTMREnbd : BOOL (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			stsCycleTMRAcc : DINT (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			stsTackTMRAcc : DINT (Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			InpCTPreset : DINT (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Pickup1Comp : BOOL (Description := "1st Pickup Complete",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Pickup2Comp : BOOL (Description := "2nd Pickup Complete",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Pickup3Comp : BOOL (Description := "3rd Pickup Complete",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Pickup4Comp : BOOL (Description := "4th Pickup Complete",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Pickup5Comp : BOOL (Description := "5th Pickup Complete",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Pickup6Comp : BOOL (Description := "6th Pickup Complete",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			Drop1Comp : BOOL (Description := "1st Drop Complete",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Drop2Comp : BOOL (Description := "2nd Drop Complete",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			Drop3Comp : BOOL (Description := "3rd Drop Complete",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			Drop4Comp : BOOL (Description := "4th Drop Complete",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			Drop5Comp : BOOL (Description := "5th Drop Complete",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			Drop6Comp : BOOL (Description := "6th Drop Complete",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			InpNozzleChk1Cmd : BOOL (Description := "Sealer Gun$NNozzle 1 Check Command",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			InpNozzleChk2Cmd : BOOL (Description := "Sealer Gun$NNozzle 2 Check Command",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			InpNozzle1Sw : BOOL (Description := "Sealer Gun Nozzle 1 Sensors",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			InpNozzle2Sw : BOOL (Description := "Sealer Gun$NNozzle 2 Sensors",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			InpNozzleChkPreset : DINT (Description := "Nozzle Check Timer Preset",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              DefaultData := 0);
			stsNozzle2ChkOK : BOOL (Description := "Nozzle 2 Check OK",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			stsNozzle1ChkOK : BOOL (Description := "Nozzle 1 Check OK",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			tmrNewSpeedReq : TIMER (ExternalAccess := None,
			                         DefaultData := "[0,0,0]");
			stsReadySetUp : BOOL (Description := "Robot$NReady Setup",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			hmiDeviceName : STRING_20 (ExternalAccess := Read Only,
			                        DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			wrkInitiate : BOOL (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			tmrInitiateOn : TIMER (Description := "300 ms Pulse",
			                        ExternalAccess := None,
			                        DefaultData := "[0,0,0]");
			tmrInitiateff : TIMER (Description := "Pulse 300ms",
			                        ExternalAccess := None,
			                        DefaultData := "[0,0,0]");
			True : DINT (COMMENT.1 := "Data value $N(Process Number) OK",
			               COMMENT.2 := "Data Value$N(Decision) OK",
			               RADIX := Decimal,
			               ExternalAccess := None,
			               DefaultData := 0);
			CurrentPNTab : INT (RADIX := Decimal,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			stsProgNmbrReq : INT (Description := "Program Number Request",
			                         RADIX := Decimal,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			ActivePN : P_Perm (ExternalAccess := Read Only,
			                   DefaultData := "[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']]");
			ONS : DINT (RADIX := Decimal,
			              ExternalAccess := None,
			              DefaultData := 0);
			PNTabSelect1 : BOOL (RADIX := Decimal,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			PNTabSelect2 : BOOL (RADIX := Decimal,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			wrkPN : p_udt_Robot_PN_Array (ExternalAccess := Read Only,
			                DefaultData := "[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0]]");
			StyleHMI : h_udt_HMI_Robot_Perm_Select (ExternalAccess := Read/Write,
			                   DefaultDatanter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']]]");
			CheckStyleNumber : BitCheck_DINT (ExternalAccess := None,
			                           DefaultData := "[1,0,0,0,0,0]");
			wrkStyleSelected : BOOL (Description := "Style Selected",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			DecisionHMI : h_udt_HMI_Robot_Perm_Select (ExternalAccess := Read/Write,
			                      DefaultDatanter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']]]");
			CheckDecisionNumber : BitCheck_INT (ExternalAccess := None,
			                              DefaultData := "[1,0,0,0,0,0]");
			DecisionSelected : BOOL (Description := "Decision Selected",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			MaintPosReqHMI : h_udt_HMI_Robot_Maint_Pos (Description := "Maintenance Position Request",
			                         ExternalAccess := Read/Write,
			                         DefaultData := "[0,0,0,0,0,0]");
			CheckMaintPosReq : BitCheck_INT (ExternalAccess := None,
			                           DefaultData := "[1,0,0,0,0,0]");
			MaintPosReqSeld : BOOL (Description := "Only One Maintenance Position Requested",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			wrkProcessNmbr : INT (Description := "Process Number",
			                         RADIX := Decimal,
			                         ExternalAccess := Read/Write,
			                         DefaultData := 0);
			tmrRestartOn : TIMER (Description := "1s Pulse",
			                       ExternalAccess := Read Only,
			                       DefaultData := "[0,0,0]");
			tmrRestartOff : TIMER (Description := "200ms Pulse",
			                        ExternalAccess := None,
			                        DefaultData := "[0,0,0]");
			wrkIndexMax : DINT (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			wrkIndex : DINT (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			tmrRBinProcTOut : TIMER (Description := "Robot In Process$NStuck ON$NTime Out$N",
			                          ExternalAccess := None,
			                          DefaultData := "[0,0,0]");
			tmrResetAfterHold : TIMER (Description := "Send Reset Signal After Robot Hold$N200ms Pulse",
			                            ExternalAccess := None,
			                            DefaultData := "[0,200,0]");
			pcmdResetAfterHold : BOOL (Description := "Program$NReset$NCommand$NAfter Hold",
			                             RADIX := Decimal,
			                             ExternalAccess := None,
			                             DefaultData := 0);
			CycleTMR : TIMER (Description := "Robot Cycle Time Timer",
			                   ExternalAccess := None,
			                   DefaultData := "[0,0,0]");
			TackTMR : TIMER (Description := "Robot Tack Time Timer",
			                  ExternalAccess := None,
			                  DefaultData := "[0,0,0]");
			Nozzle1Tmr : TIMER (ExternalAccess := None,
			                     DefaultData := "[0,0,0]");
			Nozzle2Tmr : TIMER (ExternalAccess := None,
			                     DefaultData := "[0,0,0]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Fanuc Robot AOI$N"
				    "************************************************************";
				N: NOP();
				RC: "Name configuration for HMI$N"
				    "*";
				N: JMP(skiptext)LOWER(hmiDeviceName,hmiDeviceName);
				RC: "Constants$N"
				    "*";
				N: LBL(skiptext)[XIC(EnableIn) OTU(stsStyleSelectInProgress) ,MOV(1000,tmrNewSpeedReq.PRE) MOV(300,tmrInitiateOn.PRE) MOV(300,tmrInitiateff.PRE) MOV(1000,tmrRestartOn.PRE) MOV(200,tmrRestartOff.PRE) MOV(200,tmrResetAfterHold.PRE) ,MUL(ProcessTimeout,1000,tmrRBinProcTOut.PRE) ,[LES(inpNewSpeed,0) MOV(0,inpNewSpeed) ,GRT(inpNewSpeed,100) MOV(100,inpNewSpeed) ] ];
				RC: "************************************************************$N"
				    "Robot Status$N"
				    "************************************************************";
				N: NOP();
				N: XIC(inpRobotIO.I1.DO_001)XIC(inpRobotIO.I1.DO_002)XIO(inpRobotIO.I1.DO_006)XIO(inpRobotIO.I1.DO_008)XIC(inpRobotIO.I1.DO_044)OTE(stsReadySetUp);
				N: XIC(stsReadySetUp)XIC(inpRobotIO.I1.DO_007)XIO(inpRobotIO.I1.DO_003)XIO(inpRobotIO.I1.DO_004)XIO(inpRobotIO.I1.DO_005)OTE(stsReady);
				N: XIC(inpRobotIO.I1.DO_007)OTE(stsHome);
				N: XIC(inpRobotIO.I1.DO_044)OTE(stsAuto);
				N: XIC(inpRobotIO.I1.DO_003)OTE(stsProgRunning);
				N: [XIC(inpProgFinished) ,XIC(stsProgFinished) XIO(inpProgFinishedReset) XIO(inpRobotIO.O1.DI_006) ]OTE(stsProgFinished);
				N: XIO(inpRobotIO.I1.DO_001)OTE(stsFaultCmdEnable);
				N: XIO(inpRobotIO.I1.DO_002)OTE(stsSystemNotReady);
				N: XIC(inpRobotIO.I1.DO_004)OTE(stsPaused);
				N: XIC(inpRobotIO.I1.DO_005)OTE(stsHeld);
				N: XIC(inpRobotIO.I1.DO_039)OTE(stsWaitingOnInput);
				N: XIC(inpRobotIO.I1.DO_006)OTE(stsFault);
				N: XIC(inpRobotIO.I1.DO_008)OTE(stsTPEnabled);
				N: XIC(inpRobotIO.I1.DO_045)OTE(stsT1);
				N: XIC(inpRobotIO.I1.DO_046)OTE(stsT2);
				N: XIC(inpRobotIO.I1.DO_036)XIC(inpRobotIO.I1.DO_044)OTE(stsDialogPending);
				N: XIC(inpRobotIO.I1.DO_009)OTE(stsBatteryAlarm);
				N: XIC(inpRobotIO.I1.DO_037)OTE(stsInputSimulated);
				N: XIC(inpRobotIO.I1.DO_038)OTE(stsOutputSimulated);
				RC: "###########################################$N"
				    "At Pick / At Drop Positions$N"
				    "$N"
				    "Use AtPick/Drop# For each fixture$N"
				    "Up to 6 Fixtures$N"
				    "###########################################";
				N: XIC(inpRobotIO.I1.DO_134)OTE(stsAtPick1);
				N: XIC(inpRobotIO.I1.DO_135)OTE(stsAtPick2);
				N: XIC(inpRobotIO.I1.DO_136)OTE(stsAtPick3);
				N: XIC(inpRobotIO.I1.DO_137)OTE(stsAtPick4);
				N: XIC(inpRobotIO.I1.DO_138)OTE(stsAtPick5);
				N: XIC(inpRobotIO.I1.DO_139)OTE(stsAtPick6);
				N: XIC(inpRobotIO.I1.DO_140)OTE(stsAtDrop1);
				N: XIC(inpRobotIO.I1.DO_141)OTE(stsAtDrop2);
				N: XIC(inpRobotIO.I1.DO_142)OTE(stsAtDrop3);
				N: XIC(inpRobotIO.I1.DO_143)OTE(stsAtDrop4);
				N: XIC(inpRobotIO.I1.DO_144)OTE(stsAtDrop5);
				N: XIC(inpRobotIO.I1.DO_145)OTE(stsAtDrop6);
				N: [XIC(inpRobotIO.I1.DO_011) OTE(stsProgNmbrEcho.0) ,XIC(inpRobotIO.I1.DO_012) OTE(stsProgNmbrEcho.1) ,XIC(inpRobotIO.I1.DO_013) OTE(stsProgNmbrEcho.2) ,XIC(inpRobotIO.I1.DO_014) OTE(stsProgNmbrEcho.3) ,XIC(inpRobotIO.I1.DO_015) OTE(stsProgNmbrEcho.4) ,XIC(inpRobotIO.I1.DO_016) OTE(stsProgNmbrEcho.5) ,XIC(inpRobotIO.I1.DO_017) OTE(stsProgNmbrEcho.6) ,XIC(inpRobotIO.I1.DO_018) OTE(stsProgNmbrEcho.7) ];
				RC: "IMSTP, SFSPD, MTN ENBL are always high$N"
				    "*";
				N: OTE(inpRobotIO.O1.DI_001)OTE(inpRobotIO.O1.DI_003)OTE(inpRobotIO.O1.DI_008);
				N: XIC(inpDryCycle)OTE(inpRobotIO.O1.DI_033);
				RC: "************************************************************$N"
				    "Robot Hold$N"
				    "************************************************************";
				N: NOP();
				N: XIO(inpAutoMode)XIC(inpRobotIO.I1.DO_034)TON(tmrRBinProcTOut,?,?);
				N: [XIC(inpRobotIO.I1.DO_044) [XIC(inpAutoMode) ,XIC(inpRobotIO.I1.DO_003) [XIC(inpRobotIO.I1.DO_034) ,XIC(inpRobotIO.I1.DO_140) ] XIO(tmrRBinProcTOut.DN) ] XIC(inpExtRunEnbl) ,XIC(inpRobotIO.I1.DO_045) ,XIC(inpRobotIO.I1.DO_046) XIO(inpRobotIO.I1.DO_044) ][XIC(inpClearToWork) ,XIC(inpRobotIO.I1.DO_003) XIC(inpRobotIO.I1.DO_034) XIO(tmrRBinProcTOut.DN) ]OTE(inpRobotIO.O1.DI_002);
				RC: "************************************************************$N"
				    "Fault Reset$N"
				    "************************************************************";
				N: NOP();
				N: XIC(inpRobotIO.O1.DI_002)[TON(tmrResetAfterHold,?,?) ,XIO(tmrResetAfterHold.DN) OTE(pcmdResetAfterHold) ];
				N: [XIC(ocmdReset) ,XIC(pcmdResetAfterHold) ]OTE(inpRobotIO.O1.DI_005);
				N: XIC(stsReadySetUp)XIO(inpRobotIO.I1.DO_003)XIC(inpRobotIO.I1.DO_004)XIO(inpRobotIO.I1.DO_005)XIO(inpRobotIO.O1.DI_005)[XIO(tmrRestartOff.DN) TON(tmrRestartOn,?,?) ,XIC(tmrRestartOn.DN) TON(tmrRestartOff,?,?) ];
				N: XIC(tmrRestartOn.DN)OTE(inpRobotIO.O1.DI_006);
				RC: "************************************************************$N"
				    "Style Select Process$N"
				    "************************************************************";
				N: NOP();
				N: XIC(inpRobotIO.I1.DO_003)OTE(stsStyleSelectDone)OTU(stsStyleSelectInProgress);
				N: XIC(stsReady)LIM(1,pcmdStyleSelect,255)MOV(pcmdStyleSelect,stsProgNmbrReq)XIO(stsStyleSelectDone)OTE(wrkInitiate)OTL(stsStyleSelectInProgress);
				N: [XIC(stsProgNmbrReq.0) OTE(inpRobotIO.O1.DI_009) ,XIC(stsProgNmbrReq.1) OTE(inpRobotIO.O1.DI_010) ,XIC(stsProgNmbrReq.2) OTE(inpRobotIO.O1.DI_011) ,XIC(stsProgNmbrReq.3) OTE(inpRobotIO.O1.DI_012) ,XIC(stsProgNmbrReq.4) OTE(inpRobotIO.O1.DI_013) ,XIC(stsProgNmbrReq.5) OTE(inpRobotIO.O1.DI_014) ,XIC(stsProgNmbrReq.6) OTE(inpRobotIO.O1.DI_015) ,XIC(stsProgNmbrReq.7) OTE(inpRobotIO.O1.DI_016) ];
				N: XIC(wrkInitiate)[XIO(tmrInitiateff.DN) TON(tmrInitiateOn,?,?) ,XIC(tmrInitiateOn.DN) TON(tmrInitiateff,?,?) ];
				N: EQU(pcmdStyleSelect,stsProgNmbrReq)XIC(tmrInitiateOn.DN)OTE(inpRobotIO.O1.DI_018);
				RC: "###########################################$N"
				    "Return To Home and Abort Pick Functions$N"
				    "###########################################";
				N: [XIC(InpRetHomeSeld) ,XIC(inpRobotIO.O1.DI_080) ]OTE(inpRobotIO.O1.DI_079);
				N: XIC(InpAbortPickSeld)OTE(inpRobotIO.O1.DI_080);
				RC: "************************************************************$N"
				    "Style Perms handling for HMI$N"
				    "************************************************************";
				N: NOP();
				RC: "On the Robot Style pop up window these variables write the style number on the push button and the description on the text field right above the push button$N"
				    "*";
				N: JMP(skiptext_StyleHMI_PB)[MOV(StyleHMI.PB_Nmbr[0],StyleHMI.PB_Nmbr[1]) MOV(StyleHMI.PB_Nmbr[2],StyleHMI.PB_Nmbr[3]) MOV(StyleHMI.PB_Nmbr[4],StyleHMI.PB_Nmbr[5]) MOV(StyleHMI.PB_Nmbr[6],StyleHMI.PB_Nmbr[7]) ,MOV(StyleHMI.PB_Nmbr[8],StyleHMI.PB_Nmbr[9]) MOV(StyleHMI.PB_Nmbr[10],StyleHMI.PB_Nmbr[11]) ,LOWER(StyleHMI.PB_Desc[0],StyleHMI.PB_Desc[1]) LOWER(StyleHMI.PB_Desc[2],StyleHMI.PB_Desc[3]) LOWER(StyleHMI.PB_Desc[4],StyleHMI.PB_Desc[5]) LOWER(StyleHMI.PB_Desc[6],StyleHMI.PB_Desc[7]) ,LOWER(StyleHMI.PB_Desc[8],StyleHMI.PB_Desc[9]) LOWER(StyleHMI.PB_Desc[10],StyleHMI.PB_Desc[11]) ];
				N: LBL(skiptext_StyleHMI_PB)NEQ(StyleHMI.PB,0)NEQ(StyleHMI.PB,StyleHMI.Ind)ONS(ONS.2)[NEQ(StyleHMI.PB,StyleHMI.Ind) CLR(StyleHMI.Ind) ,XOR(StyleHMI.PB,StyleHMI.Ind,StyleHMI.Ind) ];
				N: BitCheck_DINT(CheckStyleNumber,StyleHMI.Ind,wrkStyleSelected);
				N: [COP(inpStylePermHMI,StyleHMI.Perm,1) ,XIC(wrkStyleSelected) MOV(CheckStyleNumber.outBitSeld,StyleNmbrPermSeld) ];
				RC: "************************************************************$N"
				    "Maintenance Style Select Process$N"
				    "************************************************************";
				N: NOP();
				RC: "On the Robot Style pop up window these variables write the style number on the push button and the description on the text field right above the push button,$N"
				    "as well as the description of the push buttons that are used to request a Maintenance Position$N"
				    "*$N"
				    "Styles reserved for Maintenance$N"
				    "Style 5 Request - Maintenance Position Tool 0 (No Tool)$N"
				    "Style 6 Request - Maintenance Position Tool 1$N"
				    "Style 7 Request - Maintenance Position Tool 2$N"
				    "Style 8 Request - Maintenance Position Tool 3$N"
				    "Style 9 Request - Maintenance Position Tool 4$N"
				    "Style 10 Request - Maintenance Position Tool 5$N"
				    "Style 11 Request - Maintenance Position Tool 6$N"
				    "Style 12 Request - Maintenance Position Tool 7$N"
				    "*";
				N: JMP(skiptext_MaintPosReqHMI_PB)[MOV(StyleHMI.PB_Nmbr[12],StyleHMI.PB_Nmbr[13]) MOV(StyleHMI.PB_Nmbr[14],StyleHMI.PB_Nmbr[15]) MOV(StyleHMI.PB_Nmbr[16],StyleHMI.PB_Nmbr[17]) MOV(StyleHMI.PB_Nmbr[18],StyleHMI.PB_Nmbr[19]) ,LOWER(StyleHMI.PB_Desc[12],StyleHMI.PB_Desc[13]) LOWER(StyleHMI.PB_Desc[14],StyleHMI.PB_Desc[15]) LOWER(StyleHMI.PB_Desc[16],StyleHMI.PB_Desc[17]) LOWER(StyleHMI.PB_Desc[18],StyleHMI.PB_Desc[19]) ];
				N: LBL(skiptext_MaintPosReqHMI_PB)NEQ(MaintPosReqHMI.Ind,0)OTE(MaintPosReqHMI.AnyReqActive);
				N: MOV(7,wrkIndexMax)MOV(0,wrkIndex);
				N: LBL(Loop_MaintPosReq)NOP();
				N: XIC(MaintPosReqHMI.PB.[wrkIndex])ONS(MaintPosReqHMI.PB_ONS.[wrkIndex])[XIO(stsPN3) XIO(MaintPosReqHMI.AnyReqActive) XIO(MaintPosReqHMI.Ind.[wrkIndex]) ONS(MaintPosReqHMI.Ind_ONS.[wrkIndex]) OTL(MaintPosReqHMI.Ind.[wrkIndex]) ,XIC(MaintPosReqHMI.Ind.[wrkIndex]) XIO(MaintPosReqHMI.Ind_ONS.[wrkIndex]) OTU(MaintPosReqHMI.Ind.[wrkIndex]) ];
				N: OTU(MaintPosReqHMI.PB.[wrkIndex]);
				N: ADD(1,wrkIndex,wrkIndex)LEQ(wrkIndex,wrkIndexMax)JMP(Loop_MaintPosReq);
				RC: "Verifies that only one Maintenance Position request is active at a time";
				N: BitCheck_INT(CheckMaintPosReq,MaintPosReqHMI.Ind,MaintPosReqSeld);
				RC: "Clears Requests if $N"
				    "already at Maintenance Position$N"
				    "or$N"
				    "more than one request active$N"
				    "or$N"
				    "request out of range (max tool 7)";
				N: [XIC(stsPN3) ,XIO(MaintPosReqSeld) ,GRT(CheckMaintPosReq.outBitSeld,7) ]CLR(MaintPosReqHMI.Ind);
				RC: "Copy the HMI request to an Output parameter";
				N: COP(MaintPosReqHMI.Ind,stsMaintPosReq,1);
				RC: "************************************************************$N"
				    "Interlock Process Number$N"
				    "************************************************************";
				N: NOP();
				N: MOV(0,wrkProcessNmbr)BTD(inpRobotIO.I1.DO_049_56,0,wrkProcessNmbr,0,8);
				N: NEQ(wrkProcessNmbr,stsPN)ONS(ONS.0)OTU(inpPNPerm1.Sts_PermOK)OTU(inpPNPerm2.Sts_PermOK);
				N: [CLR(stsPN) FLL(0,wrkPN,1) ,LIM(1,wrkProcessNmbr,255) COP(wrkProcessNmbr,stsPN,1) OTE(True.1) OTE(wrkPN.PN[stsPN]) ];
				N: XIC(True.1)XIC(inpPNPerm1.Sts_PermOK)XIC(inpPNPerm2.Sts_PermOK)[BTD(stsPN,0,inpRobotIO.O1.DI_049_56,0,8) ,OTE(stsPNPermOK) ];
				N: [XIO(True.1) ,XIO(inpPNPerm1.Sts_PermOK) ,XIO(inpPNPerm2.Sts_PermOK) ]CLR(inpRobotIO.O1.DI_049_56);
				RC: "************************************************************$N"
				    "PN Perms handling for HMI$N"
				    "************************************************************";
				N: NOP();
				N: XIC(True.1)[ONS(ONS.1) MOV(1,CurrentPNTab) ,EQU(CurrentPNTab,1) COP(inpPNPerm1,ActivePN,1) ,EQU(CurrentPNTab,2) COP(inpPNPerm2,ActivePN,1) ];
				N: [XIC(PNTabSelect1) MOV(1,CurrentPNTab) ,XIC(PNTabSelect2) MOV(2,CurrentPNTab) ];
				RC: "************************************************************$N"
				    "Decision Code Process$N"
				    "************************************************************";
				N: NOP();
				N: XIC(inpReqDecision)LIM(1,inpDecisionNmbr,127)OTE(True.2);
				N: XIC(inpReqDecision)XIC(True.2)COP(inpDecisionNmbr,inpRobotIO.O1.DI_065_72,1);
				N: [XIO(True.2) ,XIO(inpReqDecision) ]CLR(inpRobotIO.O1.DI_065_72);
				RC: "************************************************************$N"
				    "Decision Perms handling for HMI$N"
				    "************************************************************";
				N: NOP();
				RC: "On the Robot Decision Code pop up window these variables write the decision number on the push button and the description on the text field right above the push button$N"
				    "*";
				N: JMP(skiptext_DecisionHMI_PB)[MOV(DecisionHMI.PB_Nmbr[0],DecisionHMI.PB_Nmbr[1]) MOV(DecisionHMI.PB_Nmbr[2],DecisionHMI.PB_Nmbr[3]) MOV(DecisionHMI.PB_Nmbr[4],DecisionHMI.PB_Nmbr[5]) MOV(DecisionHMI.PB_Nmbr[6],DecisionHMI.PB_Nmbr[7]) ,MOV(DecisionHMI.PB_Nmbr[8],DecisionHMI.PB_Nmbr[9]) MOV(DecisionHMI.PB_Nmbr[10],DecisionHMI.PB_Nmbr[11]) MOV(DecisionHMI.PB_Nmbr[12],DecisionHMI.PB_Nmbr[13]) MOV(DecisionHMI.PB_Nmbr[14],DecisionHMI.PB_Nmbr[15]) ,LOWER(DecisionHMI.PB_Desc[0],DecisionHMI.PB_Desc[1]) LOWER(DecisionHMI.PB_Desc[2],DecisionHMI.PB_Desc[3]) LOWER(DecisionHMI.PB_Desc[4],DecisionHMI.PB_Desc[5]) LOWER(DecisionHMI.PB_Desc[6],DecisionHMI.PB_Desc[7]) ,LOWER(DecisionHMI.PB_Desc[8],DecisionHMI.PB_Desc[9]) LOWER(DecisionHMI.PB_Desc[10],DecisionHMI.PB_Desc[11]) LOWER(DecisionHMI.PB_Desc[12],DecisionHMI.PB_Desc[13]) LOWER(DecisionHMI.PB_Desc[14],DecisionHMI.PB_Desc[15]) ];
				N: LBL(skiptext_DecisionHMI_PB)NEQ(DecisionHMI.PB,0)NEQ(DecisionHMI.PB,DecisionHMI.Ind)ONS(ONS.3)[NEQ(DecisionHMI.PB,DecisionHMI.Ind) CLR(DecisionHMI.Ind) ,XOR(DecisionHMI.PB,DecisionHMI.Ind,DecisionHMI.Ind) ];
				N: BitCheck_INT(CheckDecisionNumber,DecisionHMI.Ind,DecisionSelected);
				N: [COP(inpDecisionPermHMI,DecisionHMI.Perm,1) ,XIC(DecisionSelected) MOV(CheckDecisionNumber.outBitSeld,DecisionNmbrPermSeld) ];
				RC: "************************************************************$N"
				    "Speed Control$N"
				    "************************************************************";
				N: NOP();
				N: COP(inpRobotIO.I1.DO_057_64,stsSpeed,1);
				RC: "************************************************************$N"
				    "Faster HMI PB$N"
				    "************************************************************$N"
				    "";
				N: XIC(ocmdFaster)ONS(ONS.4)XIO(inpRobotIO.I1.DO_008)XIC(inpRobotIO.I1.DO_044)XIO(inpRobotIO.O1.DI_047)XIO(inpRobotIO.I1.DO_034)[LES(stsSpeed,10) MOV(10,inpNewSpeed) ,LIM(10,stsSpeed,24) MOV(25,inpNewSpeed) ,LIM(25,stsSpeed,49) MOV(50,inpNewSpeed) ,LIM(50,stsSpeed,99) MOV(100,inpNewSpeed) ];
				RC: "************************************************************$N"
				    "Slower HMI PB$N"
				    "************************************************************$N"
				    "";
				N: XIC(ocmdSlower)ONS(ONS.5)XIO(inpRobotIO.I1.DO_008)XIC(inpRobotIO.I1.DO_044)XIO(inpRobotIO.O1.DI_047)XIO(inpRobotIO.I1.DO_034)[LIM(2,stsSpeed,10) MOV(1,inpNewSpeed) ,LIM(11,stsSpeed,25) MOV(10,inpNewSpeed) ,LIM(26,stsSpeed,50) MOV(25,inpNewSpeed) ,GRT(stsSpeed,50) MOV(50,inpNewSpeed) ];
				RC: "************************************************************$N"
				    "Change Speed Request to RB$N"
				    "************************************************************$N"
				    "";
				N: [GRT(inpNewSpeed,0) OTL(inpRobotIO.O1.DI_047) ,[EQU(stsSpeed,inpNewSpeed) ,XIC(inpRobotIO.O1.DI_047) TON(tmrNewSpeedReq,?,?) XIC(tmrNewSpeedReq.DN) ] [CLR(inpNewSpeed) ,OTU(inpRobotIO.O1.DI_047) ] ];
				RC: "************************************************************$N"
				    "Send New Speed to RB$N"
				    "************************************************************$N"
				    "";
				N: LIM(0,inpNewSpeed,100)COP(inpNewSpeed,inpRobotIO.O1.DI_057_64,1);
				RC: "###########################################$N"
				    "Cycle Times$N"
				    "###########################################";
				N: XIC(inpRobotIO.I1.DO_044)XIO(stsHome)[XIC(inpRobotIO.O1.DI_002) ,XIC(inpRobotIO.I1.DO_003) ]XIO(stsWaitingOnInput)XIO(MaintenancePosInd)MOV(InpCTPreset,CycleTMR.PRE)TON(CycleTMR,?,?);
				N: MOV(CycleTMR.ACC,stsCycleTMRAcc);
				N: XIC(CycleTMR.EN)OTE(stsCycleTMREnbd);
				N: MOV(InpCTPreset,TackTMR.PRE)TON(TackTMR,?,?);
				N: MOV(TackTMR.ACC,stsTackTMRAcc);
				N: XIC(TackTMR.EN)OTE(stsTackTMREnbd);
				N: XIC(stsHome)XIO(inpRobotIO.I1.DO_003)[XIO(ONS.6) [MOV(CycleTMR.ACC,CycleTimeStore) ,RES(CycleTMR) ,MOV(TackTMR.ACC,TackTimeStore) ,RES(TackTMR) ] ,OTE(ONS.6) ];
				RC: "###########################################$N"
				    "Nozzle Check$N"
				    "###########################################";
				N: XIC(InpNozzleChk1Cmd)XIC(InpNozzle1Sw)[XIC(Nozzle1Tmr.DN) OTE(stsNozzle1ChkOK) ,MOV(InpNozzleChkPreset,Nozzle1Tmr.PRE) TON(Nozzle1Tmr,?,?) ];
				N: XIC(InpNozzleChk2Cmd)XIC(InpNozzle2Sw)[XIC(Nozzle2Tmr.DN) OTE(stsNozzle2ChkOK) ,MOV(InpNozzleChkPreset,Nozzle2Tmr.PRE) TON(Nozzle2Tmr,?,?) ];
		END_ROUTINE

		ROUTINE Prescan 
				N: NOP();
				N: MOV(1,CurrentPNTab)MOV(60,ProcessTimeout);
				N: OTU(inpPNPerm1.Sts_PermOK)OTU(inpPNPerm2.Sts_PermOK);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION HMI_Toggle2PB (Description := "HMI Toggle",
	                                             Class := Standard,
	                                             Revision := "1.0",
	                                             RevisionExtension := "20200224",
	                                             RevisionNote := "v1.0 Release",
	                                             Vendor := "Hokuto",
	                                             ExecutePrescan := No,
	                                             ExecutePostscan := No,
	                                             ExecuteEnableInFalse := No,
	                                             CreatedDate := "2020-02-24T17:58:39.150Z",
	                                             CreatedBy := "LAPTOP-KKSRL2SB\ucarr",
	                                             EditedDate := "2022-01-05T16:13:14.367Z",
	                                             EditedBy := "LUCID\DanWeinhold",
	                                             SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			PB1 : BOOL (Description := "HMI$NPush Button 1",
			               Usage := Input,
			               RADIX := Decimal,
			               Required := Yes,
			               Visible := Yes,
			               DefaultData := 0);
			PB2 : BOOL (Description := "HMI$NPush Button 2",
			               Usage := Input,
			               RADIX := Decimal,
			               Required := Yes,
			               Visible := Yes,
			               DefaultData := 0);
			Latch : BOOL (Description := "Output$NLatch",
			                 Usage := Output,
			                 RADIX := Decimal,
			                 Required := Yes,
			                 Visible := Yes,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			ONS1 : BOOL (RADIX := Decimal,
			               ExternalAccess := None,
			               DefaultData := 0);
			ONS2 : BOOL (RADIX := Decimal,
			               ExternalAccess := None,
			               DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "HMI Toggle - 2 Push Buttons AOI$N"
				    "************************************************************";
				N: NOP();
				N: [XIC(PB1) ,XIC(PB2) ]ONS(ONS1)[XIO(Latch) ONS(ONS2) OTL(Latch) ,XIC(Latch) XIO(ONS2) OTU(Latch) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION HMI_Prod_Count (Class := Standard,
	                                              Revision := "1.2",
	                                              RevisionExtension := "20200402",
	                                              RevisionNote := "v1.0 Release$Nv1.1 Change value of moves at Set Current Style, Change length on COP instructions, add ONS for move current count to prev$Nv1.2 Local tag for count added, multiple TL counts per controller.",
	                                              Vendor := "Hokuto",
	                                              ExecutePrescan := No,
	                                              ExecutePostscan := No,
	                                              ExecuteEnableInFalse := No,
	                                              CreatedDate := "2020-02-11T08:36:30.591Z",
	                                              CreatedBy := "LAPTOP-KKSRL2SB\ucarr",
	                                              EditedDate := "2022-01-05T16:13:14.328Z",
	                                              EditedBy := "LUCID\DanWeinhold",
	                                              SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			HMIProdCount : h_udt_HMI_Prod_Count (Usage := InOut,
			                        Required := Yes,
			                        Visible := Yes);
			Time : p_udt_PLC_DateTime (Usage := InOut,
			                Required := Yes,
			                Visible := Yes);
			ShiftRegister : p_udt_Shift_Register (Usage := InOut,
			                         Required := Yes,
			                         Visible := Yes);
			ProdCount_Trigger : BOOL (Usage := Input,
			                             RADIX := Decimal,
			                             Required := Yes,
			                             Visible := Yes,
			                             DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			ProdCountRstONS : BOOL (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			TotalCntRstONS : BOOL (RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := 0);
			ProdCount_CurrModel : DINT (RADIX := Decimal,
			                              ExternalAccess := None,
			                              DefaultData := 0);
			ShiftProdCountRstONS : BOOL (RADIX := Decimal,
			                               ExternalAccess := None,
			                               DefaultData := 0);
			TLCount : h_udt_HMI_Prod_Count (ExternalAccess := Read/Write,
			                  DefaultData := "[[0,0,0],[[[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],0,0,0,0,[1],[1],[1]]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Production Counts AOI$N"
				    "************************************************************$N"
				    "$N"
				    "";
				N: NOP();
				RC: "This Rung Copies Current Shift Production Count into $N"
				    "The Previous Shifts Production Count Based on the Values Set On the HMI";
				N: [XIC(HMIProdCount.Ind.Shift[1].Active) EQU(Time.Hour,HMIProdCount.Ind.Shift[1].Hour) EQU(Time.Minute,HMIProdCount.Ind.Shift[1].Min) EQU(Time.Second,0) ,XIC(HMIProdCount.Ind.Shift[2].Active) EQU(Time.Hour,HMIProdCount.Ind.Shift[2].Hour) EQU(Time.Minute,HMIProdCount.Ind.Shift[2].Min) EQU(Time.Second,0) ,XIC(HMIProdCount.Ind.Shift[3].Active) EQU(Time.Hour,HMIProdCount.Ind.Shift[3].Hour) EQU(Time.Minute,HMIProdCount.Ind.Shift[3].Min) EQU(Time.Second,0) ]ONS(ShiftProdCountRstONS)COP(TLCount.Ind.ShiftCurrProdCount[0],TLCount.Ind.ShiftPrevProdCount[0],8)FLL(0,TLCount.Ind.ShiftCurrProdCount[0],8);
				RC: "$N"
				    "This Rung Copies Current Hour Production Count into $N"
				    "The Previous Hour Production Count Based on the Values Set On the HMI$N"
				    "$N"
				    "";
				N: EQU(Time.Minute,0)EQU(Time.Second,0)ONS(ProdCountRstONS)COP(TLCount.Ind.HourCurrProdCount[0],TLCount.Ind.HourPrevProdCount[0],8)FLL(0,TLCount.Ind.HourCurrProdCount[0],8);
				RC: "$N"
				    "Zero Out Total Count at the Start of 1st Shift$N"
				    "$N"
				    "";
				N: EQU(Time.Hour,HMIProdCount.Ind.Shift[1].Hour)EQU(Time.Minute,HMIProdCount.Ind.Shift[1].Min)EQU(Time.Second,0)ONS(TotalCntRstONS)FLL(0,TLCount.Ind.TotalProdCount[0],8);
				RC: "$N"
				    "Set Current Style$N"
				    "$N"
				    "";
				N: [XIC(ShiftRegister.Data.Model.0) MOV(0,ProdCount_CurrModel) ,XIC(ShiftRegister.Data.Model.1) MOV(1,ProdCount_CurrModel) ,XIC(ShiftRegister.Data.Model.2) MOV(2,ProdCount_CurrModel) ,XIC(ShiftRegister.Data.Model.3) MOV(3,ProdCount_CurrModel) ];
				N: LIM(4,ProdCount_CurrModel,-1)MOV(0,ProdCount_CurrModel);
				RC: "$N"
				    "This Rung Increments The Production Counters Based $N"
				    "On the Production Trigger$N"
				    "$N"
				    "";
				N: XIC(ProdCount_Trigger)[LIM(32767,TLCount.Ind.ShiftCurrProdCount[ProdCount_CurrModel],-1) MOV(0,TLCount.Ind.ShiftCurrProdCount[ProdCount_CurrModel]) ,ADD(1,TLCount.Ind.ShiftCurrProdCount[ProdCount_CurrModel],TLCount.Ind.ShiftCurrProdCount[ProdCount_CurrModel]) ,LIM(32767,TLCount.Ind.HourCurrProdCount[ProdCount_CurrModel],-1) MOV(0,TLCount.Ind.HourCurrProdCount[ProdCount_CurrModel]) ,ADD(1,TLCount.Ind.HourCurrProdCount[ProdCount_CurrModel],TLCount.Ind.HourCurrProdCount[ProdCount_CurrModel]) ,LIM(2147483646,TLCount.Ind.TotalProdCount[ProdCount_CurrModel],-1) MOV(0,TLCount.Ind.TotalProdCount[ProdCount_CurrModel]) ,ADD(1,TLCount.Ind.TotalProdCount[ProdCount_CurrModel],TLCount.Ind.TotalProdCount[ProdCount_CurrModel]) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION MES_BookEncode (Class := Standard,
	                                              Revision := "1.0",
	                                              Vendor := "GV Automation",
	                                              ExecutePrescan := No,
	                                              ExecutePostscan := No,
	                                              ExecuteEnableInFalse := No,
	                                              CreatedDate := "2020-11-05T06:50:39.946Z",
	                                              CreatedBy := "LAPTOP-2CUQA63B\marco",
	                                              EditedDate := "2022-08-19T23:39:15.692Z",
	                                              EditedBy := "MFG\JulioGranillo",
	                                              SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpMESDictionary : p_udt_MES_Dictionary (Usage := InOut,
			                            Required := Yes,
			                            Visible := Yes);
			inpStation : p_udt_MES_Station (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			outMESJOB_Station : Job_Station (Usage := InOut,
			                             Required := Yes,
			                             Visible := Yes);
			stsFault : BOOL (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			stsDone : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
			CmdTrigger : BOOL (Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			wrk_FSCModel : CONTROL (ExternalAccess := None,
			                       DefaultData := "[0,10,0]");
			wrk_FSCStyle : CONTROL (ExternalAccess := None,
			                       DefaultData := "[0,10,0]");
			wrk_FSCVariant : CONTROL (ExternalAccess := None,
			                         DefaultData := "[0,10,0]");
			wrk_FSCPartID : CONTROL (ExternalAccess := None,
			                        DefaultData := "[0,10,0]");
			wrk_Ons : DINT (RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			wrk_ScrapReason : DINT (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			wrk_FSCScrapReason : CONTROL (ExternalAccess := None,
			                             DefaultData := "[0,10,0]");
			wrk_Year : STRING_6 (ExternalAccess := None,
			                   DefaultData := "[0,'$00$00$00$00$00$00']");
			wrk_Month : STRING_2 (ExternalAccess := None,
			                    DefaultData := "[0,'$00$00']");
			wrk_Day : STRING_2 (ExternalAccess := None,
			                  DefaultData := "[0,'$00$00']");
			wrk_Hour : STRING_2 (ExternalAccess := None,
			                   DefaultData := "[0,'$00$00']");
			wrk_Minute : STRING_2 (ExternalAccess := None,
			                     DefaultData := "[0,'$00$00']");
			wrk_Second : STRING_2 (ExternalAccess := None,
			                     DefaultData := "[0,'$00$00']");
			cons_Dash : STRING_2 (ExternalAccess := None,
			                    DefaultData := "[1,'-$00']");
			cons_Colon : STRING_2 (ExternalAccess := None,
			                     DefaultData := "[1,':$00']");
			cons_Blank : STRING_2 (ExternalAccess := None,
			                     DefaultData := "[1,' $00']");
			wrkt_StationSts : DINT (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			wrkStationSts : INT (RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			wrkFault : DINT (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			wrkLastModel : DINT (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			wrkLastStyle : DINT (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			wrkLastVariant : DINT (RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := 0);
			wrkLastScrapReason : DINT (RADIX := Decimal,
			                             ExternalAccess := None,
			                             DefaultData := 0);
			wrkTmrFault : TIMER (ExternalAccess := None,
			                      DefaultData := "[0,3000,0]");
			wrkRetryCount : DINT (RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			wrkTmrComplete : TIMER (ExternalAccess := None,
			                         DefaultData := "[0,0,0]");
			Empty_STRING20 : STRING_20 (ExternalAccess := None,
			                         DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			CheckModel : BitCheck_DINT (ExternalAccess := None,
			                     DefaultData := "[1,0,0,0,0,0]");
			ModelValid : BOOL (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			wrkLibraryModelsSize : DINT (RADIX := Decimal,
			                               ExternalAccess := None,
			                               DefaultData := 0);
			CheckStyle : BitCheck_DINT (ExternalAccess := None,
			                     DefaultData := "[1,0,0,0,0,0]");
			StyleValid : BOOL (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			wrkLibraryStylesSize : DINT (RADIX := Decimal,
			                               ExternalAccess := None,
			                               DefaultData := 0);
			wrkLibraryVariantsSize : DINT (RADIX := Decimal,
			                                 ExternalAccess := None,
			                                 DefaultData := 0);
			CheckVariant : BitCheck_DINT (ExternalAccess := None,
			                       DefaultData := "[1,0,0,0,0,0]");
			VariantValid : BOOL (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			wrkLibraryScrap_ReasonsSize : DINT (RADIX := Decimal,
			                                      ExternalAccess := None,
			                                      DefaultData := 0);
			CheckScrapReason : BitCheck_DINT (ExternalAccess := None,
			                           DefaultData := "[1,0,0,0,0,0]");
			ScrapReasonValid : BOOL (RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			wrkInProcess : BOOL (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: XIC(CmdTrigger)ONS(wrk_Ons.0)OTL(wrkInProcess);
				N: XIC(wrkInProcess)NEQ(inpStation.Data.SeqNum,outMESJOB_Station.Seq_Number)[LES(inpStation.Data.SeqNum,1) MOV(0,outMESJOB_Station.Seq_Number) OTL(wrkFault.0) ,XIO(wrkFault.0) MOV(inpStation.Data.SeqNum,outMESJOB_Station.Seq_Number) ];
				N: XIC(wrkInProcess)NEQ(inpStation.Data.PartStatus,outMESJOB_Station.Part_Status)[LIM(4,inpStation.Data.PartStatus,0) MOV(0,outMESJOB_Station.Part_Status) OTL(wrkFault.1) ,XIO(wrkFault.1) MOV(inpStation.Data.PartStatus,outMESJOB_Station.Part_Status) ];
				N: XIC(wrkInProcess)NEQ(inpStation.Data.ReqQty,outMESJOB_Station.Required_Quantity)[LES(inpStation.Data.ReqQty,1) MOV(0,outMESJOB_Station.Required_Quantity) OTL(wrkFault.2) ,XIO(wrkFault.2) MOV(inpStation.Data.ReqQty,outMESJOB_Station.Required_Quantity) ];
				N: XIC(wrkInProcess)NEQ(inpStation.Data.State,outMESJOB_Station.State)[LIM(7,inpStation.Data.State,0) MOV(0,outMESJOB_Station.State) OTL(wrkFault.3) ,XIO(wrkFault.3) MOV(inpStation.Data.State,outMESJOB_Station.State) ];
				N: XIC(wrkInProcess)NEQ(inpStation.Data.PartID,outMESJOB_Station.Part_ID)[EQU(inpStation.Data.PartID.LEN,0) FLL(0,outMESJOB_Station.Part_ID,1) OTL(wrkFault.4) ,XIO(wrkFault.4) MOV(inpStation.Data.PartID,outMESJOB_Station.Part_ID) ];
				N: XIC(wrkInProcess)NEQ(inpStation.Data.RFID,outMESJOB_Station.RFID)[EQU(inpStation.Data.RFID.LEN,0) FLL(0,outMESJOB_Station.RFID,1) OTL(wrkFault.5) ,XIO(wrkFault.5) MOV(inpStation.Data.RFID,outMESJOB_Station.RFID) ];
				N: XIC(wrkInProcess)NEQ(inpStation.Data.JobNum,outMESJOB_Station.Job_Number)[EQU(inpStation.Data.JobNum.LEN,0) FLL(0,outMESJOB_Station.Job_Number,1) OTL(wrkFault.6) ,XIO(wrkFault.6) MOV(inpStation.Data.JobNum,outMESJOB_Station.Job_Number) ];
				N: XIC(wrkInProcess)NEQ(inpStation.Data.PartNum,outMESJOB_Station.Part_Number)[EQU(inpStation.Data.PartNum.LEN,0) FLL(0,outMESJOB_Station.Part_Number,1) OTL(wrkFault.7) ,XIO(wrkFault.7) MOV(inpStation.Data.PartNum,outMESJOB_Station.Part_Number) ];
				N: XIO(wrkFault.8)XIC(wrkInProcess)[SIZE(inpMESDictionary.Models,0,wrkLibraryModelsSize) EQU(outMESJOB_Station.Model.LEN,0) NEQ(inpStation.Data.Model,0) BitCheck_DINT(CheckModel,inpStation.Data.Model,ModelValid) ,XIC(ModelValid) LES(CheckModel.outBitSeld,wrkLibraryModelsSize) COP(inpMESDictionary.Models[CheckModel.outBitSeld],outMESJOB_Station.Model,1) MOV(inpStation.Data.Model,wrkLastModel) ,GEQ(CheckModel.outBitSeld,wrkLibraryModelsSize) OTL(wrkFault.8) ];
				N: XIO(wrkFault.9)XIC(wrkInProcess)[SIZE(inpMESDictionary.Styles,0,wrkLibraryStylesSize) EQU(outMESJOB_Station.Style.LEN,0) NEQ(inpStation.Data.Style,0) BitCheck_DINT(CheckStyle,inpStation.Data.Style,StyleValid) ,XIC(StyleValid) LES(CheckStyle.outBitSeld,wrkLibraryStylesSize) COP(inpMESDictionary.Styles[CheckStyle.outBitSeld],outMESJOB_Station.Style,1) MOV(inpStation.Data.Style,wrkLastStyle) ,GEQ(CheckStyle.outBitSeld,wrkLibraryStylesSize) OTL(wrkFault.9) ];
				N: XIO(wrkFault.10)XIC(wrkInProcess)[SIZE(inpMESDictionary.Variants,0,wrkLibraryVariantsSize) EQU(outMESJOB_Station.Variant.LEN,0) NEQ(inpStation.Data.Variant,0) BitCheck_DINT(CheckVariant,inpStation.Data.Variant,VariantValid) ,XIC(VariantValid) LES(CheckVariant.outBitSeld,wrkLibraryVariantsSize) COP(inpMESDictionary.Variants[CheckVariant.outBitSeld],outMESJOB_Station.Variant,1) MOV(inpStation.Data.Variant,wrkLastVariant) ,GEQ(CheckVariant.outBitSeld,wrkLibraryVariantsSize) OTL(wrkFault.10) ];
				N: XIO(wrkFault.11)XIC(wrkInProcess)[SIZE(inpMESDictionary.Scrap_Reasons,0,wrkLibraryScrap_ReasonsSize) EQU(outMESJOB_Station.Scrap_Reason.LEN,0) NEQ(inpStation.Data.ScrapReason,0) BitCheck_DINT(CheckScrapReason,inpStation.Data.ScrapReason,ScrapReasonValid) ,XIC(ScrapReasonValid) LES(CheckScrapReason.outBitSeld,wrkLibraryScrap_ReasonsSize) COP(inpMESDictionary.Scrap_Reasons[CheckScrapReason.outBitSeld],outMESJOB_Station.Scrap_Reason,1) MOV(inpStation.Data.ScrapReason,wrkLastScrapReason) ,GEQ(CheckScrapReason.outBitSeld,wrkLibraryScrap_ReasonsSize) OTL(wrkFault.11) ];
				N: XIC(wrkInProcess)NEQ(inpStation.Data.JobType,outMESJOB_Station.Job_Type)[EQU(inpStation.Data.JobType,0) MOV(0,outMESJOB_Station.Job_Type) OTL(wrkFault.12) ,XIO(wrkFault.12) MOV(inpStation.Data.JobType,outMESJOB_Station.Job_Type) ];
				N: NEQ(wrkFault,0)OTE(stsFault)MOV(3000,wrkTmrFault.PRE)TON(wrkTmrFault,?,?);
				N: XIC(wrkTmrFault.DN)MOV(0,wrkFault);
				N: NEQ(outMESJOB_Station.Seq_Number,0)NEQ(outMESJOB_Station.Part_Status,0)NEQ(outMESJOB_Station.Required_Quantity,0)NEQ(outMESJOB_Station.State,0)EQU(outMESJOB_Station.State,5)NEQ(outMESJOB_Station.Part_ID,'')NEQ(outMESJOB_Station.RFID,'')NEQ(outMESJOB_Station.Job_Number,'')NEQ(outMESJOB_Station.Part_Number,'')NEQ(outMESJOB_Station.Model,'')NEQ(outMESJOB_Station.Style,'')NEQ(outMESJOB_Station.Variant,'')NEQ(outMESJOB_Station.Scrap_Reason,'')NEQ(outMESJOB_Station.Job_Type,0)OTE(stsDone);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION ShiftRegiManager (Class := Standard,
	                                                Revision := "1.4",
	                                                RevisionExtension := "20210708",
	                                                RevisionNote := "v1.1 Added inpOptionMask# as input parameter which aliases local OptionMask array elements.$Nv1.2 EditCtrl.inpManual OTE to be programmed outside AOI.$Nv1.3 Added Clipboard functionality.$Nv1.4 Added MES Dictionary for names flexibility.",
	                                                Vendor := "Hokuto",
	                                                ExecutePrescan := No,
	                                                ExecutePostscan := No,
	                                                ExecuteEnableInFalse := No,
	                                                CreatedDate := "2019-10-11T17:16:12.922Z",
	                                                CreatedBy := "LAPTOP-KKSRL2SB\ucarr",
	                                                EditedDate := "2022-01-05T16:13:14.585Z",
	                                                EditedBy := "LUCID\DanWeinhold",
	                                                SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpManual : BOOL (Description := "Manual Enable",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			inpShiftRegisters : p_udt_Shift_Register[1] (Usage := InOut,
			                             Required := Yes,
			                             Visible := Yes);
			inpEmptyData : p_udt_Shift_Register_Data (Usage := InOut,
			                        Required := Yes,
			                        Visible := Yes);
			inpMESDictionary : p_udt_MES_Dictionary (Usage := InOut,
			                            Required := Yes,
			                            Visible := Yes);
			visModel : SINT (COMMENT.0 := "AIR Model Select Button",
			                    COMMENT.1 := "SUV Model Select Button",
			                    COMMENT.2 := "#FUTURE# Model Select Button",
			                    COMMENT.3 := "#FUTURE# Model Select Button",
			                    COMMENT.4 := "#FUTURE# Model Select Button",
			                    COMMENT.5 := "#FUTURE# Model Select Button",
			                    COMMENT.6 := "#FUTURE# Model Select Button",
			                    COMMENT.7 := "#FUTURE# Model Select Button",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 0);
			visSeqNum : BOOL (Description := "Sequence Number Input Field",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			visRoute_to_Repair : BOOL (Description := "Route to Repair Input Field",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              DefaultData := 0);
			inpOptionMask0 OF OptionMask[0] (COMMENT.0 := "Roof$NOption",
			                          COMMENT.1 := "Steering$NOption",
			                          COMMENT.2 := "#FUTURE#$NOption",
			                          COMMENT.3 := "#FUTURE#$NOption",
			                          COMMENT.4 := "#FUTURE#$NOption",
			                          COMMENT.5 := "#FUTURE#$NOption",
			                          COMMENT.6 := "#FUTURE#$NOption",
			                          COMMENT.7 := "#FUTURE#$NOption",
			                          COMMENT.8 := "#FUTURE#$NOption",
			                          COMMENT.9 := "#FUTURE#$NOption",
			                          COMMENT.10 := "#FUTURE#$NOption",
			                          COMMENT.11 := "#FUTURE#$NOption",
			                          COMMENT.12 := "#FUTURE#$NOption",
			                          COMMENT.13 := "#FUTURE#$NOption",
			                          COMMENT.14 := "#FUTURE#$NOption",
			                          COMMENT.15 := "#FUTURE#$NOption",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			inpOptionMask1 OF OptionMask[1] (COMMENT.0 := "Roof$NOption",
			                          COMMENT.1 := "Steering$NOption",
			                          COMMENT.2 := "#FUTURE#$NOption",
			                          COMMENT.3 := "#FUTURE#$NOption",
			                          COMMENT.4 := "#FUTURE#$NOption",
			                          COMMENT.5 := "#FUTURE#$NOption",
			                          COMMENT.6 := "#FUTURE#$NOption",
			                          COMMENT.7 := "#FUTURE#$NOption",
			                          COMMENT.8 := "#FUTURE#$NOption",
			                          COMMENT.9 := "#FUTURE#$NOption",
			                          COMMENT.10 := "#FUTURE#$NOption",
			                          COMMENT.11 := "#FUTURE#$NOption",
			                          COMMENT.12 := "#FUTURE#$NOption",
			                          COMMENT.13 := "#FUTURE#$NOption",
			                          COMMENT.14 := "#FUTURE#$NOption",
			                          COMMENT.15 := "#FUTURE#$NOption",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			inpOptionMask2 OF OptionMask[2] (COMMENT.0 := "Roof$NOption",
			                          COMMENT.1 := "Steering$NOption",
			                          COMMENT.2 := "#FUTURE#$NOption",
			                          COMMENT.3 := "#FUTURE#$NOption",
			                          COMMENT.4 := "#FUTURE#$NOption",
			                          COMMENT.5 := "#FUTURE#$NOption",
			                          COMMENT.6 := "#FUTURE#$NOption",
			                          COMMENT.7 := "#FUTURE#$NOption",
			                          COMMENT.8 := "#FUTURE#$NOption",
			                          COMMENT.9 := "#FUTURE#$NOption",
			                          COMMENT.10 := "#FUTURE#$NOption",
			                          COMMENT.11 := "#FUTURE#$NOption",
			                          COMMENT.12 := "#FUTURE#$NOption",
			                          COMMENT.13 := "#FUTURE#$NOption",
			                          COMMENT.14 := "#FUTURE#$NOption",
			                          COMMENT.15 := "#FUTURE#$NOption",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			inpOptionMask3 OF OptionMask[3] (COMMENT.0 := "Roof$NOption",
			                          COMMENT.1 := "Steering$NOption",
			                          COMMENT.2 := "#FUTURE#$NOption",
			                          COMMENT.3 := "#FUTURE#$NOption",
			                          COMMENT.4 := "#FUTURE#$NOption",
			                          COMMENT.5 := "#FUTURE#$NOption",
			                          COMMENT.6 := "#FUTURE#$NOption",
			                          COMMENT.7 := "#FUTURE#$NOption",
			                          COMMENT.8 := "#FUTURE#$NOption",
			                          COMMENT.9 := "#FUTURE#$NOption",
			                          COMMENT.10 := "#FUTURE#$NOption",
			                          COMMENT.11 := "#FUTURE#$NOption",
			                          COMMENT.12 := "#FUTURE#$NOption",
			                          COMMENT.13 := "#FUTURE#$NOption",
			                          COMMENT.14 := "#FUTURE#$NOption",
			                          COMMENT.15 := "#FUTURE#$NOption",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			inpOptionMask4 OF OptionMask[4] (COMMENT.0 := "Roof$NOption",
			                          COMMENT.1 := "Steering$NOption",
			                          COMMENT.2 := "#FUTURE#$NOption",
			                          COMMENT.3 := "#FUTURE#$NOption",
			                          COMMENT.4 := "#FUTURE#$NOption",
			                          COMMENT.5 := "#FUTURE#$NOption",
			                          COMMENT.6 := "#FUTURE#$NOption",
			                          COMMENT.7 := "#FUTURE#$NOption",
			                          COMMENT.8 := "#FUTURE#$NOption",
			                          COMMENT.9 := "#FUTURE#$NOption",
			                          COMMENT.10 := "#FUTURE#$NOption",
			                          COMMENT.11 := "#FUTURE#$NOption",
			                          COMMENT.12 := "#FUTURE#$NOption",
			                          COMMENT.13 := "#FUTURE#$NOption",
			                          COMMENT.14 := "#FUTURE#$NOption",
			                          COMMENT.15 := "#FUTURE#$NOption",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			inpOptionMask5 OF OptionMask[5] (COMMENT.0 := "Roof$NOption",
			                          COMMENT.1 := "Steering$NOption",
			                          COMMENT.2 := "#FUTURE#$NOption",
			                          COMMENT.3 := "#FUTURE#$NOption",
			                          COMMENT.4 := "#FUTURE#$NOption",
			                          COMMENT.5 := "#FUTURE#$NOption",
			                          COMMENT.6 := "#FUTURE#$NOption",
			                          COMMENT.7 := "#FUTURE#$NOption",
			                          COMMENT.8 := "#FUTURE#$NOption",
			                          COMMENT.9 := "#FUTURE#$NOption",
			                          COMMENT.10 := "#FUTURE#$NOption",
			                          COMMENT.11 := "#FUTURE#$NOption",
			                          COMMENT.12 := "#FUTURE#$NOption",
			                          COMMENT.13 := "#FUTURE#$NOption",
			                          COMMENT.14 := "#FUTURE#$NOption",
			                          COMMENT.15 := "#FUTURE#$NOption",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			inpOptionMask6 OF OptionMask[6] (COMMENT.0 := "Roof$NOption",
			                          COMMENT.1 := "Steering$NOption",
			                          COMMENT.2 := "#FUTURE#$NOption",
			                          COMMENT.3 := "#FUTURE#$NOption",
			                          COMMENT.4 := "#FUTURE#$NOption",
			                          COMMENT.5 := "#FUTURE#$NOption",
			                          COMMENT.6 := "#FUTURE#$NOption",
			                          COMMENT.7 := "#FUTURE#$NOption",
			                          COMMENT.8 := "#FUTURE#$NOption",
			                          COMMENT.9 := "#FUTURE#$NOption",
			                          COMMENT.10 := "#FUTURE#$NOption",
			                          COMMENT.11 := "#FUTURE#$NOption",
			                          COMMENT.12 := "#FUTURE#$NOption",
			                          COMMENT.13 := "#FUTURE#$NOption",
			                          COMMENT.14 := "#FUTURE#$NOption",
			                          COMMENT.15 := "#FUTURE#$NOption",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			inpOptionMask7 OF OptionMask[7] (COMMENT.0 := "Roof$NOption",
			                          COMMENT.1 := "Steering$NOption",
			                          COMMENT.2 := "#FUTURE#$NOption",
			                          COMMENT.3 := "#FUTURE#$NOption",
			                          COMMENT.4 := "#FUTURE#$NOption",
			                          COMMENT.5 := "#FUTURE#$NOption",
			                          COMMENT.6 := "#FUTURE#$NOption",
			                          COMMENT.7 := "#FUTURE#$NOption",
			                          COMMENT.8 := "#FUTURE#$NOption",
			                          COMMENT.9 := "#FUTURE#$NOption",
			                          COMMENT.10 := "#FUTURE#$NOption",
			                          COMMENT.11 := "#FUTURE#$NOption",
			                          COMMENT.12 := "#FUTURE#$NOption",
			                          COMMENT.13 := "#FUTURE#$NOption",
			                          COMMENT.14 := "#FUTURE#$NOption",
			                          COMMENT.15 := "#FUTURE#$NOption",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			inpOptionMask8 OF OptionMask[8] (Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			inpOptionMask9 OF OptionMask[9] (Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No);
			inpOptionMask10 OF OptionMask[10] (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpOptionMask11 OF OptionMask[11] (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpOptionMask12 OF OptionMask[12] (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpOptionMask13 OF OptionMask[13] (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpOptionMask14 OF OptionMask[14] (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpOptionMask15 OF OptionMask[15] (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
		END_PARAMETERS

		LOCAL_TAGS
			wrkMaxSize : DINT (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Index : DINT (RADIX := Decimal,
			                ExternalAccess := None,
			                DefaultData := 0);
			OptionMask : INT[16] (RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]");
			ClipBoard : h_udt_HMI_Model_Ind (ExternalAccess := None,
			                    DefaultData
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Shift Register Manager AOI$N"
				    "************************************************************";
				N: NOP();
				N: SIZE(inpShiftRegisters,0,wrkMaxSize)MOV(0,Index);
				N: LBL(Loop_ShiftRegisters)NOP();
				N: ShiftRegiEdit(inpShiftRegisters[Index].EditCtrl,OptionMask,inpShiftRegisters[Index].Data,inpEmptyData,ClipBoard,inpMESDictionary);
				N: ADD(1,Index,Index)[LES(Index,wrkMaxSize) JMP(Loop_ShiftRegisters) ,GEQ(Index,wrkMaxSize) NOP() ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION MES_RBOutQueue (Description := "Handles Data of Interest for MES and Sends it to Data Collector.",
	                                              Class := Standard,
	                                              Revision := "1.1",
	                                              Vendor := "GV Automation",
	                                              ExecutePrescan := No,
	                                              ExecutePostscan := No,
	                                              ExecuteEnableInFalse := No,
	                                              CreatedDate := "2020-11-05T06:50:39.946Z",
	                                              CreatedBy := "LAPTOP-2CUQA63B\marco",
	                                              EditedDate := "2021-01-23T13:36:56.829Z",
	                                              EditedBy := "LAPTOP-2CUQA63B\marco",
	                                              SoftwareRevision := "v32.01")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			outMES_RB : p_udt_MES_RB (Usage := InOut,
			                     Required := Yes,
			                     Visible := Yes);
			inpActiveStation : INT (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            DefaultData := 0);
			cmdCycleStart : BOOL (Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 0);
			cmdCycleComplete : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            DefaultData := 0);
			cmdTrigger : DINT (Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			stsBusy : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			stsDone : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			wrk_Ons : DINT (RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			wrkTrigger_Internal : DINT (RADIX := Decimal,
			                              ExternalAccess := None,
			                              DefaultData := 0);
			wrkTmrCycleTime : TIMER (ExternalAccess := None,
			                          DefaultData := "[0,9999999,0]");
			wrkTmrCycleStart : TIMER (ExternalAccess := None,
			                           DefaultData := "[0,1000,0]");
			wrkTmrCycleComplete : TIMER (ExternalAccess := None,
			                              DefaultData := "[0,1000,0]");
			cfgStationName : STRING_10[16] (ExternalAccess := None,
			                         DefaultData
			wrkActiveStation : STRING_10 (ExternalAccess := None,
			                           DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00']");
			wrkCheckStation : BitCheck_INT (ExternalAccess := None,
			                          DefaultData := "[1,0,0,0,0,0]");
			wrkValidStation : BOOL (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: NOP();
				RC: "Station Names";
				N: JMP(skip)LOWER(cfgStationName[0],cfgStationName[1])LOWER(cfgStationName[2],cfgStationName[3])LOWER(cfgStationName[4],cfgStationName[5])LOWER(cfgStationName[6],cfgStationName[7]);
				N: LOWER(cfgStationName[8],cfgStationName[9])LOWER(cfgStationName[10],cfgStationName[11])LOWER(cfgStationName[12],cfgStationName[13])LOWER(cfgStationName[14],cfgStationName[15]);
				N: LBL(skip)BitCheck_INT(wrkCheckStation,inpActiveStation,wrkValidStation);
				N: XIC(wrkValidStation)MOV(cfgStationName[wrkCheckStation.outBitSeld],wrkActiveStation);
				N: XIC(cmdCycleStart)OTE(outMES_RB.Cycle_Start);
				N: [XIC(cmdCycleComplete) ONS(wrk_Ons.1) MOV(1000,wrkTmrCycleComplete.PRE) TOF(wrkTmrCycleComplete,?,?) ,XIC(wrkTmrCycleComplete.DN) OTE(outMES_RB.Cycle_Complete) OTU(cmdCycleComplete) OTU(cmdCycleStart) ];
				N: NEQ(wrkActiveStation,outMES_RB.ActiveStation)ONS(wrk_Ons.2)MOV(wrkActiveStation,outMES_RB.ActiveStation)OTL(wrkTrigger_Internal.0);
				N: XIC(outMES_RB.Cycle_Start)ONS(wrk_Ons.3)OTL(wrkTrigger_Internal.1);
				N: XIC(outMES_RB.Cycle_Complete)ONS(wrk_Ons.4)OTL(wrkTrigger_Internal.2);
				N: XIO(stsDone)[NEQ(wrkTrigger_Internal,0) ,NEQ(cmdTrigger,0) ]ONS(wrk_Ons.7)MOV(0,wrkTrigger_Internal)MOV(0,cmdTrigger)OTL(stsDone);
				N: [NEQ(wrkTrigger_Internal,0) ,NEQ(cmdTrigger,0) ]OTU(stsDone);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION RobotStdPNSelect (Description := "Standard Robot PN Selection",
	                                                Class := Standard,
	                                                Revision := "1.0",
	                                                ExecutePrescan := Yes,
	                                                ExecutePostscan := No,
	                                                ExecuteEnableInFalse := No,
	                                                CreatedDate := "2023-02-01T01:50:05.871Z",
	                                                CreatedBy := "MFG\JulioGranillo",
	                                                EditedDate := "2023-03-02T04:09:21.713Z",
	                                                EditedBy := "MFG\JulioGranillo",
	                                                SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			stsPN : SINT (Usage := Output,
			                 RADIX := Decimal,
			                 Required := No,
			                 Visible := No,
			                 ExternalAccess := Read Only,
			                 DefaultData := 0);
			inpPNPerm1 : P_Perm (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			inpPNPerm2 : P_Perm (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			stsPNPermOK : BOOL (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			InO_Rxx_I1 : Ludt_RobotIn1 (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			InO_Rxx_O1 : Ludt_RobotOut1 (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			inpReqDecision : BOOL (Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			inpDecisionNmbr : SINT (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			inpDecisionPermHMI : P_Perm (Usage := InOut,
			                              Required := Yes,
			                              Visible := Yes);
			DecisionNmbrPermSeld : DINT (Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No,
			                                ExternalAccess := Read Only,
			                                DefaultData := 0);
			stsPN0 OF wrkPN.PN[0] (Description := "No Active PN",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := None);
			stsPN1 OF wrkPN.PN[1] (Description := "PROGRAM FINISH",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := None);
			stsPN2 OF wrkPN.PN[2] (Description := "TASK FINISH",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := None);
			stsPN3 OF wrkPN.PN[3] (Description := "AT MAINT POSITION",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := None);
			stsPN4 OF wrkPN.PN[4] (Description := "AT PURGE POSITION",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := None);
			stsPN5 OF wrkPN.PN[5] (Description := "SEALER INSPECTION$NCOMPLETE",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := None);
			stsPN6 OF wrkPN.PN[6] (Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := None);
			stsPN7 OF wrkPN.PN[7] (Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := None);
			stsPN8 OF wrkPN.PN[8] (Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := None);
			stsPN9 OF wrkPN.PN[9] (Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := None);
			stsPN10 OF wrkPN.PN[10] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN11 OF wrkPN.PN[11] (Description := "P/N 11",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN12 OF wrkPN.PN[12] (Description := "P/N 12",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN13 OF wrkPN.PN[13] (Description := "P/N 13",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN14 OF wrkPN.PN[14] (Description := "P/N 14",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN15 OF wrkPN.PN[15] (Description := "P/N 15",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN16 OF wrkPN.PN[16] (Description := "P/N 16",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN17 OF wrkPN.PN[17] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN18 OF wrkPN.PN[18] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN19 OF wrkPN.PN[19] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN20 OF wrkPN.PN[20] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN21 OF wrkPN.PN[21] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN22 OF wrkPN.PN[22] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN23 OF wrkPN.PN[23] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN24 OF wrkPN.PN[24] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN25 OF wrkPN.PN[25] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN26 OF wrkPN.PN[26] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN27 OF wrkPN.PN[27] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN28 OF wrkPN.PN[28] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN29 OF wrkPN.PN[29] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN30 OF wrkPN.PN[30] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN31 OF wrkPN.PN[31] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN32 OF wrkPN.PN[32] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN33 OF wrkPN.PN[33] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN34 OF wrkPN.PN[34] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN35 OF wrkPN.PN[35] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN36 OF wrkPN.PN[36] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN37 OF wrkPN.PN[37] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN38 OF wrkPN.PN[38] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN39 OF wrkPN.PN[39] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN40 OF wrkPN.PN[40] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN41 OF wrkPN.PN[41] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN42 OF wrkPN.PN[42] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN43 OF wrkPN.PN[43] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN44 OF wrkPN.PN[44] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN45 OF wrkPN.PN[45] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN46 OF wrkPN.PN[46] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN47 OF wrkPN.PN[47] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN48 OF wrkPN.PN[48] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN49 OF wrkPN.PN[49] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN50 OF wrkPN.PN[50] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN51 OF wrkPN.PN[51] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN52 OF wrkPN.PN[52] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN53 OF wrkPN.PN[53] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN54 OF wrkPN.PN[54] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN55 OF wrkPN.PN[55] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN56 OF wrkPN.PN[56] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN57 OF wrkPN.PN[57] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN58 OF wrkPN.PN[58] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN59 OF wrkPN.PN[59] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN60 OF wrkPN.PN[60] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN61 OF wrkPN.PN[61] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN62 OF wrkPN.PN[62] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN63 OF wrkPN.PN[63] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN64 OF wrkPN.PN[64] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN65 OF wrkPN.PN[65] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN66 OF wrkPN.PN[66] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN67 OF wrkPN.PN[67] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN68 OF wrkPN.PN[68] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN69 OF wrkPN.PN[69] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN70 OF wrkPN.PN[70] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN71 OF wrkPN.PN[71] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN72 OF wrkPN.PN[72] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN73 OF wrkPN.PN[73] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN74 OF wrkPN.PN[74] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN75 OF wrkPN.PN[75] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN76 OF wrkPN.PN[76] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN77 OF wrkPN.PN[77] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN78 OF wrkPN.PN[78] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN79 OF wrkPN.PN[79] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN80 OF wrkPN.PN[80] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN81 OF wrkPN.PN[81] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN82 OF wrkPN.PN[82] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN83 OF wrkPN.PN[83] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN84 OF wrkPN.PN[84] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN85 OF wrkPN.PN[85] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN86 OF wrkPN.PN[86] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN87 OF wrkPN.PN[87] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN88 OF wrkPN.PN[88] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN89 OF wrkPN.PN[89] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN90 OF wrkPN.PN[90] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN91 OF wrkPN.PN[91] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN92 OF wrkPN.PN[92] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN93 OF wrkPN.PN[93] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN94 OF wrkPN.PN[94] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN95 OF wrkPN.PN[95] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN96 OF wrkPN.PN[96] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN97 OF wrkPN.PN[97] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN98 OF wrkPN.PN[98] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN99 OF wrkPN.PN[99] (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := None);
			stsPN100 OF wrkPN.PN[100] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN101 OF wrkPN.PN[101] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN102 OF wrkPN.PN[102] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN103 OF wrkPN.PN[103] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN104 OF wrkPN.PN[104] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN105 OF wrkPN.PN[105] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN106 OF wrkPN.PN[106] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN107 OF wrkPN.PN[107] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN108 OF wrkPN.PN[108] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN109 OF wrkPN.PN[109] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN110 OF wrkPN.PN[110] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN111 OF wrkPN.PN[111] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN112 OF wrkPN.PN[112] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN113 OF wrkPN.PN[113] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN114 OF wrkPN.PN[114] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN115 OF wrkPN.PN[115] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN116 OF wrkPN.PN[116] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN117 OF wrkPN.PN[117] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN118 OF wrkPN.PN[118] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN119 OF wrkPN.PN[119] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN120 OF wrkPN.PN[120] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN121 OF wrkPN.PN[121] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN122 OF wrkPN.PN[122] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN123 OF wrkPN.PN[123] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN124 OF wrkPN.PN[124] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN125 OF wrkPN.PN[125] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN126 OF wrkPN.PN[126] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN127 OF wrkPN.PN[127] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN128 OF wrkPN.PN[128] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN129 OF wrkPN.PN[129] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN130 OF wrkPN.PN[130] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN131 OF wrkPN.PN[131] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN132 OF wrkPN.PN[132] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN133 OF wrkPN.PN[133] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN134 OF wrkPN.PN[134] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN135 OF wrkPN.PN[135] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN136 OF wrkPN.PN[136] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN137 OF wrkPN.PN[137] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN138 OF wrkPN.PN[138] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN139 OF wrkPN.PN[139] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN140 OF wrkPN.PN[140] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN141 OF wrkPN.PN[141] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN142 OF wrkPN.PN[142] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN143 OF wrkPN.PN[143] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN144 OF wrkPN.PN[144] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN145 OF wrkPN.PN[145] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN146 OF wrkPN.PN[146] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN147 OF wrkPN.PN[147] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN148 OF wrkPN.PN[148] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN149 OF wrkPN.PN[149] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN150 OF wrkPN.PN[150] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN151 OF wrkPN.PN[151] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN152 OF wrkPN.PN[152] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN153 OF wrkPN.PN[153] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN154 OF wrkPN.PN[154] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN155 OF wrkPN.PN[155] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN156 OF wrkPN.PN[156] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN157 OF wrkPN.PN[157] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN158 OF wrkPN.PN[158] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN159 OF wrkPN.PN[159] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN160 OF wrkPN.PN[160] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN161 OF wrkPN.PN[161] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN162 OF wrkPN.PN[162] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN163 OF wrkPN.PN[163] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN164 OF wrkPN.PN[164] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN165 OF wrkPN.PN[165] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN166 OF wrkPN.PN[166] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN167 OF wrkPN.PN[167] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN168 OF wrkPN.PN[168] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN169 OF wrkPN.PN[169] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN170 OF wrkPN.PN[170] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN171 OF wrkPN.PN[171] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN172 OF wrkPN.PN[172] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN173 OF wrkPN.PN[173] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN174 OF wrkPN.PN[174] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN175 OF wrkPN.PN[175] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN176 OF wrkPN.PN[176] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN177 OF wrkPN.PN[177] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN178 OF wrkPN.PN[178] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN179 OF wrkPN.PN[179] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN180 OF wrkPN.PN[180] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN181 OF wrkPN.PN[181] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN182 OF wrkPN.PN[182] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN183 OF wrkPN.PN[183] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN184 OF wrkPN.PN[184] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN185 OF wrkPN.PN[185] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN186 OF wrkPN.PN[186] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN187 OF wrkPN.PN[187] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN188 OF wrkPN.PN[188] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN189 OF wrkPN.PN[189] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN190 OF wrkPN.PN[190] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN191 OF wrkPN.PN[191] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN192 OF wrkPN.PN[192] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN193 OF wrkPN.PN[193] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN194 OF wrkPN.PN[194] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN195 OF wrkPN.PN[195] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN196 OF wrkPN.PN[196] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN197 OF wrkPN.PN[197] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN198 OF wrkPN.PN[198] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN199 OF wrkPN.PN[199] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN200 OF wrkPN.PN[200] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN201 OF wrkPN.PN[201] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN202 OF wrkPN.PN[202] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN203 OF wrkPN.PN[203] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN204 OF wrkPN.PN[204] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN205 OF wrkPN.PN[205] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN206 OF wrkPN.PN[206] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN207 OF wrkPN.PN[207] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN208 OF wrkPN.PN[208] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN209 OF wrkPN.PN[209] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN210 OF wrkPN.PN[210] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN211 OF wrkPN.PN[211] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN212 OF wrkPN.PN[212] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN213 OF wrkPN.PN[213] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN214 OF wrkPN.PN[214] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN215 OF wrkPN.PN[215] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN216 OF wrkPN.PN[216] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN217 OF wrkPN.PN[217] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN218 OF wrkPN.PN[218] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN219 OF wrkPN.PN[219] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN220 OF wrkPN.PN[220] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN221 OF wrkPN.PN[221] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN222 OF wrkPN.PN[222] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN223 OF wrkPN.PN[223] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN224 OF wrkPN.PN[224] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN225 OF wrkPN.PN[225] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN226 OF wrkPN.PN[226] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN227 OF wrkPN.PN[227] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN228 OF wrkPN.PN[228] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN229 OF wrkPN.PN[229] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN230 OF wrkPN.PN[230] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN231 OF wrkPN.PN[231] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN232 OF wrkPN.PN[232] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN233 OF wrkPN.PN[233] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN234 OF wrkPN.PN[234] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN235 OF wrkPN.PN[235] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN236 OF wrkPN.PN[236] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN237 OF wrkPN.PN[237] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN238 OF wrkPN.PN[238] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN239 OF wrkPN.PN[239] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN240 OF wrkPN.PN[240] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN241 OF wrkPN.PN[241] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN242 OF wrkPN.PN[242] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN243 OF wrkPN.PN[243] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN244 OF wrkPN.PN[244] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN245 OF wrkPN.PN[245] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN246 OF wrkPN.PN[246] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN247 OF wrkPN.PN[247] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN248 OF wrkPN.PN[248] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN249 OF wrkPN.PN[249] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN250 OF wrkPN.PN[250] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN251 OF wrkPN.PN[251] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN252 OF wrkPN.PN[252] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN253 OF wrkPN.PN[253] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN254 OF wrkPN.PN[254] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
			stsPN255 OF wrkPN.PN[255] (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := None);
		END_PARAMETERS

		LOCAL_TAGS
			wrkProcessNmbr : SINT (RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := 0);
			CurrentPNTab : INT (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			wrkPNOns : BOOL (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			wrkPN : p_udt_Robot_PN_Array (ExternalAccess := None,
			                DefaultData := "[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0]]");
			True : DINT (RADIX := Decimal,
			               ExternalAccess := None,
			               DefaultData := 0);
			wrkPNOns2 : BOOL (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			ActivePN : P_Perm (ExternalAccess := None,
			                   DefaultData := "[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']]");
			PNTabSelect1 : BOOL (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			PNTabSelect2 : BOOL (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			DecisionHMI : h_udt_HMI_Robot_Perm_Select (ExternalAccess := None,
			                      DefaultDatanter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']]]");
			wrkDecisionOns : BOOL (RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := 0);
			CheckDecisionNumber : BitCheck_INT (ExternalAccess := None,
			                              DefaultData := "[1,0,0,0,0,0]");
			DecisionSelected : BOOL (RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Interlock Process Number$N"
				    "$N"
				    "Uses Digital IO 49-56 (Interlock Number Bits)$N"
				    "$N"
				    "************************************************************";
				N: NOP();
				N: MOV(0,wrkProcessNmbr)BTD(InO_Rxx_I1.PN,0,wrkProcessNmbr,0,8);
				N: NEQ(wrkProcessNmbr,stsPN)ONS(wrkPNOns)OTU(inpPNPerm1.Sts_PermOK)OTU(inpPNPerm2.Sts_PermOK);
				N: [CLR(stsPN) FLL(0,wrkPN,1) ,LIM(1,wrkProcessNmbr,255) COP(wrkProcessNmbr,stsPN,1) OTE(True.1) OTE(wrkPN.PN[stsPN]) ];
				N: XIC(True.1)XIC(inpPNPerm1.Sts_PermOK)XIC(inpPNPerm2.Sts_PermOK)[BTD(stsPN,0,InO_Rxx_O1.PN,0,8) ,OTE(stsPNPermOK) ];
				N: [XIO(True.1) ,XIO(inpPNPerm1.Sts_PermOK) ,XIO(inpPNPerm2.Sts_PermOK) ]CLR(InO_Rxx_O1.PN);
				RC: "************************************************************$N"
				    "PN Perms handling for HMI$N"
				    "************************************************************";
				N: NOP();
				N: XIC(True.1)[ONS(wrkPNOns2) MOV(1,CurrentPNTab) ,EQU(CurrentPNTab,1) COP(inpPNPerm1,ActivePN,1) ,EQU(CurrentPNTab,2) COP(inpPNPerm2,ActivePN,1) ];
				N: [XIC(PNTabSelect1) MOV(1,CurrentPNTab) ,XIC(PNTabSelect2) MOV(2,CurrentPNTab) ];
				RC: "************************************************************$N"
				    "Decision Code Process$N"
				    "************************************************************";
				N: NOP();
				N: XIC(inpReqDecision)LIM(1,inpDecisionNmbr,127)OTE(True.2);
				N: XIC(inpReqDecision)XIC(True.2)COP(inpDecisionNmbr,InO_Rxx_O1.DecisionEcho,1);
				N: [XIO(True.2) ,XIO(inpReqDecision) ]CLR(InO_Rxx_O1.DecisionEcho);
				RC: "************************************************************$N"
				    "Decision Perms handling for HMI$N"
				    "************************************************************";
				N: NOP();
				RC: "On the Robot Decision Code pop up window these variables write the decision number on the push button and the description on the text field right above the push button$N"
				    "*";
				N: JMP(skiptext_DecisionHMI_PB)[MOV(DecisionHMI.PB_Nmbr[0],DecisionHMI.PB_Nmbr[1]) MOV(DecisionHMI.PB_Nmbr[2],DecisionHMI.PB_Nmbr[3]) MOV(DecisionHMI.PB_Nmbr[4],DecisionHMI.PB_Nmbr[5]) MOV(DecisionHMI.PB_Nmbr[6],DecisionHMI.PB_Nmbr[7]) ,MOV(DecisionHMI.PB_Nmbr[8],DecisionHMI.PB_Nmbr[9]) MOV(DecisionHMI.PB_Nmbr[10],DecisionHMI.PB_Nmbr[11]) MOV(DecisionHMI.PB_Nmbr[12],DecisionHMI.PB_Nmbr[13]) MOV(DecisionHMI.PB_Nmbr[14],DecisionHMI.PB_Nmbr[15]) ,LOWER(DecisionHMI.PB_Desc[0],DecisionHMI.PB_Desc[1]) LOWER(DecisionHMI.PB_Desc[2],DecisionHMI.PB_Desc[3]) LOWER(DecisionHMI.PB_Desc[4],DecisionHMI.PB_Desc[5]) LOWER(DecisionHMI.PB_Desc[6],DecisionHMI.PB_Desc[7]) ,LOWER(DecisionHMI.PB_Desc[8],DecisionHMI.PB_Desc[9]) LOWER(DecisionHMI.PB_Desc[10],DecisionHMI.PB_Desc[11]) LOWER(DecisionHMI.PB_Desc[12],DecisionHMI.PB_Desc[13]) LOWER(DecisionHMI.PB_Desc[14],DecisionHMI.PB_Desc[15]) ];
				N: LBL(skiptext_DecisionHMI_PB)NEQ(DecisionHMI.PB,0)NEQ(DecisionHMI.PB,DecisionHMI.Ind)ONS(wrkDecisionOns)[NEQ(DecisionHMI.PB,DecisionHMI.Ind) CLR(DecisionHMI.Ind) ,XOR(DecisionHMI.PB,DecisionHMI.Ind,DecisionHMI.Ind) ];
				N: BitCheck_INT(CheckDecisionNumber,DecisionHMI.Ind,DecisionSelected);
				N: [COP(inpDecisionPermHMI,DecisionHMI.Perm,1) ,XIC(DecisionSelected) MOV(CheckDecisionNumber.outBitSeld,DecisionNmbrPermSeld) ];
		END_ROUTINE

		ROUTINE Prescan 
				N: NOP();
				N: MOV(1,CurrentPNTab);
				N: OTU(inpPNPerm1.Sts_PermOK)OTU(inpPNPerm2.Sts_PermOK);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION BMC_AOI_PROC_BNI0082 (Description := "BNI IOL-802-102-Z036$NHW4.0 SW3.0",
	                                                    Class := Standard,
	                                                    Revision := "5.1",
	                                                    RevisionExtension := "792718US",
	                                                    RevisionNote := "V5.1 Fixed omitted mapped data tag$N$NV5.0 Released version$N$NV3.1$NAdded Number_of_Segments member to RunMode structure$NAdded MOV instruction to rung 25 to populate number of segments in RunLight array[4]$N$NV3.0$N-Final rev will be 5.x; adding Sync and Flex mode functionality",
	                                                    ExecutePrescan := No,
	                                                    ExecutePostscan := No,
	                                                    ExecuteEnableInFalse := No,
	                                                    CreatedDate := "2014-03-20T13:22:23.694Z",
	                                                    CreatedBy := "US\harmonj",
	                                                    EditedDate := "2022-01-05T16:13:14.215Z",
	                                                    EditedBy := "LUCID\DanWeinhold",
	                                                    SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			IO_Link_Port_Data : IO_Link_Port_Data (Usage := InOut,
			                             Required := Yes,
			                             Visible := Yes);
			BNI0082_Mapped_Data : BMC_UDT_PROC_BNI0082_0818US (Usage := InOut,
			                               Required := Yes,
			                               Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
			Segment_Array : SINT[8] (RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := "[0,0,0,0,0,0,0,0]");
			Level_Array : SINT[8] (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := "[0,0,0,0,0,0,0,0]");
			Runlight_Array : SINT[8] (RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := "[0,0,0,0,0,0,0,0]");
			Flexible_Array : SINT[8] (RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := "[0,0,0,0,0,0,0,0]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "Copyright 2014 Balluff, Inc.$N"
				    "Licensed under the Apache License, Version 2.0 (the $QLicense$Q); you may$N"
				    "not use this file except in compliance with the License.  You may obtain$N"
				    "a copy of the License at:$N"
				    "http://www.apache.org/licenses/LICENSE-2.0$N"
				    "Unless required by applicable law or agreed to in writing, software$N"
				    "distributed under the License is distributed on an $QAS IS$Q BASIS$N"
				    "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or$N"
				    "implied.  See the License for the specific language governing$N"
				    "permissions and limitations under the License.";
				N: NOP();
				N: XIC(IO_Link_Port_Data.Inputs[32].0)XIC(IO_Link_Port_Data.Inputs[32].1)XIO(IO_Link_Port_Data.Inputs[33].0)EQU(IO_Link_Port_Data.Inputs[34],3)EQU(IO_Link_Port_Data.Inputs[35],120)EQU(IO_Link_Port_Data.Inputs[36],5)EQU(IO_Link_Port_Data.Inputs[37],10)EQU(IO_Link_Port_Data.Inputs[38],7)OTE(BNI0082_Mapped_Data.IOL_Diag.DeviceOK);
				N: XIC(IO_Link_Port_Data.Inputs[32].0)XIC(IO_Link_Port_Data.Inputs[32].1)XIO(IO_Link_Port_Data.Inputs[33].0)[NEQ(IO_Link_Port_Data.Inputs[36],5) ,NEQ(IO_Link_Port_Data.Inputs[37],10) ,NEQ(IO_Link_Port_Data.Inputs[38],7) ,NEQ(IO_Link_Port_Data.Inputs[34],3) ,NEQ(IO_Link_Port_Data.Inputs[35],120) ]OTE(BNI0082_Mapped_Data.IOL_Diag.MismatchFault);
				N: XIC(IO_Link_Port_Data.Inputs[32].0)XIO(IO_Link_Port_Data.Inputs[32].1)OTE(BNI0082_Mapped_Data.IOL_Diag.CommFault);
				N: XIC(IO_Link_Port_Data.Inputs[33].0)OTE(BNI0082_Mapped_Data.IOL_Diag.ValidationFailed);
				N: XIC(IO_Link_Port_Data.Inputs[33].1)OTE(BNI0082_Mapped_Data.IOL_Diag.DSValidationFailure);
				N: XIC(IO_Link_Port_Data.Inputs[33].2)OTE(BNI0082_Mapped_Data.IOL_Diag.ProcessDataInvalid);
				N: XIC(IO_Link_Port_Data.Inputs[33].7)OTE(BNI0082_Mapped_Data.IOL_Diag.IOLShortCircuit);
				N: MOV(IO_Link_Port_Data.Inputs[39],BNI0082_Mapped_Data.IOL_Diag.Event[0].Code)MOV(IO_Link_Port_Data.Inputs[40],BNI0082_Mapped_Data.IOL_Diag.Event[0].Additional_Data_1)MOV(IO_Link_Port_Data.Inputs[41],BNI0082_Mapped_Data.IOL_Diag.Event[0].Additional_Data_2);
				N: MOV(IO_Link_Port_Data.Inputs[42],BNI0082_Mapped_Data.IOL_Diag.Event[1].Code)MOV(IO_Link_Port_Data.Inputs[43],BNI0082_Mapped_Data.IOL_Diag.Event[1].Additional_Data_1)MOV(IO_Link_Port_Data.Inputs[44],BNI0082_Mapped_Data.IOL_Diag.Event[1].Additional_Data_2);
				N: MOV(IO_Link_Port_Data.Inputs[45],BNI0082_Mapped_Data.IOL_Diag.Event[2].Code)MOV(IO_Link_Port_Data.Inputs[46],BNI0082_Mapped_Data.IOL_Diag.Event[2].Additional_Data_1)MOV(IO_Link_Port_Data.Inputs[47],BNI0082_Mapped_Data.IOL_Diag.Event[2].Additional_Data_2);
				RC: "***************************************************************************$N"
				    "Copy Vendor ID & Device ID data to Mapped Data Structure$N"
				    "***************************************************************************";
				N: COP(IO_Link_Port_Data.Inputs[34],BNI0082_Mapped_Data.IOL_Diag.VendorID[0],2)COP(IO_Link_Port_Data.Inputs[36],BNI0082_Mapped_Data.IOL_Diag.DeviceID[0],3);
				RC: "********************************************************************************$N"
				    "Smart Light Error Codes$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: MOV(IO_Link_Port_Data.Inputs[0],BNI0082_Mapped_Data.I.Error_Code);
				RC: "********************************************************************************$N"
				    "Populate Array For Segment Mode Output Data$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: MOV(BNI0082_Mapped_Data.O.Segment.Number_of_Segments,Segment_Array[4])MOV(BNI0082_Mapped_Data.O.Segment.Blink_Frequency,Segment_Array[6]);
				RC: "$N"
				    "$N"
				    "Segment 1 I/O";
				N: [[XIC(BNI0082_Mapped_Data.O.Segment.Segment_1.Green) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_1.Yellow) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_1.Orange) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_1.White) ] OTE(Segment_Array[0].0) ,[XIC(BNI0082_Mapped_Data.O.Segment.Segment_1.Red) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_1.Yellow) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_1.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_1.White) ] OTE(Segment_Array[0].1) ,[XIC(BNI0082_Mapped_Data.O.Segment.Segment_1.Blue) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_1.Orange) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_1.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_1.White) ] OTE(Segment_Array[0].2) ,[XIC(BNI0082_Mapped_Data.O.Segment.Segment_1.Blink) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_1.Flash) OTE(Segment_Array[5].0) ] OTE(Segment_Array[0].3) ];
				RC: "Segment 2 I/O";
				N: [[XIC(BNI0082_Mapped_Data.O.Segment.Segment_2.Green) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_2.Yellow) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_2.Orange) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_2.White) ] OTE(Segment_Array[0].4) ,[XIC(BNI0082_Mapped_Data.O.Segment.Segment_2.Red) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_2.Yellow) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_2.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_2.White) ] OTE(Segment_Array[0].5) ,[XIC(BNI0082_Mapped_Data.O.Segment.Segment_2.Blue) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_2.Orange) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_2.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_2.White) ] OTE(Segment_Array[0].6) ,[XIC(BNI0082_Mapped_Data.O.Segment.Segment_2.Blink) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_2.Flash) OTE(Segment_Array[5].1) ] OTE(Segment_Array[0].7) ];
				RC: "Segment 3 I/O";
				N: [[XIC(BNI0082_Mapped_Data.O.Segment.Segment_3.Green) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_3.Yellow) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_3.Orange) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_3.White) ] OTE(Segment_Array[1].0) ,[XIC(BNI0082_Mapped_Data.O.Segment.Segment_3.Red) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_3.Yellow) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_3.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_3.White) ] OTE(Segment_Array[1].1) ,[XIC(BNI0082_Mapped_Data.O.Segment.Segment_3.Blue) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_3.Orange) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_3.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_3.White) ] OTE(Segment_Array[1].2) ,[XIC(BNI0082_Mapped_Data.O.Segment.Segment_3.Blink) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_3.Flash) OTE(Segment_Array[5].2) ] OTE(Segment_Array[1].3) ];
				RC: "Segment 4 I/O";
				N: [[XIC(BNI0082_Mapped_Data.O.Segment.Segment_4.Green) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_4.Yellow) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_4.Orange) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_4.White) ] OTE(Segment_Array[1].4) ,[XIC(BNI0082_Mapped_Data.O.Segment.Segment_4.Red) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_4.Yellow) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_4.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_4.White) ] OTE(Segment_Array[1].5) ,[XIC(BNI0082_Mapped_Data.O.Segment.Segment_4.Blue) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_4.Orange) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_4.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_4.White) ] OTE(Segment_Array[1].6) ,[XIC(BNI0082_Mapped_Data.O.Segment.Segment_4.Blink) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_4.Flash) OTE(Segment_Array[5].3) ] OTE(Segment_Array[1].7) ];
				RC: "Segment 5 I/O";
				N: [[XIC(BNI0082_Mapped_Data.O.Segment.Segment_5.Green) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_5.Yellow) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_5.Orange) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_5.White) ] OTE(Segment_Array[2].0) ,[XIC(BNI0082_Mapped_Data.O.Segment.Segment_5.Red) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_5.Yellow) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_5.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_5.White) ] OTE(Segment_Array[2].1) ,[XIC(BNI0082_Mapped_Data.O.Segment.Segment_5.Blue) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_5.Orange) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_5.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_5.White) ] OTE(Segment_Array[2].2) ,[XIC(BNI0082_Mapped_Data.O.Segment.Segment_5.Blink) ,XIC(BNI0082_Mapped_Data.O.Segment.Segment_5.Flash) OTE(Segment_Array[5].4) ] OTE(Segment_Array[2].3) ];
				RC: "********************************************************************************$N"
				    "Populate Array For Level Mode Output Data$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: [BTD(BNI0082_Mapped_Data.O.Level.Value,0,Level_Array[5],0,8) BTD(BNI0082_Mapped_Data.O.Level.Value,8,Level_Array[6],0,8) ,XIC(BNI0082_Mapped_Data.O.Level.Fill_Type) OTE(Level_Array[4].0) ];
				RC: "Level Mode Segment 1 I/O";
				N: [[XIC(BNI0082_Mapped_Data.O.Level.Segment_1.Green) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_1.Yellow) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_1.Orange) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_1.White) ] OTE(Level_Array[0].0) ,[XIC(BNI0082_Mapped_Data.O.Level.Segment_1.Red) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_1.Yellow) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_1.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_1.White) ] OTE(Level_Array[0].1) ,[XIC(BNI0082_Mapped_Data.O.Level.Segment_1.Blue) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_1.Orange) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_1.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_1.White) ] OTE(Level_Array[0].2) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_1.Dominant) OTE(Level_Array[0].3) ];
				RC: "Level Mode Segment 2 I/O";
				N: [[XIC(BNI0082_Mapped_Data.O.Level.Segment_2.Green) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_2.Yellow) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_2.Orange) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_2.White) ] OTE(Level_Array[0].4) ,[XIC(BNI0082_Mapped_Data.O.Level.Segment_2.Red) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_2.Yellow) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_2.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_2.White) ] OTE(Level_Array[0].5) ,[XIC(BNI0082_Mapped_Data.O.Level.Segment_2.Blue) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_2.Orange) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_2.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_2.White) ] OTE(Level_Array[0].6) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_2.Dominant) OTE(Level_Array[0].7) ];
				RC: "Level Mode Segment 3 I/O";
				N: [[XIC(BNI0082_Mapped_Data.O.Level.Segment_3.Green) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_3.Yellow) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_3.Orange) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_3.White) ] OTE(Level_Array[1].0) ,[XIC(BNI0082_Mapped_Data.O.Level.Segment_3.Red) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_3.Yellow) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_3.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_3.White) ] OTE(Level_Array[1].1) ,[XIC(BNI0082_Mapped_Data.O.Level.Segment_3.Blue) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_3.Orange) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_3.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_3.White) ] OTE(Level_Array[1].2) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_3.Dominant) OTE(Level_Array[1].3) ];
				RC: "Level Mode Segment 4 I/O";
				N: [[XIC(BNI0082_Mapped_Data.O.Level.Segment_4.Green) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_4.Yellow) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_4.Orange) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_4.White) ] OTE(Level_Array[1].4) ,[XIC(BNI0082_Mapped_Data.O.Level.Segment_4.Red) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_4.Yellow) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_4.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_4.White) ] OTE(Level_Array[1].5) ,[XIC(BNI0082_Mapped_Data.O.Level.Segment_4.Blue) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_4.Orange) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_4.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_4.White) ] OTE(Level_Array[1].6) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_4.Dominant) OTE(Level_Array[1].7) ];
				RC: "Level Mode Segment 5 I/O";
				N: [[XIC(BNI0082_Mapped_Data.O.Level.Segment_5.Green) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_5.Yellow) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_5.Orange) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_5.White) ] OTE(Level_Array[2].0) ,[XIC(BNI0082_Mapped_Data.O.Level.Segment_5.Red) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_5.Yellow) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_5.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_5.White) ] OTE(Level_Array[2].1) ,[XIC(BNI0082_Mapped_Data.O.Level.Segment_5.Blue) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_5.Orange) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_5.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_5.White) ] OTE(Level_Array[2].2) ,XIC(BNI0082_Mapped_Data.O.Level.Segment_5.Dominant) OTE(Level_Array[2].3) ];
				RC: "********************************************************************************$N"
				    "Populate Array For Runlight Mode Output Data$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: [MOV(BNI0082_Mapped_Data.O.Runlight.Runninng_Speed,Runlight_Array[6]) ,MOV(BNI0082_Mapped_Data.O.Runlight.Number_of_Segments,Runlight_Array[4]) ];
				N: [[XIC(BNI0082_Mapped_Data.O.Runlight.Background.Green) ,XIC(BNI0082_Mapped_Data.O.Runlight.Background.Yellow) ,XIC(BNI0082_Mapped_Data.O.Runlight.Background.Orange) ,XIC(BNI0082_Mapped_Data.O.Runlight.Background.White) ] OTE(Runlight_Array[0].0) ,[XIC(BNI0082_Mapped_Data.O.Runlight.Background.Red) ,XIC(BNI0082_Mapped_Data.O.Runlight.Background.Yellow) ,XIC(BNI0082_Mapped_Data.O.Runlight.Background.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Runlight.Background.White) ] OTE(Runlight_Array[0].1) ,[XIC(BNI0082_Mapped_Data.O.Runlight.Background.Blue) ,XIC(BNI0082_Mapped_Data.O.Runlight.Background.Orange) ,XIC(BNI0082_Mapped_Data.O.Runlight.Background.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Runlight.Background.White) ] OTE(Runlight_Array[0].2) ];
				N: [[XIC(BNI0082_Mapped_Data.O.Runlight.Running.Green) ,XIC(BNI0082_Mapped_Data.O.Runlight.Running.Yellow) ,XIC(BNI0082_Mapped_Data.O.Runlight.Running.Orange) ,XIC(BNI0082_Mapped_Data.O.Runlight.Running.White) ] OTE(Runlight_Array[0].4) ,[XIC(BNI0082_Mapped_Data.O.Runlight.Running.Red) ,XIC(BNI0082_Mapped_Data.O.Runlight.Running.Yellow) ,XIC(BNI0082_Mapped_Data.O.Runlight.Running.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Runlight.Running.White) ] OTE(Runlight_Array[0].5) ,[XIC(BNI0082_Mapped_Data.O.Runlight.Running.Blue) ,XIC(BNI0082_Mapped_Data.O.Runlight.Running.Orange) ,XIC(BNI0082_Mapped_Data.O.Runlight.Running.User_Defined) ,XIC(BNI0082_Mapped_Data.O.Runlight.Running.White) ] OTE(Runlight_Array[0].6) ];
				RC: "********************************************************************************$N"
				    "Populate Array For Flexible Mode Output Data$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: [XIC(BNI0082_Mapped_Data.O.Flexible.LED01) OTE(Flexible_Array[0].0) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED02) OTE(Flexible_Array[0].1) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED03) OTE(Flexible_Array[0].2) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED04) OTE(Flexible_Array[0].3) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED05) OTE(Flexible_Array[0].4) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED06) OTE(Flexible_Array[0].5) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED07) OTE(Flexible_Array[0].6) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED08) OTE(Flexible_Array[0].7) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED09) OTE(Flexible_Array[1].0) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED10) OTE(Flexible_Array[1].1) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED11) OTE(Flexible_Array[1].2) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED12) OTE(Flexible_Array[1].3) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED13) OTE(Flexible_Array[1].4) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED14) OTE(Flexible_Array[1].5) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED15) OTE(Flexible_Array[1].6) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED16) OTE(Flexible_Array[1].7) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED17) OTE(Flexible_Array[2].0) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED18) OTE(Flexible_Array[2].1) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED19) OTE(Flexible_Array[2].2) ,XIC(BNI0082_Mapped_Data.O.Flexible.LED20) OTE(Flexible_Array[2].3) ];
				RC: "********************************************************************************$N"
				    "Sync Functions$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: [XIC(BNI0082_Mapped_Data.O.Sync.Sync_Impulse) [OTE(Segment_Array[3].7) ,OTE(Runlight_Array[3].7) ] ,XIC(BNI0082_Mapped_Data.O.Sync.Sync_Start) [OTE(Segment_Array[3].6) ,OTE(Runlight_Array[3].6) ] ];
				RC: "********************************************************************************$N"
				    "Mode Select & IOL Data Copy$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: [XIC(BNI0082_Mapped_Data.O.Segment.Enable) [COP(Segment_Array[0],IO_Link_Port_Data.Outputs[0],8) ,OTE(Segment_Array[3].0) ] ,XIC(BNI0082_Mapped_Data.O.Level.Enable) [COP(Level_Array[0],IO_Link_Port_Data.Outputs[0],8) ,OTE(Level_Array[3].1) ] ,XIC(BNI0082_Mapped_Data.O.Runlight.Enable) [COP(Runlight_Array[0],IO_Link_Port_Data.Outputs[0],8) ,OTE(Runlight_Array[3].2) ] ,XIC(BNI0082_Mapped_Data.O.Flexible.Enable) [COP(Flexible_Array[0],IO_Link_Port_Data.Outputs[0],8) ,OTE(Flexible_Array[3].3) ] ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION BMC_AOI_PROC_BNI0085 (Description := "BNI IOL-802-102-Z037$NHW5.0 SW4.0",
	                                                    Class := Standard,
	                                                    Revision := "6.1",
	                                                    RevisionExtension := "970919US",
	                                                    RevisionNote := "V6.1$N$NAdded support for run direction control  in Runlight Mode$N$NV6.0$NAdded support for Buzzer Volume Control$N$NV5.1$NAdded Number_of_Segments member to RunMode structure$NAdded MOV instruction to rung 25 to populate number of segments in RunLight array[4]$N$NV5.1$NFinal release; corrected revision code$NV3.2$NFixed LED20 in rung 28; was pointing to the wrong bit$N$NV3.1$NCorrected DeviceID$N$NV3.0$N-Final rev will be 5.x; adding Sync and Flex mode functionality",
	                                                    ExecutePrescan := No,
	                                                    ExecutePostscan := No,
	                                                    ExecuteEnableInFalse := No,
	                                                    CreatedDate := "2014-03-20T13:22:23.694Z",
	                                                    CreatedBy := "US\harmonj",
	                                                    EditedDate := "2019-02-27T18:31:19.576Z",
	                                                    EditedBy := "US\johnsonc",
	                                                    SoftwareRevision := "v20.04")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			IO_Link_Port_Data : IO_Link_Port_Data (Usage := InOut,
			                             Required := Yes,
			                             Visible := Yes);
			BNI0085_Mapped_Data : BMC_UDT_PROC_BNI0085_0919US (COMMENT.O.SEGMENT := "Segment control mode",
			                               COMMENT.O.LEVEL := "Level control mode",
			                               COMMENT.O.RUNLIGHT := "Runlight control mode",
			                               COMMENT.O.BUZZER := "Buzzer controls",
			                               COMMENT.O.FLEXIBLE := "Individual LED control mode; colors must be altered in parameter data",
			                               COMMENT.O.SYNC := "Synchronization of multiple Smartlights",
			                               Usage := InOut,
			                               Required := Yes,
			                               Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
			Segment_Array : SINT[8] (RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := "[0,0,0,0,0,0,0,0]");
			Level_Array : SINT[8] (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := "[0,0,0,0,0,0,0,0]");
			Runlight_Array : SINT[8] (RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := "[0,0,0,0,0,0,0,0]");
			Flexible_Array : SINT[8] (RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := "[0,0,0,0,0,0,0,0]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "Copyright 2014 Balluff, Inc.$N"
				    "Licensed under the Apache License, Version 2.0 (the $QLicense$Q); you may$N"
				    "not use this file except in compliance with the License.  You may obtain$N"
				    "a copy of the License at:$N"
				    "http://www.apache.org/licenses/LICENSE-2.0$N"
				    "Unless required by applicable law or agreed to in writing, software$N"
				    "distributed under the License is distributed on an $QAS IS$Q BASIS$N"
				    "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or$N"
				    "implied.  See the License for the specific language governing$N"
				    "permissions and limitations under the License.";
				N: NOP();
				N: XIC(IO_Link_Port_Data.Inputs[32].0)XIC(IO_Link_Port_Data.Inputs[32].1)XIO(IO_Link_Port_Data.Inputs[33].0)EQU(IO_Link_Port_Data.Inputs[34],3)EQU(IO_Link_Port_Data.Inputs[35],120)EQU(IO_Link_Port_Data.Inputs[36],5)EQU(IO_Link_Port_Data.Inputs[37],10)EQU(IO_Link_Port_Data.Inputs[38],8)OTE(BNI0085_Mapped_Data.IOL_Diag.DeviceOK);
				N: XIC(IO_Link_Port_Data.Inputs[32].0)XIC(IO_Link_Port_Data.Inputs[32].1)XIO(IO_Link_Port_Data.Inputs[33].0)[NEQ(IO_Link_Port_Data.Inputs[36],5) ,NEQ(IO_Link_Port_Data.Inputs[37],10) ,NEQ(IO_Link_Port_Data.Inputs[38],8) ,NEQ(IO_Link_Port_Data.Inputs[34],3) ,NEQ(IO_Link_Port_Data.Inputs[35],120) ]OTE(BNI0085_Mapped_Data.IOL_Diag.MismatchFault);
				N: XIC(IO_Link_Port_Data.Inputs[32].0)XIO(IO_Link_Port_Data.Inputs[32].1)OTE(BNI0085_Mapped_Data.IOL_Diag.CommFault);
				N: XIC(IO_Link_Port_Data.Inputs[33].0)OTE(BNI0085_Mapped_Data.IOL_Diag.ValidationFailed);
				N: XIC(IO_Link_Port_Data.Inputs[33].1)OTE(BNI0085_Mapped_Data.IOL_Diag.DSValidationFailure);
				N: XIC(IO_Link_Port_Data.Inputs[33].2)OTE(BNI0085_Mapped_Data.IOL_Diag.ProcessDataInvalid);
				N: XIC(IO_Link_Port_Data.Inputs[33].7)OTE(BNI0085_Mapped_Data.IOL_Diag.IOLShortCircuit);
				N: MOV(IO_Link_Port_Data.Inputs[39],BNI0085_Mapped_Data.IOL_Diag.Event[0].Code)MOV(IO_Link_Port_Data.Inputs[40],BNI0085_Mapped_Data.IOL_Diag.Event[0].Additional_Data_1)MOV(IO_Link_Port_Data.Inputs[41],BNI0085_Mapped_Data.IOL_Diag.Event[0].Additional_Data_2);
				N: MOV(IO_Link_Port_Data.Inputs[42],BNI0085_Mapped_Data.IOL_Diag.Event[1].Code)MOV(IO_Link_Port_Data.Inputs[43],BNI0085_Mapped_Data.IOL_Diag.Event[1].Additional_Data_1)MOV(IO_Link_Port_Data.Inputs[44],BNI0085_Mapped_Data.IOL_Diag.Event[1].Additional_Data_2);
				N: MOV(IO_Link_Port_Data.Inputs[45],BNI0085_Mapped_Data.IOL_Diag.Event[2].Code)MOV(IO_Link_Port_Data.Inputs[46],BNI0085_Mapped_Data.IOL_Diag.Event[2].Additional_Data_1)MOV(IO_Link_Port_Data.Inputs[47],BNI0085_Mapped_Data.IOL_Diag.Event[2].Additional_Data_2);
				RC: "***************************************************************************$N"
				    "Copy Vendor ID & Device ID data to Mapped Data Structure$N"
				    "***************************************************************************";
				N: COP(IO_Link_Port_Data.Inputs[34],BNI0085_Mapped_Data.IOL_Diag.VendorID[0],2)COP(IO_Link_Port_Data.Inputs[36],BNI0085_Mapped_Data.IOL_Diag.DeviceID[0],3);
				RC: "********************************************************************************$N"
				    "Smart Light Error Codes$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: MOV(IO_Link_Port_Data.Inputs[0],BNI0085_Mapped_Data.I.Error_Code);
				RC: "********************************************************************************$N"
				    "Populate Array For Segment Mode Output Data$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: MOV(BNI0085_Mapped_Data.O.Segment.Number_of_Segments,Segment_Array[4])MOV(BNI0085_Mapped_Data.O.Segment.Blink_Frequency,Segment_Array[6]);
				RC: "$N"
				    "$N"
				    "Segment 1 I/O";
				N: [[XIC(BNI0085_Mapped_Data.O.Segment.Segment_1.Green) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_1.Yellow) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_1.Orange) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_1.White) ] OTE(Segment_Array[0].0) ,[XIC(BNI0085_Mapped_Data.O.Segment.Segment_1.Red) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_1.Yellow) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_1.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_1.White) ] OTE(Segment_Array[0].1) ,[XIC(BNI0085_Mapped_Data.O.Segment.Segment_1.Blue) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_1.Orange) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_1.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_1.White) ] OTE(Segment_Array[0].2) ,[XIC(BNI0085_Mapped_Data.O.Segment.Segment_1.Blink) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_1.Flash) OTE(Segment_Array[5].0) ] OTE(Segment_Array[0].3) ];
				RC: "Segment 2 I/O";
				N: [[XIC(BNI0085_Mapped_Data.O.Segment.Segment_2.Green) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_2.Yellow) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_2.Orange) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_2.White) ] OTE(Segment_Array[0].4) ,[XIC(BNI0085_Mapped_Data.O.Segment.Segment_2.Red) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_2.Yellow) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_2.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_2.White) ] OTE(Segment_Array[0].5) ,[XIC(BNI0085_Mapped_Data.O.Segment.Segment_2.Blue) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_2.Orange) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_2.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_2.White) ] OTE(Segment_Array[0].6) ,[XIC(BNI0085_Mapped_Data.O.Segment.Segment_2.Blink) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_2.Flash) OTE(Segment_Array[5].1) ] OTE(Segment_Array[0].7) ];
				RC: "Segment 3 I/O";
				N: [[XIC(BNI0085_Mapped_Data.O.Segment.Segment_3.Green) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_3.Yellow) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_3.Orange) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_3.White) ] OTE(Segment_Array[1].0) ,[XIC(BNI0085_Mapped_Data.O.Segment.Segment_3.Red) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_3.Yellow) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_3.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_3.White) ] OTE(Segment_Array[1].1) ,[XIC(BNI0085_Mapped_Data.O.Segment.Segment_3.Blue) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_3.Orange) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_3.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_3.White) ] OTE(Segment_Array[1].2) ,[XIC(BNI0085_Mapped_Data.O.Segment.Segment_3.Blink) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_3.Flash) OTE(Segment_Array[5].2) ] OTE(Segment_Array[1].3) ];
				RC: "Segment 4 I/O";
				N: [[XIC(BNI0085_Mapped_Data.O.Segment.Segment_4.Green) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_4.Yellow) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_4.Orange) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_4.White) ] OTE(Segment_Array[1].4) ,[XIC(BNI0085_Mapped_Data.O.Segment.Segment_4.Red) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_4.Yellow) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_4.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_4.White) ] OTE(Segment_Array[1].5) ,[XIC(BNI0085_Mapped_Data.O.Segment.Segment_4.Blue) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_4.Orange) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_4.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_4.White) ] OTE(Segment_Array[1].6) ,[XIC(BNI0085_Mapped_Data.O.Segment.Segment_4.Blink) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_4.Flash) OTE(Segment_Array[5].3) ] OTE(Segment_Array[1].7) ];
				RC: "Segment 5 I/O";
				N: [[XIC(BNI0085_Mapped_Data.O.Segment.Segment_5.Green) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_5.Yellow) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_5.Orange) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_5.White) ] OTE(Segment_Array[2].0) ,[XIC(BNI0085_Mapped_Data.O.Segment.Segment_5.Red) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_5.Yellow) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_5.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_5.White) ] OTE(Segment_Array[2].1) ,[XIC(BNI0085_Mapped_Data.O.Segment.Segment_5.Blue) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_5.Orange) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_5.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_5.White) ] OTE(Segment_Array[2].2) ,[XIC(BNI0085_Mapped_Data.O.Segment.Segment_5.Blink) ,XIC(BNI0085_Mapped_Data.O.Segment.Segment_5.Flash) OTE(Segment_Array[5].4) ] OTE(Segment_Array[2].3) ];
				RC: "********************************************************************************$N"
				    "Populate Array For Level Mode Output Data$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: [BTD(BNI0085_Mapped_Data.O.Level.Value,0,Level_Array[5],0,8) BTD(BNI0085_Mapped_Data.O.Level.Value,8,Level_Array[6],0,8) ,XIC(BNI0085_Mapped_Data.O.Level.Fill_Type) OTE(Level_Array[4].0) ];
				RC: "Level Mode Segment 1 I/O";
				N: [[XIC(BNI0085_Mapped_Data.O.Level.Segment_1.Green) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_1.Yellow) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_1.Orange) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_1.White) ] OTE(Level_Array[0].0) ,[XIC(BNI0085_Mapped_Data.O.Level.Segment_1.Red) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_1.Yellow) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_1.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_1.White) ] OTE(Level_Array[0].1) ,[XIC(BNI0085_Mapped_Data.O.Level.Segment_1.Blue) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_1.Orange) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_1.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_1.White) ] OTE(Level_Array[0].2) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_1.Dominant) OTE(Level_Array[0].3) ];
				RC: "Level Mode Segment 2 I/O";
				N: [[XIC(BNI0085_Mapped_Data.O.Level.Segment_2.Green) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_2.Yellow) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_2.Orange) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_2.White) ] OTE(Level_Array[0].4) ,[XIC(BNI0085_Mapped_Data.O.Level.Segment_2.Red) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_2.Yellow) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_2.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_2.White) ] OTE(Level_Array[0].5) ,[XIC(BNI0085_Mapped_Data.O.Level.Segment_2.Blue) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_2.Orange) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_2.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_2.White) ] OTE(Level_Array[0].6) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_2.Dominant) OTE(Level_Array[0].7) ];
				RC: "Level Mode Segment 3 I/O";
				N: [[XIC(BNI0085_Mapped_Data.O.Level.Segment_3.Green) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_3.Yellow) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_3.Orange) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_3.White) ] OTE(Level_Array[1].0) ,[XIC(BNI0085_Mapped_Data.O.Level.Segment_3.Red) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_3.Yellow) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_3.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_3.White) ] OTE(Level_Array[1].1) ,[XIC(BNI0085_Mapped_Data.O.Level.Segment_3.Blue) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_3.Orange) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_3.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_3.White) ] OTE(Level_Array[1].2) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_3.Dominant) OTE(Level_Array[1].3) ];
				RC: "Level Mode Segment 4 I/O";
				N: [[XIC(BNI0085_Mapped_Data.O.Level.Segment_4.Green) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_4.Yellow) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_4.Orange) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_4.White) ] OTE(Level_Array[1].4) ,[XIC(BNI0085_Mapped_Data.O.Level.Segment_4.Red) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_4.Yellow) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_4.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_4.White) ] OTE(Level_Array[1].5) ,[XIC(BNI0085_Mapped_Data.O.Level.Segment_4.Blue) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_4.Orange) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_4.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_4.White) ] OTE(Level_Array[1].6) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_4.Dominant) OTE(Level_Array[1].7) ];
				RC: "Level Mode Segment 5 I/O";
				N: [[XIC(BNI0085_Mapped_Data.O.Level.Segment_5.Green) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_5.Yellow) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_5.Orange) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_5.White) ] OTE(Level_Array[2].0) ,[XIC(BNI0085_Mapped_Data.O.Level.Segment_5.Red) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_5.Yellow) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_5.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_5.White) ] OTE(Level_Array[2].1) ,[XIC(BNI0085_Mapped_Data.O.Level.Segment_5.Blue) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_5.Orange) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_5.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_5.White) ] OTE(Level_Array[2].2) ,XIC(BNI0085_Mapped_Data.O.Level.Segment_5.Dominant) OTE(Level_Array[2].3) ];
				RC: "********************************************************************************$N"
				    "Populate Array For Runlight Mode Output Data$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: [MOV(BNI0085_Mapped_Data.O.Runlight.Runninng_Speed,Runlight_Array[6]) ,MOV(BNI0085_Mapped_Data.O.Runlight.Number_of_Segments,Runlight_Array[4]) ,XIC(BNI0085_Mapped_Data.O.Runlight.Run_Direction) OTE(Runlight_Array[3].4) ];
				N: [[XIC(BNI0085_Mapped_Data.O.Runlight.Background.Green) ,XIC(BNI0085_Mapped_Data.O.Runlight.Background.Yellow) ,XIC(BNI0085_Mapped_Data.O.Runlight.Background.Orange) ,XIC(BNI0085_Mapped_Data.O.Runlight.Background.White) ] OTE(Runlight_Array[0].0) ,[XIC(BNI0085_Mapped_Data.O.Runlight.Background.Red) ,XIC(BNI0085_Mapped_Data.O.Runlight.Background.Yellow) ,XIC(BNI0085_Mapped_Data.O.Runlight.Background.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Runlight.Background.White) ] OTE(Runlight_Array[0].1) ,[XIC(BNI0085_Mapped_Data.O.Runlight.Background.Blue) ,XIC(BNI0085_Mapped_Data.O.Runlight.Background.Orange) ,XIC(BNI0085_Mapped_Data.O.Runlight.Background.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Runlight.Background.White) ] OTE(Runlight_Array[0].2) ];
				N: [[XIC(BNI0085_Mapped_Data.O.Runlight.Running.Green) ,XIC(BNI0085_Mapped_Data.O.Runlight.Running.Yellow) ,XIC(BNI0085_Mapped_Data.O.Runlight.Running.Orange) ,XIC(BNI0085_Mapped_Data.O.Runlight.Running.White) ] OTE(Runlight_Array[0].4) ,[XIC(BNI0085_Mapped_Data.O.Runlight.Running.Red) ,XIC(BNI0085_Mapped_Data.O.Runlight.Running.Yellow) ,XIC(BNI0085_Mapped_Data.O.Runlight.Running.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Runlight.Running.White) ] OTE(Runlight_Array[0].5) ,[XIC(BNI0085_Mapped_Data.O.Runlight.Running.Blue) ,XIC(BNI0085_Mapped_Data.O.Runlight.Running.Orange) ,XIC(BNI0085_Mapped_Data.O.Runlight.Running.User_Defined) ,XIC(BNI0085_Mapped_Data.O.Runlight.Running.White) ] OTE(Runlight_Array[0].6) ];
				RC: "********************************************************************************$N"
				    "Populate Array For Flexible Mode Output Data$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: [XIC(BNI0085_Mapped_Data.O.Flexible.LED01) OTE(Flexible_Array[0].0) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED02) OTE(Flexible_Array[0].1) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED03) OTE(Flexible_Array[0].2) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED04) OTE(Flexible_Array[0].3) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED05) OTE(Flexible_Array[0].4) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED06) OTE(Flexible_Array[0].5) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED07) OTE(Flexible_Array[0].6) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED08) OTE(Flexible_Array[0].7) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED09) OTE(Flexible_Array[1].0) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED10) OTE(Flexible_Array[1].1) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED11) OTE(Flexible_Array[1].2) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED12) OTE(Flexible_Array[1].3) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED13) OTE(Flexible_Array[1].4) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED14) OTE(Flexible_Array[1].5) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED15) OTE(Flexible_Array[1].6) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED16) OTE(Flexible_Array[1].7) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED17) OTE(Flexible_Array[2].0) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED18) OTE(Flexible_Array[2].1) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED19) OTE(Flexible_Array[2].2) ,XIC(BNI0085_Mapped_Data.O.Flexible.LED20) OTE(Flexible_Array[2].3) ];
				RC: "********************************************************************************$N"
				    "Buzzer Functions$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: [XIC(BNI0085_Mapped_Data.O.Buzzer.Continuous) ,[XIC(BNI0085_Mapped_Data.O.Buzzer.Beep_1Hz) ,XIC(BNI0085_Mapped_Data.O.Buzzer.Short_Beeps_05Hz) ] [OTE(Segment_Array[2].4) ,OTE(Level_Array[2].4) ,OTE(Runlight_Array[2].4) ,OTE(Flexible_Array[2].4) ] ,[XIC(BNI0085_Mapped_Data.O.Buzzer.Beep_3Hz) ,XIC(BNI0085_Mapped_Data.O.Buzzer.Short_Beeps_05Hz) ] [OTE(Segment_Array[2].5) ,OTE(Level_Array[2].5) ,OTE(Runlight_Array[2].5) ,OTE(Flexible_Array[2].5) ] ][OTE(Segment_Array[2].7) ,OTE(Level_Array[2].7) ,OTE(Runlight_Array[2].7) ,OTE(Flexible_Array[2].7) ];
				N: [BTD(BNI0085_Mapped_Data.O.Buzzer.Volume,0,Segment_Array[7],0,8) ,BTD(BNI0085_Mapped_Data.O.Buzzer.Volume,0,Level_Array[7],0,8) ,BTD(BNI0085_Mapped_Data.O.Buzzer.Volume,0,Runlight_Array[7],0,8) ,BTD(BNI0085_Mapped_Data.O.Buzzer.Volume,0,Flexible_Array[7],0,8) ];
				RC: "********************************************************************************$N"
				    "Sync Functions$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: [XIC(BNI0085_Mapped_Data.O.Sync.Sync_Impulse) [OTE(Segment_Array[3].7) ,OTE(Runlight_Array[3].7) ] ,XIC(BNI0085_Mapped_Data.O.Sync.Sync_Start) [OTE(Segment_Array[3].6) ,OTE(Runlight_Array[3].6) ] ];
				RC: "********************************************************************************$N"
				    "Mode Select & IOL Data Copy$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: [XIC(BNI0085_Mapped_Data.O.Segment.Enable) [COP(Segment_Array[0],IO_Link_Port_Data.Outputs[0],8) ,OTE(Segment_Array[3].0) ] ,XIC(BNI0085_Mapped_Data.O.Level.Enable) [COP(Level_Array[0],IO_Link_Port_Data.Outputs[0],8) ,OTE(Level_Array[3].1) ] ,XIC(BNI0085_Mapped_Data.O.Runlight.Enable) [COP(Runlight_Array[0],IO_Link_Port_Data.Outputs[0],8) ,OTE(Runlight_Array[3].2) ] ,XIC(BNI0085_Mapped_Data.O.Flexible.Enable) [COP(Flexible_Array[0],IO_Link_Port_Data.Outputs[0],8) ,OTE(Flexible_Array[3].3) ] ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION BMC_AOI_PROC_BNI008A (Description := "BNI IOL-801-102-Z037$NHW3.0 SW4.0",
	                                                    Class := Standard,
	                                                    Revision := "6.1",
	                                                    RevisionExtension := "834219US",
	                                                    RevisionNote := "V6.1$NAdded support for Run Direction$N$NV6.0$N- Added Support for Buzzer Volume Control$N$NV5.0 $N-Release version$N$NV3.1$N- Added logic to copy VendorID and DeviceID data Mapped Data Structure$N$NFinal rev will be 5.x; adding Sync and Flex mode functionality",
	                                                    ExecutePrescan := No,
	                                                    ExecutePostscan := No,
	                                                    ExecuteEnableInFalse := No,
	                                                    CreatedDate := "2014-03-20T13:22:23.694Z",
	                                                    CreatedBy := "US\harmonj",
	                                                    EditedDate := "2019-10-14T13:49:02.750Z",
	                                                    EditedBy := "US\ockermanm",
	                                                    SoftwareRevision := "v20.04")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			IO_Link_Port_Data : IO_Link_Port_Data (Usage := InOut,
			                             Required := Yes,
			                             Visible := Yes);
			BNI008A_Mapped_Data : BMC_UDT_PROC_BNI008A_4219US (COMMENT.O.SEGMENT := "Segment control mode",
			                               COMMENT.O.LEVEL := "Level control mode",
			                               COMMENT.O.RUNLIGHT := "Runlight control mode",
			                               COMMENT.O.BUZZER := "Buzzer controls",
			                               COMMENT.O.FLEXIBLE := "Individual LED control mode; colors must be altered in parameter data",
			                               COMMENT.O.SYNC := "Synchronization of multiple Smartlights",
			                               Usage := InOut,
			                               Required := Yes,
			                               Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
			Segment_Array : SINT[8] (RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := "[0,0,0,0,0,0,0,0]");
			Level_Array : SINT[8] (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := "[0,0,0,0,0,0,0,0]");
			Runlight_Array : SINT[8] (RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := "[0,0,0,0,0,0,0,0]");
			Flexible_Array : SINT[8] (RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := "[0,0,0,0,0,0,0,0]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "Copyright 2014 Balluff, Inc.$N"
				    "Licensed under the Apache License, Version 2.0 (the $QLicense$Q); you may$N"
				    "not use this file except in compliance with the License.  You may obtain$N"
				    "a copy of the License at:$N"
				    "http://www.apache.org/licenses/LICENSE-2.0$N"
				    "Unless required by applicable law or agreed to in writing, software$N"
				    "distributed under the License is distributed on an $QAS IS$Q BASIS$N"
				    "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or$N"
				    "implied.  See the License for the specific language governing$N"
				    "permissions and limitations under the License.";
				N: NOP();
				N: XIC(IO_Link_Port_Data.Inputs[32].0)XIC(IO_Link_Port_Data.Inputs[32].1)XIO(IO_Link_Port_Data.Inputs[33].0)EQU(IO_Link_Port_Data.Inputs[34],3)EQU(IO_Link_Port_Data.Inputs[35],120)EQU(IO_Link_Port_Data.Inputs[36],5)EQU(IO_Link_Port_Data.Inputs[37],10)EQU(IO_Link_Port_Data.Inputs[38],16)OTE(BNI008A_Mapped_Data.IOL_Diag.DeviceOK);
				N: XIC(IO_Link_Port_Data.Inputs[32].0)XIC(IO_Link_Port_Data.Inputs[32].1)XIO(IO_Link_Port_Data.Inputs[33].0)[NEQ(IO_Link_Port_Data.Inputs[36],5) ,NEQ(IO_Link_Port_Data.Inputs[37],10) ,NEQ(IO_Link_Port_Data.Inputs[38],16) ,NEQ(IO_Link_Port_Data.Inputs[34],3) ,NEQ(IO_Link_Port_Data.Inputs[35],120) ]OTE(BNI008A_Mapped_Data.IOL_Diag.MismatchFault);
				N: XIC(IO_Link_Port_Data.Inputs[32].0)XIO(IO_Link_Port_Data.Inputs[32].1)OTE(BNI008A_Mapped_Data.IOL_Diag.CommFault);
				N: XIC(IO_Link_Port_Data.Inputs[33].0)OTE(BNI008A_Mapped_Data.IOL_Diag.ValidationFailed);
				N: XIC(IO_Link_Port_Data.Inputs[33].1)OTE(BNI008A_Mapped_Data.IOL_Diag.DSValidationFailure);
				N: XIC(IO_Link_Port_Data.Inputs[33].2)OTE(BNI008A_Mapped_Data.IOL_Diag.ProcessDataInvalid);
				N: XIC(IO_Link_Port_Data.Inputs[33].7)OTE(BNI008A_Mapped_Data.IOL_Diag.IOLShortCircuit);
				N: MOV(IO_Link_Port_Data.Inputs[39],BNI008A_Mapped_Data.IOL_Diag.Event[0].Code)MOV(IO_Link_Port_Data.Inputs[40],BNI008A_Mapped_Data.IOL_Diag.Event[0].Additional_Data_1)MOV(IO_Link_Port_Data.Inputs[41],BNI008A_Mapped_Data.IOL_Diag.Event[0].Additional_Data_2);
				N: MOV(IO_Link_Port_Data.Inputs[42],BNI008A_Mapped_Data.IOL_Diag.Event[1].Code)MOV(IO_Link_Port_Data.Inputs[43],BNI008A_Mapped_Data.IOL_Diag.Event[1].Additional_Data_1)MOV(IO_Link_Port_Data.Inputs[44],BNI008A_Mapped_Data.IOL_Diag.Event[1].Additional_Data_2);
				N: MOV(IO_Link_Port_Data.Inputs[45],BNI008A_Mapped_Data.IOL_Diag.Event[2].Code)MOV(IO_Link_Port_Data.Inputs[46],BNI008A_Mapped_Data.IOL_Diag.Event[2].Additional_Data_1)MOV(IO_Link_Port_Data.Inputs[47],BNI008A_Mapped_Data.IOL_Diag.Event[2].Additional_Data_2);
				RC: "***************************************************************************$N"
				    "Copy Vendor ID & Device ID data to Mapped Data Structure$N"
				    "***************************************************************************";
				N: COP(IO_Link_Port_Data.Inputs[34],BNI008A_Mapped_Data.IOL_Diag.VendorID[0],2)COP(IO_Link_Port_Data.Inputs[36],BNI008A_Mapped_Data.IOL_Diag.DeviceID[0],3);
				RC: "********************************************************************************$N"
				    "Smart Light Error Codes$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: MOV(IO_Link_Port_Data.Inputs[0],BNI008A_Mapped_Data.I.Error_Code);
				RC: "********************************************************************************$N"
				    "Populate Array For Segment Mode Output Data$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: MOV(BNI008A_Mapped_Data.O.Segment.Number_of_Segments,Segment_Array[4])MOV(BNI008A_Mapped_Data.O.Segment.Blink_Frequency,Segment_Array[6]);
				RC: "$N"
				    "$N"
				    "Segment 1 I/O";
				N: [[XIC(BNI008A_Mapped_Data.O.Segment.Segment_1.Green) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_1.Yellow) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_1.Orange) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_1.White) ] OTE(Segment_Array[0].0) ,[XIC(BNI008A_Mapped_Data.O.Segment.Segment_1.Red) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_1.Yellow) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_1.User_Defined) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_1.White) ] OTE(Segment_Array[0].1) ,[XIC(BNI008A_Mapped_Data.O.Segment.Segment_1.Blue) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_1.Orange) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_1.User_Defined) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_1.White) ] OTE(Segment_Array[0].2) ,[XIC(BNI008A_Mapped_Data.O.Segment.Segment_1.Blink) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_1.Flash) OTE(Segment_Array[5].0) ] OTE(Segment_Array[0].3) ];
				RC: "Segment 2 I/O";
				N: [[XIC(BNI008A_Mapped_Data.O.Segment.Segment_2.Green) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_2.Yellow) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_2.Orange) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_2.White) ] OTE(Segment_Array[0].4) ,[XIC(BNI008A_Mapped_Data.O.Segment.Segment_2.Red) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_2.Yellow) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_2.User_Defined) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_2.White) ] OTE(Segment_Array[0].5) ,[XIC(BNI008A_Mapped_Data.O.Segment.Segment_2.Blue) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_2.Orange) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_2.User_Defined) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_2.White) ] OTE(Segment_Array[0].6) ,[XIC(BNI008A_Mapped_Data.O.Segment.Segment_2.Blink) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_2.Flash) OTE(Segment_Array[5].1) ] OTE(Segment_Array[0].7) ];
				RC: "Segment 3 I/O";
				N: [[XIC(BNI008A_Mapped_Data.O.Segment.Segment_3.Green) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_3.Yellow) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_3.Orange) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_3.White) ] OTE(Segment_Array[1].0) ,[XIC(BNI008A_Mapped_Data.O.Segment.Segment_3.Red) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_3.Yellow) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_3.User_Defined) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_3.White) ] OTE(Segment_Array[1].1) ,[XIC(BNI008A_Mapped_Data.O.Segment.Segment_3.Blue) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_3.Orange) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_3.User_Defined) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_3.White) ] OTE(Segment_Array[1].2) ,[XIC(BNI008A_Mapped_Data.O.Segment.Segment_3.Blink) ,XIC(BNI008A_Mapped_Data.O.Segment.Segment_3.Flash) OTE(Segment_Array[5].2) ] OTE(Segment_Array[1].3) ];
				RC: "********************************************************************************$N"
				    "Populate Array For Level Mode Output Data$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: [BTD(BNI008A_Mapped_Data.O.Level.Value,0,Level_Array[5],0,8) BTD(BNI008A_Mapped_Data.O.Level.Value,8,Level_Array[6],0,8) ,XIC(BNI008A_Mapped_Data.O.Level.Fill_Type) OTE(Level_Array[4].0) ];
				RC: "Level Mode Segment 1 I/O";
				N: [[XIC(BNI008A_Mapped_Data.O.Level.Segment_1.Green) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_1.Yellow) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_1.Orange) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_1.White) ] OTE(Level_Array[0].0) ,[XIC(BNI008A_Mapped_Data.O.Level.Segment_1.Red) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_1.Yellow) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_1.User_Defined) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_1.White) ] OTE(Level_Array[0].1) ,[XIC(BNI008A_Mapped_Data.O.Level.Segment_1.Blue) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_1.Orange) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_1.User_Defined) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_1.White) ] OTE(Level_Array[0].2) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_1.Dominant) OTE(Level_Array[0].3) ];
				RC: "Level Mode Segment 2 I/O";
				N: [[XIC(BNI008A_Mapped_Data.O.Level.Segment_2.Green) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_2.Yellow) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_2.Orange) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_2.White) ] OTE(Level_Array[0].4) ,[XIC(BNI008A_Mapped_Data.O.Level.Segment_2.Red) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_2.Yellow) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_2.User_Defined) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_2.White) ] OTE(Level_Array[0].5) ,[XIC(BNI008A_Mapped_Data.O.Level.Segment_2.Blue) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_2.Orange) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_2.User_Defined) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_2.White) ] OTE(Level_Array[0].6) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_2.Dominant) OTE(Level_Array[0].7) ];
				RC: "Level Mode Segment 3 I/O";
				N: [[XIC(BNI008A_Mapped_Data.O.Level.Segment_3.Green) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_3.Yellow) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_3.Orange) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_3.White) ] OTE(Level_Array[1].0) ,[XIC(BNI008A_Mapped_Data.O.Level.Segment_3.Red) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_3.Yellow) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_3.User_Defined) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_3.White) ] OTE(Level_Array[1].1) ,[XIC(BNI008A_Mapped_Data.O.Level.Segment_3.Blue) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_3.Orange) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_3.User_Defined) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_3.White) ] OTE(Level_Array[1].2) ,XIC(BNI008A_Mapped_Data.O.Level.Segment_3.Dominant) OTE(Level_Array[1].3) ];
				RC: "********************************************************************************$N"
				    "Populate Array For Runlight Mode Output Data$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: [MOV(BNI008A_Mapped_Data.O.Runlight.Runninng_Speed,Runlight_Array[6]) ,XIC(BNI008A_Mapped_Data.O.Runlight.Run_Direction) OTE(Runlight_Array[3].4) ];
				N: [[XIC(BNI008A_Mapped_Data.O.Runlight.Background.Green) ,XIC(BNI008A_Mapped_Data.O.Runlight.Background.Yellow) ,XIC(BNI008A_Mapped_Data.O.Runlight.Background.Orange) ,XIC(BNI008A_Mapped_Data.O.Runlight.Background.White) ] OTE(Runlight_Array[0].0) ,[XIC(BNI008A_Mapped_Data.O.Runlight.Background.Red) ,XIC(BNI008A_Mapped_Data.O.Runlight.Background.Yellow) ,XIC(BNI008A_Mapped_Data.O.Runlight.Background.User_Defined) ,XIC(BNI008A_Mapped_Data.O.Runlight.Background.White) ] OTE(Runlight_Array[0].1) ,[XIC(BNI008A_Mapped_Data.O.Runlight.Background.Blue) ,XIC(BNI008A_Mapped_Data.O.Runlight.Background.Orange) ,XIC(BNI008A_Mapped_Data.O.Runlight.Background.User_Defined) ,XIC(BNI008A_Mapped_Data.O.Runlight.Background.White) ] OTE(Runlight_Array[0].2) ];
				N: [[XIC(BNI008A_Mapped_Data.O.Runlight.Running.Green) ,XIC(BNI008A_Mapped_Data.O.Runlight.Running.Yellow) ,XIC(BNI008A_Mapped_Data.O.Runlight.Running.Orange) ,XIC(BNI008A_Mapped_Data.O.Runlight.Running.White) ] OTE(Runlight_Array[0].4) ,[XIC(BNI008A_Mapped_Data.O.Runlight.Running.Red) ,XIC(BNI008A_Mapped_Data.O.Runlight.Running.Yellow) ,XIC(BNI008A_Mapped_Data.O.Runlight.Running.User_Defined) ,XIC(BNI008A_Mapped_Data.O.Runlight.Running.White) ] OTE(Runlight_Array[0].5) ,[XIC(BNI008A_Mapped_Data.O.Runlight.Running.Blue) ,XIC(BNI008A_Mapped_Data.O.Runlight.Running.Orange) ,XIC(BNI008A_Mapped_Data.O.Runlight.Running.User_Defined) ,XIC(BNI008A_Mapped_Data.O.Runlight.Running.White) ] OTE(Runlight_Array[0].6) ];
				RC: "********************************************************************************$N"
				    "Populate Array For Flexible Mode Output Data$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: [XIC(BNI008A_Mapped_Data.O.Flexible.LED01) OTE(Flexible_Array[0].0) ,XIC(BNI008A_Mapped_Data.O.Flexible.LED02) OTE(Flexible_Array[0].1) ,XIC(BNI008A_Mapped_Data.O.Flexible.LED03) OTE(Flexible_Array[0].2) ,XIC(BNI008A_Mapped_Data.O.Flexible.LED04) OTE(Flexible_Array[0].3) ,XIC(BNI008A_Mapped_Data.O.Flexible.LED05) OTE(Flexible_Array[0].4) ,XIC(BNI008A_Mapped_Data.O.Flexible.LED06) OTE(Flexible_Array[0].5) ,XIC(BNI008A_Mapped_Data.O.Flexible.LED07) OTE(Flexible_Array[0].6) ,XIC(BNI008A_Mapped_Data.O.Flexible.LED08) OTE(Flexible_Array[0].7) ,XIC(BNI008A_Mapped_Data.O.Flexible.LED09) OTE(Flexible_Array[1].0) ,XIC(BNI008A_Mapped_Data.O.Flexible.LED10) OTE(Flexible_Array[1].1) ,XIC(BNI008A_Mapped_Data.O.Flexible.LED11) OTE(Flexible_Array[1].2) ,XIC(BNI008A_Mapped_Data.O.Flexible.LED12) OTE(Flexible_Array[1].3) ];
				RC: "********************************************************************************$N"
				    "Buzzer Functions$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: [XIC(BNI008A_Mapped_Data.O.Buzzer.Continuous) ,[XIC(BNI008A_Mapped_Data.O.Buzzer.Beep_1Hz) ,XIC(BNI008A_Mapped_Data.O.Buzzer.Short_Beeps_05Hz) ] [OTE(Segment_Array[2].4) ,OTE(Level_Array[2].4) ,OTE(Runlight_Array[2].4) ,OTE(Flexible_Array[2].4) ] ,[XIC(BNI008A_Mapped_Data.O.Buzzer.Beep_3Hz) ,XIC(BNI008A_Mapped_Data.O.Buzzer.Short_Beeps_05Hz) ] [OTE(Segment_Array[2].5) ,OTE(Level_Array[2].5) ,OTE(Runlight_Array[2].5) ,OTE(Flexible_Array[2].5) ] ][OTE(Segment_Array[2].7) ,OTE(Level_Array[2].7) ,OTE(Runlight_Array[2].7) ,OTE(Flexible_Array[2].7) ];
				N: [BTD(BNI008A_Mapped_Data.O.Buzzer.Volume,0,Segment_Array[7],0,8) ,BTD(BNI008A_Mapped_Data.O.Buzzer.Volume,0,Level_Array[7],0,8) ,BTD(BNI008A_Mapped_Data.O.Buzzer.Volume,0,Runlight_Array[7],0,8) ,BTD(BNI008A_Mapped_Data.O.Buzzer.Volume,0,Flexible_Array[7],0,8) ];
				RC: "********************************************************************************$N"
				    "Sync Functions$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: [XIC(BNI008A_Mapped_Data.O.Sync.Sync_Impulse) [OTE(Segment_Array[3].7) ,OTE(Runlight_Array[3].7) ] ,XIC(BNI008A_Mapped_Data.O.Sync.Sync_Start) [OTE(Segment_Array[3].6) ,OTE(Runlight_Array[3].6) ] ];
				RC: "********************************************************************************$N"
				    "Mode Select & IOL Data Copy$N"
				    "********************************************************************************$N"
				    "$N"
				    "";
				N: [XIC(BNI008A_Mapped_Data.O.Segment.Enable) [COP(Segment_Array[0],IO_Link_Port_Data.Outputs[0],8) ,OTE(Segment_Array[3].0) ] ,XIC(BNI008A_Mapped_Data.O.Level.Enable) [COP(Level_Array[0],IO_Link_Port_Data.Outputs[0],8) ,OTE(Level_Array[3].1) ] ,XIC(BNI008A_Mapped_Data.O.Runlight.Enable) [COP(Runlight_Array[0],IO_Link_Port_Data.Outputs[0],8) ,OTE(Runlight_Array[3].2) ] ,XIC(BNI008A_Mapped_Data.O.Flexible.Enable) [COP(Flexible_Array[0],IO_Link_Port_Data.Outputs[0],8) ,OTE(Flexible_Array[3].3) ] ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ENCODED_DATA (EncodedType := ADD_ON_INSTRUCTION_DEFINITION,
	              Name := "Stacklight",
	              Description := "Balluff BNI008A",
	              Class := Standard,
	              Revision := "1.1",
	              SignatureID := 4B314106,
	              SignatureTimestamp := "2022-07-13T07:53:14.707Z",
	              EditedDate := "2022-07-13T07:53:14.707Z",
	              EncryptionConfig := 9) 
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			refIOLinkPortData : IO_Link_Port_Data (Usage := InOut,
			                             Required := Yes,
			                             Visible := Yes);
			pinBlinker : BOOL (Usage := Input,
			                      RADIX := Decimal,
			                      Required := Yes,
			                      Visible := Yes,
			                      DefaultData := 0);
			pcmdColor1 : DINT (Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			pcmdColor1Blink : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           DefaultData := 0);
			pcmdColor2 : DINT (Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			pcmdBuzzer : BOOL (Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			ocmdSilence : BOOL (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			cfgSilenceTimeout : REAL (Usage := Input,
			                             RADIX := Float,
			                             Required := No,
			                             Visible := No,
			                             DefaultData := 3.00000000e+002);
			cfgBuzzerVol : DINT (Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 100);
			stsGreen : BOOL (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
			stsYellow : BOOL (Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			stsRed : BOOL (Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0);
			stsBlue : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
			stsWhite : BOOL (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read/Write,
			                    DefaultData := 0);
			stsOrange : BOOL (Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			stsBuzzer : BOOL (Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			stsFaulted : BOOL (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			stsFaultCode : DINT (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
		END_PARAMETERS

			
	END_ENCODED_DATA
	ADD_ON_INSTRUCTION_DEFINITION BMC_AOI_PROC_BNI009T (Description := "BNI EIP-507-005-Z040 $NH10 S41",
	                                                    Class := Standard,
	                                                    Revision := "4.2",
	                                                    RevisionExtension := "5D3418US",
	                                                    RevisionNote := "V4.2$NAdded $QClear Parameter Server$Q function$N$NV4.1$N- Corrected Port Status Mapping for Port2 (Rung 53)",
	                                                    Vendor := "Balluff Inc",
	                                                    ExecutePrescan := No,
	                                                    ExecutePostscan := No,
	                                                    ExecuteEnableInFalse := No,
	                                                    CreatedDate := "2010-12-10T15:19:55.163Z",
	                                                    CreatedBy := "Not Available",
	                                                    EditedDate := "2022-01-05T16:13:14.227Z",
	                                                    EditedBy := "LUCID\DanWeinhold",
	                                                    SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			BNI_EIP_507_Raw_Input_Data : SINT[196] (COMMENT[0].0 := "Input$NPort 0$NPin 4",
			                                      COMMENT[0].1 := "Input$NPort 0$NPin 2",
			                                      COMMENT[0].2 := "Input$NPort 1$NPin 4",
			                                      COMMENT[0].3 := "Input$NPort 1$NPin 2",
			                                      COMMENT[0].4 := "Input$NPort 2$NPin 4",
			                                      COMMENT[0].5 := "Input$NPort 2$NPin 2",
			                                      COMMENT[0].6 := "Input$NPort 3$NPin 4",
			                                      COMMENT[0].7 := "Input$NPort 3$NPin 2",
			                                      COMMENT[1].0 := "Port 0$NShort Circuit",
			                                      COMMENT[1].1 := "Port 0$NShort Circuit",
			                                      COMMENT[1].2 := "Port 1$NShort Circuit",
			                                      COMMENT[1].3 := "Port 1$NShort Circuit",
			                                      COMMENT[1].4 := "Port 2$NShort Circuit",
			                                      COMMENT[1].5 := "Port 2$NShort Circuit",
			                                      COMMENT[1].6 := "Port 3$NShort Circuit",
			                                      COMMENT[1].7 := "Port 3$NShort Circuit",
			                                      COMMENT[2].0 := "Port 0 Pin 4$NOutput Overload Status",
			                                      COMMENT[2].1 := "Port 0 Pin 2$NOutput Overload Status",
			                                      COMMENT[2].2 := "Port 1 Pin 4$NOutput Overload Status",
			                                      COMMENT[2].3 := "Port 1 Pin 2$NOutput Overload Status",
			                                      COMMENT[2].4 := "Port 2 Pin 4$NOutput Overload Status",
			                                      COMMENT[2].5 := "Port 2 Pin 2$NOutput Overload Status",
			                                      COMMENT[2].6 := "Port 3 Pin 4$NOutput Overload Status",
			                                      COMMENT[2].7 := "Port 3 Pin 2$NOutput Overload Status",
			                                      COMMENT[3].0 := "Module Low Actuator Supply",
			                                      COMMENT[3].1 := "Module Low Sensor Supply",
			                                      COMMENT[3].2 := "Module No Actuator Supply",
			                                      COMMENT[3].3 := "Port 5 Pin 2$NShort Circuit",
			                                      COMMENT[3].4 := "Port 6 Pin 4$NShort Circuit",
			                                      COMMENT[3].5 := "Port 6 Pin 2$NShort Circuit",
			                                      COMMENT[3].6 := "Port 7 Pin 4$NShort Circuit",
			                                      COMMENT[3].7 := "Port 7 Pin 2$NShort Circuit",
			                                      COMMENT[4].0 := "Port 0 Pin 4$NOutput Overload Status",
			                                      COMMENT[4].1 := "Port 0 Pin 2$NOutput Overload Status",
			                                      COMMENT[4].2 := "Port 1 Pin 4$NOutput Overload Status",
			                                      COMMENT[4].3 := "Port 1 Pin 2$NOutput Overload Status",
			                                      COMMENT[4].4 := "Port 2 Pin 4$NOutput Overload Status",
			                                      COMMENT[4].5 := "Port 2 Pin 2$NOutput Overload Status",
			                                      COMMENT[4].6 := "Port 3 Pin 4$NOutput Overload Status",
			                                      COMMENT[4].7 := "Port 3 Pin 2$NOutput Overload Status",
			                                      COMMENT[5].0 := "Port 4 Pin 4$NOutput Overload Status",
			                                      COMMENT[5].1 := "Port 4 Pin 2$NOutput Overload Status",
			                                      COMMENT[5].2 := "Port 5 Pin 4$NOutput Overload Status",
			                                      COMMENT[5].3 := "Port 5 Pin 2$NOutput Overload Status",
			                                      COMMENT[5].4 := "Port 6 Pin 4$NOutput Overload Status",
			                                      COMMENT[5].5 := "Port 6 Pin 2$NOutput Overload Status",
			                                      COMMENT[5].6 := "Port 7 Pin 4$NOutput Overload Status",
			                                      COMMENT[5].7 := "Port 7 Pin 2$NOutput Overload Status",
			                                      COMMENT[6].0 := "Output Power from$NAux Power cable$NUnder Voltage",
			                                      COMMENT[6].1 := "Module Power$Nfrom IO-Link Communication Cable$NUnder Voltage",
			                                      COMMENT[6].2 := "Not used",
			                                      COMMENT[6].3 := "Not used",
			                                      COMMENT[6].4 := "Not used",
			                                      COMMENT[6].5 := "Not used",
			                                      COMMENT[6].6 := "Not used",
			                                      COMMENT[6].7 := "Not used",
			                                      COMMENT[32].0 := "Port 1$NEP bit$NEvent Present",
			                                      COMMENT[32].1 := "Reserved",
			                                      COMMENT[32].2 := "Reserved",
			                                      COMMENT[32].3 := "Reserved",
			                                      COMMENT[32].4 := "Reserved",
			                                      COMMENT[32].5 := "Port 1$NVF bit$NValidation Failed",
			                                      COMMENT[32].6 := "Port 1$NDC bit$NDevice Connected",
			                                      COMMENT[32].7 := "Port 1$NIOL bit$NPort in IO-Link Mode",
			                                      COMMENT[33].0 := "Reserved",
			                                      COMMENT[33].1 := "Reserved",
			                                      COMMENT[33].2 := "Reserved",
			                                      COMMENT[33].3 := "Reserved",
			                                      COMMENT[33].4 := "Reserved",
			                                      COMMENT[33].5 := "Reserved",
			                                      COMMENT[33].6 := "Reserved",
			                                      COMMENT[33].7 := "Reserved",
			                                      COMMENT[36].0 := "Port 0$NIn I/O Link$NMode",
			                                      COMMENT[36].1 := "Port 0$NDevice Connected",
			                                      COMMENT[37].0 := "Port 0$NValidation Failed",
			                                      COMMENT[40].0 := "Port 0$NIn I/O Link$NMode",
			                                      COMMENT[40].1 := "Port 0$NI/O Link$NDevice Connected",
			                                      COMMENT[41].0 := "Port 0$NI/O Link$NDevice Configuration$NMismatch",
			                                      COMMENT[84].0 := "Port 1$NIn I/O Link$NMode",
			                                      COMMENT[84].1 := "Port 1$NDevice Connected",
			                                      COMMENT[85].0 := "Port 1$NValidation Failed",
			                                      COMMENT[88].0 := "Port 1$NIn I/O Link$NMode",
			                                      COMMENT[88].1 := "Port 2$NI/O Link$NDevice Connected",
			                                      COMMENT[89].0 := "Port 2$NI/O Link$NDevice Configuration$NMismatch",
			                                      COMMENT[132].0 := "Port 2$NIn I/O Link$NMode",
			                                      COMMENT[132].1 := "Port 2$NDevice Connected",
			                                      COMMENT[133].0 := "Port 2$NValidation Failed",
			                                      COMMENT[136].0 := "Port 2$NIn I/O Link$NMode",
			                                      COMMENT[136].1 := "Port 2$NI/O Link$NDevice Connected",
			                                      COMMENT[137].0 := "Port 2$NI/O Link$NDevice Configuration$NMismatch",
			                                      COMMENT[180].0 := "Port 3$NIn I/O Link$NMode",
			                                      COMMENT[180].1 := "Port 3$NDevice Connected",
			                                      COMMENT[181].0 := "Port 3$NValidation Failed",
			                                      COMMENT[184].0 := "Port 4$NIn I/O Link$NMode",
			                                      COMMENT[184].1 := "Port 4$NI/O Link$NDevice Connected",
			                                      COMMENT[185].0 := "Port 4$NI/O Link$NDevice Configuration$NMismatch",
			                                      Usage := InOut,
			                                      RADIX := Decimal,
			                                      Required := Yes,
			                                      Visible := Yes);
			BNI_EIP_507_Raw_Output_Data : SINT[130] (COMMENT[0].0 := "Output$NPort 0$NPin 4",
			                                       COMMENT[0].1 := "Output$NPort 0$NPin 2",
			                                       COMMENT[0].2 := "Output$NPort 1$NPin 4",
			                                       COMMENT[0].3 := "Output$NPort 1$NPin 2",
			                                       COMMENT[0].4 := "Output$NPort 2$NPin 4",
			                                       COMMENT[0].5 := "Output$NPort 2$NPin 2",
			                                       COMMENT[0].6 := "Output$NPort 3$NPin 4",
			                                       COMMENT[0].7 := "Output$NPort 3$NPin 2",
			                                       COMMENT[1].0 := "Output$NPort 4$NPin 4",
			                                       COMMENT[1].1 := "Output$NPort 4$NPin 2",
			                                       COMMENT[1].2 := "Output$NPort 5$NPin 4",
			                                       COMMENT[1].3 := "Output$NPort 5$NPin 2",
			                                       COMMENT[1].4 := "Output$NPort 6$NPin 4",
			                                       COMMENT[1].5 := "Output$NPort 6$NPin 2",
			                                       COMMENT[1].6 := "Output$NPort 7$NPin 4",
			                                       COMMENT[1].7 := "Output$NPort 7$NPin 2",
			                                       COMMENT[2].0 := "Port 0$NPin 4$NOutput Restart",
			                                       COMMENT[2].1 := "Port 0$NPin 2$NOutput Restart",
			                                       COMMENT[2].2 := "Port 1$NPin 4$NOutput Restart",
			                                       COMMENT[2].3 := "Port 1$NPin 2$NOutput Restart",
			                                       COMMENT[2].4 := "Port 2$NPin 4$NOutput Restart",
			                                       COMMENT[2].5 := "Port 2$NPin 2$NOutput Restart",
			                                       COMMENT[2].6 := "Port 3$NPin 4$NOutput Restart",
			                                       COMMENT[2].7 := "Port 3$NPin 2$NOutput Restart",
			                                       COMMENT[3].0 := "Port 4$NPin 4$NOutput Restart",
			                                       COMMENT[3].1 := "Port 4$NPin 2$NOutput Restart",
			                                       COMMENT[3].2 := "Port 5$NPin 4$NOutput Restart",
			                                       COMMENT[3].3 := "Port 5$NPin 2$NOutput Restart",
			                                       COMMENT[3].4 := "Port 6$NPin 4$NOutput Restart",
			                                       COMMENT[3].5 := "Port 6$NPin 2$NOutput Restart",
			                                       COMMENT[3].6 := "Port 7$NPin 4$NOutput Restart",
			                                       COMMENT[3].7 := "Port 7$NPin 2$NOutput Restart",
			                                       COMMENT[4].0 := "Red LED$NDisplay$NOutput",
			                                       COMMENT[4].1 := "Green LED$NDisplay$NOutput",
			                                       COMMENT[4].2 := "Lock$NDisplay$NOutput",
			                                       Usage := InOut,
			                                       RADIX := Decimal,
			                                       Required := Yes,
			                                       Visible := Yes);
			BNI_EIP_507_Raw_Config_Data : SINT[98] (COMMENT[0] := "Port 0 (Bits 0_1)$NPort 1 (Bits 2_3)$NPort 2 (Bits 4_5)$NPort 3 (Bits 6_7)$NFunction$N00d=0x00=Standrd I/O$N01d=0x01=IO-Link Mod$N02d=0x02=Fallback Md",
			                                       COMMENT[1] := "Port 2 (Bits 4_5)$NPort 3 (Bits 6_7)$NFunction$NFunction$N00d=0x00=Standrd I/O$N01d=0x01=IO-Link Mod$N02d=0x02=Fallback Md",
			                                       COMMENT[2].0 := "Parameter$NData Conflict",
			                                       COMMENT[2].1 := "Enable$NParameter$NUpload",
			                                       COMMENT[2].2 := "Enable$NParameter$NDownload",
			                                       COMMENT[2].7 := "Enable$NParameter$NServer",
			                                       COMMENT[3] := "RESERVED",
			                                       COMMENT[4] := "Port 1 IO-Link$NCycle Time$NTime (Bytes 5-0)$NBase (Bytes 7-6)",
			                                       COMMENT[5] := "Port 1$NVendor ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[6] := "Port 1$NVendor ID Number$NByte 2$NLow Byte",
			                                       COMMENT[7] := "Port 1$NDevice ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[8] := "Port 1$NDevice ID Number$NByte 2$NMiddle Byte",
			                                       COMMENT[9] := "Port 1$NDevice ID Number$NByte 3$NLow Byte",
			                                       COMMENT[10] := "Port 2 IO-Link$NCycle Time$NTime (Bytes 5-0)$NBase (Bytes 7-6)",
			                                       COMMENT[11] := "Port 2$NVendor ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[12] := "Port 2$NVendor ID Number$NByte 2$NLow Byte",
			                                       COMMENT[13] := "Port 2$NDevice ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[14] := "Port 2$NDevice ID Number$NByte 2$NMiddle Byte",
			                                       COMMENT[15] := "Port 2$NDevice ID Number$NByte 3$NLow Byte",
			                                       COMMENT[16] := "Port 3 IO-Link$NCycle Time$NTime (Bytes 5-0)$NBase (Bytes 7-6)",
			                                       COMMENT[17] := "Port 3$NVendor ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[18] := "Port 3$NVendor ID Number$NByte 2$NLow Byte",
			                                       COMMENT[19] := "Port 3$NDevice ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[20] := "Port 3$NDevice ID Number$NByte 2$NMiddle Byte",
			                                       COMMENT[21] := "Port 3$NDevice ID Number$NByte 3$NLow Byte",
			                                       COMMENT[22] := "Port 4 IO-Link$NCycle Time$NTime (Bytes 5-0)$NBase (Bytes 7-6)",
			                                       COMMENT[23] := "Port 4$NVendor ID Number$NByte 1$NHigh Byte",
			                                       COMMENT[24] := "Port 4$NVendor ID Number$NByte 2$NLow Byte",
			                                       COMMENT[25] := "Port 1 Enable",
			                                       COMMENT[25].1 := "Port 1 Enable$NUpload Parameters",
			                                       COMMENT[25].2 := "Port 1 Enable$NDownload Parameters",
			                                       COMMENT[25].7 := "Port 1 Enable$NParameters Server",
			                                       COMMENT[26] := "Port 4$NDevice ID Number$NByte 2$NMiddle Byte",
			                                       COMMENT[27] := "Port 4$NDevice ID Number$NByte 3$NLow Byte",
			                                       COMMENT[49].1 := "Port 2 Enable$NUpload Parameters",
			                                       COMMENT[49].2 := "Port 2 Enable$NDownload Parameters",
			                                       COMMENT[49].7 := "Port 2 Enable$NParameters Server",
			                                       COMMENT[73].1 := "Port 3 Enable$NUpload Parameters",
			                                       COMMENT[73].2 := "Port 3 Enable$NDownload Parameters",
			                                       COMMENT[73].7 := "Port 3 Enable$NParameters Server",
			                                       COMMENT[97].1 := "Port 4 Enable$NUpload Parameters",
			                                       COMMENT[97].2 := "Port 4 Enable$NDownload Parameters",
			                                       COMMENT[97].7 := "Port 4 Enable$NParameters Server",
			                                       Usage := InOut,
			                                       RADIX := Decimal,
			                                       Required := Yes,
			                                       Visible := Yes);
			BNI_EIP_507_Port_0_Data : IO_Link_Port_Data (COMMENT.INPUTS[0] := "Port 0$NInput Data",
			                                   Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
			BNI_EIP_507_Port_1_Data : IO_Link_Port_Data (COMMENT.INPUTS[0] := "Port 1$NInput Data",
			                                   Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
			BNI_EIP_507_Port_2_Data : IO_Link_Port_Data (COMMENT.INPUTS[0] := "Port 2$NInput Data",
			                                   Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
			BNI_EIP_507_Port_3_Data : IO_Link_Port_Data (COMMENT.INPUTS[0] := "Port 3$NInput Data",
			                                   Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
			Mapped_BNI_EIP_507_Data : BMC_UDT_PROC_BNI009T_Data_3418US (COMMENT.I.DATA.0 := "Input$NPort 0$NPin 4",
			                                   COMMENT.I.DATA.1 := "Input$NPort 0$NPin 2",
			                                   COMMENT.I.DATA.2 := "Input$NPort 1$NPin 4",
			                                   COMMENT.I.DATA.3 := "Input$NPort 1$NPin 2",
			                                   COMMENT.I.DATA.4 := "Input$NPort 2$NPin 4",
			                                   COMMENT.I.DATA.5 := "Input$NPort 2$NPin 2",
			                                   COMMENT.I.DATA.6 := "Input$NPort 3$NPin 4",
			                                   COMMENT.I.DATA.7 := "Input$NPort 3$NPin 2",
			                                   COMMENT.I.SHORT_CIRCUIT.0 := "Port 0 Pin 4$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.1 := "Port 0 Pin 2$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.2 := "Port 1 Pin 4$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.3 := "Port 1 Pin 2$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.4 := "Port 2 Pin 4$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.5 := "Port 2 Pin 2$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.6 := "Port 3 Pin 4$NShort Circuit",
			                                   COMMENT.I.SHORT_CIRCUIT.7 := "Port 3 Pin 2$NShort Circuit",
			                                   COMMENT.I.OVERLOAD.0 := "Port 0 Pin 4$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.1 := "Port 0 Pin 2$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.2 := "Port 1 Pin 4$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.3 := "Port 1 Pin 2$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.4 := "Port 2 Pin 4$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.5 := "Port 2 Pin 2$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.6 := "Port 3 Pin 4$NOutput Overload Status",
			                                   COMMENT.I.OVERLOAD.7 := "Port 3 Pin 2$NOutput Overload Status",
			                                   COMMENT.I.PORT_0_IO_LINK_STATUS := "Port 0$NIn I/O Link$NMode",
			                                   COMMENT.I.PORT_0_DEVICE_CONNECTED := "Port 0$NI/O Link$NDevice Connected",
			                                   COMMENT.I.PORT_0_VALIDATION_FAILED := "Port 0$NI/O Link$NDevice Configuration$NMismatch",
			                                   COMMENT.I.PORT_1_IO_LINK_STATUS := "Port 1$NIn I/O Link$NMode",
			                                   COMMENT.I.PORT_1_DEVICE_CONNECTED := "Port 1$NI/O Link$NDevice Connected",
			                                   COMMENT.I.PORT_1_VALIDATION_FAILED := "Port 1$NI/O Link$NDevice Configuration$NMismatch",
			                                   COMMENT.I.PORT_2_IO_LINK_STATUS := "Port 2$NIn I/O Link$NMode",
			                                   COMMENT.I.PORT_2_DEVICE_CONNECTED := "Port 2$NI/O Link$NDevice Connected",
			                                   COMMENT.I.PORT_2_VALIDATION_FAILED := "Port 2$NI/O Link$NDevice Configuration$NMismatch",
			                                   COMMENT.I.PORT_3_IO_LINK_STATUS := "Port 3$NIn I/O Link$NMode",
			                                   COMMENT.I.PORT_3_DEVICE_CONNECTED := "Port 3$NI/O Link$NDevice Connected",
			                                   COMMENT.I.PORT_3_VALIDATION_FAILED := "Port 3$NI/O Link$NDevice Configuration$NMismatch",
			                                   COMMENT.O.DATA.0 := "Output$NPort 0$NPin 4",
			                                   COMMENT.O.DATA.1 := "Output$NPort 0$NPin 2",
			                                   COMMENT.O.DATA.2 := "Output$NPort 1$NPin 4",
			                                   COMMENT.O.DATA.3 := "Output$NPort 1$NPin 2",
			                                   COMMENT.O.DATA.4 := "Output$NPort 2$NPin 4",
			                                   COMMENT.O.DATA.5 := "Output$NPort 2$NPin 2",
			                                   COMMENT.O.DATA.6 := "Output$NPort 3$NPin 4",
			                                   COMMENT.O.DATA.7 := "Output$NPort 3$NPin 2",
			                                   COMMENT.O.RESTART.0 := "Port 0$NPin 4$NOutput Restart",
			                                   COMMENT.O.RESTART.1 := "Port 0$NPin 2$NOutput Restart",
			                                   COMMENT.O.RESTART.2 := "Port 1$NPin 4$NOutput Restart",
			                                   COMMENT.O.RESTART.3 := "Port 1$NPin 2$NOutput Restart",
			                                   COMMENT.O.RESTART.4 := "Port 2$NPin 4$NOutput Restart",
			                                   COMMENT.O.RESTART.5 := "Port 2$NPin 2$NOutput Restart",
			                                   COMMENT.O.RESTART.6 := "Port 3$NPin 4$NOutput Restart",
			                                   COMMENT.O.RESTART.7 := "Port 3$NPin 2$NOutput Restart",
			                                   Usage := InOut,
			                                   Required := Yes,
			                                   Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "Copyright 2013 Balluff, Inc.$N"
				    "Licensed under the Apache License, Version 2.0 (the $QLicense$Q); you may$N"
				    "not use this file except in compliance with the License.  You may obtain$N"
				    "a copy of the License at:$N"
				    "http://www.apache.org/licenses/LICENSE-2.0$N"
				    "Unless required by applicable law or agreed to in writing, software$N"
				    "distributed under the License is distributed on an $QAS IS$Q BASIS$N"
				    "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or$N"
				    "implied.  See the License for the specific language governing$N"
				    "permissions and limitations under the License.";
				N: NOP();
				RC: "$N"
				    "Distribute Raw Input data into separate arrays for each port.$N"
				    "$N"
				    "";
				N: [COP(BNI_EIP_507_Raw_Input_Data[4],BNI_EIP_507_Port_0_Data.Inputs[0],48) ,COP(BNI_EIP_507_Raw_Input_Data[52],BNI_EIP_507_Port_1_Data.Inputs[0],48) ,COP(BNI_EIP_507_Raw_Input_Data[100],BNI_EIP_507_Port_2_Data.Inputs[0],48) ,COP(BNI_EIP_507_Raw_Input_Data[148],BNI_EIP_507_Port_3_Data.Inputs[0],48) ];
				RC: "$N"
				    "The next 8 rungs map the raw input data to defined Parameters.$N"
				    "$N"
				    "";
				N: XIC(BNI_EIP_507_Raw_Input_Data[0].0)OTE(Mapped_BNI_EIP_507_Data.I.Data.0);
				N: XIC(BNI_EIP_507_Raw_Input_Data[0].1)OTE(Mapped_BNI_EIP_507_Data.I.Data.1);
				N: XIC(BNI_EIP_507_Raw_Input_Data[0].2)OTE(Mapped_BNI_EIP_507_Data.I.Data.2);
				N: XIC(BNI_EIP_507_Raw_Input_Data[0].3)OTE(Mapped_BNI_EIP_507_Data.I.Data.3);
				N: XIC(BNI_EIP_507_Raw_Input_Data[0].4)OTE(Mapped_BNI_EIP_507_Data.I.Data.4);
				N: XIC(BNI_EIP_507_Raw_Input_Data[0].5)OTE(Mapped_BNI_EIP_507_Data.I.Data.5);
				N: XIC(BNI_EIP_507_Raw_Input_Data[0].6)OTE(Mapped_BNI_EIP_507_Data.I.Data.6);
				N: XIC(BNI_EIP_507_Raw_Input_Data[0].7)OTE(Mapped_BNI_EIP_507_Data.I.Data.7);
				RC: "$N"
				    "The next 8 rungs map the Input Short Circuit data to defined Parameters.$N"
				    "$N"
				    "";
				N: XIC(BNI_EIP_507_Raw_Input_Data[1].0)OTE(Mapped_BNI_EIP_507_Data.I.Short_Circuit.0);
				N: XIC(BNI_EIP_507_Raw_Input_Data[1].1)OTE(Mapped_BNI_EIP_507_Data.I.Short_Circuit.1);
				N: XIC(BNI_EIP_507_Raw_Input_Data[1].2)OTE(Mapped_BNI_EIP_507_Data.I.Short_Circuit.2);
				N: XIC(BNI_EIP_507_Raw_Input_Data[1].3)OTE(Mapped_BNI_EIP_507_Data.I.Short_Circuit.3);
				N: XIC(BNI_EIP_507_Raw_Input_Data[1].4)OTE(Mapped_BNI_EIP_507_Data.I.Short_Circuit.4);
				N: XIC(BNI_EIP_507_Raw_Input_Data[1].5)OTE(Mapped_BNI_EIP_507_Data.I.Short_Circuit.5);
				N: XIC(BNI_EIP_507_Raw_Input_Data[1].6)OTE(Mapped_BNI_EIP_507_Data.I.Short_Circuit.6);
				N: XIC(BNI_EIP_507_Raw_Input_Data[1].7)OTE(Mapped_BNI_EIP_507_Data.I.Short_Circuit.7);
				RC: "$N"
				    "The next 8 rungs map the Output Overload data to defined Parameters.$N"
				    "$N"
				    "";
				N: XIC(BNI_EIP_507_Raw_Input_Data[2].0)OTE(Mapped_BNI_EIP_507_Data.I.Overload.0);
				N: XIC(BNI_EIP_507_Raw_Input_Data[2].1)OTE(Mapped_BNI_EIP_507_Data.I.Overload.1);
				N: XIC(BNI_EIP_507_Raw_Input_Data[2].2)OTE(Mapped_BNI_EIP_507_Data.I.Overload.2);
				N: XIC(BNI_EIP_507_Raw_Input_Data[2].3)OTE(Mapped_BNI_EIP_507_Data.I.Overload.3);
				N: XIC(BNI_EIP_507_Raw_Input_Data[2].4)OTE(Mapped_BNI_EIP_507_Data.I.Overload.4);
				N: XIC(BNI_EIP_507_Raw_Input_Data[2].5)OTE(Mapped_BNI_EIP_507_Data.I.Overload.5);
				N: XIC(BNI_EIP_507_Raw_Input_Data[2].6)OTE(Mapped_BNI_EIP_507_Data.I.Overload.6);
				N: XIC(BNI_EIP_507_Raw_Input_Data[2].7)OTE(Mapped_BNI_EIP_507_Data.I.Overload.7);
				RC: "$N"
				    "This rung maps the Low Voltage Actuator Power bit to the defined Parameter.$N"
				    "$N"
				    "";
				N: XIC(BNI_EIP_507_Raw_Input_Data[3].0)OTE(Mapped_BNI_EIP_507_Data.I.Low_Actuator_Supply);
				RC: "$N"
				    "This rung maps the Sensor Power bit to the defined Parameter.$N"
				    "$N"
				    "";
				N: XIC(BNI_EIP_507_Raw_Input_Data[3].1)OTE(Mapped_BNI_EIP_507_Data.I.Low_Sensor_Supply);
				RC: "This rung maps the No Actuator Supply bit to the defined Parameter.";
				N: XIC(BNI_EIP_507_Raw_Input_Data[3].2)OTE(Mapped_BNI_EIP_507_Data.I.No_Actuator_Supply);
				RC: "$N"
				    "The next 8 rungs write the defined Parameter output arrays to Raw Outputs.$N"
				    "$N"
				    "";
				N: XIC(Mapped_BNI_EIP_507_Data.O.Data.0)OTE(BNI_EIP_507_Raw_Output_Data[0].0);
				N: XIC(Mapped_BNI_EIP_507_Data.O.Data.1)OTE(BNI_EIP_507_Raw_Output_Data[0].1);
				N: XIC(Mapped_BNI_EIP_507_Data.O.Data.2)OTE(BNI_EIP_507_Raw_Output_Data[0].2);
				N: XIC(Mapped_BNI_EIP_507_Data.O.Data.3)OTE(BNI_EIP_507_Raw_Output_Data[0].3);
				N: XIC(Mapped_BNI_EIP_507_Data.O.Data.4)OTE(BNI_EIP_507_Raw_Output_Data[0].4);
				N: XIC(Mapped_BNI_EIP_507_Data.O.Data.5)OTE(BNI_EIP_507_Raw_Output_Data[0].5);
				N: XIC(Mapped_BNI_EIP_507_Data.O.Data.6)OTE(BNI_EIP_507_Raw_Output_Data[0].6);
				N: XIC(Mapped_BNI_EIP_507_Data.O.Data.7)OTE(BNI_EIP_507_Raw_Output_Data[0].7);
				RC: "$N"
				    "The next 8 rungs write the defined Parameter Restart arrays to Raw Outputs.$N"
				    "$N"
				    "";
				N: XIC(Mapped_BNI_EIP_507_Data.O.Restart.0)OTE(BNI_EIP_507_Raw_Output_Data[1].0);
				N: XIC(Mapped_BNI_EIP_507_Data.O.Restart.1)OTE(BNI_EIP_507_Raw_Output_Data[1].1);
				N: XIC(Mapped_BNI_EIP_507_Data.O.Restart.2)OTE(BNI_EIP_507_Raw_Output_Data[1].2);
				N: XIC(Mapped_BNI_EIP_507_Data.O.Restart.3)OTE(BNI_EIP_507_Raw_Output_Data[1].3);
				N: XIC(Mapped_BNI_EIP_507_Data.O.Restart.4)OTE(BNI_EIP_507_Raw_Output_Data[1].4);
				N: XIC(Mapped_BNI_EIP_507_Data.O.Restart.5)OTE(BNI_EIP_507_Raw_Output_Data[1].5);
				N: XIC(Mapped_BNI_EIP_507_Data.O.Restart.6)OTE(BNI_EIP_507_Raw_Output_Data[1].6);
				N: XIC(Mapped_BNI_EIP_507_Data.O.Restart.7)OTE(BNI_EIP_507_Raw_Output_Data[1].7);
				RC: "This rung sets the four configurable ports based on the values of Port_x_Function$N"
				    "$N"
				    "**IMPORTANT - Power to the BNI EIP-507 module must be cycled for any change in port function to take effect.**";
				N: CPT(BNI_EIP_507_Raw_Config_Data[0],(Mapped_BNI_EIP_507_Data.C.Port_0_Function*1)+(Mapped_BNI_EIP_507_Data.C.Port_1_Function*4)+(Mapped_BNI_EIP_507_Data.C.Port_2_Function*16)+(Mapped_BNI_EIP_507_Data.C.Port_3_Function*64));
				RC: "This rung maps the configuration values to the raw data for Port 0.$N"
				    "These values include Enable Upload/Download/ParamterSvr;$N"
				    "Validation Type, Cycle Time, Vendor ID, Device ID and Serial Number.";
				N: [XIC(Mapped_BNI_EIP_507_Data.C.Enable_Upload_Port_0) OTE(BNI_EIP_507_Raw_Config_Data[25].0) ,XIC(Mapped_BNI_EIP_507_Data.C.Enable_Download_Port_0) OTE(BNI_EIP_507_Raw_Config_Data[25].1) ,XIC(Mapped_BNI_EIP_507_Data.C.Clear_Parameter_Server_Port_0) OTE(BNI_EIP_507_Raw_Config_Data[25].6) ,XIC(Mapped_BNI_EIP_507_Data.C.Enable_Parameter_Server_Port_0) OTE(BNI_EIP_507_Raw_Config_Data[25].7) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_0_Validation_Type,BNI_EIP_507_Raw_Config_Data[3]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_0_Cycle_Time,BNI_EIP_507_Raw_Config_Data[2]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_0_Vendor_ID_1,BNI_EIP_507_Raw_Config_Data[4]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_0_Vendor_ID_2,BNI_EIP_507_Raw_Config_Data[5]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_0_Device_ID_1,BNI_EIP_507_Raw_Config_Data[6]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_0_Device_ID_2,BNI_EIP_507_Raw_Config_Data[7]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_0_Device_ID_3,BNI_EIP_507_Raw_Config_Data[8]) ,COP(Mapped_BNI_EIP_507_Data.C.Port_0_Serial_Number[0],BNI_EIP_507_Raw_Config_Data[9],16) ];
				RC: "This rung maps the configuration values to the raw data for Port 1.$N"
				    "These values include Enable Upload/Download/ParamterSvr;$N"
				    "Validation Type, Cycle Time, Vendor ID, Device ID and Serial Number.";
				N: [XIC(Mapped_BNI_EIP_507_Data.C.Enable_Upload_Port_1) OTE(BNI_EIP_507_Raw_Config_Data[49].0) ,XIC(Mapped_BNI_EIP_507_Data.C.Enable_Download_Port_1) OTE(BNI_EIP_507_Raw_Config_Data[49].1) ,XIC(Mapped_BNI_EIP_507_Data.C.Clear_Parameter_Server_Port_1) OTE(BNI_EIP_507_Raw_Config_Data[49].6) ,XIC(Mapped_BNI_EIP_507_Data.C.Enable_Parameter_Server_Port_1) OTE(BNI_EIP_507_Raw_Config_Data[49].7) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_1_Cycle_Time,BNI_EIP_507_Raw_Config_Data[26]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_1_Validation_Type,BNI_EIP_507_Raw_Config_Data[27]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_1_Vendor_ID_1,BNI_EIP_507_Raw_Config_Data[28]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_1_Vendor_ID_2,BNI_EIP_507_Raw_Config_Data[29]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_1_Device_ID_1,BNI_EIP_507_Raw_Config_Data[30]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_1_Device_ID_2,BNI_EIP_507_Raw_Config_Data[31]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_1_Device_ID_3,BNI_EIP_507_Raw_Config_Data[32]) ,COP(Mapped_BNI_EIP_507_Data.C.Port_1_Serial_Number[0],BNI_EIP_507_Raw_Config_Data[33],16) ];
				RC: "This rung maps the configuration values to the raw data for Port 2.$N"
				    "These values include Enable Upload/Download/ParamterSvr;$N"
				    "Validation Type, Cycle Time, Vendor ID, Device ID and Serial Number.";
				N: [XIC(Mapped_BNI_EIP_507_Data.C.Enable_Upload_Port_2) OTE(BNI_EIP_507_Raw_Config_Data[73].0) ,XIC(Mapped_BNI_EIP_507_Data.C.Enable_Download_Port_2) OTE(BNI_EIP_507_Raw_Config_Data[73].1) ,XIC(Mapped_BNI_EIP_507_Data.C.Clear_Parameter_Server_Port_2) OTE(BNI_EIP_507_Raw_Config_Data[73].6) ,XIC(Mapped_BNI_EIP_507_Data.C.Enable_Parameter_Server_Port_2) OTE(BNI_EIP_507_Raw_Config_Data[73].7) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_2_Cycle_Time,BNI_EIP_507_Raw_Config_Data[50]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_2_Validation_Type,BNI_EIP_507_Raw_Config_Data[51]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_2_Vendor_ID_1,BNI_EIP_507_Raw_Config_Data[52]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_2_Vendor_ID_2,BNI_EIP_507_Raw_Config_Data[53]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_2_Device_ID_1,BNI_EIP_507_Raw_Config_Data[54]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_2_Device_ID_2,BNI_EIP_507_Raw_Config_Data[55]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_2_Device_ID_3,BNI_EIP_507_Raw_Config_Data[56]) ,COP(Mapped_BNI_EIP_507_Data.C.Port_2_Serial_Number[0],BNI_EIP_507_Raw_Config_Data[57],16) ];
				RC: "This rung maps the configuration values to the raw data for Port 3.$N"
				    "These values include Enable Upload/Download/ParamterSvr;$N"
				    "Validation Type, Cycle Time, Vendor ID, Device ID and Serial Number.";
				N: [XIC(Mapped_BNI_EIP_507_Data.C.Enable_Upload_Port_3) OTE(BNI_EIP_507_Raw_Config_Data[97].0) ,XIC(Mapped_BNI_EIP_507_Data.C.Enable_Download_Port_3) OTE(BNI_EIP_507_Raw_Config_Data[97].1) ,XIC(Mapped_BNI_EIP_507_Data.C.Clear_Parameter_Server_Port_3) OTE(BNI_EIP_507_Raw_Config_Data[97].6) ,XIC(Mapped_BNI_EIP_507_Data.C.Enable_Parameter_Server_Port_3) OTE(BNI_EIP_507_Raw_Config_Data[97].7) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_3_Cycle_Time,BNI_EIP_507_Raw_Config_Data[74]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_3_Validation_Type,BNI_EIP_507_Raw_Config_Data[75]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_3_Vendor_ID_1,BNI_EIP_507_Raw_Config_Data[76]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_3_Vendor_ID_2,BNI_EIP_507_Raw_Config_Data[77]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_3_Device_ID_1,BNI_EIP_507_Raw_Config_Data[78]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_3_Device_ID_2,BNI_EIP_507_Raw_Config_Data[79]) ,MOV(Mapped_BNI_EIP_507_Data.C.Port_3_Device_ID_3,BNI_EIP_507_Raw_Config_Data[80]) ,COP(Mapped_BNI_EIP_507_Data.C.Port_3_Serial_Number[0],BNI_EIP_507_Raw_Config_Data[81],16) ];
				RC: "$N"
				    "Distribute Accumulated Output data for each Port into a single defined Parameter by using offsets (1, 33, 65 and 97).$N"
				    "$N"
				    "";
				N: [COP(BNI_EIP_507_Port_0_Data.Outputs[0],BNI_EIP_507_Raw_Output_Data[2],32) ,COP(BNI_EIP_507_Port_1_Data.Outputs[0],BNI_EIP_507_Raw_Output_Data[34],32) ,COP(BNI_EIP_507_Port_2_Data.Outputs[0],BNI_EIP_507_Raw_Output_Data[66],32) ,COP(BNI_EIP_507_Port_3_Data.Outputs[0],BNI_EIP_507_Raw_Output_Data[98],32) ];
				RC: "$N"
				    "The next four rungs map diagnostic bits for Ports 0-3 to:$N"
				    "IO-Link Status, Device Connected and Validation Failed$N"
				    "";
				N: [XIC(BNI_EIP_507_Raw_Input_Data[36].0) OTE(Mapped_BNI_EIP_507_Data.I.Port_0_IO_Link_Status) ,XIC(BNI_EIP_507_Raw_Input_Data[36].1) OTE(Mapped_BNI_EIP_507_Data.I.Port_0_Device_Connected) ,XIC(BNI_EIP_507_Raw_Input_Data[37].0) OTE(Mapped_BNI_EIP_507_Data.I.Port_0_Validation_Failed) ];
				N: [XIC(BNI_EIP_507_Raw_Input_Data[84].0) OTE(Mapped_BNI_EIP_507_Data.I.Port_1_IO_Link_Status) ,XIC(BNI_EIP_507_Raw_Input_Data[84].1) OTE(Mapped_BNI_EIP_507_Data.I.Port_1_Device_Connected) ,XIC(BNI_EIP_507_Raw_Input_Data[85].0) OTE(Mapped_BNI_EIP_507_Data.I.Port_1_Validation_Failed) ];
				N: [XIC(BNI_EIP_507_Raw_Input_Data[132].0) OTE(Mapped_BNI_EIP_507_Data.I.Port_2_IO_Link_Status) ,XIC(BNI_EIP_507_Raw_Input_Data[132].1) OTE(Mapped_BNI_EIP_507_Data.I.Port_2_Device_Connected) ,XIC(BNI_EIP_507_Raw_Input_Data[133].0) OTE(Mapped_BNI_EIP_507_Data.I.Port_2_Validation_Failed) ];
				N: [XIC(BNI_EIP_507_Raw_Input_Data[180].0) OTE(Mapped_BNI_EIP_507_Data.I.Port_3_IO_Link_Status) ,XIC(BNI_EIP_507_Raw_Input_Data[180].1) OTE(Mapped_BNI_EIP_507_Data.I.Port_3_Device_Connected) ,XIC(BNI_EIP_507_Raw_Input_Data[181].0) OTE(Mapped_BNI_EIP_507_Data.I.Port_3_Validation_Failed) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION Cycle_Time (Class := Standard,
	                                          Revision := "1.0",
	                                          ExecutePrescan := Yes,
	                                          ExecutePostscan := No,
	                                          ExecuteEnableInFalse := No,
	                                          CreatedDate := "2021-01-27T19:43:34.015Z",
	                                          CreatedBy := "MFG\danweinhold",
	                                          EditedDate := "2022-01-28T17:40:35.746Z",
	                                          EditedBy := "MFG\danweinhold",
	                                          SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Timer_Enable : BOOL (Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        DefaultData := 0);
			Trigger : BOOL (Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   DefaultData := 0);
			New_Data : BOOL (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    DefaultData := 0);
			Pointer : DINT (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
			Current : REAL (Usage := Output,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0.00000000e+000);
			CT_S_1 : REAL (Usage := Output,
			                  RADIX := Float,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0.00000000e+000);
			CT_S_2 : REAL (Usage := Output,
			                  RADIX := Float,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0.00000000e+000);
			CT_S_3 : REAL (Usage := Output,
			                  RADIX := Float,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0.00000000e+000);
			CT_S_4 : REAL (Usage := Output,
			                  RADIX := Float,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0.00000000e+000);
			CT_S_5 : REAL (Usage := Output,
			                  RADIX := Float,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0.00000000e+000);
			CT_S_6 : REAL (Usage := Output,
			                  RADIX := Float,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0.00000000e+000);
			CT_S_7 : REAL (Usage := Output,
			                  RADIX := Float,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0.00000000e+000);
			CT_S_8 : REAL (Usage := Output,
			                  RADIX := Float,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0.00000000e+000);
			CT_S_9 : REAL (Usage := Output,
			                  RADIX := Float,
			                  Required := No,
			                  Visible := No,
			                  ExternalAccess := Read/Write,
			                  DefaultData := 0.00000000e+000);
			CT_S_10 : REAL (Usage := Output,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0.00000000e+000);
			CT_S_11 : REAL (Usage := Output,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0.00000000e+000);
			CT_S_12 : REAL (Usage := Output,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0.00000000e+000);
			CT_S_13 : REAL (Usage := Output,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0.00000000e+000);
			CT_S_14 : REAL (Usage := Output,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0.00000000e+000);
			CT_S_15 : REAL (Usage := Output,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0.00000000e+000);
			CT_S_16 : REAL (Usage := Output,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0.00000000e+000);
			CT_S_17 : REAL (Usage := Output,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0.00000000e+000);
			CT_S_18 : REAL (Usage := Output,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0.00000000e+000);
			CT_S_19 : REAL (Usage := Output,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0.00000000e+000);
			CT_S_20 : REAL (Usage := Output,
			                   RADIX := Float,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0.00000000e+000);
			ONS : DINT (Usage := Input,
			               RADIX := Decimal,
			               Required := No,
			               Visible := No,
			               DefaultData := 0);
			Time_DN : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
			MaxTime : DINT (Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Timer : TIMER (ExternalAccess := None,
			                DefaultData := "[0,600000,0]");
			Time : REAL (RADIX := Float,
			               ExternalAccess := None,
			               DefaultData := 0.00000000e+000);
			CycTimeSec : REAL[25] (RADIX := Float,
			                     ExternalAccess := None,
			                     DefaultData := "[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000]");
			Min_Time : DINT[5] (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := "[0,0,0,0,0]");
			TrigONS : BOOL (RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: NOP();
				N: [LEQ(Pointer,0) ,GEQ(Pointer,21) ]MOV(1,Pointer);
				N: XIC(Timer_Enable)TON(Timer,?,?);
				N: XIC(Timer.DN)OTE(Time_DN);
				N: DIV(Timer.ACC,1000,Time);
				N: GEQ(Time,MaxTime)MOV(MaxTime,Time);
				N: XIC(Trigger)ONS(TrigONS)[MOV(Time,CycTimeSec[Pointer]) ,MOV(Time,Current) ,ADD(Pointer,1,Pointer) ,RES(Timer) ];
				N: MOV(CycTimeSec[1],CT_S_1);
				N: MOV(CycTimeSec[2],CT_S_2);
				N: MOV(CycTimeSec[3],CT_S_3);
				N: MOV(CycTimeSec[4],CT_S_4);
				N: MOV(CycTimeSec[5],CT_S_5);
				N: MOV(CycTimeSec[6],CT_S_6);
				N: MOV(CycTimeSec[7],CT_S_7);
				N: MOV(CycTimeSec[8],CT_S_8);
				N: MOV(CycTimeSec[9],CT_S_9);
				N: MOV(CycTimeSec[10],CT_S_10);
				N: MOV(CycTimeSec[11],CT_S_11);
				N: MOV(CycTimeSec[12],CT_S_12);
				N: MOV(CycTimeSec[13],CT_S_13);
				N: MOV(CycTimeSec[14],CT_S_14);
				N: MOV(CycTimeSec[15],CT_S_15);
				N: MOV(CycTimeSec[16],CT_S_16);
				N: MOV(CycTimeSec[17],CT_S_17);
				N: MOV(CycTimeSec[18],CT_S_18);
				N: MOV(CycTimeSec[19],CT_S_19);
				N: MOV(CycTimeSec[20],CT_S_20);
		END_ROUTINE

		ROUTINE Prescan 
				N: NOP();
				N: MOV(1000,MaxTime);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION DomeLights (Description := "Conditions Handler for 3-Color DomeLights",
	                                          Class := Standard,
	                                          Revision := "1.0",
	                                          RevisionExtension := "20201210",
	                                          RevisionNote := "v1.0 3rd Color conditions above. 1st & 2nd Color conditions cancel each other.",
	                                          Vendor := "Hokuto",
	                                          ExecutePrescan := No,
	                                          ExecutePostscan := No,
	                                          ExecuteEnableInFalse := No,
	                                          CreatedDate := "2020-12-10T12:40:46.575Z",
	                                          CreatedBy := "LAPTOP-2CUQA63B\marco",
	                                          EditedDate := "2020-12-17T15:46:50.732Z",
	                                          EditedBy := "LAPTOP-1BK8GLC9\ucarr",
	                                          SoftwareRevision := "v32.00",
	                                          AdditionalHelpText := "3-Color DomeLight Handler.$N-Uses 3 DINT Tags as conditions, whenever a tag has a value different from 0, the corresponding color will be enabled.$N-Having the first 2 colors enabled at the same time will result in no Light output.$N-The 3rd color will override the first two colors.$N-The blinking command is general for 3 colors, if used, it should always be OTL.$N")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpColor1 : DINT (Description := "Conditions Tag for First Color",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := Yes,
			                     Visible := Yes,
			                     DefaultData := 0);
			inpColor2 : DINT (Description := "Conditions Tag for Second Color",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := Yes,
			                     Visible := Yes,
			                     DefaultData := 0);
			inpColor3 : DINT (Description := "Conditions Tag for Combined Color",
			                     Usage := Input,
			                     RADIX := Decimal,
			                     Required := Yes,
			                     Visible := Yes,
			                     DefaultData := 0);
			outO1 : BOOL (Description := "First output to DomeLight",
			                 Usage := Output,
			                 RADIX := Decimal,
			                 Required := Yes,
			                 Visible := Yes,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
			outO2 : BOOL (Description := "Second output to DomeLight",
			                 Usage := Output,
			                 RADIX := Decimal,
			                 Required := Yes,
			                 Visible := Yes,
			                 ExternalAccess := Read/Write,
			                 DefaultData := 0);
			cmdBlink : BOOL (Description := "Enables Blink depending on inpFlasher Fequency",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    DefaultData := 0);
			inpFlasher : BOOL (Description := "Flasher Bit. Adjust Frequency through the Input Tag",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := Yes,
			                      Visible := Yes,
			                      DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "*************************************************$N"
				    "-DomeLights Handler-$N"
				    "-Uses 3 DINT Tags as conditions, whenever a tag has a value different from 0, the corresponding color will be enabled.$N"
				    "-Having the first 2 colors enabled at the same time will result in no Light output.$N"
				    "-The 3rd color will override the first two colors.$N"
				    "-The blinking command is general for 3 colors, if used, it should always be OTL.$N"
				    "*************************************************";
				N: NOP();
				N: [NEQ(inpColor1,0) EQU(inpColor2,0) EQU(inpColor3,0) ,NEQ(inpColor3,0) ][XIC(inpFlasher) ,XIO(cmdBlink) ]OTE(outO1);
				N: [NEQ(inpColor2,0) EQU(inpColor1,0) EQU(inpColor3,0) ,NEQ(inpColor3,0) ][XIC(inpFlasher) ,XIO(cmdBlink) ]OTE(outO2);
				N: OTU(cmdBlink);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION ENetModulesDiag (Description := "Ethernet Modules Diagnostics$NGenerates status table for HMI$N",
	                                               Class := Standard,
	                                               Revision := "1.1",
	                                               RevisionExtension := "20200818",
	                                               RevisionNote := "v1.1 Added inhibited inputs to mute alarms.",
	                                               Vendor := "Hokuto",
	                                               ExecutePrescan := No,
	                                               ExecutePostscan := No,
	                                               ExecuteEnableInFalse := No,
	                                               CreatedDate := "2020-01-21T21:54:03.338Z",
	                                               CreatedBy := "LAPTOP-KKSRL2SB\ucarr",
	                                               EditedDate := "2022-01-05T16:13:14.245Z",
	                                               EditedBy := "LUCID\DanWeinhold",
	                                               SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			ENetNotRunning01 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning02 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning03 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning04 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning05 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning06 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning07 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning08 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning09 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning10 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning11 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning12 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning13 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning14 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning15 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning16 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning17 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning18 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning19 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning20 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning21 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning22 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning23 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning24 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning25 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning26 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning27 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning28 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning29 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning30 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning31 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning32 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning33 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning64 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning63 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning34 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning35 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning36 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning37 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning38 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning39 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning40 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning41 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning42 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning43 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning44 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning45 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning46 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning47 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning48 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning49 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning50 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning51 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning52 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning53 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning54 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning55 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning56 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning57 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning58 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning59 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning60 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning61 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			ENetNotRunning62 : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			stsENetAlarm : BOOL (Description := "Any Ethernet Module Connection Alarm Present",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			ENetInhibited01 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited02 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited03 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited04 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited05 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited06 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited07 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited08 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited09 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited10 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited11 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited12 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited13 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited14 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited15 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited16 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited17 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited18 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited19 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited20 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited21 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited22 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited23 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited24 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited25 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited26 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited27 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited28 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited29 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited30 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited31 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited32 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited33 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited34 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited35 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited36 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited37 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited38 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited39 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited40 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited41 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited42 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited43 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited44 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited45 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited46 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited47 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited48 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited49 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited50 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited51 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited52 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited53 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited54 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited55 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited56 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited57 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited58 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited59 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited60 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited61 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited62 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited63 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			ENetInhibited64 : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			hmiPLCName : STRING (ExternalAccess := Read/Write,
			                     DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			hmiDeviceID : STRING_40[65] (ExternalAccess := Read/Write,
			                      DefaultData
			ENetAlarm : BOOL[96] (RADIX := Decimal,
			                    ExternalAccess := Read/Write,
			                    DefaultData := "[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0]");
			Index : DINT (RADIX := Decimal,
			                ExternalAccess := None,
			                DefaultData := 0);
			ONS : BOOL[96] (RADIX := Decimal,
			              ExternalAccess := None,
			              DefaultData := "[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0]");
			ENetAlarmQty : DINT[65] (RADIX := Decimal,
			                       ExternalAccess := Read/Write,
			                       DefaultData := "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]");
			ClearONS : BOOL (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			ClearENetAlarmQtyPB : BOOL (Description := "Clear Alarms Counter$NHMI Push Button$N",
			                              RADIX := Decimal,
			                              ExternalAccess := Read/Write,
			                              DefaultData := 0);
			hmiAlarmQtyClearedDate : DINT[7] (RADIX := Decimal,
			                                 ExternalAccess := Read/Write,
			                                 DefaultData := "[0,0,0,0,0,0,0]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Ethernet Module Diagnostics AOI$N"
				    "************************************************************$N"
				    "$N"
				    "DeviceID: $QIP ADDRESS$Q - $QNAME$Q$N"
				    "Up to 64 Devices$N"
				    "$N"
				    "*";
				N: JMP(SkipText)LOWER(hmiPLCName,hmiPLCName)[LOWER(hmiDeviceID[1],hmiDeviceID[2]) LOWER(hmiDeviceID[3],hmiDeviceID[4]) LOWER(hmiDeviceID[5],hmiDeviceID[6]) LOWER(hmiDeviceID[7],hmiDeviceID[8]) LOWER(hmiDeviceID[9],hmiDeviceID[10]) ,LOWER(hmiDeviceID[11],hmiDeviceID[12]) LOWER(hmiDeviceID[13],hmiDeviceID[14]) LOWER(hmiDeviceID[15],hmiDeviceID[16]) LOWER(hmiDeviceID[17],hmiDeviceID[18]) LOWER(hmiDeviceID[19],hmiDeviceID[20]) ,LOWER(hmiDeviceID[21],hmiDeviceID[22]) LOWER(hmiDeviceID[23],hmiDeviceID[24]) LOWER(hmiDeviceID[25],hmiDeviceID[26]) LOWER(hmiDeviceID[27],hmiDeviceID[28]) LOWER(hmiDeviceID[29],hmiDeviceID[30]) ,LOWER(hmiDeviceID[31],hmiDeviceID[32]) LOWER(hmiDeviceID[33],hmiDeviceID[34]) LOWER(hmiDeviceID[35],hmiDeviceID[36]) LOWER(hmiDeviceID[37],hmiDeviceID[38]) LOWER(hmiDeviceID[39],hmiDeviceID[40]) ];
				N: [LOWER(hmiDeviceID[41],hmiDeviceID[42]) LOWER(hmiDeviceID[43],hmiDeviceID[44]) LOWER(hmiDeviceID[45],hmiDeviceID[46]) LOWER(hmiDeviceID[47],hmiDeviceID[48]) LOWER(hmiDeviceID[49],hmiDeviceID[50]) ,LOWER(hmiDeviceID[51],hmiDeviceID[52]) LOWER(hmiDeviceID[53],hmiDeviceID[54]) LOWER(hmiDeviceID[55],hmiDeviceID[56]) LOWER(hmiDeviceID[57],hmiDeviceID[58]) LOWER(hmiDeviceID[59],hmiDeviceID[60]) ,LOWER(hmiDeviceID[61],hmiDeviceID[62]) LOWER(hmiDeviceID[63],hmiDeviceID[64]) ];
				RC: "Map diagnostics input parameters to ENetAlarm bits$N"
				    "$N"
				    "*";
				N: LBL(SkipText)[XIC(ENetNotRunning01) XIO(ENetInhibited01) OTE(ENetAlarm[1]) ,XIC(ENetNotRunning02) XIO(ENetInhibited02) OTE(ENetAlarm[2]) ,XIC(ENetNotRunning03) XIO(ENetInhibited03) OTE(ENetAlarm[3]) ,XIC(ENetNotRunning04) XIO(ENetInhibited04) OTE(ENetAlarm[4]) ,XIC(ENetNotRunning05) XIO(ENetInhibited05) OTE(ENetAlarm[5]) ,XIC(ENetNotRunning06) XIO(ENetInhibited06) OTE(ENetAlarm[6]) ,XIC(ENetNotRunning07) XIO(ENetInhibited07) OTE(ENetAlarm[7]) ,XIC(ENetNotRunning08) XIO(ENetInhibited08) OTE(ENetAlarm[8]) ,XIC(ENetNotRunning09) XIO(ENetInhibited09) OTE(ENetAlarm[9]) ,XIC(ENetNotRunning10) XIO(ENetInhibited10) OTE(ENetAlarm[10]) ,XIC(ENetNotRunning11) XIO(ENetInhibited11) OTE(ENetAlarm[11]) ,XIC(ENetNotRunning12) XIO(ENetInhibited12) OTE(ENetAlarm[12]) ,XIC(ENetNotRunning13) XIO(ENetInhibited13) OTE(ENetAlarm[13]) ,XIC(ENetNotRunning14) XIO(ENetInhibited14) OTE(ENetAlarm[14]) ,XIC(ENetNotRunning15) XIO(ENetInhibited15) OTE(ENetAlarm[15]) ,XIC(ENetNotRunning16) XIO(ENetInhibited16) OTE(ENetAlarm[16]) ,XIC(ENetNotRunning17) XIO(ENetInhibited17) OTE(ENetAlarm[17]) ,XIC(ENetNotRunning18) XIO(ENetInhibited18) OTE(ENetAlarm[18]) ,XIC(ENetNotRunning19) XIO(ENetInhibited19) OTE(ENetAlarm[19]) ,XIC(ENetNotRunning20) XIO(ENetInhibited20) OTE(ENetAlarm[20]) ,XIC(ENetNotRunning21) XIO(ENetInhibited21) OTE(ENetAlarm[21]) ,XIC(ENetNotRunning22) XIO(ENetInhibited22) OTE(ENetAlarm[22]) ,XIC(ENetNotRunning23) XIO(ENetInhibited23) OTE(ENetAlarm[23]) ,XIC(ENetNotRunning24) XIO(ENetInhibited24) OTE(ENetAlarm[24]) ,XIC(ENetNotRunning25) XIO(ENetInhibited25) OTE(ENetAlarm[25]) ,XIC(ENetNotRunning26) XIO(ENetInhibited26) OTE(ENetAlarm[26]) ,XIC(ENetNotRunning27) XIO(ENetInhibited27) OTE(ENetAlarm[27]) ,XIC(ENetNotRunning28) XIO(ENetInhibited28) OTE(ENetAlarm[28]) ,XIC(ENetNotRunning29) XIO(ENetInhibited29) OTE(ENetAlarm[29]) ,XIC(ENetNotRunning30) XIO(ENetInhibited30) OTE(ENetAlarm[30]) ,XIC(ENetNotRunning31) XIO(ENetInhibited31) OTE(ENetAlarm[31]) ,XIC(ENetNotRunning32) XIO(ENetInhibited32) OTE(ENetAlarm[32]) ];
				N: [XIC(ENetNotRunning33) XIO(ENetInhibited33) OTE(ENetAlarm[33]) ,XIC(ENetNotRunning34) XIO(ENetInhibited34) OTE(ENetAlarm[34]) ,XIC(ENetNotRunning35) XIO(ENetInhibited35) OTE(ENetAlarm[35]) ,XIC(ENetNotRunning36) XIO(ENetInhibited36) OTE(ENetAlarm[36]) ,XIC(ENetNotRunning37) XIO(ENetInhibited37) OTE(ENetAlarm[37]) ,XIC(ENetNotRunning38) XIO(ENetInhibited38) OTE(ENetAlarm[38]) ,XIC(ENetNotRunning39) XIO(ENetInhibited39) OTE(ENetAlarm[39]) ,XIC(ENetNotRunning40) XIO(ENetInhibited40) OTE(ENetAlarm[40]) ,XIC(ENetNotRunning41) XIO(ENetInhibited41) OTE(ENetAlarm[41]) ,XIC(ENetNotRunning42) XIO(ENetInhibited42) OTE(ENetAlarm[42]) ,XIC(ENetNotRunning43) XIO(ENetInhibited43) OTE(ENetAlarm[43]) ,XIC(ENetNotRunning44) XIO(ENetInhibited44) OTE(ENetAlarm[44]) ,XIC(ENetNotRunning45) XIO(ENetInhibited45) OTE(ENetAlarm[45]) ,XIC(ENetNotRunning46) XIO(ENetInhibited46) OTE(ENetAlarm[46]) ,XIC(ENetNotRunning47) XIO(ENetInhibited47) OTE(ENetAlarm[47]) ,XIC(ENetNotRunning48) XIO(ENetInhibited48) OTE(ENetAlarm[48]) ,XIC(ENetNotRunning49) XIO(ENetInhibited49) OTE(ENetAlarm[49]) ,XIC(ENetNotRunning50) XIO(ENetInhibited50) OTE(ENetAlarm[50]) ,XIC(ENetNotRunning51) XIO(ENetInhibited51) OTE(ENetAlarm[51]) ,XIC(ENetNotRunning52) XIO(ENetInhibited52) OTE(ENetAlarm[52]) ,XIC(ENetNotRunning53) XIO(ENetInhibited53) OTE(ENetAlarm[53]) ,XIC(ENetNotRunning54) XIO(ENetInhibited54) OTE(ENetAlarm[54]) ,XIC(ENetNotRunning55) XIO(ENetInhibited55) OTE(ENetAlarm[55]) ,XIC(ENetNotRunning56) XIO(ENetInhibited56) OTE(ENetAlarm[56]) ,XIC(ENetNotRunning57) XIO(ENetInhibited57) OTE(ENetAlarm[57]) ,XIC(ENetNotRunning58) XIO(ENetInhibited58) OTE(ENetAlarm[58]) ,XIC(ENetNotRunning59) XIO(ENetInhibited59) OTE(ENetAlarm[59]) ,XIC(ENetNotRunning60) XIO(ENetInhibited60) OTE(ENetAlarm[60]) ,XIC(ENetNotRunning61) XIO(ENetInhibited61) OTE(ENetAlarm[61]) ,XIC(ENetNotRunning62) XIO(ENetInhibited62) OTE(ENetAlarm[62]) ,XIC(ENetNotRunning63) XIO(ENetInhibited63) OTE(ENetAlarm[63]) ,XIC(ENetNotRunning64) XIO(ENetInhibited64) OTE(ENetAlarm[64]) ];
				RC: "Ethernet module connection alarms count per Device$N"
				    "$N"
				    "*";
				N: [MOV(1,Index) ,OTU(stsENetAlarm) ];
				N: LBL(AlarmsQty)LIM(1,Index,64)XIC(ENetAlarm[Index])OTL(stsENetAlarm)ONS(ONS[Index])ADD(ENetAlarmQty[Index],1,ENetAlarmQty[Index]);
				N: ADD(Index,1,Index)LEQ(Index,64)JMP(AlarmsQty);
				RC: "Clear all ethernet module connection alarms counts$N"
				    "$N"
				    "*";
				N: XIC(ClearENetAlarmQtyPB)ONS(ClearONS)[FLL(0,ENetAlarmQty[0],65) ,GSV(WallClockTime,,LocalDateTime,hmiAlarmQtyClearedDate[0]) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION Fanuc_RB_Safety (Description := "Robot Safety (Fanuc)",
	                                               Class := Safety,
	                                               Revision := "1.9",
	                                               RevisionExtension := "20201006",
	                                               RevisionNote := "v1.4 Common inpAreaSafe for AuxPowerEnable, FenceClosed, ServoOn.$Nv1.5 Use of Stop0 (CSI_05) insted of Stop1 (CSI_02)$Nv1.6 Added OR to inpAreaSafe for CSI_05, conditions in OR stsRBinTeach and CSO_07$Nv1.7 Change condition for CSI_05 servo disconnect.$Nv1.8 Monitoring space logic removed, need logic outside AOI.$Nv1.9 Added Estop instruction for CSO_01, external reset needed before Ok condition.",
	                                               Vendor := "Hokuto",
	                                               ExecutePrescan := No,
	                                               ExecutePostscan := No,
	                                               ExecuteEnableInFalse := No,
	                                               CreatedDate := "2019-09-11T20:23:59.331Z",
	                                               CreatedBy := "MAKOTO-E\makoto-e",
	                                               EditedDate := "2022-01-05T16:13:14.264Z",
	                                               EditedBy := "LUCID\DanWeinhold",
	                                               SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			stsRBinAuto : BOOL (Description := "Robot in$NAuto",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			stsRBinTeach : BOOL (Description := "Robot in$NTeach",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			stsRBinBypass : BOOL (Description := "Robot in$NBypass",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read/Write,
			                         DefaultData := 0);
			stsEstopOK : BOOL (Description := "Robot$NEstop OK",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			stsAuxPowerOK : BOOL (Description := "Aux Power$NOK",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read/Write,
			                         DefaultData := 0);
			stsAuxPowerFaulted : BOOL (Description := "Aux Power$NFaulted",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := Yes,
			                              ExternalAccess := Read/Write,
			                              DefaultData := 0);
			RB_SIO : s_udt_Fanuc_RB_S_IO (Usage := InOut,
			                  Required := Yes,
			                  Visible := Yes);
			inpSysAllEstopOK : BOOL (Description := "System$NAll Estop OK",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := Yes,
			                            Visible := Yes,
			                            DefaultData := 0);
			inpSysAnyBypSwOn : BOOL (Description := "System$NAny Bypass Switch On",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := Yes,
			                            Visible := Yes,
			                            DefaultData := 0);
			inpAreaSafe : BOOL (Description := "Area Safe",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			inpSysReset : BOOL (Description := "System Reset",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := Yes,
			                       Visible := Yes,
			                       DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			AuxPower : REDUNDANT_OUTPUT (Description := "Aux Power",
			                   ExternalAccess := Read Only,
			                   DefaultData := "[0,0,0,0,0,0,0,0,0]");
			AuxPowerEnable : BOOL (Description := "Aux Power$NEnable",
			                         RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := 0);
			inpSysReset_SB : BOOL (Description := "System Reset Input Storage Bit$NOSF",
			                         RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := 0);
			inpSysReset_OB : BOOL (Description := "System Reset Input Output Bit$NOSF",
			                         RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := 0);
			Reset_HoldOnTmr : TIMER (ExternalAccess := None,
			                          DefaultData := "[0,0,0]");
			SftyCircuitResetOSF : BOOL (Description := "Safety Circuit Reset$NOne Shot Falling",
			                              RADIX := Decimal,
			                              ExternalAccess := None,
			                              DefaultData := 0);
			FaultReset_SB : BOOL (RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			SftyFaultResetOSR : BOOL (Description := "Safety Fault Reset$NOne Shot Rising",
			                            RADIX := Decimal,
			                            ExternalAccess := None,
			                            DefaultData := 0);
			RB_Estop : EMERGENCY_STOP (Description := "Robot$NEStop",
			                   ExternalAccess := None,
			                   DefaultData := "[0,0,0,0,0,0,0,0,0,0,0,0,0]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Fanuc Robot Safety AOI$N"
				    "************************************************************";
				N: NOP();
				RC: "Fault Reset and Circuit Reset$N"
				    "*";
				N: NOP();
				N: XIC(inpSysReset)OSF(inpSysReset_SB,inpSysReset_OB);
				N: [XIC(inpSysReset_OB) ,XIC(Reset_HoldOnTmr.TT) ][MOV(500,Reset_HoldOnTmr.PRE) TON(Reset_HoldOnTmr,?,?) ,OTE(SftyCircuitResetOSF) ];
				N: XIC(inpSysReset_SB)OSR(FaultReset_SB,SftyFaultResetOSR);
				RC: "Robot Safety Inputs$N"
				    "*";
				N: NOP();
				N: XIC(RB_SIO.SI.CSO_08)OTE(stsRBinBypass);
				N: XIO(RB_SIO.SI.CSO_04)[XIC(RB_SIO.SI.CSO_05) ,XIC(RB_SIO.SI.CSO_06) ]XIO(RB_SIO.SI.CSO_08)OTE(stsRBinTeach);
				N: XIC(RB_SIO.SI.CSO_04)XIO(RB_SIO.SI.CSO_05)XIO(RB_SIO.SI.CSO_06)XIO(RB_SIO.SI.CSO_08)OTE(stsRBinAuto);
				N: ESTOP(RB_Estop,MANUAL,RB_SIO.SI.CSO_01,RB_SIO.SI.CSO_01,SftyCircuitResetOSF,SftyFaultResetOSR);
				N: XIC(RB_Estop.O1)XIO(RB_SIO.SI.CSO_08)OTE(stsEstopOK);
				N: XIC(inpSysAllEstopOK)[XIC(inpAreaSafe) ,XIC(RB_SIO.SI.CSO_05) XIC(RB_SIO.SI.CSO_07) ]OTE(AuxPowerEnable);
				N: ROUT(AuxPower,POSITIVE,AuxPowerEnable,RB_SIO.SI.CSO_03,RB_SIO.SI.CSO_03,SftyFaultResetOSR)XIC(AuxPower.O1)XIC(AuxPower.O2)OTE(RB_SIO.SO.CSI_04);
				N: XIC(RB_SIO.SO.CSI_04)OTE(stsAuxPowerOK);
				N: XIC(AuxPower.FP)OTE(stsAuxPowerFaulted);
				N: XIC(inpSysAllEstopOK)XIO(RB_SIO.SI.CSO_08)OTE(RB_SIO.SO.CSI_01);
				N: OTE(RB_SIO.SO.CSI_02);
				N: [XIO(RB_SIO.SI.CSO_06) ,XIC(inpAreaSafe) ]OTE(RB_SIO.SO.CSI_03);
				N: [XIC(inpAreaSafe) XIO(inpSysAnyBypSwOn) ,XIC(stsRBinTeach) XIC(RB_SIO.SI.CSO_07) ]XIO(RB_SIO.SI.CSO_08)OTE(RB_SIO.SO.CSI_05);
				N: [OTU(RB_SIO.SO.CSI_06) ,OTU(RB_SIO.SO.CSI_07) ];
				N: [OTU(RB_SIO.SO.CSI_20) ,OTU(RB_SIO.SO.CSI_21) ,OTU(RB_SIO.SO.CSI_22) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION FaultManager (Description := "Fault Manager AOI",
	                                            Class := Standard,
	                                            Revision := "1.0",
	                                            ExecutePrescan := No,
	                                            ExecutePostscan := No,
	                                            ExecuteEnableInFalse := No,
	                                            CreatedDate := "2023-04-13T22:01:19.176Z",
	                                            CreatedBy := "MFG\oscarsandoval",
	                                            EditedDate := "2023-04-13T22:24:13.633Z",
	                                            EditedBy := "MFG\oscarsandoval",
	                                            SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			FltArray : DINT[2] (Description := "Data Table To Examine",
			                    Usage := InOut,
			                    RADIX := Decimal,
			                    Required := Yes,
			                    Visible := Yes);
			AutoMode : BOOL (Description := "Auto Mode",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := Yes,
			                    Visible := Yes,
			                    DefaultData := 0);
			BitLen : DINT (Description := "How Many Bits To Compare",
			                  Usage := Input,
			                  RADIX := Decimal,
			                  Required := Yes,
			                  Visible := Yes,
			                  DefaultData := 0);
			ZeroRef : DINT[500] (Description := "ZeroRef",
			                   Usage := InOut,
			                   RADIX := Decimal,
			                   Required := Yes,
			                   Visible := Yes);
			CompCntrlFD : BOOL (Description := "Compare Control FBC Found",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			CompCntrlDN : BOOL (Description := "Compare Control FBC Done",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			CompCntrlPos : DINT (Description := "Compare Control FBC Position",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			AutoOff : BOOL (Description := "Auto Mode Off - Processing Faults",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
			FaultNum : DINT (Description := "Fault Number Found",
			                    Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			LwstFaultNum : DINT (Description := "Lowest Fault Number",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			AutoModeEcho : BOOL (Description := "Auto Mode Echo",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			AutoOffOneScan : BOOL (Description := "Auto Mode Off One Scan",
			                         RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := 0);
			CompareCntrl : CONTROL (Description := "Compare Control",
			                       ExternalAccess := None,
			                       DefaultData := "[0,1,1]");
			FaultFoundMem : BOOL (Description := "Fault Found Memory",
			                        RADIX := Decimal,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			FaultFoundMemSU : BOOL (Description := "Fault Found Memory Setup",
			                          RADIX := Decimal,
			                          ExternalAccess := Read/Write,
			                          DefaultData := 0);
			FBCFaultNum : DINT (Description := "Fault Number",
			                      RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			FBCResult : DINT[2] (Description := "FBC Result Value",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := "[0,0]");
			FltFoundDwell : TIMER (Description := "Fault Found Dwell Timer",
			                        ExternalAccess := None,
			                        DefaultData := "[0,0,0]");
			LowestFault : DINT (Description := "Lowest Fault Number",
			                      RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			LowestFaultSU : DINT (Description := "Lowest Fault Number Setup",
			                        RADIX := Decimal,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			ONS : INT (Description := "One Shots",
			              RADIX := Decimal,
			              ExternalAccess := Read/Write,
			              DefaultData := 0);
			ResultCntrl : CONTROL (Description := "Result Control",
			                      ExternalAccess := None,
			                      DefaultData := "[0,1,1]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: XIO(AutoMode)ONS(ONS.0)[OTE(AutoOffOneScan) ,OTL(AutoOff) ,MOV(0,CompareCntrl.POS) ];
				N: [XIO(CompareCntrl.EN) ,XIO(CompareCntrl.DN) XIO(CompareCntrl.FD) ]XIO(AutoOffOneScan)[OTE(CompareCntrl.IN) ,MOV(BitLen,CompareCntrl.LEN) MOV(1,ResultCntrl.LEN) ,FBC(FltArray[0],ZeroRef[0],FBCResult[0],CompareCntrl,?,?,ResultCntrl,?,?) ];
				RC: "***************************************************************************************************$N"
				    "Determine The Fault Number$N"
				    "***************************************************************************************************";
				N: XIC(CompareCntrl.FD)MOV(FBCResult[0],FBCFaultNum);
				RC: "***************************************************************************************************$N"
				    "Setup Control Logic For Fault Detected Memory$N"
				    "***************************************************************************************************";
				N: [XIC(CompareCntrl.DN) ONS(ONS.1) [XIO(FaultFoundMemSU) OTU(FaultFoundMem) ,OTU(FaultFoundMemSU) ] ,XIC(CompareCntrl.FD) OTL(FaultFoundMemSU) OTL(FaultFoundMem) ];
				N: [XIC(FaultFoundMem) MOV(250,FltFoundDwell.PRE) TON(FltFoundDwell,?,?) ,XIC(AutoOff) OTL(FltFoundDwell.DN) ];
				RC: "***************************************************************************************************$N"
				    "Determine the Lowest Fault Number While Scroll In Process$N"
				    "***************************************************************************************************";
				N: [XIC(CompareCntrl.FD) GRT(FBCFaultNum,0) [LES(FBCFaultNum,LowestFaultSU) ,EQU(LowestFaultSU,0) ] MOV(FBCFaultNum,LowestFaultSU) ,[GRT(LowestFaultSU,0) LES(LowestFaultSU,LowestFault) ,EQU(LowestFault,0) ] MOV(LowestFaultSU,LowestFault) ,XIC(CompareCntrl.DN) ONS(ONS.2) [MOV(LowestFaultSU,LowestFault) ,MOV(0,LowestFaultSU) ] ];
				N: XIC(FltFoundDwell.DN)XIC(FaultFoundMem)[XIC(CompareCntrl.FD) OTE(CompCntrlFD) ,MOV(FBCFaultNum,FaultNum) ,MOV(LowestFault,LwstFaultNum) ];
				N: [XIO(FltFoundDwell.DN) ,XIO(FaultFoundMem) ][MOV(0,FaultNum) ,MOV(0,LwstFaultNum) ];
				N: [XIC(CompareCntrl.DN) OTE(CompCntrlDN) ,MOV(CompareCntrl.POS,CompCntrlPos) ];
				N: [XIC(CompareCntrl.FD) ,XIC(CompareCntrl.DN) ]OTU(AutoOff);
				N: XIC(AutoMode)OTE(AutoModeEcho);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION FingerSwipe (Class := Safety,
	                                           Revision := "1.1",
	                                           RevisionExtension := "20191122",
	                                           RevisionNote := "v1.1 Standard tag names",
	                                           Vendor := "Hokuto",
	                                           ExecutePrescan := No,
	                                           ExecutePostscan := No,
	                                           ExecuteEnableInFalse := No,
	                                           CreatedDate := "2019-11-11T16:14:21.275Z",
	                                           CreatedBy := "LAPTOP-KKSRL2SB\ucarr",
	                                           EditedDate := "2022-01-05T16:13:14.317Z",
	                                           EditedBy := "LUCID\DanWeinhold",
	                                           SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpFingerSwipe : BOOL (Usage := Input,
			                          RADIX := Decimal,
			                          Required := Yes,
			                          Visible := Yes,
			                          DefaultData := 0);
			stsCycleStartOSF : BOOL (Description := "Operator$NFinger Swipe$NCycle Start$NOne Shot Falling",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            ExternalAccess := Read/Write,
			                            DefaultData := 0);
			stsSafetyResetOSR : BOOL (Description := "Operator$NFinger Swipe$NSafety Reset$NOne Shot Rising",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := Yes,
			                             ExternalAccess := None,
			                             DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Start_SB : BOOL (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			Start_OB : BOOL (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			Start_HoldOnTmr : TIMER (ExternalAccess := None,
			                          DefaultData := "[0,500,0]");
			Reset_SB : BOOL (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Finger Swipe AOI$N"
				    "************************************************************";
				N: XIC(inpFingerSwipe)OSF(Start_SB,Start_OB);
				N: [XIC(Start_OB) ,XIC(Start_HoldOnTmr.TT) ][MOV(500,Start_HoldOnTmr.PRE) TON(Start_HoldOnTmr,?,?) ,OTE(stsCycleStartOSF) ];
				N: XIC(Start_SB)OSR(Reset_SB,stsSafetyResetOSR);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION Gate (Class := Safety,
	                                    Revision := "1.13",
	                                    RevisionExtension := "20210110",
	                                    RevisionNote := "v1.6 Rework due to s_udt_Sfty_Smry UDT update$Nv1.7 Fixed parameters comments, tags access for HMI.$Nv1.8 Added ResetPB for DCSTL reset and Power On condition for StartPB indicator light.$Nv1.9 Updated discrepancy for DCSTL to 20ms.$Nv1.10 Updated Red & White lamps conditions.$Nv1.11 Change reset lamp on condition.$Nv1.12 Updated Green lamp conditions.$Nv1.13 Update Unlock Request Logic",
	                                    Vendor := "Hokuto",
	                                    ExecutePrescan := No,
	                                    ExecutePostscan := No,
	                                    ExecuteEnableInFalse := No,
	                                    CreatedDate := "2019-09-06T15:28:50.007Z",
	                                    CreatedBy := "MAKOTO-E\makoto-e",
	                                    EditedDate := "2023-06-02T14:19:02.490Z",
	                                    EditedBy := "LUCID\JulioGranillo",
	                                    SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			In : AB:442G_MABB_E0JP4679:I:0 (COMMENT.RUNMODE := "1 = Run Mode$N0 = Not Run Mode",
			              COMMENT.CONNECTIONFAULTED := "1 = Not connected$N0 = Connection to the tag is up and working",
			              COMMENT.DIAGNOSTICACTIVE := "1 = One or more diagnostics active$N0 = No diagnostics active",
			              COMMENT.ESTOP := "1 = E-stop is in the active state (E-stop not pressed)$N0 = E-stop pressed (safe state)",
			              COMMENT.ENABLINGSWITCH := "1 = Enabling is in the active (enabled) state$N0 = Switch is released (safe state)",
			              COMMENT.GUARDCLOSED := "1 = Guard is closed$N0 = Guard is open",
			              COMMENT.GUARDINTERLOCKED := "1 = Guard is interlocked (guard closed with bolt actuator engaged)$N0 = Bolt is retracted (disengaged) and/or guard is open",
			              COMMENT.GUARDLOCKED := "1 = Guard locking is active (guard is closed, actuator (bolt) is engaged AND locked$N0 = Guard locking is not active, actuator (bolt) is NOT engaged and NOT locked",
			              COMMENT.SWITCH4 := "(S4): Unlock Request$N[Yellow]",
			              COMMENT.SWITCH6 := "(S6): Fault Reset$N[Red]",
			              COMMENT.SWITCH7 := "(S7): Cycle Start$N[White]",
			              COMMENT.SWITCH9 := "(S9): Power ON$N[Green]",
			              COMMENT.LOCKSEQUENCEFAULT := "1 = Fault$N0 = OK, no fault",
			              COMMENT.UNLOCKCOMMANDFAULT := "1 = Fault$N0 = OK, no fault",
			              COMMENT.CYCLETHRESHOLDEXCEEDED := "0 =<1,000,000 switching cycles of the solenoid$N1 =>1,000,000 switching cycles of the solenoid",
			              Usage := InOut,
			              Required := Yes,
			              Visible := Yes);
			Out : AB:442G_MABB_E0JP4679:O:0 (COMMENT.UNLOCK := "1 = Turn guard locking OFF (disable locking)$N0 = Turn guard locking ON (enable locking)",
			               COMMENT.LIGHT4 := "(L4): Unlock Request [Yellow]",
			               COMMENT.LIGHT6 := "(L6): Fault Reset [Red]",
			               COMMENT.LIGHT7 := "(L7): Cycle Start [White]",
			               COMMENT.LIGHT9 := "(L9): Power ON [Green]",
			               COMMENT.ESTOPLIGHT := "1 = Illumination is turned ON$N0 = Illumination is turned OFF",
			               COMMENT.GENERALFAULTUNLATCH := "1 = Reset of bus module$N0 = Normal operation",
			               COMMENT.LOCKSEQUENCEFAULTUNLATCH := "1 = Reset of locking assembly$N0 = Normal operation",
			               Usage := InOut,
			               Required := Yes,
			               Visible := Yes);
			cmdTestRequest : BOOL (Description := "Gate Test Request$NCommand$NTransition required:$Nhigh (1)  to low (0)",
			                          Usage := InOut,
			                          RADIX := Decimal,
			                          Required := Yes,
			                          Visible := Yes);
			inpSysPowerOnReady : BOOL (Description := "System$NPower On Ready",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := Yes,
			                              Visible := Yes,
			                              DefaultData := 0);
			inpSysPowerOn : BOOL (Description := "System$NPower On",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := Yes,
			                         Visible := Yes,
			                         DefaultData := 0);
			inpSysAutoCycleReady : BOOL (Description := "System$NAuto Cycle Ready",
			                                Usage := Input,
			                                RADIX := Decimal,
			                                Required := Yes,
			                                Visible := Yes,
			                                DefaultData := 0);
			inpSysAutoCycleOn : BOOL (Description := "System$NAuto Cycle On",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := Yes,
			                             Visible := Yes,
			                             DefaultData := 0);
			inpSysFaulted : BOOL (Description := "System$NFaulted",
			                         Usage := Input,
			                         RADIX := Decimal,
			                         Required := Yes,
			                         Visible := Yes,
			                         DefaultData := 0);
			inpClearToUnlock : BOOL (Description := "Clear to Unlock",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := Yes,
			                            Visible := Yes,
			                            DefaultData := 0);
			inpBlinkHi : BOOL (Description := "Sys$NBlink High",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := Yes,
			                      Visible := Yes,
			                      DefaultData := 0);
			inpBlinkMid : BOOL (Description := "Sys$NBlink Mid",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := Yes,
			                       Visible := Yes,
			                       DefaultData := 0);
			inpBlinkLo : BOOL (Description := "Sys$NBlink Low",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := Yes,
			                      Visible := Yes,
			                      DefaultData := 0);
			stsPowerOnPushed : BOOL (Description := "Gate$NPower On$NPB",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            ExternalAccess := Read/Write,
			                            DefaultData := 0);
			stsOpenGateRequested : BOOL (Description := "Open Gate$NRequested",
			                                Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := Yes,
			                                ExternalAccess := Read/Write,
			                                DefaultData := 0);
			stsStartPushed : BOOL (Description := "Gate$NStart$NPB",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read/Write,
			                          DefaultData := 0);
			stsResetPushed : BOOL (Description := "Gate$NReset$NPB",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read/Write,
			                          DefaultData := 0);
			stsEstopNormal : BOOL (Description := "Gate$NEstop$NNormal",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read/Write,
			                          DefaultData := 0);
			stsGateLocked : BOOL (Description := "Gate$NLocked",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read/Write,
			                         DefaultData := 0);
			stsGateUnlocked : BOOL (Description := "Gate$NBolt Insterted and$NUnlocked",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
			stsBypassSwitchOn : BOOL (Description := "Gate Air Dump Off Bypass Switch On",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := Yes,
			                             ExternalAccess := Read/Write,
			                             DefaultData := 0);
			stsFaulted : BOOL (Description := "Gate$NFaulted",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			stsCommOk : BOOL (Description := "Gate$NCommunication Ok",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			PowerCycleMAB_Ind : BOOL (Description := "Gate$NPower Cycle Required$NIndicator",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read/Write,
			                             DefaultData := 0);
			EStopCycle_Ind : BOOL (Description := "Gate$NEStop Cycle Required$NIndicator",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          ExternalAccess := Read/Write,
			                          DefaultData := 0);
			GateCycleRqd_Ind : BOOL (Description := "Gate$NCycle Required$NIndicator",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read/Write,
			                            DefaultData := 0);
			OpenGate_Ind : BOOL (Description := "Gate$NOpen Required$NIndicator",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			GateLockCycle_Ind : BOOL (Description := "Gate$NLock Cycle Required$NIndicator",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read/Write,
			                             DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			MAB_EStop_Status : BOOL (Description := "Gate Estop$NRun Mode On,$NConnected and$NNot Faulted$NStatus",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			ResetPB : BOOL (Description := "Gate Reset$NPush Button",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			MAB_Status : BOOL (Description := "Gate$NRun Mode On$NConnection Ok$NStatus",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			ONS : DINT (RADIX := Decimal,
			              ExternalAccess := None,
			              DefaultData := 0);
			TestRequested : BOOL (Description := "Gate Test Requested$NTransition required:$Nhigh (1) to low (0)",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			ChannelA : BOOL (Description := "Gate Lock$NSafety Instruction$NChannel A",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			ChannelB : BOOL (Description := "Gate Lock$NSafety Instruction$NChannel B",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			OpenGateSimulation : BOOL (Description := "Open Gate$NSimulation",
			                             RADIX := Decimal,
			                             ExternalAccess := None,
			                             DefaultData := 0);
			UnlockRequested : BOOL (Description := "Unlock Request$NPush Button$NPressed",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			HazardStopped : BOOL (Description := "Hazzard conditions stopped$N1 = Clear to Unlock",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			UnlockPB : BOOL (Description := "Unlock Request$NPush Button",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			PowerOnPB : BOOL (Description := "Power On$NPush Button",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			StartPB : BOOL (Description := "Gate Start$NPush Button",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			PowerOnLamp : BOOL (Description := "(L9): Power ON [Green]",
			                      RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			UnlockLamp : BOOL (Description := "(L4): Unlock Request$N[Yellow]",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			ResetLamp : BOOL (Description := "(L6): Fault Reset [Red]",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			StartLamp : BOOL (Description := "(L7): Cycle Start [White]",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
			wrkResetOSF_SB : BOOL (RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := 0);
			wrkResetOSF_OB : BOOL (Description := "Fault Reset$NOne Shot Falling",
			                         RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := 0);
			MAB_OutputEnable : BOOL (Description := "Safety Output$NEnable Interlock",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			Stop : BOOL (RADIX := Decimal,
			               ExternalAccess := None,
			               DefaultData := 0);
			LockFaultTimer : TIMER (ExternalAccess := None,
			                         DefaultData := "[0,2000,0]");
			GeneralFaultTimer : TIMER (ExternalAccess := None,
			                            DefaultData := "[0,2000,0]");
			SafetyOutputsEnabled_Ind : BOOL (Description := "From Input$NSystem Master On",
			                                   RADIX := Decimal,
			                                   ExternalAccess := Read/Write,
			                                   DefaultData := 0);
			SafetyOutputsReady_Ind : BOOL (Description := "From Input and $NMAB status$NSystem Master Ready",
			                                 RADIX := Decimal,
			                                 ExternalAccess := Read/Write,
			                                 DefaultData := 0);
			MAB_ESTOP_DCS : DCI_STOP (Description := "Gate Estop$NDCS$NSafety Instruction",
			                        ExternalAccess := None,
			                        DefaultData := "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]");
			MAB_DCSTL : DCI_STOP_TEST_LOCK (Description := "Gate Lock$NSafety Instruction",
			                    COMMENT.ULC := "Gate Lock$NSafety Instruction$NUnlock Command",
			                    ExternalAccess := None,
			                    DefaultData := "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]");
			CROUT_Contactors : CONFIGURABLE_ROUT (ExternalAccess := None,
			                           DefaultData := "[0,0,0,0,0,0,0,0,0,0,0,0,0]");
			GateUnlocked_Ind : BOOL (Description := "Gate Unlocked$NIndicator",
			                           RADIX := Decimal,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
			ResetRequired_Ind : BOOL (Description := "Gate Reset$NRequired Indicator",
			                            RADIX := Decimal,
			                            ExternalAccess := Read/Write,
			                            DefaultData := 0);
			ForcedOpnTimr : TIMER (ExternalAccess := None,
			                        DefaultData := "[0,0,0]");
			OpenGateRequired : BOOL (Description := "Auxiliary condition to handle$N(L9): Power ON [Green]$Noperation",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "MAB - Gate AOI$N"
				    "Multifunctional Access Box$N"
				    "************************************************************";
				N: NOP();
				RC: "************************************************************$N"
				    " Gate PBs definition$N"
				    "************************************************************$N"
				    "Push Buttons Layout$N"
				    "$N"
				    "| (S4) ------- Top Left |$N"
				    "| (S6) ------ Top Right |$N"
				    "| (S7) -- Bottom Right |$N"
				    "| (S9) --- Bottom Left |$N"
				    "";
				N: NOP();
				N: XIC(In.Switch4)OTE(UnlockPB);
				N: XIC(In.Switch6)OTE(ResetPB);
				N: XIC(In.Switch9)OTE(PowerOnPB);
				N: XIC(In.Switch7)OTE(StartPB);
				RC: "************************************************************$N"
				    " Gate Lamps definition$N"
				    "************************************************************$N"
				    "Lamps Layout$N"
				    "$N"
				    "| (L4) ------- Top Left |$N"
				    "| (L6) ------ Top Right |$N"
				    "| (L7) -- Bottom Right |$N"
				    "| (L9) --- Bottom Left |$N"
				    "";
				N: XIC(UnlockLamp)OTE(Out.Light4);
				N: XIC(ResetLamp)OTE(Out.Light6);
				N: XIC(StartLamp)OTE(Out.Light7);
				N: XIC(PowerOnLamp)OTE(Out.Light9);
				RC: "************************************************************$N"
				    "Comm Status$N"
				    "************************************************************";
				N: XIC(In.RunMode)OTE(stsCommOk);
				RC: "************************************************************$N"
				    "EStop Status$N"
				    "************************************************************";
				N: XIC(In.RunMode)XIO(In.ConnectionFaulted)XIO(In.EStopFault)OTE(MAB_EStop_Status);
				N: DCS(MAB_ESTOP_DCS,EMERGENCY STOP,EQUIVALENT - ACTIVE HIGH,3000,MANUAL,AUTOMATIC,In.EStop,In.EStop,MAB_EStop_Status,wrkResetOSF_SB);
				N: [[XIO(MAB_EStop_Status) ,XIC(EStopCycle_Ind) ] XIC(inpBlinkHi) ,XIC(MAB_EStop_Status) XIO(EStopCycle_Ind) XIO(MAB_ESTOP_DCS.O1) ]OTE(Out.EStopLight);
				RC: "************************************************************$N"
				    "MAB Status$N"
				    "************************************************************";
				N: XIC(In.RunMode)XIO(In.ConnectionFaulted)OTE(MAB_Status);
				N: [XIC(cmdTestRequest) ,XIO(HazardStopped) XIC(HazardStopped) ]OTE(TestRequested);
				N: [XIC(TestRequested) XIO(In.GuardLocked) ONS(ONS.1) OTE(OpenGateSimulation) ,XIO(OpenGateSimulation) XIC(In.GuardInterlocked) [OTE(ChannelA) ,OTE(ChannelB) ] ,DCSTL(MAB_DCSTL,SAFETY GATE,EQUIVALENT - ACTIVE HIGH,20,MANUAL,AUTOMATIC,ChannelA,ChannelB,TestRequested,UnlockRequested,In.GuardLocked,HazardStopped,MAB_Status,wrkResetOSF_SB) ];
				N: [XIC(UnlockPB) ONS(ONS.2) OTL(OpenGateRequired) ,XIC(UnlockRequested) ][XIC(In.GuardLocked) ,XIO(PowerOnPB) ,XIC(OpenGateRequired) ]OTE(UnlockRequested);
				N: XIC(OpenGateRequired)XIO(In.GuardInterlocked)OTU(OpenGateRequired);
				N: XIC(MAB_DCSTL.ULC)OTE(Out.Unlock);
				N: [XIC(StartPB) ,XIC(ResetPB) ]OSF(wrkResetOSF_SB,wrkResetOSF_OB);
				N: [XIC(wrkResetOSF_OB) ,XIC(MAB_OutputEnable) ]XIC(MAB_ESTOP_DCS.O1)XIC(MAB_DCSTL.O1)XIO(UnlockRequested)XIO(In.DiagnosticActive)OTE(MAB_OutputEnable);
				N: [XIO(inpSysPowerOn) ,XIC(inpClearToUnlock) ]OTE(HazardStopped);
				RC: "************************************************************$N"
				    "Air Dump Off Bypass Key$N"
				    "************************************************************";
				N: XIC(In.EnablingSwitch)XIO(In.EnablingSwitchFault)XIO(In.DiagnosticActive)OTE(stsBypassSwitchOn);
				RC: "************************************************************$N"
				    "Faults Reset$N"
				    "************************************************************$N"
				    "$N"
				    "The MAB requires that the reset pulse width to be 10 msâ¦10000 ms in length, which is the purpose for the$N"
				    "2000 ms timer.$N"
				    "$N"
				    "************************************************************$N"
				    "";
				N: XIC(ResetPB)XIC(In.LockSequenceFault)OTL(Out.LockSequenceFaultUnlatch);
				N: XIC(Out.LockSequenceFaultUnlatch)TON(LockFaultTimer,?,?);
				N: XIC(LockFaultTimer.DN)OTU(Out.LockSequenceFaultUnlatch);
				N: XIC(ResetPB)XIO(In.LockSequenceFault)XIC(In.DiagnosticActive)OTL(Out.GeneralFaultUnlatch);
				N: XIC(Out.GeneralFaultUnlatch)TON(GeneralFaultTimer,?,?);
				N: XIC(GeneralFaultTimer.DN)OTU(Out.GeneralFaultUnlatch);
				RC: "************************************************************$N"
				    "Indicators Status$N"
				    "************************************************************";
				N: [XIC(MAB_DCSTL.FP) ,XIC(MAB_ESTOP_DCS.FP) ,XIC(In.DiagnosticActive) ]OTE(ResetRequired_Ind);
				N: XIC(UnlockRequested)XIO(In.DiagnosticActive)XIC(In.GuardClosed)XIC(In.GuardInterlocked)XIO(In.GuardLocked)OTE(GateUnlocked_Ind);
				N: [XIC(inpSysPowerOn) OTE(SafetyOutputsEnabled_Ind) ,XIC(inpSysPowerOnReady) XIC(MAB_ESTOP_DCS.O1) XIC(MAB_DCSTL.O1) XIC(MAB_OutputEnable) XIO(UnlockRequested) XIO(In.DiagnosticActive) OTE(SafetyOutputsReady_Ind) ];
				N: [EQU(In.FaultCode,2742) ,EQU(In.FaultCode,2745) ,EQU(In.FaultCode,2750) ]XIC(In.DiagnosticActive)OTE(PowerCycleMAB_Ind);
				N: [EQU(In.FaultCode,2721) ,EQU(In.FaultCode,2731) ]XIC(In.DiagnosticActive)OTE(EStopCycle_Ind);
				N: [EQU(In.FaultCode,2723) XIC(In.DiagnosticActive) ,EQU(In.FaultCode,2724) XIC(In.DiagnosticActive) ,EQU(In.FaultCode,2725) XIC(In.DiagnosticActive) ,EQU(In.FaultCode,2733) XIC(In.DiagnosticActive) ,EQU(In.FaultCode,2734) XIC(In.DiagnosticActive) ,EQU(In.FaultCode,2744) XIC(In.DiagnosticActive) ,EQU(MAB_DCSTL.DiagnosticCode,16432) ,EQU(MAB_DCSTL.DiagnosticCode,16385) ,EQU(In.FaultCode,16449) ]OTE(GateCycleRqd_Ind);
				N: EQU(In.FaultCode,2743)XIC(In.DiagnosticActive)OTE(OpenGate_Ind);
				N: EQU(In.FaultCode,2735)XIC(In.DiagnosticActive)OTE(GateLockCycle_Ind);
				RC: "************************************************************$N"
				    "Lamps$N"
				    "************************************************************";
				N: [XIC(SafetyOutputsEnabled_Ind) ,XIC(SafetyOutputsReady_Ind) XIC(inpBlinkMid) ,XIO(OpenGateRequired) XIC(GateUnlocked_Ind) XIC(inpBlinkHi) ]OTE(PowerOnLamp);
				N: [XIC(GateUnlocked_Ind) ,XIC(UnlockRequested) XIC(inpBlinkMid) ,XIC(GateCycleRqd_Ind) XIC(inpBlinkHi) ]OTE(UnlockLamp);
				N: [XIC(ResetRequired_Ind) XIC(inpBlinkHi) ,XIC(MAB_OutputEnable) XIC(inpSysFaulted) XIC(inpBlinkMid) ,XIC(In.GuardInterlocked) XIO(MAB_OutputEnable) XIO(GateUnlocked_Ind) XIC(inpBlinkHi) ]OTE(ResetLamp);
				N: XIC(SafetyOutputsEnabled_Ind)[XIC(inpSysAutoCycleOn) ,XIC(MAB_OutputEnable) XIC(inpSysAutoCycleReady) XIC(inpBlinkMid) ]OTE(StartLamp);
				RC: "************************************************************$N"
				    " Output Status$N"
				    "************************************************************";
				N: [XIC(In.DiagnosticActive) ,XIC(ResetRequired_Ind) ]OTE(stsFaulted);
				N: XIC(StartPB)OTE(stsStartPushed);
				N: XIC(MAB_ESTOP_DCS.O1)OTE(stsEstopNormal);
				N: XIC(PowerOnPB)OTE(stsPowerOnPushed);
				N: XIC(In.GuardLocked)XIO(In.DiagnosticActive)OTE(stsGateLocked);
				N: XIC(UnlockRequested)OTE(stsOpenGateRequested);
				N: XIO(In.DiagnosticActive)XIC(In.GuardClosed)XIC(In.GuardInterlocked)XIO(In.GuardLocked)OTE(stsGateUnlocked);
				N: XIC(ResetPB)OTE(stsResetPushed);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION InputDeviceFlt_Gate (Class := Safety,
	                                                   Revision := "1.1",
	                                                   RevisionExtension := "20191122",
	                                                   RevisionNote := "v1.1 Standard tag names",
	                                                   Vendor := "Hokuto",
	                                                   ExecutePrescan := No,
	                                                   ExecutePostscan := No,
	                                                   ExecuteEnableInFalse := No,
	                                                   CreatedDate := "2019-10-23T13:48:24.290Z",
	                                                   CreatedBy := "LAPTOP-KKSRL2SB\ucarr",
	                                                   EditedDate := "2022-01-05T16:13:14.390Z",
	                                                   EditedBy := "LUCID\DanWeinhold",
	                                                   SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			SftyGateFlt : s_udt_GateFault (Usage := InOut,
			                       Required := Yes,
			                       Visible := Yes);
			Gate : Gate (Usage := InOut,
			                Required := Yes,
			                Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Safety Input Device Fault AOI$N"
				    "************************************************************$N"
				    "Gate";
				N: NOP();
				N: XIC(Gate.PowerCycleMAB_Ind)OTE(SftyGateFlt.PowerCycle);
				N: XIC(Gate.EStopCycle_Ind)OTE(SftyGateFlt.EStopCycle);
				N: XIC(Gate.GateCycleRqd_Ind)OTE(SftyGateFlt.GateCycle);
				N: XIC(Gate.OpenGate_Ind)OTE(SftyGateFlt.OpenGate);
				N: XIC(Gate.GateLockCycle_Ind)OTE(SftyGateFlt.GateLockCycle);
				N: XIC(Gate.stsFaulted)OTE(SftyGateFlt.Faulted);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION RFU63xPh2 (Class := Standard,
	                                         Revision := "1.0",
	                                         RevisionExtension := "20201210",
	                                         RevisionNote := "v1.0 Trigger, Read & Write Commands Can be enabled from outside AOI.",
	                                         Vendor := "GV Automation",
	                                         ExecutePrescan := No,
	                                         ExecutePostscan := No,
	                                         ExecuteEnableInFalse := No,
	                                         CreatedDate := "2020-11-17T18:36:35.872Z",
	                                         CreatedBy := "LAPTOP-2CUQA63B\marco",
	                                         EditedDate := "2023-03-14T01:55:04.127Z",
	                                         EditedBy := "MFG\JulioGranillo",
	                                         SoftwareRevision := "v33.00",
	                                         AdditionalHelpText := "For Current MES purpouses, Only Read Command should be enabled.")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			arrOutputAssembly : SINT[1] (Usage := InOut,
			                             RADIX := Decimal,
			                             Required := Yes,
			                             Visible := Yes);
			arrInputAssembly : SINT[1] (Usage := InOut,
			                            RADIX := Decimal,
			                            Required := Yes,
			                            Visible := Yes);
			inpRFU : p_udt_RFU (Usage := InOut,
			                  Required := Yes,
			                  Visible := Yes);
			outTagRead : STRING_12 (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			inpStation : Ludt_StaInt (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			inpRFIDWrite : STRING_12 (Usage := InOut,
			                        Required := Yes,
			                        Visible := Yes);
			inpReset : BOOL (Usage := Input,
			                    RADIX := Decimal,
			                    Required := Yes,
			                    Visible := Yes,
			                    DefaultData := 0);
			stsBusy : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			stsDone : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			stsError : BOOL (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			cfgTriggerEnable : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			cfgReadEnable : BOOL (Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
			cfgWriteEnable : BOOL (Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			stsTrigger : BOOL (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsRead : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := No,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			stsWrite : BOOL (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			stsErrorCode : DINT (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			wrkOns : DINT (RADIX := Decimal,
			                 ExternalAccess := None,
			                 DefaultData := 0);
			RFU_EIP : SICK_RFU_EIP (ExternalAccess := None,
			                  DefaultData := "[1,5000,0,0,0,0,0,0,0,0,0,0,0,[1,0,0,0,0,0,0,0,0,4,0,0],[1,5000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,0,0,0,0,0,0,0,0,4,0,0],[1,0,5.60519386e-045],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[1,0,0,0,0,0,0,0,0,0,[0,0,0,0],[1,0,0,1,0,0,0]],[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],[[1,0,5.60519386e-045],[1,0,5.60519386e-045],[1,0,5.60519386e-045]],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[115,82,73,48],[115,77,78,32,84,65,101,120,116,87,114,105,116,101,84,97,103,68,97,116,97,32],[115,77,78,32,84,65,101,120,116,82,101,97,100,84,97,103,68,97,116,97,32],[115,77,78,32,109,84,67,103,97,116,101,111,102,102],[115,77,78,32,109,84,67,103,97,116,101,111,110],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0],0]");
			wrkUIILenght : INT (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			wrkLastCharIndex : INT (RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			wrkFirstCharIndex : INT (RADIX := Decimal,
			                            ExternalAccess := None,
			                            DefaultData := 0);
			wrkLastChar : STRING_2 (ExternalAccess := None,
			                      DefaultData := "[1,'}$00']");
			wrkFirstChar : STRING_2 (ExternalAccess := None,
			                       DefaultData := "[1,'{$00']");
			wrkRequest : BOOL (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			wrkTriggerRead : STRING (ExternalAccess := None,
			                         DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			wrk_Year : STRING_6 (ExternalAccess := None,
			                   DefaultData := "[0,'$00$00$00$00$00$00']");
			wrk_Month : STRING_2 (ExternalAccess := None,
			                    DefaultData := "[0,'$00$00']");
			wrk_Day : STRING_2 (ExternalAccess := None,
			                  DefaultData := "[0,'$00$00']");
			wrkTmrRequest : TIMER (ExternalAccess := None,
			                        DefaultData := "[0,50,0]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "Read Tag Parameter Setup$N"
				    "$N"
				    "************************************************************";
				N: [OTU(inpRFU.stData.AddressMode.bMode) ,MOV(0,inpRFU.stData.AddressMode.iPCUIILength) ,FLL(0,inpRFU.stData.AddressMode.arrPCUII[0],32) ];
				RC: "Read Tag Parameter Setup$N"
				    "$N"
				    "************************************************************";
				N: [MOV(1,inpRFU.stData.ReadTag.iBank) ,MOV(2,inpRFU.stData.ReadTag.iStartWord) ,MOV(6,inpRFU.stData.ReadTag.iWordCount) ,MOV(16#52,inpRFU.stData.ReadTag.iRetry) ,MOV(2#0000_0001,inpRFU.stData.ReadTag.iAntenna) ];
				RC: "Write Tag Parameter Setup$N"
				    "$N"
				    "************************************************************";
				N: [MOV(1,inpRFU.stData.WriteTag.iBank) ,MOV(2,inpRFU.stData.WriteTag.iStartWord) ,MOV(6,inpRFU.stData.WriteTag.iWordCount) ,MOV(16#52,inpRFU.stData.WriteTag.iRetry) ,MOV(2#0000_0001,inpRFU.stData.WriteTag.iAntenna) ];
				N: [XIC(RFU_EIP.bTriggerOn) ,XIC(RFU_EIP.bTriggerOff) ,XIC(RFU_EIP.bReadTag) ,XIC(RFU_EIP.bWriteTag) ,XIC(RFU_EIP.bComTest) ,XIC(RFU_EIP.bFreeCommand) ]XIO(stsError)ONS(wrkOns.7)TOF(wrkTmrRequest,?,?);
				N: XIC(wrkTmrRequest.DN)OTE(wrkRequest);
				N: XIO(stsError)XIO(stsDone)XIO(inpReset)XIC(cfgTriggerEnable)[XIO(RFU_EIP.bTriggerOff) XIO(RFU_EIP.bReadTag) XIO(RFU_EIP.bWriteTag) XIO(RFU_EIP.bReqBusy) [XIC(inpStation.AutoMode) XIC(inpRFU.pCmdTrigger) OTU(inpRFU.pCmdTrigger) ,XIC(inpStation.ManualMode) XIC(inpRFU.oCmdTrigger) OTU(inpRFU.oCmdTrigger) ] ,XIC(RFU_EIP.bTriggerOn) ]OTE(RFU_EIP.bTriggerOn);
				N: XIC(RFU_EIP.bReqBusy)ONS(wrkOns.1)[GRT(inpRFU.stData.ReadingResult.sResult.LEN,0) FLL(0,inpRFU.stData.ReadingResult.sResult,1) ,FLL(0,inpRFU.stData.ReadTag.arrData[0],64) ,FLL(0,inpRFU.stData.WriteTag.arrData[0],64) ];
				N: XIO(RFU_EIP.bTriggerOn)[ONS(wrkOns.0) XIO(RFU_EIP.bTriggerOn) XIO(RFU_EIP.bReadTag) XIO(RFU_EIP.bWriteTag) ,XIC(RFU_EIP.bTriggerOff) XIO(RFU_EIP.bReqDone) ]OTE(RFU_EIP.bTriggerOff);
				N: XIO(stsError)XIO(stsDone)XIO(inpReset)XIC(cfgReadEnable)[XIO(RFU_EIP.bTriggerOn) XIO(RFU_EIP.bTriggerOff) XIO(RFU_EIP.bWriteTag) XIO(RFU_EIP.bReqBusy) [XIC(inpStation.AutoMode) XIC(inpRFU.pCmdRead) OTU(inpRFU.pCmdRead) ,XIC(inpStation.ManualMode) XIC(inpRFU.oCmdRead) OTU(inpRFU.oCmdRead) ] ,XIC(RFU_EIP.bReadTag) ]OTE(RFU_EIP.bReadTag);
				N: XIO(stsError)XIO(stsDone)XIO(inpReset)XIC(cfgWriteEnable)[GRT(inpRFIDWrite.LEN,0) COP(inpRFIDWrite.DATA[0],inpRFU.stData.WriteTag.arrData[0],12) XIO(RFU_EIP.bTriggerOn) XIO(RFU_EIP.bTriggerOff) XIO(RFU_EIP.bReadTag) XIO(RFU_EIP.bReqBusy) [XIC(inpStation.AutoMode) XIC(inpRFU.pCmdWrite) OTU(inpRFU.pCmdWrite) ,XIC(inpStation.ManualMode) XIC(inpRFU.oCmdWrite) OTU(inpRFU.oCmdWrite) ] ,XIC(RFU_EIP.bWriteTag) ]OTE(RFU_EIP.bWriteTag);
				N: OTU(RFU_EIP.bComTest)OTU(RFU_EIP.bFreeCommand);
				N: [XIC(RFU_EIP.bError) ONS(wrkOns.5) ,XIC(stsError) XIO(inpReset) ]OTE(stsError);
				N: [XIC(inpRFU.ResetCmd) ,[XIC(inpRFU.oCmdTrigger) ,XIC(inpRFU.oCmdRead) ,XIC(inpRFU.oCmdWrite) ] ONS(wrkOns.6) XIC(stsDone) ]OTU(stsDone)OTU(inpRFU.ResetCmd);
				N: [SICK_RFU_EIP(RFU_EIP,arrOutputAssembly,arrInputAssembly,inpRFU.arrControl,wrkRequest,inpRFU.stData) ,XIC(RFU_EIP.bTriggerOn) OTE(stsTrigger) ,XIC(RFU_EIP.bReadTag) OTE(stsRead) ,XIC(RFU_EIP.bWriteTag) OTE(stsWrite) ,XIC(RFU_EIP.bReqBusy) OTE(stsBusy) ,MOV(RFU_EIP.iErrorcode,stsErrorCode) ];
				N: XIC(RFU_EIP.bTriggerOn)XIC(RFU_EIP.bReqBusy)GRT(inpRFU.stData.ReadingResult.sResult.LEN,0)ONS(wrkOns.2)INSERT(inpRFU.stData.ReadingResult.sResult,wrkTriggerRead,1,wrkTriggerRead)OTL(stsDone);
				N: XIC(RFU_EIP.bReqDone)[GRT(inpRFU.stData.ReadTag.arrData[11],0) ONS(wrkOns.3) XIC(RFU_EIP.bReadTag) MOV(12,outTagRead.LEN) COP(inpRFU.stData.ReadTag.arrData[0],outTagRead.DATA[0],12) ,ONS(wrkOns.4) XIC(RFU_EIP.bWriteTag) ]OTL(stsDone);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION HMI_SeqScrollList (Class := Standard,
	                                                 Revision := "1.0",
	                                                 ExecutePrescan := No,
	                                                 ExecutePostscan := No,
	                                                 ExecuteEnableInFalse := No,
	                                                 CreatedDate := "2023-03-16T18:07:27.632Z",
	                                                 CreatedBy := "MFG\oscarsandoval",
	                                                 EditedDate := "2023-03-22T16:02:58.717Z",
	                                                 EditedBy := "MFG\oscarsandoval",
	                                                 SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			SeqMax : DINT (Usage := Input,
			                  RADIX := Decimal,
			                  Required := Yes,
			                  Visible := Yes,
			                  DefaultData := 0);
			Cursor : DINT (Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0);
			ListPos : DINT (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			AutoMode : BOOL (Usage := Input,
			                    RADIX := Decimal,
			                    Required := Yes,
			                    Visible := Yes,
			                    DefaultData := 0);
			ManualMode : BOOL (Usage := Input,
			                      RADIX := Decimal,
			                      Required := Yes,
			                      Visible := Yes,
			                      DefaultData := 0);
			ModelReg : DINT (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 0);
			MaxModel : DINT (Usage := Input,
			                    RADIX := Decimal,
			                    Required := Yes,
			                    Visible := Yes,
			                    DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			ONS : DINT (RADIX := Decimal,
			              ExternalAccess := None,
			              DefaultData := 0);
			ManModelInd : DINT (RADIX := Decimal,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			UserReqSeq : DINT (RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			ScrlDnPB : BOOL (RADIX := Decimal,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
			DnPBTmr : TIMER (ExternalAccess := None,
			                  DefaultData := "[0,600,0]");
			UpPBTmr : TIMER (ExternalAccess := None,
			                  DefaultData := "[0,600,0]");
			ScrlUpPB : BOOL (RADIX := Decimal,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
			ManModelPB : BOOL (RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			ScrollEndPB : BOOL (RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			ScrollTopPB : BOOL (RADIX := Decimal,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			TopStore : DINT (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			ScrollLimit : DINT (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 19);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "$N"
				    "Model Select Control Logic$N"
				    "$N"
				    "";
				N: XIC(ManualMode)XIC(ManModelPB)ONS(ONS.0)ADD(ModelReg,1,ModelReg);
				N: [GRT(ModelReg,MaxModel) ,GRT(ModelReg,20) ,EQU(ModelReg,0) ]MOV(1,ModelReg);
				N: MOV(ModelReg,ManModelInd);
				N: NEQ(UserReqSeq,0)ONS(ONS.1)CPT(ListPos,LOG(UserReqSeq) / LOG(2)+1);
				RC: "$N"
				    "List Position Command Control Logic$N"
				    "$N"
				    "";
				N: [XIC(ScrlDnPB) [XIO(DnPBTmr.DN) TON(DnPBTmr,?,?) ,XIC(DnPBTmr.DN) MOV(180,DnPBTmr.PRE) ] ,XIO(ScrlDnPB) MOV(600,DnPBTmr.PRE) ];
				N: XIC(DnPBTmr.EN)ONS(ONS.2)ADD(ListPos,1,ListPos);
				N: [XIC(ScrlUpPB) [XIO(UpPBTmr.DN) TON(UpPBTmr,?,?) ,XIC(UpPBTmr.DN) MOV(180,UpPBTmr.PRE) ] ,XIO(ScrlUpPB) MOV(600,UpPBTmr.PRE) ];
				N: XIC(UpPBTmr.EN)ONS(ONS.3)SUB(ListPos,1,ListPos);
				N: [LES(ListPos,1) ,XIC(ScrollTopPB) ]MOV(1,ListPos);
				N: [GRT(ListPos,SeqMax) ,XIC(ScrollEndPB) ]MOV(SeqMax,ListPos);
				N: MOV(1,TopStore)SUB(ListPos,TopStore,Cursor);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION HMI_Station (Class := Standard,
	                                           Revision := "2.0",
	                                           RevisionExtension := "20191205",
	                                           RevisionNote := "v1.1 Standard tag names$Nv2.0 Move servo status to other AOI (HMI_Servo)$Nv2.1 Creater input parameters for Fixture and Robot *.stsFaulted",
	                                           Vendor := "Hokuto",
	                                           ExecutePrescan := No,
	                                           ExecutePostscan := No,
	                                           ExecuteEnableInFalse := No,
	                                           CreatedDate := "2019-11-20T16:32:58.612Z",
	                                           CreatedBy := "LAPTOP-SKM92KIE\oespr",
	                                           EditedDate := "2022-01-05T16:13:14.339Z",
	                                           EditedBy := "LUCID\DanWeinhold",
	                                           SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			cfgNumberOfRobots : SINT (Usage := Input,
			                             RADIX := Decimal,
			                             Required := Yes,
			                             Visible := Yes,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0);
			cfgNumberOfFixtures : SINT (Usage := Input,
			                               RADIX := Decimal,
			                               Required := Yes,
			                               Visible := Yes,
			                               ExternalAccess := Read Only,
			                               DefaultData := 0);
			inpNumberOfActuators_Fixture1 : SINT (Usage := Input,
			                                         RADIX := Decimal,
			                                         Required := Yes,
			                                         Visible := Yes,
			                                         DefaultData := 0);
			inpNumberOfActuators_Fixture2 : SINT (Usage := Input,
			                                         RADIX := Decimal,
			                                         Required := Yes,
			                                         Visible := Yes,
			                                         DefaultData := 0);
			inpNumberOfActuators_Fixture3 : SINT (Usage := Input,
			                                         RADIX := Decimal,
			                                         Required := Yes,
			                                         Visible := Yes,
			                                         DefaultData := 0);
			inpNumberOfActuators_Fixture4 : SINT (Usage := Input,
			                                         RADIX := Decimal,
			                                         Required := Yes,
			                                         Visible := Yes,
			                                         DefaultData := 0);
			inpNumberOfActuators_Fixture5 : SINT (Usage := Input,
			                                         RADIX := Decimal,
			                                         Required := Yes,
			                                         Visible := Yes,
			                                         DefaultData := 0);
			inpNumberOfActuators_Fixture6 : SINT (Usage := Input,
			                                         RADIX := Decimal,
			                                         Required := Yes,
			                                         Visible := Yes,
			                                         DefaultData := 0);
			inpNumberOfActuators_Fixture7 : SINT (Usage := Input,
			                                         RADIX := Decimal,
			                                         Required := Yes,
			                                         Visible := Yes,
			                                         DefaultData := 0);
			inpNumberOfActuators_Fixture8 : SINT (Usage := Input,
			                                         RADIX := Decimal,
			                                         Required := Yes,
			                                         Visible := Yes,
			                                         DefaultData := 0);
			cfgServoUsed : BOOL (Usage := Input,
			                        RADIX := Decimal,
			                        Required := Yes,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			stsAnyFixtureOnFault : BOOL (Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := Yes,
			                                ExternalAccess := Read Only,
			                                DefaultData := 0);
			stsAnyRobotOnFault : BOOL (Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := Yes,
			                              ExternalAccess := Read Only,
			                              DefaultData := 0);
			inpFixture1_Fault OF cfgFixture[1].stsFault (Description := "HMI Fixture1$NFault",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read Only);
			inpFixture2_Fault OF cfgFixture[2].stsFault (Description := "HMI Fixture2$NFault",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read Only);
			inpFixture3_Fault OF cfgFixture[3].stsFault (Description := "HMI Fixture3$NFault",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read Only);
			inpFixture4_Fault OF cfgFixture[4].stsFault (Description := "HMI Fixture4$NFault",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read Only);
			inpFixture5_Fault OF cfgFixture[5].stsFault (Description := "HMI Fixture5$NFault",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read Only);
			inpFixture6_Fault OF cfgFixture[6].stsFault (Description := "HMI Fixture6$NFault",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read Only);
			inpFixture7_Fault OF cfgFixture[7].stsFault (Description := "HMI Fixture7$NFault",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read Only);
			inpFixture8_Fault OF cfgFixture[8].stsFault (Description := "HMI Fixture8$NFault",
			                             Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := No,
			                             ExternalAccess := Read Only);
			inpRobot1_Fault OF cfgRobot[1].stsFault (Description := "HMI Robot1$NFault",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only);
			inpRobot2_Fault OF cfgRobot[2].stsFault (Description := "HMI Robot2$NFault",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only);
			inpRobot3_Fault OF cfgRobot[3].stsFault (Description := "HMI Robot3$NFault",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only);
			inpRobot4_Fault OF cfgRobot[4].stsFault (Description := "HMI Robot4$NFault",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only);
			inpRobot5_Fault OF cfgRobot[5].stsFault (Description := "HMI Robot5$NFault",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only);
			inpRobot6_Fault OF cfgRobot[6].stsFault (Description := "HMI Robot6$NFault",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only);
			inpRobot7_Fault OF cfgRobot[7].stsFault (Description := "HMI Robot7$NFault",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only);
			inpRobot8_Fault OF cfgRobot[8].stsFault (Description := "HMI Robot8$NFault",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only);
		END_PARAMETERS

		LOCAL_TAGS
			cfgRobot : h_udt_HMI_Robot_Cfg[9] (ExternalAccess := Read Only,
			                   DefaultData
			cfgFixture : h_udt_HMI_Fixture_Cfg[9] (ExternalAccess := Read Only,
			                     DefaultData
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "HMI Station AOI$N"
				    "************************************************************";
				N: NOP();
				RC: "Robots Configuration";
				N: JMP(skip)LOWER(cfgRobot[1].hmiDeviceName,cfgRobot[2].hmiDeviceName)LOWER(cfgRobot[3].hmiDeviceName,cfgRobot[4].hmiDeviceName)LOWER(cfgRobot[5].hmiDeviceName,cfgRobot[6].hmiDeviceName)LOWER(cfgRobot[7].hmiDeviceName,cfgRobot[8].hmiDeviceName);
				RC: "Fixtures Configuration";
				N: LOWER(cfgFixture[1].hmiDeviceName,cfgFixture[2].hmiDeviceName)LOWER(cfgFixture[3].hmiDeviceName,cfgFixture[4].hmiDeviceName)LOWER(cfgFixture[5].hmiDeviceName,cfgFixture[6].hmiDeviceName)LOWER(cfgFixture[7].hmiDeviceName,cfgFixture[8].hmiDeviceName);
				N: LBL(skip)[MOV(inpNumberOfActuators_Fixture1,cfgFixture[1].cfgNumberOfActuators) MOV(inpNumberOfActuators_Fixture2,cfgFixture[2].cfgNumberOfActuators) MOV(inpNumberOfActuators_Fixture3,cfgFixture[3].cfgNumberOfActuators) MOV(inpNumberOfActuators_Fixture4,cfgFixture[4].cfgNumberOfActuators) ,MOV(inpNumberOfActuators_Fixture5,cfgFixture[5].cfgNumberOfActuators) MOV(inpNumberOfActuators_Fixture6,cfgFixture[6].cfgNumberOfActuators) MOV(inpNumberOfActuators_Fixture7,cfgFixture[7].cfgNumberOfActuators) MOV(inpNumberOfActuators_Fixture8,cfgFixture[8].cfgNumberOfActuators) ];
				RC: "Fixture Faults";
				N: [XIC(cfgFixture[1].stsFault) ,XIC(cfgFixture[2].stsFault) ,XIC(cfgFixture[3].stsFault) ,XIC(cfgFixture[4].stsFault) ,XIC(cfgFixture[5].stsFault) ,XIC(cfgFixture[6].stsFault) ,XIC(cfgFixture[7].stsFault) ,XIC(cfgFixture[8].stsFault) ]OTE(stsAnyFixtureOnFault);
				RC: "Robots Faults";
				N: [XIC(cfgRobot[1].stsFault) ,XIC(cfgRobot[2].stsFault) ,XIC(cfgRobot[3].stsFault) ,XIC(cfgRobot[4].stsFault) ,XIC(cfgRobot[5].stsFault) ,XIC(cfgRobot[6].stsFault) ,XIC(cfgRobot[7].stsFault) ,XIC(cfgRobot[8].stsFault) ]OTE(stsAnyRobotOnFault);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION HMI_TogglePB (Class := Standard,
	                                            Revision := "1.0",
	                                            Vendor := "GV Automation",
	                                            ExecutePrescan := No,
	                                            ExecutePostscan := No,
	                                            ExecuteEnableInFalse := No,
	                                            CreatedDate := "2021-11-05T19:13:43.715Z",
	                                            CreatedBy := "LAPTOP-2CUQA63B\marco",
	                                            EditedDate := "2021-11-06T21:50:53.387Z",
	                                            EditedBy := "LAPTOP-2CUQA63B\marco",
	                                            SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpPB : BOOL (Usage := Input,
			                 RADIX := Decimal,
			                 Required := Yes,
			                 Visible := Yes,
			                 DefaultData := 0);
			inpInterlock : BOOL (Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        DefaultData := 0);
			outInd : BOOL (Usage := Output,
			                  RADIX := Decimal,
			                  Required := Yes,
			                  Visible := Yes,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Ons2 : BOOL (RADIX := Decimal,
			               ExternalAccess := None,
			               DefaultData := 0);
			Ons1 : BOOL (RADIX := Decimal,
			               ExternalAccess := None,
			               DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "***DO NOT TOGGLE***$N"
				    "Unexpected Behavior May Happen";
				N: NOP();
				N: XIC(inpPB)ONS(Ons1)XIC(inpInterlock)[XIO(outInd) ONS(Ons2) OTL(outInd) ,XIC(outInd) XIO(Ons2) OTU(outInd) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION InputDeviceFlt_ESTOP (Class := Safety,
	                                                    Revision := "1.1",
	                                                    RevisionExtension := "20191122",
	                                                    RevisionNote := "v1.1 Standard tag names",
	                                                    Vendor := "Hokuto",
	                                                    ExecutePrescan := No,
	                                                    ExecutePostscan := No,
	                                                    ExecuteEnableInFalse := No,
	                                                    CreatedDate := "2019-10-23T13:48:24.290Z",
	                                                    CreatedBy := "LAPTOP-KKSRL2SB\ucarr",
	                                                    EditedDate := "2022-01-05T16:13:14.378Z",
	                                                    EditedBy := "LUCID\DanWeinhold",
	                                                    SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			SftyInpDeviceFlt : s_udt_InputDeviceFault (Usage := InOut,
			                            Required := Yes,
			                            Visible := Yes);
			ESTOP : EMERGENCY_STOP (Usage := InOut,
			                 Required := Yes,
			                 Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Safety Input Device Fault AOI$N"
				    "************************************************************$N"
				    "ESTOP";
				N: NOP();
				N: XIC(ESTOP.CI)OTE(SftyInpDeviceFlt.CI);
				N: XIC(ESTOP.CRHO)OTE(SftyInpDeviceFlt.CRHO);
				N: XIC(ESTOP.II)OTE(SftyInpDeviceFlt.II);
				N: XIC(ESTOP.FP)OTE(SftyInpDeviceFlt.FP);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION InputDeviceFlt_LC (Class := Safety,
	                                                 Revision := "1.1",
	                                                 RevisionExtension := "20191122",
	                                                 RevisionNote := "v1.1 Standard tag names",
	                                                 Vendor := "Hokuto",
	                                                 ExecutePrescan := No,
	                                                 ExecutePostscan := No,
	                                                 ExecuteEnableInFalse := No,
	                                                 CreatedDate := "2019-10-23T13:48:24.290Z",
	                                                 CreatedBy := "LAPTOP-KKSRL2SB\ucarr",
	                                                 EditedDate := "2022-01-05T16:13:14.401Z",
	                                                 EditedBy := "LUCID\DanWeinhold",
	                                                 SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			SftyInpDeviceFlt : s_udt_InputDeviceFault (Usage := InOut,
			                            Required := Yes,
			                            Visible := Yes);
			LC : LIGHT_CURTAIN (Usage := InOut,
			              Required := Yes,
			              Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Safety Input Device Fault AOI$N"
				    "************************************************************$N"
				    "LC";
				N: NOP();
				N: XIC(LC.CI)OTE(SftyInpDeviceFlt.CI);
				N: XIC(LC.CRHO)OTE(SftyInpDeviceFlt.CRHO);
				N: XIC(LC.II)OTE(SftyInpDeviceFlt.II);
				N: XIC(LC.FP)OTE(SftyInpDeviceFlt.FP);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION InputDeviceFlt_RIN (Class := Safety,
	                                                  Revision := "1.1",
	                                                  RevisionExtension := "20191122",
	                                                  RevisionNote := "v1.1 Standard tag names",
	                                                  Vendor := "Hokuto",
	                                                  ExecutePrescan := No,
	                                                  ExecutePostscan := No,
	                                                  ExecuteEnableInFalse := No,
	                                                  CreatedDate := "2019-10-23T13:48:24.290Z",
	                                                  CreatedBy := "LAPTOP-KKSRL2SB\ucarr",
	                                                  EditedDate := "2022-01-05T16:13:14.412Z",
	                                                  EditedBy := "LUCID\DanWeinhold",
	                                                  SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			SftyInpDeviceFlt : s_udt_InputDeviceFault (Usage := InOut,
			                            Required := Yes,
			                            Visible := Yes);
			RIN : REDUNDANT_INPUT (Usage := InOut,
			               Required := Yes,
			               Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Safety Input Device Fault AOI$N"
				    "************************************************************$N"
				    "RIN";
				N: NOP();
				N: XIC(RIN.CI)OTE(SftyInpDeviceFlt.CI);
				N: XIC(RIN.CRHO)OTE(SftyInpDeviceFlt.CRHO);
				N: XIC(RIN.II)OTE(SftyInpDeviceFlt.II);
				N: XIC(RIN.FP)OTE(SftyInpDeviceFlt.FP);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION Luds_RobotAOI (Description := "Robot Safety AOI",
	                                             Class := Safety,
	                                             Revision := "1.0",
	                                             RevisionNote := "Lucid Motors$NBIW Controls$NRev 1.0$N20221021",
	                                             ExecutePrescan := No,
	                                             ExecutePostscan := No,
	                                             ExecuteEnableInFalse := No,
	                                             CreatedDate := "2022-10-21T11:50:27.825Z",
	                                             CreatedBy := "MFG\JulioGranillo",
	                                             EditedDate := "2023-02-03T07:56:43.613Z",
	                                             EditedBy := "MFG\JulioGranillo",
	                                             SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
		END_PARAMETERS

		LOCAL_TAGS
		END_LOCAL_TAGS

		ROUTINE Logic 
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION MES_BUFF_BOOK (Class := Standard,
	                                             Revision := "2.0",
	                                             RevisionExtension := "20220714",
	                                             RevisionNote := "1.0 Release",
	                                             Vendor := "GV Automation & Engineering",
	                                             ExecutePrescan := No,
	                                             ExecutePostscan := No,
	                                             ExecuteEnableInFalse := No,
	                                             CreatedDate := "2021-01-20T20:34:31.989Z",
	                                             CreatedBy := "MFG\rbarragan",
	                                             EditedDate := "2022-07-14T22:37:04.330Z",
	                                             EditedBy := "MFG\JulioGranillo",
	                                             SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpMESJOB_Station : Job_Station (Usage := InOut,
			                             Required := Yes,
			                             Visible := Yes);
			outMES_JOB : Job_HB (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			stsDone : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			cmdTrigger : BOOL (Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			TmrHeartBeatOff : TIMER (ExternalAccess := None,
			                          DefaultData := "[0,5000,340]");
			TmrHeartBeatOn : TIMER (ExternalAccess := None,
			                         DefaultData := "[0,5000,0]");
			FlasherHeartBeat : BOOL (RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			wrkTmrFlag : TIMER (ExternalAccess := None,
			                     DefaultData := "[0,1000,0]");
			wrkOns : DINT (RADIX := Decimal,
			                 ExternalAccess := None,
			                 DefaultData := 0);
			ONS : BOOL (RADIX := Decimal,
			              ExternalAccess := None,
			              DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "MES BUFF AOI";
				N: NOP();
				N: MOV(1000,wrkTmrFlag.PRE);
				N: XIC(cmdTrigger)OTU(stsDone)CPS(inpMESJOB_Station.Seq_Number,outMES_JOB.Seq_Number,1)CPS(inpMESJOB_Station.Job_Number,outMES_JOB.Job_Number,1)CPS(inpMESJOB_Station.Job_Type,outMES_JOB.Job_Type,1)CPS(inpMESJOB_Station.Part_Number,outMES_JOB.Part_Number,1)CPS(inpMESJOB_Station.Model,outMES_JOB.Model,1)CPS(inpMESJOB_Station.Required_Quantity,outMES_JOB.Required_Quantity,1)CPS(inpMESJOB_Station.State,outMES_JOB.State,1)CPS(inpMESJOB_Station.Part_Status,outMES_JOB.Part_Status,1)CPS(inpMESJOB_Station.Style,outMES_JOB.Style,1)CPS(inpMESJOB_Station.Variant,outMES_JOB.Variant,1)CPS(inpMESJOB_Station.Part_ID,outMES_JOB.Part_ID,1)CPS(inpMESJOB_Station.RFID,outMES_JOB.RFID,1)TON(wrkTmrFlag,?,?);
				N: XIC(wrkTmrFlag.DN)ONS(ONS)OTL(stsDone)OTU(cmdTrigger);
				RC: "************************************************************$N"
				    "Flashers control logic$N"
				    "************************************************************";
				N: [XIO(TmrHeartBeatOn.DN) MOV(5000,TmrHeartBeatOff.PRE) TON(TmrHeartBeatOff,?,?) ,XIC(TmrHeartBeatOff.DN) MOV(5000,TmrHeartBeatOn.PRE) TON(TmrHeartBeatOn,?,?) OTE(FlasherHeartBeat) ];
				N: XIC(FlasherHeartBeat)OTE(outMES_JOB.Heartbeat);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION MES_HMI (Class := Standard,
	                                       Revision := "1.1",
	                                       RevisionNote := "v1.0 Release$Nv1.1 hmiLastOrderToLine changed from no external access to Read Only",
	                                       Vendor := "GV Automation",
	                                       ExecutePrescan := No,
	                                       ExecutePostscan := No,
	                                       ExecuteEnableInFalse := No,
	                                       CreatedDate := "2021-03-04T20:59:35.078Z",
	                                       CreatedBy := "LAPTOP-2CUQA63B\marco",
	                                       EditedDate := "2022-01-27T20:54:19.060Z",
	                                       EditedBy := "MFG\danweinhold",
	                                       SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpNewOrderCond : DINT (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           DefaultData := 0);
			inpOrderLineCond : DINT (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            DefaultData := 0);
			inpEmptyOrderCond : DINT (Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := Yes,
			                             DefaultData := 0);
			inpOrderOnMES : STRING_20 (Usage := InOut,
			                         Required := Yes,
			                         Visible := Yes);
			inpOrderToLine : STRING_20 (Usage := InOut,
			                          Required := Yes,
			                          Visible := Yes);
			inpLastOrderToLine : STRING_20 (Usage := InOut,
			                              Required := Yes,
			                              Visible := Yes);
			outRefreshReq : BOOL (Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			outMESBypass : BOOL (Usage := Output,
			                        RADIX := Decimal,
			                        Required := Yes,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			inpMESBypassSU : DINT (Usage := Input,
			                          RADIX := Decimal,
			                          Required := Yes,
			                          Visible := Yes,
			                          DefaultData := 0);
			Temp_MES_Bypass : BOOL (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			hmiEmptyOrderCond : STRING_25[5] (ExternalAccess := Read/Write,
			                            DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			hmiOrderLineCond : STRING_25[2] (ExternalAccess := Read/Write,
			                           DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			hmiNewOrderCond : STRING_25[2] (ExternalAccess := Read/Write,
			                          DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			HMIDetails : BOOL (RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			ocmdMESBypass : BOOL (RADIX := Decimal,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			ocmdRefReq : BOOL (RADIX := Decimal,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0);
			hmiOrderOnMES : STRING_20 (ExternalAccess := None,
			                        DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			hmiOrderToLine : STRING_20 (ExternalAccess := None,
			                         DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			hmiLastOrderToLine : STRING_20 (ExternalAccess := Read Only,
			                             DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			outMESBypassInt : BOOL (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "MES HMI$N"
				    "************************************************************";
				N: JMP(skiptext)[LOWER(hmiNewOrderCond[0],hmiNewOrderCond[1]) ,LOWER(hmiOrderLineCond[0],hmiOrderLineCond[1]) ,LOWER(hmiEmptyOrderCond[0],hmiEmptyOrderCond[1]) LOWER(hmiEmptyOrderCond[2],hmiEmptyOrderCond[3]) LOWER(hmiEmptyOrderCond[4],hmiEmptyOrderCond[4]) ];
				N: LBL(skiptext)NOP();
				N: MOV(inpOrderOnMES,hmiOrderOnMES)MOV(inpOrderToLine,hmiOrderToLine)MOV(inpLastOrderToLine,hmiLastOrderToLine);
				N: XIC(ocmdRefReq)OTE(outRefreshReq);
				N: [XIC(inpMESBypassSU.0) XIC(inpMESBypassSU.1) XIC(ocmdMESBypass) OTL(outMESBypassInt) ,XIO(ocmdMESBypass) OTU(outMESBypassInt) ];
				N: XIC(outMESBypassInt)XIO(Temp_MES_Bypass)OTE(outMESBypass);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION MES_JOBDecode (Class := Standard,
	                                             Revision := "1.0",
	                                             Vendor := "GV Automation",
	                                             ExecutePrescan := No,
	                                             ExecutePostscan := No,
	                                             ExecuteEnableInFalse := No,
	                                             CreatedDate := "2020-11-05T06:50:39.946Z",
	                                             CreatedBy := "LAPTOP-2CUQA63B\marco",
	                                             EditedDate := "2022-01-15T02:21:55.012Z",
	                                             EditedBy := "LAPTOP-2CUQA63B\marco",
	                                             SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpMESDictionary : p_udt_MES_Dictionary (Usage := InOut,
			                            Required := Yes,
			                            Visible := Yes);
			inpMESJOB : Job_HB (Usage := InOut,
			                     Required := Yes,
			                     Visible := Yes);
			outModelData : p_udt_MES_Job (Description := "Data Decoded From MES$N_$N",
			                        Usage := InOut,
			                        Required := Yes,
			                        Visible := Yes);
			cmdTrigger : BOOL (Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			stsBusy : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			stsDone : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			wrk_FSCModel : CONTROL (ExternalAccess := None,
			                       DefaultData := "[0,10,0]");
			wrk_FSCStyle : CONTROL (ExternalAccess := None,
			                       DefaultData := "[0,10,0]");
			wrk_FSCVariant : CONTROL (ExternalAccess := None,
			                         DefaultData := "[0,10,0]");
			wrk_Ons : DINT (RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			wrk_FSCPartID : CONTROL (ExternalAccess := None,
			                        DefaultData := "[0,10,0]");
			wrkFault : DINT (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			wrkRetryCount : DINT (RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			wrkRetry : DINT (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: XIC(stsBusy)[XIO(wrk_FSCModel.EN) GRT(inpMESJOB.Model.LEN,0) FSC(wrk_FSCModel,?,?,ALL,inpMESDictionary.Models[wrk_FSCModel.POS]=inpMESJOB.Model) ,XIO(wrk_FSCStyle.EN) GRT(inpMESJOB.Style.LEN,0) FSC(wrk_FSCStyle,?,?,ALL,inpMESDictionary.Styles[wrk_FSCStyle.POS]=inpMESJOB.Style) ,XIO(wrk_FSCVariant.EN) GRT(inpMESJOB.Variant.LEN,0) FSC(wrk_FSCVariant,?,?,ALL,inpMESDictionary.Variants[wrk_FSCVariant.POS]=inpMESJOB.Variant) ,[XIC(wrk_FSCModel.DN) ,XIC(wrk_FSCStyle.DN) ,XIC(wrk_FSCVariant.DN) ] ADD(1,wrkRetryCount,wrkRetryCount) ];
				N: [XIC(wrk_FSCModel.FD) ONS(wrk_Ons.1) OTL(outModelData.Data.Model.[wrk_FSCModel.POS]) ,XIC(wrk_FSCStyle.FD) ONS(wrk_Ons.2) OTL(outModelData.Data.Style.[wrk_FSCStyle.POS]) ,XIC(wrk_FSCVariant.FD) ONS(wrk_Ons.3) OTL(outModelData.Data.Variant.[wrk_FSCVariant.POS]) ];
				N: XIC(stsBusy)[EQU(wrkRetryCount,2) EQU(outModelData.Data.Model,0) FLL(0,inpMESJOB.Model,1) OTL(wrkFault.0) ,EQU(wrkRetryCount,2) EQU(outModelData.Data.Style,0) FLL(0,inpMESJOB.Style,1) OTL(wrkFault.1) ,EQU(wrkRetryCount,2) EQU(outModelData.Data.Variant,0) FLL(0,inpMESJOB.Variant,1) OTL(wrkFault.2) ,LES(inpMESJOB.Seq_Number,1) CLR(inpMESJOB.Seq_Number) OTL(wrkFault.3) ,LIM(4,inpMESJOB.Part_Status,0) CLR(inpMESJOB.Part_Status) OTL(wrkFault.4) ,LES(inpMESJOB.Required_Quantity,1) CLR(inpMESJOB.Required_Quantity) OTL(wrkFault.5) ,LIM(7,inpMESJOB.Part_Status,0) CLR(inpMESJOB.Part_Status) OTL(wrkFault.6) ,EQU(inpMESJOB.Part_ID.LEN,0) FLL(0,inpMESJOB.Part_ID,1) OTL(wrkFault.7) ,NEQ(inpMESJOB.RFID.LEN,0) FLL(0,inpMESJOB.RFID,1) OTL(wrkFault.8) ,EQU(inpMESJOB.Job_Number.LEN,0) FLL(0,inpMESJOB.Job_Number,1) OTL(wrkFault.9) ,EQU(inpMESJOB.Part_Number.LEN,0) FLL(0,inpMESJOB.Part_Number,1) OTL(wrkFault.10) ,LIM(4,inpMESJOB.Job_Type,0) CLR(inpMESJOB.Job_Type) OTL(wrkFault.11) ];
				N: XIC(stsBusy)[XIC(wrk_FSCStyle.FD) XIC(wrk_FSCVariant.FD) XIC(wrk_FSCModel.FD) ,EQU(wrkRetryCount,2) ][MOV(inpMESJOB.Seq_Number,outModelData.Data.SeqNum) MOV(inpMESJOB.Part_Status,outModelData.Data.PartStatus) MOV(inpMESJOB.Required_Quantity,outModelData.Data.ReqQty) MOV(inpMESJOB.State,outModelData.Data.State) MOV(inpMESJOB.Job_Type,outModelData.Data.JobType) ,COP(inpMESJOB.Part_ID,outModelData.Data.PartID,1) COP(inpMESJOB.RFID,outModelData.Data.RFID,1) COP(inpMESJOB.Job_Number,outModelData.Data.JobNum,1) COP(inpMESJOB.Part_Number,outModelData.Data.PartNum,1) ,OTU(stsBusy) OTL(stsDone) OTL(outModelData.stsFlag) NEQ(wrkFault,0) OTL(outModelData.stsFault) ];
				N: XIC(cmdTrigger)ONS(wrk_Ons.0)[SIZE(inpMESDictionary.Models,0,wrk_FSCModel.LEN) SIZE(inpMESDictionary.Styles,0,wrk_FSCStyle.LEN) SIZE(inpMESDictionary.Variants,0,wrk_FSCVariant.LEN) ,MOV(0,wrk_FSCModel.POS) MOV(0,wrk_FSCStyle.POS) MOV(0,wrk_FSCVariant.POS) ,MOV(0,wrkRetryCount) MOV(0,wrkFault) FLL(0,outModelData.Data,1) ,OTU(wrk_FSCModel.IN) OTU(wrk_FSCStyle.IN) OTU(wrk_FSCVariant.IN) OTU(wrk_FSCModel.FD) OTU(wrk_FSCStyle.FD) OTU(wrk_FSCVariant.FD) ,OTL(stsBusy) OTU(stsDone) OTU(outModelData.stsFlag) OTU(outModelData.stsFault) OTU(cmdTrigger) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION MES_JobInQueue (Description := "Handles the Job filtered by Data Collector to Fill Model Tag for Station Operation.",
	                                              Class := Standard,
	                                              Revision := "1.0",
	                                              Vendor := "GV Automation",
	                                              ExecutePrescan := No,
	                                              ExecutePostscan := No,
	                                              ExecuteEnableInFalse := No,
	                                              CreatedDate := "2020-11-05T05:14:20.732Z",
	                                              CreatedBy := "LAPTOP-2CUQA63B\marco",
	                                              EditedDate := "2023-02-08T21:04:06.903Z",
	                                              EditedBy := "MFG\JulioGranillo",
	                                              SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpMES_JOB : p_udt_MES_Job (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			inpModelStatus : p_udt_Shift_Register_State (Usage := InOut,
			                          Required := Yes,
			                          Visible := Yes);
			outModelData : udt_Shift_Register_Data (Usage := InOut,
			                        Required := Yes,
			                        Visible := Yes);
			stsCompleted : BOOL (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			stsIdle : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
			stsInProcess : BOOL (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			stsTimedOut : BOOL (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			stsDataError : BOOL (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read/Write,
			                        DefaultData := 0);
			stsLastReqResponseTime : REAL (Usage := Output,
			                                  RADIX := Float,
			                                  Required := No,
			                                  Visible := No,
			                                  ExternalAccess := Read/Write,
			                                  DefaultData := 0.00000000e+000);
			stsLastAckResponseTime : REAL (Usage := Output,
			                                  RADIX := Float,
			                                  Required := No,
			                                  Visible := No,
			                                  ExternalAccess := Read/Write,
			                                  DefaultData := 0.00000000e+000);
			stsTransactionError : BOOL (Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               ExternalAccess := Read/Write,
			                               DefaultData := 0);
			stsTransactionCount : DINT (Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No,
			                               ExternalAccess := Read/Write,
			                               DefaultData := 0);
			PCmdTrigger : BOOL (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			PCmdTriggerOns : BOOL (Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 0);
			PCmdReset : BOOL (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			PCmdResetOns : BOOL (Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			OCmdTrigger : BOOL (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			OCmdReset : BOOL (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     DefaultData := 0);
			cfgTimeoutPreset : DINT (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            DefaultData := 0);
			cfgTimeoutRetryPreset : DINT (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No,
			                                 DefaultData := 0);
			cfgOptionDataCheckBypass : INT (Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := No,
			                                    DefaultData := 0);
			cfgRFIDEnable : BOOL (Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			tmr_Response : TIMER (ExternalAccess := None,
			                       DefaultData := "[0,60000,0]");
			tmr_ResetDly : TIMER (ExternalAccess := None,
			                       DefaultData := "[0,1000,0]");
			cntr_TimeoutRetry : COUNTER (ExternalAccess := None,
			                            DefaultData := "[0,0,0]");
			wrk_ResponseOns : BOOL (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			wrk_InternalReset : BOOL (RADIX := Decimal,
			                            ExternalAccess := None,
			                            DefaultData := 0);
			wrk_AckResponseOns : BOOL (RADIX := Decimal,
			                             ExternalAccess := None,
			                             DefaultData := 0);
			wrk_NextStep : DINT (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			wrk_CurrentStep : DINT (RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: EQU(wrk_CurrentStep,0)XIO(stsCompleted)XIO(stsTimedOut)XIO(stsDataError)XIO(stsTransactionError)OTE(stsIdle);
				N: GRT(wrk_CurrentStep,0)OTE(stsInProcess);
				N: EQU(wrk_CurrentStep,0)[XIC(OCmdTrigger) OTU(OCmdTrigger) ,XIC(PCmdTrigger) OTU(PCmdTrigger) ]XIO(stsTimedOut)XIO(stsDataError)XIO(stsTransactionError)OTU(stsCompleted)RES(cntr_TimeoutRetry)ADD(wrk_CurrentStep,10,wrk_NextStep);
				N: EQU(wrk_CurrentStep,10)ADD(wrk_CurrentStep,10,wrk_NextStep);
				N: EQU(wrk_CurrentStep,20)ADD(1,stsTransactionCount,stsTransactionCount)ADD(wrk_CurrentStep,10,wrk_NextStep);
				N: EQU(wrk_CurrentStep,30)ADD(wrk_CurrentStep,10,wrk_NextStep);
				N: EQU(wrk_CurrentStep,40)[GRT(inpMES_JOB.Data.Model,0) ,XIC(cfgOptionDataCheckBypass.0) ][GRT(inpMES_JOB.Data.Style,0) ,XIC(cfgOptionDataCheckBypass.1) ][GRT(inpMES_JOB.Data.Variant,0) ,XIC(cfgOptionDataCheckBypass.2) ]XIO(inpModelStatus.Busy)CPS(inpMES_JOB.Data,outModelData,1)OTL(stsCompleted);
				N: EQU(wrk_CurrentStep,40)XIC(stsCompleted)MOV(0,wrk_NextStep);
				N: [XIC(PCmdReset) OTU(PCmdReset) ,XIC(OCmdReset) OTU(OCmdReset) ,XIC(tmr_ResetDly.EN) ]XIO(tmr_ResetDly.DN)[TON(tmr_ResetDly,?,?) ,XIC(tmr_ResetDly.DN) OTU(stsCompleted) OTU(stsTimedOut) OTU(stsDataError) OTU(stsTransactionError) MOV(0,wrk_NextStep) MOV(0,wrk_CurrentStep) MOV(0,stsTransactionCount) ];
				N: MUL(cfgTimeoutPreset,1000,tmr_Response.PRE)MOV(cfgTimeoutRetryPreset,cntr_TimeoutRetry.PRE)MOV(wrk_NextStep,wrk_CurrentStep);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION MES_StationBook (Description := "Handles Data for Booking Interface Command",
	                                               Class := Standard,
	                                               Revision := "1.1",
	                                               Vendor := "Lucid Motors BIW Controls",
	                                               ExecutePrescan := No,
	                                               ExecutePostscan := No,
	                                               ExecuteEnableInFalse := No,
	                                               CreatedDate := "2020-11-05T06:50:39.946Z",
	                                               CreatedBy := "LAPTOP-2CUQA63B\marco",
	                                               EditedDate := "2022-07-14T20:27:53.233Z",
	                                               EditedBy := "MFG\JulioGranillo",
	                                               SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpModelData : p_udt_Shift_Register_Data (Usage := InOut,
			                        Required := Yes,
			                        Visible := Yes);
			inpModelState : p_udt_Shift_Register_State (Usage := InOut,
			                         Required := Yes,
			                         Visible := Yes);
			outMESJOB_Station : p_udt_MES_Station (Usage := InOut,
			                             Required := Yes,
			                             Visible := Yes);
			cmdCycleComplete : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            DefaultData := 0);
			cmdTrigger : DINT (Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			stsBusy : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			stsDone : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			wrk_Ons : DINT (RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			wrkTrigger_Internal : DINT (RADIX := Decimal,
			                              ExternalAccess := None,
			                              DefaultData := 0);
			wrkTmrCycleStart : TIMER (ExternalAccess := None,
			                           DefaultData := "[0,1000,0]");
			wrkTmrCycleComplete : TIMER (ExternalAccess := None,
			                              DefaultData := "[0,1000,0]");
			wrkModelData : p_udt_Shift_Register_Data (ExternalAccess := None,
			                       DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0]");
			wrkModelState : p_udt_Shift_Register_State (ExternalAccess := None,
			                        DefaultData := [0]);
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: [XIC(cmdCycleComplete) ONS(wrk_Ons.0) MOV(1000,wrkTmrCycleComplete.PRE) TOF(wrkTmrCycleComplete,?,?) ,XIC(wrkTmrCycleComplete.DN) OTE(outMESJOB_Station.Cycle_Complete) ];
				N: XIC(outMESJOB_Station.Cycle_Complete)ONS(wrk_Ons.1)OTL(wrkTrigger_Internal.0);
				N: XIO(stsDone)XIC(wrkTrigger_Internal.0)CPS(wrkModelData,outMESJOB_Station.Data,1)MOV(0,wrkTrigger_Internal)MOV(0,cmdTrigger)OTL(stsDone);
				N: [NEQ(wrkTrigger_Internal,0) ,NEQ(cmdTrigger,0) ]OTU(stsDone);
				N: CPS(inpModelData,wrkModelData,1)CPS(inpModelState,wrkModelState,1);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION MES_StationOutQueue (Description := "Handles Data of Interest for MES and Sends it to Data Collector.",
	                                                   Class := Standard,
	                                                   Revision := "1.1",
	                                                   Vendor := "GV Automation",
	                                                   ExecutePrescan := No,
	                                                   ExecutePostscan := No,
	                                                   ExecuteEnableInFalse := No,
	                                                   CreatedDate := "2020-11-05T06:50:39.946Z",
	                                                   CreatedBy := "LAPTOP-2CUQA63B\marco",
	                                                   EditedDate := "2020-12-11T20:26:56.189Z",
	                                                   EditedBy := "LAPTOP-2CUQA63B\marco",
	                                                   SoftwareRevision := "v32.01")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpModelData : p_udt_Shift_Register_Data (Usage := InOut,
			                        Required := Yes,
			                        Visible := Yes);
			inpModelState : p_udt_Shift_Register_State (Usage := InOut,
			                         Required := Yes,
			                         Visible := Yes);
			outMESJOB_Station : p_udt_MES_Station (Usage := InOut,
			                             Required := Yes,
			                             Visible := Yes);
			cmdStationStatus : DINT (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            DefaultData := 0);
			cmdCycleType : DINT (Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        DefaultData := 0);
			cmdCycleStart : BOOL (Usage := Input,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         DefaultData := 0);
			cmdCycleComplete : BOOL (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            DefaultData := 0);
			cmdTrigger : DINT (Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      DefaultData := 0);
			stsBusy : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			stsDone : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			wrk_Ons : DINT (RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			wrkTrigger_Internal : DINT (RADIX := Decimal,
			                              ExternalAccess := None,
			                              DefaultData := 0);
			wrkTmrCycleTime : TIMER (ExternalAccess := None,
			                          DefaultData := "[0,9999999,0]");
			wrkTmrCycleStart : TIMER (ExternalAccess := None,
			                           DefaultData := "[0,1000,0]");
			wrkTmrCycleComplete : TIMER (ExternalAccess := None,
			                              DefaultData := "[0,1000,0]");
			wrkModelData : p_udt_Shift_Register_Data (ExternalAccess := None,
			                       DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0,0,0,0,0]");
			wrkModelState : p_udt_Shift_Register_State (ExternalAccess := None,
			                        DefaultData := [0]);
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: EQU(cmdTrigger,0)EQU(wrkTrigger_Internal,0)MOV(cmdCycleType,outMESJOB_Station.Cycle_Status)MOV(wrkTmrCycleTime.ACC,outMESJOB_Station.Cycle_Time);
				N: [[XIC(cmdCycleStart) ,XIC(wrkTmrCycleTime.DN) ] XIO(cmdCycleComplete) [ONS(wrk_Ons.0) [MOV(1000,wrkTmrCycleStart.PRE) TOF(wrkTmrCycleStart,?,?) ,MOV(9999999,wrkTmrCycleTime.PRE) RES(wrkTmrCycleTime) ] ,RTO(wrkTmrCycleTime,?,?) ] ,XIC(wrkTmrCycleStart.DN) OTE(outMESJOB_Station.Cycle_Start) ];
				N: [XIC(cmdCycleComplete) ONS(wrk_Ons.1) [EQU(cmdCycleType,2) ADD(1,outMESJOB_Station.Cycle_Count,outMESJOB_Station.Cycle_Count) ,ADD(1,outMESJOB_Station.Produced_Quantity,outMESJOB_Station.Produced_Quantity) ,MOV(1000,wrkTmrCycleComplete.PRE) TOF(wrkTmrCycleComplete,?,?) ] ,XIC(wrkTmrCycleComplete.DN) OTE(outMESJOB_Station.Cycle_Complete) ];
				N: NEQ(cmdStationStatus,outMESJOB_Station.Station_Status)ONS(wrk_Ons.2)MOV(cmdStationStatus,outMESJOB_Station.Station_Status)OTL(wrkTrigger_Internal.0);
				N: XIC(outMESJOB_Station.Cycle_Start)ONS(wrk_Ons.3)OTL(wrkTrigger_Internal.1);
				N: XIC(outMESJOB_Station.Cycle_Complete)ONS(wrk_Ons.4)OTL(wrkTrigger_Internal.2);
				N: XIC(wrkModelState.Data_Empty)ONS(wrk_Ons.5)OTL(wrkTrigger_Internal.3);
				N: XIC(wrkModelState.Data_Existing)ONS(wrk_Ons.6)OTL(wrkTrigger_Internal.4);
				N: XIO(stsDone)[NEQ(wrkTrigger_Internal,0) ,NEQ(cmdTrigger,0) ]ONS(wrk_Ons.7)CPS(wrkModelData,outMESJOB_Station.Data,1)MOV(0,wrkTrigger_Internal)MOV(0,cmdTrigger)OTL(stsDone);
				N: [NEQ(wrkTrigger_Internal,0) ,NEQ(cmdTrigger,0) ]OTU(stsDone);
				N: CPS(inpModelData,wrkModelData,1)CPS(inpModelState,wrkModelState,1);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION Op_Cycle_Time (Class := Standard,
	                                             Revision := "1.0",
	                                             ExecutePrescan := No,
	                                             ExecutePostscan := No,
	                                             ExecuteEnableInFalse := No,
	                                             CreatedDate := "2021-01-27T19:43:34.015Z",
	                                             CreatedBy := "MFG\danweinhold",
	                                             EditedDate := "2021-06-10T16:04:04.101Z",
	                                             EditedBy := "MFG\danweinhold",
	                                             SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Event1 : BOOL (Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  DefaultData := 0);
			Event2 : BOOL (Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  DefaultData := 0);
			Event3 : BOOL (Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  DefaultData := 0);
			Event4 : BOOL (Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  DefaultData := 0);
			Event5 : BOOL (Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  DefaultData := 0);
			Current_1 : REAL (Usage := Output,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0.00000000e+000);
			Current_2 : REAL (Usage := Output,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0.00000000e+000);
			Current_3 : REAL (Usage := Output,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0.00000000e+000);
			Current_4 : REAL (Usage := Output,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0.00000000e+000);
			Current_5 : REAL (Usage := Output,
			                     RADIX := Float,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read/Write,
			                     DefaultData := 0.00000000e+000);
			New_Data1 : BOOL (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			New_Data2 : BOOL (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			New_Data3 : BOOL (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			New_Data4 : BOOL (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			New_Data5 : BOOL (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
			ONS : DINT (Usage := Input,
			               RADIX := Decimal,
			               Required := No,
			               Visible := No,
			               DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			Ons_Internal : DINT (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			CycTimeSec : REAL[25] (RADIX := Float,
			                     ExternalAccess := None,
			                     DefaultData := "[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000]");
			Min_Time : DINT[5] (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := "[0,0,0,0,0]");
			Timer1 : TIMER (ExternalAccess := None,
			                 DefaultData := "[0,999999999,0]");
			Timer2 : TIMER (ExternalAccess := None,
			                 DefaultData := "[0,999999999,0]");
			Timer3 : TIMER (ExternalAccess := None,
			                 DefaultData := "[0,999999999,0]");
			Timer4 : TIMER (ExternalAccess := None,
			                 DefaultData := "[0,999999999,0]");
			Timer5 : TIMER (ExternalAccess := None,
			                 DefaultData := "[0,999999999,0]");
			Time5 : REAL (RADIX := Float,
			                ExternalAccess := None,
			                DefaultData := 0.00000000e+000);
			Time4 : REAL (RADIX := Float,
			                ExternalAccess := None,
			                DefaultData := 0.00000000e+000);
			Time3 : REAL (RADIX := Float,
			                ExternalAccess := None,
			                DefaultData := 0.00000000e+000);
			Time2 : REAL (RADIX := Float,
			                ExternalAccess := None,
			                DefaultData := 0.00000000e+000);
			Time1 : REAL (RADIX := Float,
			                ExternalAccess := None,
			                DefaultData := 0.00000000e+000);
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: NOP();
				N: XIC(Event1)RTO(Timer1,?,?);
				N: XIC(Event2)RTO(Timer2,?,?);
				N: XIC(Event3)RTO(Timer3,?,?);
				N: XIC(Event4)RTO(Timer4,?,?);
				N: XIC(Event5)RTO(Timer5,?,?);
				N: DIV(Timer1.ACC,1000,Time1);
				N: DIV(Timer2.ACC,1000,Time2);
				N: DIV(Timer3.ACC,1000,Time3);
				N: DIV(Timer4.ACC,1000,Time4);
				N: DIV(Timer5.ACC,1000,Time5);
				N: GEQ(Time1,600)MOV(600,Time1);
				N: GEQ(Time2,600)MOV(600,Time2);
				N: GEQ(Time3,600)MOV(600,Time3);
				N: GEQ(Time4,600)MOV(600,Time4);
				N: GEQ(Time5,600)MOV(600,Time5);
				N: XIO(Event1)ONS(Ons_Internal.1)[MOV(Time1,Current_1) ,RES(Timer1) ];
				N: XIO(Event2)ONS(Ons_Internal.2)[MOV(Time2,Current_2) ,RES(Timer2) ];
				N: XIO(Event3)ONS(Ons_Internal.3)[MOV(Time3,Current_3) ,RES(Timer3) ];
				N: XIO(Event4)ONS(Ons_Internal.4)[MOV(Time4,Current_4) ,RES(Timer4) ];
				N: XIO(Event5)ONS(Ons_Internal.5)[MOV(Time5,Current_5) ,RES(Timer5) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION PP_FunctPulseOut (Description := "Signal generator to control Keyence sensor laser emission.",
	                                                Class := Standard,
	                                                Revision := "1.0",
	                                                RevisionExtension := "20200908",
	                                                RevisionNote := "v1.0 Release",
	                                                Vendor := "Hokuto",
	                                                ExecutePrescan := No,
	                                                ExecutePostscan := No,
	                                                ExecuteEnableInFalse := No,
	                                                CreatedDate := "2020-09-08T19:28:16.478Z",
	                                                CreatedBy := "LAPTOP-BLBGECD7\Marco Tenorio",
	                                                EditedDate := "2020-12-17T16:48:20.910Z",
	                                                EditedBy := "LAPTOP-1BK8GLC9\ucarr",
	                                                SoftwareRevision := "v32.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpPP : PartPresent (Usage := InOut,
			                 Required := Yes,
			                 Visible := Yes);
			inpManualLaserCtrl : BOOL (Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := Yes,
			                              DefaultData := 0);
			outExternalInput : BOOL (Usage := Output,
			                            RADIX := Decimal,
			                            Required := Yes,
			                            Visible := Yes,
			                            ExternalAccess := Read/Write,
			                            DefaultData := 0);
			stsLaserON : BOOL (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read/Write,
			                      DefaultData := 0);
			stsLaserOFF : BOOL (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read/Write,
			                       DefaultData := 0);
			stsTimeCalibON : BOOL (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read/Write,
			                          DefaultData := 0);
			stsTimeCalibOFF : BOOL (Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			InputTimeCalibrationOFF : TIMER (ExternalAccess := None,
			                                  DefaultData := "[0,35,0]");
			InputTimeCalibrationON : TIMER (ExternalAccess := None,
			                                 DefaultData := "[0,35,0]");
			LaserEmissionStopON : TIMER (ExternalAccess := None,
			                              DefaultData := "[0,2,0]");
			LaserEmissionStopOFF : TIMER (ExternalAccess := None,
			                               DefaultData := "[0,20,0]");
			TimeCalibON : BOOL (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			TimeCalibOFF : BOOL (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			ManualLaserEmissionCtrl : BOOL (RADIX := Decimal,
			                                  ExternalAccess := None,
			                                  DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				N: [[[XIO(inpPP.inpOnCondition) ,XIC(ManualLaserEmissionCtrl) ] XIO(outExternalInput) ,XIC(LaserEmissionStopOFF.EN) XIC(outExternalInput) ] TON(LaserEmissionStopOFF,?,?) OTE(stsLaserON) XIO(LaserEmissionStopOFF.DN) ,[[XIC(inpPP.inpOnCondition) ,XIC(ManualLaserEmissionCtrl) ] XIO(outExternalInput) ,XIC(LaserEmissionStopON.EN) XIC(outExternalInput) ] TON(LaserEmissionStopON,?,?) OTE(stsLaserOFF) XIO(LaserEmissionStopON.DN) ,[XIC(TimeCalibON) XIO(outExternalInput) ,XIC(InputTimeCalibrationON.EN) XIC(outExternalInput) ] TON(InputTimeCalibrationON,?,?) OTE(stsTimeCalibON) XIO(InputTimeCalibrationON.DN) ,[XIC(TimeCalibOFF) XIO(outExternalInput) ,XIC(InputTimeCalibrationOFF.EN) XIC(outExternalInput) ] TON(InputTimeCalibrationOFF,?,?) OTE(stsTimeCalibOFF) XIO(InputTimeCalibrationOFF.DN) ]OTE(outExternalInput);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION Servo (Class := Standard,
	                                     Revision := "1.2",
	                                     RevisionExtension := "20191122",
	                                     RevisionNote := "v1.2 Standard tag names",
	                                     Vendor := "Hokuto",
	                                     ExecutePrescan := Yes,
	                                     ExecutePostscan := No,
	                                     ExecuteEnableInFalse := No,
	                                     CreatedDate := "2016-02-10T22:02:53.884Z",
	                                     CreatedBy := "Not Available",
	                                     EditedDate := "2022-01-05T16:13:14.493Z",
	                                     EditedBy := "LUCID\DanWeinhold",
	                                     SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			cfgSafetyAutoCmdOn : BOOL (Description := "Auto cmdOn for inpSafetyOK rising edge",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              DefaultData := 1);
			cfgDefaultTolerance : REAL (Description := "units",
			                               Usage := Input,
			                               RADIX := Float,
			                               Required := No,
			                               Visible := No,
			                               DefaultData := 5.00000000e-001);
			cfgScanModeAll : BOOL (Description := "0 = update not selected and inactive moves 1 per scan$N1 = update all moves every san",
			                          Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := No,
			                          DefaultData := 1);
			cfgSpeedMultiplier : REAL (Description := "global speed multiplier",
			                              Usage := Input,
			                              RADIX := Float,
			                              Required := No,
			                              Visible := No,
			                              DefaultData := 1.00000000e+000);
			cfgStopDecelPercentMax : REAL (Usage := Input,
			                                  RADIX := Float,
			                                  Required := No,
			                                  Visible := No,
			                                  DefaultData := 1.00000000e+001);
			cfgStopJerkPercentMax : REAL (Usage := Input,
			                                 RADIX := Float,
			                                 Required := No,
			                                 Visible := No,
			                                 DefaultData := 1.00000000e+001);
			cfgOperJogPosSpeed OF wrkOperJogPosMove.cfgSpeed (Usage := Input,
			                              RADIX := Float,
			                              Required := No,
			                              Visible := No);
			cfgOperJogPosAccel OF wrkOperJogPosMove.cfgAccel (Usage := Input,
			                              RADIX := Float,
			                              Required := No,
			                              Visible := No);
			cfgOperJogPosDecel OF wrkOperJogPosMove.cfgDecel (Usage := Input,
			                              RADIX := Float,
			                              Required := No,
			                              Visible := No);
			cfgOperJogPosAccelJerk OF wrkOperJogPosMove.cfgAccelJerk (Usage := Input,
			                                  RADIX := Float,
			                                  Required := No,
			                                  Visible := No);
			cfgOperJogPosDecelJerk OF wrkOperJogPosMove.cfgDecelJerk (Usage := Input,
			                                  RADIX := Float,
			                                  Required := No,
			                                  Visible := No);
			cfgOperJogPosTorque OF wrkOperJogPosMove.cfgTorque (Usage := Input,
			                               RADIX := Float,
			                               Required := No,
			                               Visible := No);
			cfgOperJogNegSpeed OF wrkOperJogNegMove.cfgSpeed (Usage := Input,
			                              RADIX := Float,
			                              Required := No,
			                              Visible := No);
			cfgOperJogNegAccel OF wrkOperJogNegMove.cfgAccel (Usage := Input,
			                              RADIX := Float,
			                              Required := No,
			                              Visible := No);
			cfgOperJogNegDecel OF wrkOperJogNegMove.cfgDecel (Usage := Input,
			                              RADIX := Float,
			                              Required := No,
			                              Visible := No);
			cfgOperJogNegAccelJerk OF wrkOperJogNegMove.cfgAccelJerk (Usage := Input,
			                                  RADIX := Float,
			                                  Required := No,
			                                  Visible := No);
			cfgOperJogNegDecelJerk OF wrkOperJogNegMove.cfgDecelJerk (Usage := Input,
			                                  RADIX := Float,
			                                  Required := No,
			                                  Visible := No);
			cfgOperJogNegTorque OF wrkOperJogNegMove.cfgTorque (Usage := Input,
			                               RADIX := Float,
			                               Required := No,
			                               Visible := No);
			cfgHomingTorque OF wrkHomeMove.cfgTorque (Description := "Torque level to use for homing sequence",
			                           Usage := Input,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := No);
			cfgHomePositionReference OF wrkHomeMove.cfgPosition (Description := "What position to set when homing sequence completes",
			                                    Usage := Input,
			                                    RADIX := Float,
			                                    Required := No,
			                                    Visible := No);
			cfgHomeToTorque : BOOL (Description := "Use a home to torque sequence",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			cfgHomeToTorqueTorqueTarget : REAL (Description := "Torque level to use for home to torque sequence",
			                                       Usage := Input,
			                                       RADIX := Float,
			                                       Required := No,
			                                       Visible := No,
			                                       DefaultData := 0.00000000e+000);
			cfgHomeToTorquePosErrorTarget : REAL (Description := "Position error that defines hard stop",
			                                         Usage := Input,
			                                         RADIX := Float,
			                                         Required := No,
			                                         Visible := No,
			                                         DefaultData := 0.00000000e+000);
			cfgHomeToTorqueDir : DINT (Description := "0=Positive$N1=Negative",
			                              Usage := Input,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              DefaultData := 0);
			cfgHomeToTorqueSpeed : REAL (Description := "units/sec",
			                                Usage := Input,
			                                RADIX := Float,
			                                Required := No,
			                                Visible := No,
			                                DefaultData := 0.00000000e+000);
			cfgHomeToTorqueAccel : REAL (Description := "units/sec^2",
			                                Usage := Input,
			                                RADIX := Float,
			                                Required := No,
			                                Visible := No,
			                                DefaultData := 0.00000000e+000);
			cfgHomeToTorqueDecel : REAL (Description := "units/sec^2",
			                                Usage := Input,
			                                RADIX := Float,
			                                Required := No,
			                                Visible := No,
			                                DefaultData := 0.00000000e+000);
			cfgHomeToTorqueAccelJerk : REAL (Description := "units/sec^3",
			                                    Usage := Input,
			                                    RADIX := Float,
			                                    Required := No,
			                                    Visible := No,
			                                    DefaultData := 0.00000000e+000);
			cfgHomeToTorqueDecelJerk : REAL (Description := "units/sec^3",
			                                    Usage := Input,
			                                    RADIX := Float,
			                                    Required := No,
			                                    Visible := No,
			                                    DefaultData := 0.00000000e+000);
			cfgHomeToTorquePosOffset : REAL (Description := "Positive value to move off hard stop",
			                                    Usage := Input,
			                                    RADIX := Float,
			                                    Required := No,
			                                    Visible := No,
			                                    DefaultData := 0.00000000e+000);
			inpAxis : AXIS_CIP_DRIVE (Usage := InOut,
			                   Required := Yes,
			                   Visible := Yes);
			inpServoMoves : p_udt_Servo_Move[1] (Usage := InOut,
			                         Required := Yes,
			                         Visible := Yes);
			inpEnableOperatorControl : BOOL (Usage := Input,
			                                    RADIX := Decimal,
			                                    Required := No,
			                                    Visible := Yes,
			                                    DefaultData := 0);
			inpSafetyOK : BOOL (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       DefaultData := 0);
			inpNewTorque : REAL (Description := "For Gantry AOI Use",
			                        Usage := Input,
			                        RADIX := Float,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0.00000000e+000);
			inpUpdateTorque : BOOL (Description := "For Gantry AOI Use",
			                           Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           DefaultData := 0);
			pcmdOff OF wrkPcmds.0 (Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only);
			pcmdStop OF wrkPcmds.1 (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			pcmdClearResults OF wrkPcmds.8 (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            ExternalAccess := Read Only);
			pcmdReset OF wrkPcmds.2 (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only);
			pcmdOn OF wrkPcmds.3 (Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read Only);
			pcmdHome OF wrkPcmds.7 (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only);
			pcmdStart OF wrkPcmds.6 (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only);
			pcmdMoveSelect : DINT (Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          DefaultData := 0);
			ocmdOff OF wrkOcmds.0 (Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes);
			ocmdStop OF wrkOcmds.1 (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes);
			ocmdClearResults OF wrkOcmds.8 (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes);
			ocmdBreakOverride : BOOL (Usage := Input,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := Yes,
			                             DefaultData := 0);
			ocmdReset OF wrkOcmds.2 (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes);
			ocmdOn OF wrkOcmds.3 (Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes);
			ocmdHome OF wrkOcmds.7 (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes);
			ocmdJogPos OF wrkOcmds.4 (Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes);
			ocmdJogNeg OF wrkOcmds.5 (Usage := Input,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes);
			ocmdStart OF wrkOcmds.6 (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes);
			ocmdMoveSelect : DINT (Usage := Input,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          DefaultData := 0);
			stsProgramControl : BOOL (Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := Yes,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0);
			stsHMIControl : BOOL (Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			stsIdle : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			stsStopped : BOOL (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := No,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsShutdown : BOOL (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			stsRunning : BOOL (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsReady : BOOL (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			stsInhibited : BOOL (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			stsAxisFaulted OF wrkFaults.8 (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only);
			stsBrakeOverriden : BOOL (Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := Yes,
			                             ExternalAccess := Read/Write,
			                             DefaultData := 0);
			stsResetting OF wrkCmdRequests.8 (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only);
			stsResetComplete OF wrkResults.10 (Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            ExternalAccess := Read Only);
			stsResetFailed OF wrkResults.11 (Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only);
			stsTurningOn OF wrkCmdRequests.9 (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only);
			stsTurnOnComplete OF wrkResults.0 (Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := Yes,
			                             ExternalAccess := Read Only);
			stsTurnOnFailed OF wrkResults.1 (Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only);
			stsHoming : BOOL (Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			stsHomingComplete OF wrkResults.2 (Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := Yes,
			                             ExternalAccess := Read Only);
			stsHomingFailed OF wrkResults.3 (Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only);
			stsJogging : BOOL (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsJogPosFailed OF wrkResults.6 (Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only);
			stsJogNegFailed OF wrkResults.7 (Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only);
			stsMoving : BOOL (Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			stsMoveComplete OF wrkResults.4 (Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only);
			stsMoveFailed OF wrkResults.5 (Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read Only);
			stsChangingDynamics OF wrkCmdRequests.10 (Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := Yes,
			                               ExternalAccess := Read Only);
			stsChangeDynamicsComplete OF wrkResults.8 (Usage := Output,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := Yes,
			                                     ExternalAccess := Read Only);
			stsChangeDynamicsFailed OF wrkResults.9 (Usage := Output,
			                                   RADIX := Decimal,
			                                   Required := No,
			                                   Visible := Yes,
			                                   ExternalAccess := Read Only);
			stsFaultProgramControlNOK OF wrkFaults.0 (Usage := Output,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := Yes,
			                                     ExternalAccess := Read Only);
			stsFaultOperatorControlNOK OF wrkFaults.1 (Usage := Output,
			                                      RADIX := Decimal,
			                                      Required := No,
			                                      Visible := Yes,
			                                      ExternalAccess := Read Only);
			stsFaultMovePermNOK OF wrkFaults.2 (Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := Yes,
			                               ExternalAccess := Read Only);
			stsFaultMoveIntlkNOK OF wrkFaults.3 (Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := Yes,
			                                ExternalAccess := Read Only);
			stsFaultInvalidMove OF wrkFaults.4 (Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := Yes,
			                               ExternalAccess := Read Only);
			stsFaultHomeToTorqueConfig OF wrkFaults.5 (Usage := Output,
			                                      RADIX := Decimal,
			                                      Required := No,
			                                      Visible := Yes,
			                                      ExternalAccess := Read Only);
			stsFaultHomeToTorqueSystemChange OF wrkFaults.6 (Usage := Output,
			                                            RADIX := Decimal,
			                                            Required := No,
			                                            Visible := Yes,
			                                            ExternalAccess := Read Only);
			stsFaultHomeToTorqueNoFeedback OF wrkFaults.7 (Usage := Output,
			                                          RADIX := Decimal,
			                                          Required := No,
			                                          Visible := Yes,
			                                          ExternalAccess := Read Only);
			stsFaultSummary : BOOL (Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			stsActualPosition : REAL (Usage := Output,
			                             RADIX := Float,
			                             Required := No,
			                             Visible := Yes,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0.00000000e+000);
			stsActualSpeed : REAL (Usage := Output,
			                          RADIX := Float,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0.00000000e+000);
			stsAxisStatus : INT (Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := No,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			stsActualTorque : REAL (Usage := Output,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0.00000000e+000);
			stsFaultWord : DINT (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			stsActiveMoveIndex : DINT (Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := No,
			                              ExternalAccess := Read Only,
			                              DefaultData := 0);
			stsMCDMoveIndex : DINT (Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			stsLastMoveIndex : DINT (Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			stsLastMCDIndex : DINT (Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			inpHomePerm1_00 OF wrkHomeMove.stsPerm1.Inp_Perm00 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm1_01 OF wrkHomeMove.stsPerm1.Inp_Perm01 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm1_02 OF wrkHomeMove.stsPerm1.Inp_Perm02 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm1_03 OF wrkHomeMove.stsPerm1.Inp_Perm03 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm1_04 OF wrkHomeMove.stsPerm1.Inp_Perm04 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm1_05 OF wrkHomeMove.stsPerm1.Inp_Perm05 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm1_06 OF wrkHomeMove.stsPerm1.Inp_Perm06 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm1_07 OF wrkHomeMove.stsPerm1.Inp_Perm07 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm1_08 OF wrkHomeMove.stsPerm1.Inp_Perm08 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm1_09 OF wrkHomeMove.stsPerm1.Inp_Perm09 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm1_10 OF wrkHomeMove.stsPerm1.Inp_Perm10 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm1_11 OF wrkHomeMove.stsPerm1.Inp_Perm11 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm1_12 OF wrkHomeMove.stsPerm1.Inp_Perm12 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm1_13 OF wrkHomeMove.stsPerm1.Inp_Perm13 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm1_14 OF wrkHomeMove.stsPerm1.Inp_Perm14 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm1_15 OF wrkHomeMove.stsPerm1.Inp_Perm15 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm1_Bypass OF wrkHomeMove.stsPerm1.Inp_BypActive (Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			inpHomePerm2_00 OF wrkHomeMove.stsPerm2.Inp_Perm00 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm2_01 OF wrkHomeMove.stsPerm2.Inp_Perm01 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm2_02 OF wrkHomeMove.stsPerm2.Inp_Perm02 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm2_03 OF wrkHomeMove.stsPerm2.Inp_Perm03 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm2_04 OF wrkHomeMove.stsPerm2.Inp_Perm04 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm2_05 OF wrkHomeMove.stsPerm2.Inp_Perm05 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm2_06 OF wrkHomeMove.stsPerm2.Inp_Perm06 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm2_07 OF wrkHomeMove.stsPerm2.Inp_Perm07 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm2_08 OF wrkHomeMove.stsPerm2.Inp_Perm08 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm2_09 OF wrkHomeMove.stsPerm2.Inp_Perm09 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm2_10 OF wrkHomeMove.stsPerm2.Inp_Perm10 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm2_11 OF wrkHomeMove.stsPerm2.Inp_Perm11 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm2_12 OF wrkHomeMove.stsPerm2.Inp_Perm12 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm2_13 OF wrkHomeMove.stsPerm2.Inp_Perm13 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm2_14 OF wrkHomeMove.stsPerm2.Inp_Perm14 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm2_15 OF wrkHomeMove.stsPerm2.Inp_Perm15 (Usage := Input,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := No);
			inpHomePerm2_Bypass OF wrkHomeMove.stsPerm2.Inp_BypActive (Usage := Input,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := No);
			inpHomeIntlk1_00 OF wrkHomeMove.stsIntlk.Inp_Intlk00 (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpHomeIntlk1_01 OF wrkHomeMove.stsIntlk.Inp_Intlk01 (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpHomeIntlk1_02 OF wrkHomeMove.stsIntlk.Inp_Intlk02 (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpHomeIntlk1_03 OF wrkHomeMove.stsIntlk.Inp_Intlk03 (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpHomeIntlk1_04 OF wrkHomeMove.stsIntlk.Inp_Intlk04 (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpHomeIntlk1_05 OF wrkHomeMove.stsIntlk.Inp_Intlk05 (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpHomeIntlk1_06 OF wrkHomeMove.stsIntlk.Inp_Intlk06 (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpHomeIntlk1_07 OF wrkHomeMove.stsIntlk.Inp_Intlk07 (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpHomeIntlk1_08 OF wrkHomeMove.stsIntlk.Inp_Intlk08 (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpHomeIntlk1_09 OF wrkHomeMove.stsIntlk.Inp_Intlk09 (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpHomeIntlk1_10 OF wrkHomeMove.stsIntlk.Inp_Intlk10 (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpHomeIntlk1_11 OF wrkHomeMove.stsIntlk.Inp_Intlk11 (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpHomeIntlk1_12 OF wrkHomeMove.stsIntlk.Inp_Intlk12 (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpHomeIntlk1_13 OF wrkHomeMove.stsIntlk.Inp_Intlk13 (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpHomeIntlk1_14 OF wrkHomeMove.stsIntlk.Inp_Intlk14 (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpHomeIntlk1_15 OF wrkHomeMove.stsIntlk.Inp_Intlk15 (Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No);
			inpHomeIntlk1_Bypass OF wrkHomeMove.stsIntlk.Inp_BypActive (Usage := Input,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := No);
			inpOperJogPosPerm1_00 OF wrkOperJogPosMove.stsPerm1.Inp_Perm00 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm1_01 OF wrkOperJogPosMove.stsPerm1.Inp_Perm01 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm1_02 OF wrkOperJogPosMove.stsPerm1.Inp_Perm02 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm1_03 OF wrkOperJogPosMove.stsPerm1.Inp_Perm03 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm1_04 OF wrkOperJogPosMove.stsPerm1.Inp_Perm04 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm1_05 OF wrkOperJogPosMove.stsPerm1.Inp_Perm05 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm1_06 OF wrkOperJogPosMove.stsPerm1.Inp_Perm06 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm1_07 OF wrkOperJogPosMove.stsPerm1.Inp_Perm07 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm1_08 OF wrkOperJogPosMove.stsPerm1.Inp_Perm08 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm1_09 OF wrkOperJogPosMove.stsPerm1.Inp_Perm09 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm1_10 OF wrkOperJogPosMove.stsPerm1.Inp_Perm10 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm1_11 OF wrkOperJogPosMove.stsPerm1.Inp_Perm11 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm1_12 OF wrkOperJogPosMove.stsPerm1.Inp_Perm12 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm1_13 OF wrkOperJogPosMove.stsPerm1.Inp_Perm13 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm1_14 OF wrkOperJogPosMove.stsPerm1.Inp_Perm14 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm1_15 OF wrkOperJogPosMove.stsPerm1.Inp_Perm15 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm1_Bypass OF wrkOperJogPosMove.stsPerm1.Inp_BypActive (Usage := Input,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := No);
			inpOperJogPosPerm2_00 OF wrkOperJogPosMove.stsPerm2.Inp_Perm00 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm2_01 OF wrkOperJogPosMove.stsPerm2.Inp_Perm01 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm2_02 OF wrkOperJogPosMove.stsPerm2.Inp_Perm02 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm2_03 OF wrkOperJogPosMove.stsPerm2.Inp_Perm03 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm2_04 OF wrkOperJogPosMove.stsPerm2.Inp_Perm04 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm2_05 OF wrkOperJogPosMove.stsPerm2.Inp_Perm05 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm2_06 OF wrkOperJogPosMove.stsPerm2.Inp_Perm06 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm2_07 OF wrkOperJogPosMove.stsPerm2.Inp_Perm07 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm2_08 OF wrkOperJogPosMove.stsPerm2.Inp_Perm08 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm2_09 OF wrkOperJogPosMove.stsPerm2.Inp_Perm09 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm2_10 OF wrkOperJogPosMove.stsPerm2.Inp_Perm10 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm2_11 OF wrkOperJogPosMove.stsPerm2.Inp_Perm11 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm2_12 OF wrkOperJogPosMove.stsPerm2.Inp_Perm12 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm2_13 OF wrkOperJogPosMove.stsPerm2.Inp_Perm13 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm2_14 OF wrkOperJogPosMove.stsPerm2.Inp_Perm14 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm2_15 OF wrkOperJogPosMove.stsPerm2.Inp_Perm15 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogPosPerm2_Bypass OF wrkOperJogPosMove.stsPerm2.Inp_BypActive (Usage := Input,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := No);
			inpOperJogPosIntlk1_00 OF wrkOperJogPosMove.stsIntlk.Inp_Intlk00 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogPosIntlk1_01 OF wrkOperJogPosMove.stsIntlk.Inp_Intlk01 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogPosIntlk1_02 OF wrkOperJogPosMove.stsIntlk.Inp_Intlk02 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogPosIntlk1_03 OF wrkOperJogPosMove.stsIntlk.Inp_Intlk03 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogPosIntlk1_04 OF wrkOperJogPosMove.stsIntlk.Inp_Intlk04 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogPosIntlk1_05 OF wrkOperJogPosMove.stsIntlk.Inp_Intlk05 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogPosIntlk1_06 OF wrkOperJogPosMove.stsIntlk.Inp_Intlk06 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogPosIntlk1_07 OF wrkOperJogPosMove.stsIntlk.Inp_Intlk07 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogPosIntlk1_08 OF wrkOperJogPosMove.stsIntlk.Inp_Intlk08 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogPosIntlk1_09 OF wrkOperJogPosMove.stsIntlk.Inp_Intlk09 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogPosIntlk1_10 OF wrkOperJogPosMove.stsIntlk.Inp_Intlk10 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogPosIntlk1_11 OF wrkOperJogPosMove.stsIntlk.Inp_Intlk11 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogPosIntlk1_12 OF wrkOperJogPosMove.stsIntlk.Inp_Intlk12 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogPosIntlk1_13 OF wrkOperJogPosMove.stsIntlk.Inp_Intlk13 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogPosIntlk1_14 OF wrkOperJogPosMove.stsIntlk.Inp_Intlk14 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogPosIntlk1_15 OF wrkOperJogPosMove.stsIntlk.Inp_Intlk15 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogPosIntlk1_Bypass OF wrkOperJogPosMove.stsIntlk.Inp_BypActive (Usage := Input,
			                                      RADIX := Decimal,
			                                      Required := No,
			                                      Visible := No);
			inpOperJogNegPerm1_00 OF wrkOperJogNegMove.stsPerm1.Inp_Perm00 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm1_01 OF wrkOperJogNegMove.stsPerm1.Inp_Perm01 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm1_02 OF wrkOperJogNegMove.stsPerm1.Inp_Perm02 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm1_03 OF wrkOperJogNegMove.stsPerm1.Inp_Perm03 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm1_04 OF wrkOperJogNegMove.stsPerm1.Inp_Perm04 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm1_05 OF wrkOperJogNegMove.stsPerm1.Inp_Perm05 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm1_06 OF wrkOperJogNegMove.stsPerm1.Inp_Perm06 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm1_07 OF wrkOperJogNegMove.stsPerm1.Inp_Perm07 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm1_08 OF wrkOperJogNegMove.stsPerm1.Inp_Perm08 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm1_09 OF wrkOperJogNegMove.stsPerm1.Inp_Perm09 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm1_10 OF wrkOperJogNegMove.stsPerm1.Inp_Perm10 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm1_11 OF wrkOperJogNegMove.stsPerm1.Inp_Perm11 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm1_12 OF wrkOperJogNegMove.stsPerm1.Inp_Perm12 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm1_13 OF wrkOperJogNegMove.stsPerm1.Inp_Perm13 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm1_14 OF wrkOperJogNegMove.stsPerm1.Inp_Perm14 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm1_15 OF wrkOperJogNegMove.stsPerm1.Inp_Perm15 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm1_Bypass OF wrkOperJogNegMove.stsPerm1.Inp_BypActive (Usage := Input,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := No);
			inpOperJogNegPerm2_00 OF wrkOperJogNegMove.stsPerm2.Inp_Perm00 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm2_01 OF wrkOperJogNegMove.stsPerm2.Inp_Perm01 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm2_02 OF wrkOperJogNegMove.stsPerm2.Inp_Perm02 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm2_03 OF wrkOperJogNegMove.stsPerm2.Inp_Perm03 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm2_04 OF wrkOperJogNegMove.stsPerm2.Inp_Perm04 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm2_05 OF wrkOperJogNegMove.stsPerm2.Inp_Perm05 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm2_06 OF wrkOperJogNegMove.stsPerm2.Inp_Perm06 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm2_07 OF wrkOperJogNegMove.stsPerm2.Inp_Perm07 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm2_08 OF wrkOperJogNegMove.stsPerm2.Inp_Perm08 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm2_09 OF wrkOperJogNegMove.stsPerm2.Inp_Perm09 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm2_10 OF wrkOperJogNegMove.stsPerm2.Inp_Perm10 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm2_11 OF wrkOperJogNegMove.stsPerm2.Inp_Perm11 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm2_12 OF wrkOperJogNegMove.stsPerm2.Inp_Perm12 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm2_13 OF wrkOperJogNegMove.stsPerm2.Inp_Perm13 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm2_14 OF wrkOperJogNegMove.stsPerm2.Inp_Perm14 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm2_15 OF wrkOperJogNegMove.stsPerm2.Inp_Perm15 (Usage := Input,
			                                 RADIX := Decimal,
			                                 Required := No,
			                                 Visible := No);
			inpOperJogNegPerm2_Bypass OF wrkOperJogNegMove.stsPerm2.Inp_BypActive (Usage := Input,
			                                     RADIX := Decimal,
			                                     Required := No,
			                                     Visible := No);
			inpOperJogNegIntlk1_00 OF wrkOperJogNegMove.stsIntlk.Inp_Intlk00 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogNegIntlk1_01 OF wrkOperJogNegMove.stsIntlk.Inp_Intlk01 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogNegIntlk1_02 OF wrkOperJogNegMove.stsIntlk.Inp_Intlk02 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogNegIntlk1_03 OF wrkOperJogNegMove.stsIntlk.Inp_Intlk03 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogNegIntlk1_04 OF wrkOperJogNegMove.stsIntlk.Inp_Intlk04 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogNegIntlk1_05 OF wrkOperJogNegMove.stsIntlk.Inp_Intlk05 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogNegIntlk1_06 OF wrkOperJogNegMove.stsIntlk.Inp_Intlk06 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogNegIntlk1_07 OF wrkOperJogNegMove.stsIntlk.Inp_Intlk07 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogNegIntlk1_08 OF wrkOperJogNegMove.stsIntlk.Inp_Intlk08 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogNegIntlk1_09 OF wrkOperJogNegMove.stsIntlk.Inp_Intlk09 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogNegIntlk1_10 OF wrkOperJogNegMove.stsIntlk.Inp_Intlk10 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogNegIntlk1_11 OF wrkOperJogNegMove.stsIntlk.Inp_Intlk11 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogNegIntlk1_12 OF wrkOperJogNegMove.stsIntlk.Inp_Intlk12 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogNegIntlk1_13 OF wrkOperJogNegMove.stsIntlk.Inp_Intlk13 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogNegIntlk1_14 OF wrkOperJogNegMove.stsIntlk.Inp_Intlk14 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogNegIntlk1_15 OF wrkOperJogNegMove.stsIntlk.Inp_Intlk15 (Usage := Input,
			                                  RADIX := Decimal,
			                                  Required := No,
			                                  Visible := No);
			inpOperJogNegIntlk1_Bypass OF wrkOperJogNegMove.stsIntlk.Inp_BypActive (Usage := Input,
			                                      RADIX := Decimal,
			                                      Required := No,
			                                      Visible := No);
			inpMAG_Enbld : BOOL (Description := "MAG Enabled bit. When this bit on then AOI will not control MAM and MAS.",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := Yes,
			                        Visible := Yes,
			                        DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			wrkNumMoves : DINT (RADIX := Decimal,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			wrkConstJogPos : DINT (RADIX := Decimal,
			                         ExternalAccess := Read Only,
			                         DefaultData := 6);
			wrkConstJogNeg : DINT (RADIX := Decimal,
			                         ExternalAccess := Read Only,
			                         DefaultData := 7);
			wrkConstChangeDynamics : DINT (RADIX := Decimal,
			                                 ExternalAccess := Read Only,
			                                 DefaultData := 8);
			wrkCmds : DINT (COMMENT.0 := "cmdOff",
			                  COMMENT.1 := "cmdStop",
			                  COMMENT.2 := "cmdReset",
			                  COMMENT.3 := "cmdOn",
			                  COMMENT.4 := "cmdJogPos",
			                  COMMENT.5 := "cmdJogNeg",
			                  COMMENT.6 := "cmdStart",
			                  COMMENT.7 := "cmdHome",
			                  COMMENT.8 := "cmdClearResults",
			                  RADIX := Decimal,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0);
			wrkConstCyclicMode : DINT (RADIX := Decimal,
			                             ExternalAccess := Read Only,
			                             DefaultData := 2);
			wrkConstMoveAbs : DINT (RADIX := Decimal,
			                          ExternalAccess := Read Only,
			                          DefaultData := 1);
			wrkOcmds : DINT (RADIX := Decimal,
			                   ExternalAccess := Read/Write,
			                   DefaultData := 0);
			wrkPcmds : DINT (RADIX := Decimal,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			wrkLoopIndex : DINT (RADIX := Decimal,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			wrkHighestIndex : DINT (RADIX := Decimal,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			wrkConstMoveInc : DINT (RADIX := Decimal,
			                          ExternalAccess := Read Only,
			                          DefaultData := 2);
			wrkConstMoveRNeg : DINT (RADIX := Decimal,
			                           ExternalAccess := Read Only,
			                           DefaultData := 5);
			wrkPositionMax : REAL (RADIX := Float,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0.00000000e+000);
			wrkPositionMin : REAL (RADIX := Float,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0.00000000e+000);
			wrkFaults : DINT (COMMENT.9 := "Turn On Failed",
			                    COMMENT.10 := "Homing Failed",
			                    COMMENT.11 := "Move Failed",
			                    COMMENT.12 := "Jog Pos Failed",
			                    COMMENT.13 := "Jog Neg Failed",
			                    COMMENT.14 := "Change Dynamics Failed",
			                    RADIX := Decimal,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			wrkCmdRequests : DINT (COMMENT.0 := "Move Request",
			                         COMMENT.1 := "Jog Pos Request",
			                         COMMENT.2 := "Jog Neg Request",
			                         COMMENT.3 := "Oper Jog Pos Request",
			                         COMMENT.4 := "Oper Jog Neg Request",
			                         COMMENT.5 := "Home Request",
			                         COMMENT.6 := "Off Request",
			                         COMMENT.7 := "Stop Request",
			                         COMMENT.8 := "Reset Request",
			                         COMMENT.9 := "Turn On Request",
			                         COMMENT.10 := "Change Dynamics Request",
			                         RADIX := Decimal,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			wrkResults : DINT (RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			wrkHTTStep : DINT (Description := "Home To Torque Seq Step",
			                     RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			stsActiveMove : p_udt_Servo_Move (ExternalAccess := Read Only,
			                        DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0.00000000e+000,0.00000000e+000,[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[2433,-1,0,0,0,0,0,[[20,'Enter Descriptionntlk$00$00$00$00$00$00$00$00$00'],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'],[25,'Interlocks with First Outarea01$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],0,0.00000000e+000,[0,0,0],[0,0,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			wrkTargetPosition : REAL (RADIX := Float,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0.00000000e+000);
			tmrMoveFail : TIMER (ExternalAccess := Read Only,
			                      DefaultData := "[0,0,0]");
			hmiDeviceName : STRING_20 (ExternalAccess := Read/Write,
			                        DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			hmiType : STRING_16_UDT (ExternalAccess := Read Only,
			                  DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			stsMCDMove : p_udt_Servo_Move (ExternalAccess := Read Only,
			                     DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0.00000000e+000,0.00000000e+000,[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[2433,-1,0,0,0,0,0,[[20,'Enter Descriptionntlk$00$00$00$00$00$00$00$00$00'],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'],[25,'Interlocks with First Outarea01$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],0,0.00000000e+000,[0,0,0],[0,0,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			wrkValidIndexAndType : BOOL (RADIX := Decimal,
			                               ExternalAccess := Read Only,
			                               DefaultData := 0);
			wrkMI : p_udt_Servo_MIs (ExternalAccess := Read Only,
			                DefaultData := "[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]]");
			wrkNewMCDMoveSelected : BOOL (RADIX := Decimal,
			                                ExternalAccess := Read Only,
			                                DefaultData := 0);
			wrkSavedSoftOTChecking : DINT (RADIX := Decimal,
			                                 ExternalAccess := Read Only,
			                                 DefaultData := 0);
			wrkSavedPosErrorTol : REAL (RADIX := Float,
			                              ExternalAccess := Read Only,
			                              DefaultData := 0.00000000e+000);
			wrkSavedHomeSeq : DINT (RADIX := Decimal,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			wrkTempPosErrorTol : REAL (RADIX := Float,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0.00000000e+000);
			wrkTempSoftOTChecking : DINT (RADIX := Decimal,
			                                ExternalAccess := Read Only,
			                                DefaultData := 0);
			wrkTempHomeSeq : DINT (RADIX := Decimal,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			wrkCurSoftOTChecking : DINT (RADIX := Decimal,
			                               ExternalAccess := Read Only,
			                               DefaultData := 0);
			wrkCurPosErrorTol : REAL (RADIX := Float,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0.00000000e+000);
			wrkCurHomeSeq : DINT (RADIX := Decimal,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			tmrPosErrorFeedbackBad : TIMER (ExternalAccess := Read Only,
			                                 DefaultData := "[0,0,0]");
			wrkSavedTorqueLimPos : REAL (RADIX := Float,
			                               ExternalAccess := Read Only,
			                               DefaultData := 0.00000000e+000);
			wrkSavedTorqueLimNeg : REAL (RADIX := Float,
			                               ExternalAccess := Read Only,
			                               DefaultData := 0.00000000e+000);
			wrkTempTorqueLimNeg : REAL (RADIX := Float,
			                              ExternalAccess := Read Only,
			                              DefaultData := 0.00000000e+000);
			wrkCurTorqueLimPos : REAL (RADIX := Float,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0.00000000e+000);
			wrkCurTorqueLimNeg : REAL (RADIX := Float,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0.00000000e+000);
			tmrPosErrorReached : TIMER (ExternalAccess := Read Only,
			                             DefaultData := "[0,0,0]");
			wrkDriveConfiguredForHTT : BOOL (RADIX := Decimal,
			                                   ExternalAccess := Read Only,
			                                   DefaultData := 0);
			wrkHTTPosOffset : REAL (RADIX := Float,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0.00000000e+000);
			tmrJoggingFailed : TIMER (ExternalAccess := Read Only,
			                           DefaultData := "[0,0,0]");
			wrkReloadSavedSettings : BOOL (RADIX := Decimal,
			                                 ExternalAccess := Read Only,
			                                 DefaultData := 0);
			wrkLoopMove : p_udt_Servo_Move (ExternalAccess := Read Only,
			                      DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0.00000000e+000,0.00000000e+000,[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[2433,-1,0,0,0,0,0,[[20,'Enter Descriptionntlk$00$00$00$00$00$00$00$00$00'],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'],[25,'Interlocks with First Outarea01$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],0,0.00000000e+000,[0,0,0],[0,0,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			tmrHomeStopDelay : TIMER (ExternalAccess := Read Only,
			                           DefaultData := "[0,0,0]");
			wrkHomeToTorqueMax : REAL (RADIX := Float,
			                             ExternalAccess := Read Only,
			                             DefaultData := 1.00000000e+002);
			wrkNegPosErrorTarget : REAL (RADIX := Float,
			                               ExternalAccess := Read Only,
			                               DefaultData := 0.00000000e+000);
			wrkHomeMove : p_udt_Servo_Move (ExternalAccess := Read/Write,
			                      DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0.00000000e+000,0.00000000e+000,[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[49,-1,0,0,-1,[[20,'Enter Description #0$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],-1,0,0,-1,[6,'P_Perm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[2433,-1,0,0,0,0,0,[[20,'Enter Descriptionntlk$00$00$00$00$00$00$00$00$00'],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'],[25,'Interlocks with First Outarea01$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],0,0.00000000e+000,[0,0,0],[0,0,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			wrkOperJogPosMove : p_udt_Servo_Move (ExternalAccess := Read/Write,
			                            DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0.00000000e+000,0.00000000e+000,[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[2433,-1,0,0,0,0,0,[[20,'Enter Descriptionntlk$00$00$00$00$00$00$00$00$00'],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'],[25,'Interlocks with First Outarea01$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],0,0.00000000e+000,[0,0,0],[0,0,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			wrkTravelMode : DINT (RADIX := Decimal,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			wrkPosUnwindNum : REAL (RADIX := Float,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0.00000000e+000);
			wrkPosUnwindDenom : REAL (RADIX := Float,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0.00000000e+000);
			wrkUnwindCycle : REAL (RADIX := Float,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0.00000000e+000);
			stsOcmdMove : p_udt_Servo_Move (ExternalAccess := Read Only,
			                      DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0.00000000e+000,0.00000000e+000,[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[2433,-1,0,0,0,0,0,[[20,'Enter Descriptionntlk$00$00$00$00$00$00$00$00$00'],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'],[25,'Interlocks with First Outarea01$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],0,0.00000000e+000,[0,0,0],[0,0,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			stsPcmdMove : p_udt_Servo_Move (ExternalAccess := Read Only,
			                      DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0.00000000e+000,0.00000000e+000,[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[2433,-1,0,0,0,0,0,[[20,'Enter Description #0$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],-1,0,0,0,0,0,0,0,[7,'P_Intlk$00$00$00$00$00$00$00$00$00'],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'],[25,'Interlocks with First Outarea01$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],0,0.00000000e+000,[0,0,0],[0,0,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			wrkMoveSelect : DINT (RADIX := Decimal,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			wrkMoveSelectMem : DINT (RADIX := Decimal,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			wrkMoveType : DINT (RADIX := Decimal,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			wrkResetTurnOnFailTON : TIMER (ExternalAccess := Read Only,
			                                DefaultData := "[0,0,0]");
			wrkTravelModeONS : BOOL (RADIX := Decimal,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			wrkAutoTurnOnONS : BOOL (RADIX := Decimal,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			wrkClearFaultsONS : BOOL (RADIX := Decimal,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			wrkResetTurnOnONS : DINT (RADIX := Decimal,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			wrkHomeONS : DINT (RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			wrkMoveONS : DINT (RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			wrkStopONS : DINT (RADIX := Decimal,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			wrkOffONS : DINT (RADIX := Decimal,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			wrkOperJogNegMove : p_udt_Servo_Move (ExternalAccess := Read/Write,
			                            DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0.00000000e+000,0.00000000e+000,[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[2433,-1,0,0,0,0,0,[[20,'Enter Descriptionntlk$00$00$00$00$00$00$00$00$00'],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'],[25,'Interlocks with First Outarea01$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],0,0.00000000e+000,[0,0,0],[0,0,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			stsAxisSafetyFaults : DINT (RADIX := Decimal,
			                              ExternalAccess := Read Only,
			                              DefaultData := 0);
			stsAxisFaults : DINT (RADIX := Decimal,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			stsCIPAxisFaults : LINT (RADIX := Decimal,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			stsModuleFaults : DINT (RADIX := Decimal,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			stsMotionFaults : DINT (RADIX := Decimal,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			stsGuardFaults : DINT (RADIX := Decimal,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			stsCIPInitializationFaults : DINT (RADIX := Decimal,
			                                     ExternalAccess := Read Only,
			                                     DefaultData := 0);
			stsCIPInitializationFaultsRA : DINT (RADIX := Decimal,
			                                       ExternalAccess := Read Only,
			                                       DefaultData := 0);
			wrkOperStartJogONS : BOOL (RADIX := Decimal,
			                             ExternalAccess := None,
			                             DefaultData := 0);
			wrkOperJoggingOS : BOOL (RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			stsCIPAxisFaultsRA : LINT (RADIX := Decimal,
			                             ExternalAccess := Read Only,
			                             DefaultData := 0);
			wrkLastTorque : REAL (RADIX := Float,
			                        ExternalAccess := None,
			                        DefaultData := 0.00000000e+000);
			wrkConstMoveRShort : DINT (RADIX := Decimal,
			                             ExternalAccess := None,
			                             DefaultData := 3);
			wrkConstMoveRPos : DINT (RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 4);
			stsLastMove : p_udt_Servo_Move (ExternalAccess := Read Only,
			                      DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0.00000000e+000,0.00000000e+000,[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[2433,-1,0,0,0,0,0,[[20,'Enter Descriptionntlk$00$00$00$00$00$00$00$00$00'],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'],[25,'Interlocks with First Outarea01$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],0,0.00000000e+000,[0,0,0],[0,0,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			stsLastMCD : p_udt_Servo_Move (ExternalAccess := Read Only,
			                     DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0.00000000e+000,0.00000000e+000,[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[49,-1,0,0,-1,[[20,'Enter Descriptionerm$00$00$00$00$00$00$00$00$00$00'],[11,'Permissives$00$00$00$00$00$00$00$00$00'],[6,'P_Perm$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],[11,'Permissivesarea01$00$00']],[2433,-1,0,0,0,0,0,[[20,'Enter Descriptionntlk$00$00$00$00$00$00$00$00$00'],[10,'Interlocks$00$00$00$00$00$00$00$00$00$00'],[7,'P_Intlk$00$00$00$00$00$00$00$00$00$00$00$00$00'],[25,'Interlocks with First Outarea01$00$00'],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']],0,0.00000000e+000,[0,0,0],[0,0,0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']]");
			wrkHomeToTorqueSpeed : REAL (RADIX := Float,
			                               ExternalAccess := None,
			                               DefaultData := 0.00000000e+000);
			wrkHomeToTorqueAccel : REAL (RADIX := Float,
			                               ExternalAccess := None,
			                               DefaultData := 0.00000000e+000);
			wrkHomeToTorqueDecel : REAL (RADIX := Float,
			                               ExternalAccess := None,
			                               DefaultData := 0.00000000e+000);
			wrkHomeToTorqueAccelJerk : REAL (RADIX := Float,
			                                   ExternalAccess := None,
			                                   DefaultData := 0.00000000e+000);
			wrkHomeToTorqueDecelJerk : REAL (RADIX := Float,
			                                   ExternalAccess := None,
			                                   DefaultData := 0.00000000e+000);
			wrkProgMAJSpeed : REAL (RADIX := Float,
			                          ExternalAccess := None,
			                          DefaultData := 0.00000000e+000);
			wrkProgMAJAccel : REAL (RADIX := Float,
			                          ExternalAccess := None,
			                          DefaultData := 0.00000000e+000);
			wrkProgMAJDecel : REAL (RADIX := Float,
			                          ExternalAccess := None,
			                          DefaultData := 0.00000000e+000);
			wrkProgMAJAccelJerk : REAL (RADIX := Float,
			                              ExternalAccess := None,
			                              DefaultData := 0.00000000e+000);
			wrkProgMAJDecelJerk : REAL (RADIX := Float,
			                              ExternalAccess := None,
			                              DefaultData := 0.00000000e+000);
			wrkOperMAJSpeed : REAL (RADIX := Float,
			                          ExternalAccess := None,
			                          DefaultData := 0.00000000e+000);
			wrkOperMAJAccel : REAL (RADIX := Float,
			                          ExternalAccess := None,
			                          DefaultData := 0.00000000e+000);
			wrkOperMAJDecel : REAL (RADIX := Float,
			                          ExternalAccess := None,
			                          DefaultData := 0.00000000e+000);
			wrkOperMAJAccelJerk : REAL (RADIX := Float,
			                              ExternalAccess := None,
			                              DefaultData := 0.00000000e+000);
			wrkOperMAJDecelJerk : REAL (RADIX := Float,
			                              ExternalAccess := None,
			                              DefaultData := 0.00000000e+000);
			wrkMAMSpeed : REAL (RADIX := Float,
			                      ExternalAccess := None,
			                      DefaultData := 0.00000000e+000);
			wrkMAMAccel : REAL (RADIX := Float,
			                      ExternalAccess := None,
			                      DefaultData := 0.00000000e+000);
			wrkMAMDecel : REAL (RADIX := Float,
			                      ExternalAccess := None,
			                      DefaultData := 0.00000000e+000);
			wrkMAMAccelJerk : REAL (RADIX := Float,
			                          ExternalAccess := None,
			                          DefaultData := 0.00000000e+000);
			wrkMAMDecelJerk : REAL (RADIX := Float,
			                          ExternalAccess := None,
			                          DefaultData := 0.00000000e+000);
			wrkMCDSpeed : REAL (RADIX := Float,
			                      ExternalAccess := None,
			                      DefaultData := 0.00000000e+000);
			wrkMCDAccel : REAL (RADIX := Float,
			                      ExternalAccess := None,
			                      DefaultData := 0.00000000e+000);
			wrkMCDDecel : REAL (RADIX := Float,
			                      ExternalAccess := None,
			                      DefaultData := 0.00000000e+000);
			wrkMCDAccelJerk : REAL (RADIX := Float,
			                          ExternalAccess := None,
			                          DefaultData := 0.00000000e+000);
			wrkMCDDecelJerk : REAL (RADIX := Float,
			                          ExternalAccess := None,
			                          DefaultData := 0.00000000e+000);
			hmiUnitsDisplay : STRING_16_UDT (ExternalAccess := Read/Write,
			                          DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			wrkAutoStopONS : BOOL (RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := 0);
			wrkAOIVersion : REAL (RADIX := Float,
			                        ExternalAccess := Read Only,
			                        DefaultData := 1.00000000e+000);
			wrkSavedVelErrorTol : REAL (RADIX := Float,
			                              ExternalAccess := None,
			                              DefaultData := 0.00000000e+000);
			wrkTempVelErrorTol : REAL (RADIX := Float,
			                             ExternalAccess := None,
			                             DefaultData := 0.00000000e+000);
			wrkCurVelErrorTol : REAL (RADIX := Float,
			                            ExternalAccess := None,
			                            DefaultData := 0.00000000e+000);
			stsBrakeStatus : DINT (Description := "0= Automatic Servo Control$N1=Overriden and Released",
			                         RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := 0);
			wrkBrakeOverrideONS1 : BOOL (RADIX := Decimal,
			                               ExternalAccess := None,
			                               DefaultData := 0);
			wrkBrakeOverrideONS2 : BOOL (RADIX := Decimal,
			                               ExternalAccess := None,
			                               DefaultData := 0);
			wrkBreakOverride : BOOL (RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			indBreakOverride : BOOL (RADIX := Decimal,
			                           ExternalAccess := Read/Write,
			                           DefaultData := 0);
			outBrakeOverride : DINT (Description := "0=Automatic Servo Control$N1=Override and Realese",
			                           RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Servo AOI$N"
				    "************************************************************$N"
				    "$N"
				    "Name Configuration for Device, Units. Displayed on HMI.$N"
				    "Leave $Qhmi_Type$Q as is HMI(FTA View) can use for internal macro if it necessary.";
				N: MOV(1.0,wrkAOIVersion)JMP(skipText)LOWER(hmiDeviceName,hmiDeviceName)LOWER(hmiType,hmiType)LOWER(hmiUnitsDisplay,hmiUnitsDisplay);
				RC: "Do not allow use of index 0$N"
				    "Overwrite anything in this index with zeroes$N"
				    "Ensure default tolerance is greater than 0 because the servo cannot hit the target perfectly$N"
				    "Also ensure speed multiplier is between 0 and 1";
				N: LBL(skipText)[FLL(0,inpServoMoves[0],1) ,LEQ(cfgDefaultTolerance,0) MOV(0.5,cfgDefaultTolerance) ,LES(cfgSpeedMultiplier,0) MOV(0,cfgSpeedMultiplier) ,GRT(cfgSpeedMultiplier,1) MOV(1,cfgSpeedMultiplier) ];
				RC: "Set Constants to be used in comparisons throughout the rest of the AOI";
				N: [MOV(1,wrkConstMoveAbs) MOV(2,wrkConstMoveInc) MOV(3,wrkConstMoveRShort) MOV(4,wrkConstMoveRPos) ,MOV(5,wrkConstMoveRNeg) MOV(6,wrkConstJogPos) MOV(7,wrkConstJogNeg) MOV(8,wrkConstChangeDynamics) ];
				RC: "Input for the Gantry AOI to control the torque of this servo";
				N: XIC(inpUpdateTorque)OTU(inpUpdateTorque)MOV(inpNewTorque,inpAxis.TorqueLimitPositive)MUL(inpNewTorque,-1,inpAxis.TorqueLimitNegative);
				RC: "************************************************************$N"
				    "Axis Moves$N"
				    "************************************************************$N"
				    "$N"
				    "The active move, active MCD move, index of pcmdMoveSelect, index of ocmdMoveSelect, homing move, and operator jogging moves are always evaluated$N"
				    "If cfgScanModeAll is off, then all other moves are scanned one at a time, one per scan so are not always up to date$N"
				    "If cfgScanModeAll is on, then all other moves are scanned every scan so are always up to date$N"
				    "$N"
				    "check the size of the moves array every scan to prevent accessing out of bounds index, causing a controller fault";
				N: SIZE(inpServoMoves,0,wrkNumMoves)SUB(wrkNumMoves,1,wrkHighestIndex);
				RC: "************************************************************$N"
				    "Homing & Operating Jogging Moves$N"
				    "************************************************************$N"
				    "$N"
				    "Evaluate permissives and interlocks for Homing and Operator Jogging$N"
				    "These are not indices in the inpServoMoves array";
				N: [P_Perm(wrkHomeMove.stsPerm1) P_Perm(wrkHomeMove.stsPerm2) P_Intlk(wrkHomeMove.stsIntlk) ,[XIC(wrkHomeMove.stsPerm1.Sts_PermOK) ,XIC(wrkHomeMove.stsPerm1.Sts_BypActive) ] XIC(wrkHomeMove.stsPerm1.Sts_NBPermOK) [XIC(wrkHomeMove.stsPerm2.Sts_PermOK) ,XIC(wrkHomeMove.stsPerm2.Sts_BypActive) ] XIC(wrkHomeMove.stsPerm2.Sts_NBPermOK) OTE(wrkHomeMove.stsPermsOK) ,[XIC(wrkHomeMove.stsIntlk.Sts_IntlkOK) ,XIC(wrkHomeMove.stsIntlk.Sts_BypActive) ] XIC(wrkHomeMove.stsIntlk.Sts_NBIntlkOK) OTE(wrkHomeMove.stsIntlksOK) ];
				N: [P_Perm(wrkOperJogPosMove.stsPerm1) P_Perm(wrkOperJogPosMove.stsPerm2) P_Intlk(wrkOperJogPosMove.stsIntlk) ,[XIC(wrkOperJogPosMove.stsPerm1.Sts_PermOK) ,XIC(wrkOperJogPosMove.stsPerm1.Sts_BypActive) ] XIC(wrkOperJogPosMove.stsPerm1.Sts_NBPermOK) [XIC(wrkOperJogPosMove.stsPerm2.Sts_PermOK) ,XIC(wrkOperJogPosMove.stsPerm2.Sts_BypActive) ] XIC(wrkOperJogPosMove.stsPerm2.Sts_NBPermOK) OTE(wrkOperJogPosMove.stsPermsOK) ,[XIC(wrkOperJogPosMove.stsIntlk.Sts_IntlkOK) ,XIC(wrkOperJogPosMove.stsIntlk.Sts_BypActive) ] XIC(wrkOperJogPosMove.stsIntlk.Sts_NBIntlkOK) OTE(wrkOperJogPosMove.stsIntlksOK) ];
				N: [P_Perm(wrkOperJogNegMove.stsPerm1) P_Perm(wrkOperJogNegMove.stsPerm2) P_Intlk(wrkOperJogNegMove.stsIntlk) ,[XIC(wrkOperJogNegMove.stsPerm1.Sts_PermOK) ,XIC(wrkOperJogNegMove.stsPerm1.Sts_BypActive) ] XIC(wrkOperJogNegMove.stsPerm1.Sts_NBPermOK) [XIC(wrkOperJogNegMove.stsPerm2.Sts_PermOK) ,XIC(wrkOperJogNegMove.stsPerm2.Sts_BypActive) ] XIC(wrkOperJogNegMove.stsPerm2.Sts_NBPermOK) OTE(wrkOperJogNegMove.stsPermsOK) ,[XIC(wrkOperJogNegMove.stsIntlk.Sts_IntlkOK) ,XIC(wrkOperJogNegMove.stsIntlk.Sts_BypActive) ] XIC(wrkOperJogNegMove.stsIntlk.Sts_NBIntlkOK) OTE(wrkOperJogNegMove.stsIntlksOK) ];
				RC: "When jogging or homing is active, move the appropriate jog or home move into the active move";
				N: [XIC(wrkCmdRequests.3) OTE(wrkOperJogPosMove.stsActive) COP(wrkOperJogPosMove,stsActiveMove,1) CLR(stsActiveMoveIndex) ,XIC(wrkCmdRequests.4) OTE(wrkOperJogNegMove.stsActive) COP(wrkOperJogNegMove,stsActiveMove,1) CLR(stsActiveMoveIndex) ,XIC(wrkCmdRequests.5) OTE(wrkHomeMove.stsActive) COP(wrkHomeMove,stsActiveMove,1) CLR(stsActiveMoveIndex) ];
				RC: "Ensure configured jog and home torques are positive values. The AOI will invert that value when setting the negative torque limit.";
				N: [LES(cfgOperJogPosTorque,0) MUL(cfgOperJogPosTorque,-1,cfgOperJogPosTorque) ,LES(cfgOperJogNegTorque,0) MUL(cfgOperJogNegTorque,-1,cfgOperJogNegTorque) ,LES(cfgHomingTorque,0) MUL(cfgHomingTorque,-1,cfgHomingTorque) ];
				RC: "Ensure the type of the operator jog moves cannot be changed";
				N: MOV(wrkConstJogPos,wrkOperJogPosMove.cfgType)MOV(wrkConstJogNeg,wrkOperJogNegMove.cfgType);
				RC: "************************************************************$N"
				    "Active Move$N"
				    "************************************************************$N"
				    "$N"
				    "Only evaluate active move if the index is valid and non-zero";
				N: LIM(wrkNumMoves,stsActiveMoveIndex,0)JMP(skipActiveMove);
				RC: "Evaluate the permissives and interlocks for this particular move";
				N: COP(inpServoMoves[stsActiveMoveIndex],stsActiveMove,1)[P_Perm(stsActiveMove.stsPerm1) P_Perm(stsActiveMove.stsPerm2) P_Intlk(stsActiveMove.stsIntlk) ,[XIC(stsActiveMove.stsPerm1.Sts_PermOK) ,XIC(stsActiveMove.stsPerm1.Sts_BypActive) ] XIC(stsActiveMove.stsPerm1.Sts_NBPermOK) [XIC(stsActiveMove.stsPerm2.Sts_PermOK) ,XIC(stsActiveMove.stsPerm2.Sts_BypActive) ] XIC(stsActiveMove.stsPerm2.Sts_NBPermOK) OTE(stsActiveMove.stsPermsOK) ,[XIC(stsActiveMove.stsIntlk.Sts_IntlkOK) ,XIC(stsActiveMove.stsIntlk.Sts_BypActive) ] XIC(stsActiveMove.stsIntlk.Sts_NBIntlkOK) OTE(stsActiveMove.stsIntlksOK) ];
				RC: "Settings for determining if the servo is in position. Use a tolerance band and delay times$N"
				    "The tolerance band must be greater than 0 because the servo will not hit the target position perfectly";
				N: [LEQ(stsActiveMove.cfgTolerance,0) MOV(cfgDefaultTolerance,stsActiveMove.cfgTolerance) ,LES(stsActiveMove.cfgAtPositionDelay,0) CLR(stsActiveMove.cfgAtPositionDelay) ,MOV(stsActiveMove.cfgAtPositionDelay,stsActiveMove.tmrAtPosition.PRE) ];
				RC: "Calculate target position and in position window";
				N: [ADD(stsActualPosition,stsActiveMove.cfgTolerance,wrkPositionMax) SUB(stsActualPosition,stsActiveMove.cfgTolerance,wrkPositionMin) ,NEQ(stsActiveMove.cfgType,wrkConstMoveInc) MOV(stsActiveMove.cfgPosition,wrkTargetPosition) ,EQU(stsActiveMove.cfgType,wrkConstMoveInc) ADD(stsActiveMove.wrkLastPosition,stsActiveMove.cfgPosition,wrkTargetPosition) ];
				RC: "If the travel mode is cyclic, take the unwind factor into account and recalculate target position and in position window$N"
				    "with cycle, max tolerance is half the unwind value";
				N: NEQ(wrkUnwindCycle,0)[CMP(stsActiveMove.cfgTolerance > (wrkUnwindCycle/2)) DIV(wrkUnwindCycle,2,stsActiveMove.cfgTolerance) ,ADD(stsActualPosition,stsActiveMove.cfgTolerance,wrkPositionMax) SUB(stsActualPosition,stsActiveMove.cfgTolerance,wrkPositionMin) ,GRT(wrkPositionMax,wrkUnwindCycle) SUB(wrkPositionMax,wrkUnwindCycle,wrkPositionMax) ,LES(wrkPositionMin,0) ADD(wrkPositionMin,wrkUnwindCycle,wrkPositionMin) ,MOD(stsActiveMove.cfgPosition,wrkUnwindCycle,wrkTargetPosition) EQU(stsActiveMove.cfgType,wrkConstMoveInc) CPT(wrkTargetPosition,(stsActiveMove.wrkLastPosition + stsActiveMove.cfgPosition) MOD wrkUnwindCycle) ];
				RC: "Time how long it took this move to execute last time it was commanded";
				N: [[XIC(wrkCmdRequests.0) ,XIC(wrkCmdRequests.1) ,XIC(wrkCmdRequests.2) ,XIC(wrkCmdRequests.3) ,XIC(wrkCmdRequests.4) ] OTE(stsActiveMove.stsActive) ,XIO(stsActiveMove.stsActive) GRT(stsActiveMove.tmrExecuting.ACC,0) DIV(stsActiveMove.tmrExecuting.ACC,1000,stsActiveMove.stsExecutionTime) ,XIC(stsActiveMove.stsActive) MOV(999999999,stsActiveMove.tmrExecuting.PRE) TON(stsActiveMove.tmrExecuting,?,?) ];
				RC: "Calculate the position window and time delay for the servo to be considered at the position specified for this move$N"
				    "If in sim mode, use the simulated move completing as the condition, and stay $Qat this position$Q until a new move is commanded";
				N: [LIM(wrkPositionMin,wrkTargetPosition,wrkPositionMax) ,NEQ(wrkUnwindCycle,0) CMP(stsActiveMove.cfgTolerance = (wrkUnwindCycle/2)) ][TON(stsActiveMove.tmrAtPosition,?,?) ,XIC(stsActiveMove.tmrAtPosition.DN) OTE(stsActiveMove.stsAtPosition) ];
				RC: "Allow for teaching the position from the HMI for applicable move types (not incremental, jog)";
				N: XIC(stsActiveMove.cmdTeachPosition)OTU(stsActiveMove.cmdTeachPosition)NEQ(stsActiveMove.cfgType,wrkConstMoveInc)NEQ(stsActiveMove.cfgType,wrkConstJogPos)NEQ(stsActiveMove.cfgType,wrkConstJogNeg)MOV(stsActualPosition,stsActiveMove.cfgPosition);
				RC: "Ensure configured torques is positive. The AOI will invert that value when setting the negative torque limit.";
				N: LES(stsActiveMove.cfgTorque,0)MUL(stsActiveMove.cfgTorque,-1,stsActiveMove.cfgTorque);
				RC: "Calculate distance to configured point based on axis$'s current location$N"
				    "Copy buffer tag back into the array";
				N: SUB(stsActualPosition,wrkTargetPosition,stsActiveMove.stsDistanceToTarget)COP(stsActiveMove,inpServoMoves[stsActiveMoveIndex],1);
				RC: "************************************************************$N"
				    "Active MCD Move$N"
				    "************************************************************$N"
				    "$N"
				    "Only evaluate MCD move if the index is valid, non-zero, and not the same as the active move index which was already evaluated";
				N: LBL(skipActiveMove)[LIM(wrkNumMoves,stsMCDMoveIndex,0) FLL(0,stsMCDMove,1) ,EQU(stsMCDMoveIndex,stsActiveMoveIndex) COP(inpServoMoves[stsMCDMoveIndex],stsMCDMove,1) ]JMP(skipMCDMove);
				RC: "Evaluate the permissives and interlocks for this particular move";
				N: COP(inpServoMoves[stsMCDMoveIndex],stsMCDMove,1)[P_Perm(stsMCDMove.stsPerm1) P_Perm(stsMCDMove.stsPerm2) P_Intlk(stsMCDMove.stsIntlk) ,[XIC(stsMCDMove.stsPerm1.Sts_PermOK) ,XIC(stsMCDMove.stsPerm1.Sts_BypActive) ] XIC(stsMCDMove.stsPerm1.Sts_NBPermOK) [XIC(stsMCDMove.stsPerm2.Sts_PermOK) ,XIC(stsMCDMove.stsPerm2.Sts_BypActive) ] XIC(stsMCDMove.stsPerm2.Sts_NBPermOK) OTE(stsMCDMove.stsPermsOK) ,[XIC(stsMCDMove.stsIntlk.Sts_IntlkOK) ,XIC(stsMCDMove.stsIntlk.Sts_BypActive) ] XIC(stsMCDMove.stsIntlk.Sts_NBIntlkOK) OTE(stsMCDMove.stsIntlksOK) ];
				RC: "Time how long it took this move to execute last time it was commanded";
				N: [XIC(wrkCmdRequests.10) OTE(stsMCDMove.stsActive) ,XIO(stsMCDMove.stsActive) GRT(stsMCDMove.tmrExecuting.ACC,0) DIV(stsMCDMove.tmrExecuting.ACC,1000,stsMCDMove.stsExecutionTime) ,XIC(stsMCDMove.stsActive) MOV(999999999,stsMCDMove.tmrExecuting.PRE) TON(stsMCDMove.tmrExecuting,?,?) ];
				RC: "Ensure the configured torque is positive";
				N: LES(stsMCDMove.cfgTorque,0)MUL(stsMCDMove.cfgTorque,-1,stsMCDMove.cfgTorque);
				RC: "Copy buffer tag back into array";
				N: COP(stsMCDMove,inpServoMoves[stsMCDMoveIndex],1);
				RC: "************************************************************$N"
				    "Operator Selected Move$N"
				    "************************************************************$N"
				    "$N"
				    "Only evaluate the operator selected move if the index is valid, non-zero, and not the same as the active move index or the MCD move index which were  both already evaluated";
				N: LBL(skipMCDMove)[LIM(wrkNumMoves,ocmdMoveSelect,0) FLL(0,stsOcmdMove,1) ,[EQU(ocmdMoveSelect,stsActiveMoveIndex) ,EQU(ocmdMoveSelect,stsMCDMoveIndex) ] COP(inpServoMoves[ocmdMoveSelect],stsOcmdMove,1) ]JMP(skipOCmdMove);
				RC: "Evaluate permissives and interlocks of the index selected by ocmdMoveSelect";
				N: COP(inpServoMoves[ocmdMoveSelect],stsOcmdMove,1)[P_Perm(stsOcmdMove.stsPerm1) P_Perm(stsOcmdMove.stsPerm2) P_Intlk(stsOcmdMove.stsIntlk) ,[XIC(stsOcmdMove.stsPerm1.Sts_PermOK) ,XIC(stsOcmdMove.stsPerm1.Sts_BypActive) ] XIC(stsOcmdMove.stsPerm1.Sts_NBPermOK) [XIC(stsOcmdMove.stsPerm2.Sts_PermOK) ,XIC(stsOcmdMove.stsPerm2.Sts_BypActive) ] XIC(stsOcmdMove.stsPerm2.Sts_NBPermOK) OTE(stsOcmdMove.stsPermsOK) ,[XIC(stsOcmdMove.stsIntlk.Sts_IntlkOK) ,XIC(stsOcmdMove.stsIntlk.Sts_BypActive) ] XIC(stsOcmdMove.stsIntlk.Sts_NBIntlkOK) OTE(stsOcmdMove.stsIntlksOK) ];
				RC: "Settings for determining if the servo is in position. Use a tolerance band and delay times$N"
				    "";
				N: [LEQ(stsOcmdMove.cfgTolerance,0) MOV(cfgDefaultTolerance,stsOcmdMove.cfgTolerance) ,LES(stsOcmdMove.cfgAtPositionDelay,0) CLR(stsOcmdMove.cfgAtPositionDelay) ,MOV(stsOcmdMove.cfgAtPositionDelay,stsOcmdMove.tmrAtPosition.PRE) ];
				RC: "Calculate target position and in position window";
				N: [ADD(stsActualPosition,stsOcmdMove.cfgTolerance,wrkPositionMax) SUB(stsActualPosition,stsOcmdMove.cfgTolerance,wrkPositionMin) ,NEQ(stsOcmdMove.cfgType,wrkConstMoveInc) MOV(stsOcmdMove.cfgPosition,wrkTargetPosition) ,EQU(stsOcmdMove.cfgType,wrkConstMoveInc) ADD(stsOcmdMove.wrkLastPosition,stsOcmdMove.cfgPosition,wrkTargetPosition) ];
				RC: "If the travel mode is cyclic, take the unwind factor into account and recalculate target position and in position window$N"
				    "with cycle, max tolerance is half the unwind value";
				N: NEQ(wrkUnwindCycle,0)[CMP(stsOcmdMove.cfgTolerance > (wrkUnwindCycle/2)) DIV(wrkUnwindCycle,2,stsOcmdMove.cfgTolerance) ,ADD(stsActualPosition,stsOcmdMove.cfgTolerance,wrkPositionMax) SUB(stsActualPosition,stsOcmdMove.cfgTolerance,wrkPositionMin) ,GRT(wrkPositionMax,wrkUnwindCycle) SUB(wrkPositionMax,wrkUnwindCycle,wrkPositionMax) ,LES(wrkPositionMin,0) ADD(wrkPositionMin,wrkUnwindCycle,wrkPositionMin) ,MOD(stsOcmdMove.cfgPosition,wrkUnwindCycle,wrkTargetPosition) EQU(stsOcmdMove.cfgType,wrkConstMoveInc) CPT(wrkTargetPosition,(stsOcmdMove.wrkLastPosition + stsOcmdMove.cfgPosition) MOD wrkUnwindCycle) ];
				RC: "Calculate the position window and time delay for the servo to be considered at the position specified for this move$N"
				    "If in sim mode, use the simulated move completing as the condition, and stay $Qat this position$Q until a new move is commanded";
				N: [LIM(wrkPositionMin,wrkTargetPosition,wrkPositionMax) ,NEQ(wrkUnwindCycle,0) CMP(stsOcmdMove.cfgTolerance = (wrkUnwindCycle/2)) ][TON(stsOcmdMove.tmrAtPosition,?,?) ,XIC(stsOcmdMove.tmrAtPosition.DN) OTE(stsOcmdMove.stsAtPosition) ];
				RC: "Allow for teaching the position from the HMI for applicable move types (not incremental, jog)";
				N: XIC(stsOcmdMove.cmdTeachPosition)OTU(stsOcmdMove.cmdTeachPosition)NEQ(stsOcmdMove.cfgType,wrkConstMoveInc)NEQ(stsOcmdMove.cfgType,wrkConstJogPos)NEQ(stsOcmdMove.cfgType,wrkConstJogNeg)MOV(stsActualPosition,stsOcmdMove.cfgPosition);
				RC: "Ensure configured torques is positive. The AOI will invert that value when setting the negative torque limit.";
				N: LES(stsOcmdMove.cfgTorque,0)MUL(stsOcmdMove.cfgTorque,-1,stsOcmdMove.cfgTorque);
				RC: "Calculate distance to configured point based on axis$'s current location$N"
				    "Copy buffer tag back into array";
				N: OTU(stsOcmdMove.stsActive)SUB(stsActualPosition,wrkTargetPosition,stsOcmdMove.stsDistanceToTarget)COP(stsOcmdMove,inpServoMoves[ocmdMoveSelect],1);
				RC: "************************************************************$N"
				    "Program Selected Move$N"
				    "************************************************************$N"
				    "$N"
				    "Only evaluate the program selected move if the index is valid,non-zero, and not the same as the active move index, MCD move index, or the operator selected move index which were already evaluated";
				N: LBL(skipOCmdMove)[LIM(wrkNumMoves,pcmdMoveSelect,0) FLL(0,stsPcmdMove,1) ,[EQU(pcmdMoveSelect,stsActiveMoveIndex) ,EQU(pcmdMoveSelect,stsMCDMoveIndex) ,EQU(pcmdMoveSelect,ocmdMoveSelect) ] COP(inpServoMoves[pcmdMoveSelect],stsPcmdMove,1) ]JMP(skipPCmdMove);
				RC: "Evaluate permissives and interlocks selected by pcmdMoveSelect";
				N: COP(inpServoMoves[pcmdMoveSelect],stsPcmdMove,1)[P_Perm(stsPcmdMove.stsPerm1) P_Perm(stsPcmdMove.stsPerm2) P_Intlk(stsPcmdMove.stsIntlk) ,[XIC(stsPcmdMove.stsPerm1.Sts_PermOK) ,XIC(stsPcmdMove.stsPerm1.Sts_BypActive) ] XIC(stsPcmdMove.stsPerm1.Sts_NBPermOK) [XIC(stsPcmdMove.stsPerm2.Sts_PermOK) ,XIC(stsPcmdMove.stsPerm2.Sts_BypActive) ] XIC(stsPcmdMove.stsPerm2.Sts_NBPermOK) OTE(stsPcmdMove.stsPermsOK) ,[XIC(stsPcmdMove.stsIntlk.Sts_IntlkOK) ,XIC(stsPcmdMove.stsIntlk.Sts_BypActive) ] XIC(stsPcmdMove.stsIntlk.Sts_NBIntlkOK) OTE(stsPcmdMove.stsIntlksOK) ];
				RC: "Settings for determining if the servo is in position. Use a tolerance band and delay times$N"
				    "";
				N: [LEQ(stsPcmdMove.cfgTolerance,0) MOV(cfgDefaultTolerance,stsPcmdMove.cfgTolerance) ,LES(stsPcmdMove.cfgAtPositionDelay,0) CLR(stsPcmdMove.cfgAtPositionDelay) ,MOV(stsPcmdMove.cfgAtPositionDelay,stsPcmdMove.tmrAtPosition.PRE) ];
				RC: "Calculate target position and in position window";
				N: [ADD(stsActualPosition,stsPcmdMove.cfgTolerance,wrkPositionMax) SUB(stsActualPosition,stsPcmdMove.cfgTolerance,wrkPositionMin) ,NEQ(stsPcmdMove.cfgType,wrkConstMoveInc) MOV(stsPcmdMove.cfgPosition,wrkTargetPosition) ,EQU(stsPcmdMove.cfgType,wrkConstMoveInc) ADD(stsPcmdMove.wrkLastPosition,stsPcmdMove.cfgPosition,wrkTargetPosition) ];
				RC: "If the travel mode is cyclic, take the unwind factor into account and recalculate target position and in position window$N"
				    "with cycle, max tolerance is half the unwind value";
				N: NEQ(wrkUnwindCycle,0)[CMP(stsPcmdMove.cfgTolerance > (wrkUnwindCycle/2)) DIV(wrkUnwindCycle,2,stsPcmdMove.cfgTolerance) ,ADD(stsActualPosition,stsPcmdMove.cfgTolerance,wrkPositionMax) SUB(stsActualPosition,stsPcmdMove.cfgTolerance,wrkPositionMin) ,GRT(wrkPositionMax,wrkUnwindCycle) SUB(wrkPositionMax,wrkUnwindCycle,wrkPositionMax) ,LES(wrkPositionMin,0) ADD(wrkPositionMin,wrkUnwindCycle,wrkPositionMin) ,MOD(stsPcmdMove.cfgPosition,wrkUnwindCycle,wrkTargetPosition) EQU(stsPcmdMove.cfgType,wrkConstMoveInc) CPT(wrkTargetPosition,(stsPcmdMove.wrkLastPosition + stsPcmdMove.cfgPosition) MOD wrkUnwindCycle) ];
				RC: "Calculate the position window and time delay for the servo to be considered at the position specified for this move$N"
				    "If in sim mode, use the simulated move completing as the condition, and stay $Qat this position$Q until a new move is commanded";
				N: [LIM(wrkPositionMin,wrkTargetPosition,wrkPositionMax) ,NEQ(wrkUnwindCycle,0) CMP(stsPcmdMove.cfgTolerance = (wrkUnwindCycle/2)) ][TON(stsPcmdMove.tmrAtPosition,?,?) ,XIC(stsPcmdMove.tmrAtPosition.DN) OTE(stsPcmdMove.stsAtPosition) ];
				RC: "Allow for teaching the position from the HMI for applicable move types (not incremental, jog)";
				N: XIC(stsPcmdMove.cmdTeachPosition)OTU(stsPcmdMove.cmdTeachPosition)NEQ(stsPcmdMove.cfgType,wrkConstMoveInc)NEQ(stsPcmdMove.cfgType,wrkConstJogPos)NEQ(stsPcmdMove.cfgType,wrkConstJogNeg)MOV(stsActualPosition,stsPcmdMove.cfgPosition);
				RC: "Ensure configured torques is positive. The AOI will invert that value when setting the negative torque limit.";
				N: LES(stsPcmdMove.cfgTorque,0)MUL(stsPcmdMove.cfgTorque,-1,stsPcmdMove.cfgTorque);
				RC: "Calculate distance to configured point based on axis$'s current location$N"
				    "Copy buffer tag back into array";
				N: OTU(stsPcmdMove.stsActive)SUB(stsActualPosition,wrkTargetPosition,stsPcmdMove.stsDistanceToTarget)COP(stsPcmdMove,inpServoMoves[pcmdMoveSelect],1);
				RC: "************************************************************$N"
				    "Inactive Moves$N"
				    "************************************************************$N"
				    "$N"
				    "If cfgScanModeAll is off, evaluate inactive and unselected moves 1 per scan to save scan time of scanning them all every scan$N"
				    "if cfgScanModeAll is on, keep all moves up to date every scan$N"
				    "Skip over moves that are already being evaluated because they are the active move, mcd move, ocmdmove, or pcmdmove";
				N: LBL(skipPCmdMove)[XIO(cfgScanModeAll) LIM(wrkNumMoves,wrkLoopIndex,0) ,XIC(cfgScanModeAll) ]MOV(1,wrkLoopIndex)LIM(wrkNumMoves,wrkLoopIndex,0)JMP(skipLoopMove);
				N: LBL(LoopMove)[EQU(wrkLoopIndex,stsActiveMoveIndex) ,EQU(wrkLoopIndex,stsMCDMoveIndex) ,EQU(wrkLoopIndex,ocmdMoveSelect) ,EQU(wrkLoopIndex,pcmdMoveSelect) ]ADD(1,wrkLoopIndex,wrkLoopIndex)[LIM(1,wrkLoopIndex,wrkHighestIndex) JMP(LoopMove) ,LIM(wrkNumMoves,wrkLoopIndex,0) MOV(1,wrkLoopIndex) JMP(skipLoopMove) ];
				RC: "Evaluate permissives and interlocks selected by pcmdMoveSelect";
				N: COP(inpServoMoves[wrkLoopIndex],wrkLoopMove,1)[P_Perm(wrkLoopMove.stsPerm1) P_Perm(wrkLoopMove.stsPerm2) P_Intlk(wrkLoopMove.stsIntlk) ,[XIC(wrkLoopMove.stsPerm1.Sts_PermOK) ,XIC(wrkLoopMove.stsPerm1.Sts_BypActive) ] XIC(wrkLoopMove.stsPerm1.Sts_NBPermOK) [XIC(wrkLoopMove.stsPerm2.Sts_PermOK) ,XIC(wrkLoopMove.stsPerm2.Sts_BypActive) ] XIC(wrkLoopMove.stsPerm2.Sts_NBPermOK) OTE(wrkLoopMove.stsPermsOK) ,[XIC(wrkLoopMove.stsIntlk.Sts_IntlkOK) ,XIC(wrkLoopMove.stsIntlk.Sts_BypActive) ] XIC(wrkLoopMove.stsIntlk.Sts_NBIntlkOK) OTE(wrkLoopMove.stsIntlksOK) ];
				RC: "Settings for determining if the servo is in position. Use a tolerance band and delay times$N"
				    "";
				N: [LEQ(wrkLoopMove.cfgTolerance,0) MOV(cfgDefaultTolerance,wrkLoopMove.cfgTolerance) ,LES(wrkLoopMove.cfgAtPositionDelay,0) CLR(wrkLoopMove.cfgAtPositionDelay) ,MOV(wrkLoopMove.cfgAtPositionDelay,wrkLoopMove.tmrAtPosition.PRE) ];
				RC: "Calculate target position and in position window";
				N: [ADD(stsActualPosition,wrkLoopMove.cfgTolerance,wrkPositionMax) SUB(stsActualPosition,wrkLoopMove.cfgTolerance,wrkPositionMin) ,NEQ(wrkLoopMove.cfgType,wrkConstMoveInc) MOV(wrkLoopMove.cfgPosition,wrkTargetPosition) ,EQU(wrkLoopMove.cfgType,wrkConstMoveInc) ADD(wrkLoopMove.wrkLastPosition,wrkLoopMove.cfgPosition,wrkTargetPosition) ];
				RC: "If the travel mode is cyclic, take the unwind factor into account and recalculate target position and in position window$N"
				    "with cycle, max tolerance is half the unwind value";
				N: NEQ(wrkUnwindCycle,0)[CMP(wrkLoopMove.cfgTolerance > (wrkUnwindCycle/2)) DIV(wrkUnwindCycle,2,wrkLoopMove.cfgTolerance) ,ADD(stsActualPosition,wrkLoopMove.cfgTolerance,wrkPositionMax) SUB(stsActualPosition,wrkLoopMove.cfgTolerance,wrkPositionMin) ,GRT(wrkPositionMax,wrkUnwindCycle) SUB(wrkPositionMax,wrkUnwindCycle,wrkPositionMax) ,LES(wrkPositionMin,0) ADD(wrkPositionMin,wrkUnwindCycle,wrkPositionMin) ,MOD(wrkLoopMove.cfgPosition,wrkUnwindCycle,wrkTargetPosition) EQU(wrkLoopMove.cfgType,wrkConstMoveInc) CPT(wrkTargetPosition,(wrkLoopMove.wrkLastPosition + wrkLoopMove.cfgPosition) MOD wrkUnwindCycle) ];
				RC: "Calculate the position window and time delay for the servo to be considered at the position specified for this move$N"
				    "If in sim mode, use the simulated move completing as the condition, and stay $Qat this position$Q until a new move is commanded";
				N: [LIM(wrkPositionMin,wrkTargetPosition,wrkPositionMax) ,NEQ(wrkUnwindCycle,0) CMP(wrkLoopMove.cfgTolerance = (wrkUnwindCycle/2)) ][TON(wrkLoopMove.tmrAtPosition,?,?) ,XIC(wrkLoopMove.tmrAtPosition.DN) OTE(wrkLoopMove.stsAtPosition) ];
				RC: "Allow for teaching the position from the HMI for applicable move types (not incremental, jog)";
				N: XIC(wrkLoopMove.cmdTeachPosition)OTU(wrkLoopMove.cmdTeachPosition)NEQ(wrkLoopMove.cfgType,wrkConstMoveInc)NEQ(wrkLoopMove.cfgType,wrkConstJogPos)NEQ(wrkLoopMove.cfgType,wrkConstJogNeg)MOV(stsActualPosition,wrkLoopMove.cfgPosition);
				RC: "Ensure configured torques is positive. The AOI will invert that value when setting the negative torque limit.";
				N: LES(wrkLoopMove.cfgTorque,0)MUL(wrkLoopMove.cfgTorque,-1,wrkLoopMove.cfgTorque);
				RC: "Calculate distance to configured point based on axis$'s current location$N"
				    "Add 1 to loopindex for the next move to be evaluated on the next scan";
				N: OTU(wrkLoopMove.stsActive)SUB(stsActualPosition,wrkLoopMove.cfgPosition,wrkLoopMove.stsDistanceToTarget)COP(wrkLoopMove,inpServoMoves[wrkLoopIndex],1)ADD(1,wrkLoopIndex,wrkLoopIndex);
				RC: "Loop through to next move until whole array has been evaluated";
				N: XIC(cfgScanModeAll)LIM(1,wrkLoopIndex,wrkHighestIndex)JMP(LoopMove);
				RC: "************************************************************$N"
				    "Last Commanded Moves$N"
				    "************************************************************$N"
				    "$N"
				    "Hold info for the last commanded move and last commanded change dynamics for display on the HMI when something goes wrong";
				N: LBL(skipLoopMove)[LIM(wrkNumMoves,stsLastMoveIndex,0) CLR(stsLastMoveIndex) XIO(wrkCmdRequests.3) [XIO(stsHMIControl) ,XIO(stsJogPosFailed) ] XIO(wrkCmdRequests.4) [XIO(stsHMIControl) ,XIO(stsJogNegFailed) ] XIO(wrkCmdRequests.5) FLL(0,stsLastMove,1) ,[XIC(wrkCmdRequests.3) ,XIC(stsHMIControl) XIC(stsJogPosFailed) ] CLR(stsLastMoveIndex) COP(wrkOperJogPosMove,stsLastMove,1) ,[XIC(wrkCmdRequests.4) ,XIC(stsHMIControl) XIC(stsJogNegFailed) ] CLR(stsLastMoveIndex) COP(wrkOperJogNegMove,stsLastMove,1) ,XIC(wrkCmdRequests.5) CLR(stsLastMoveIndex) COP(wrkHomeMove,stsLastMove,1) ,XIO(wrkCmdRequests.3) XIO(wrkCmdRequests.4) XIO(wrkCmdRequests.5) COP(inpServoMoves[stsLastMoveIndex],stsLastMove,1) ];
				N: [LIM(wrkNumMoves,stsLastMCDIndex,0) FLL(0,stsLastMCD,1) CLR(stsLastMCDIndex) ,COP(inpServoMoves[stsLastMCDIndex],stsLastMCD,1) ];
				RC: "============================================================$N"
				    "Clear Active Move$N"
				    "============================================================$N"
				    "$N"
				    "Set ActiveMoveIndex to 0 when no move is active$N"
				    "Do not clear stsActiveMove when homing or jogging because permissives are copied into active move at those times";
				N: [XIO(wrkCmdRequests.0) XIO(wrkCmdRequests.1) XIO(wrkCmdRequests.2) [CLR(stsActiveMoveIndex) ,XIO(wrkCmdRequests.4) XIO(wrkCmdRequests.3) XIO(wrkCmdRequests.5) FLL(0,stsActiveMove,1) ] ,XIO(wrkCmdRequests.10) CLR(stsMCDMoveIndex) FLL(0,stsMCDMove,1) ];
				RC: "************************************************************$N"
				    "Mechanical Brake Override Control$N"
				    "************************************************************";
				N: XIC(inpEnableOperatorControl)XIC(ocmdBreakOverride)ONS(wrkBrakeOverrideONS1)[XIO(wrkBreakOverride) ONS(wrkBrakeOverrideONS2) OTL(wrkBreakOverride) ,XIC(wrkBreakOverride) XIO(wrkBrakeOverrideONS2) OTU(wrkBreakOverride) ];
				N: XIO(inpEnableOperatorControl)OTU(wrkBreakOverride);
				N: XIC(wrkBreakOverride)OTE(indBreakOverride);
				N: XIC(wrkBreakOverride)MOV(1,outBrakeOverride)SSV(Axis,inpAxis,MechanicalBrakeControl,outBrakeOverride);
				N: XIO(wrkBreakOverride)MOV(0,outBrakeOverride)SSV(Axis,inpAxis,MechanicalBrakeControl,outBrakeOverride);
				RC: "************************************************************$N"
				    "Mechanical Brake Status$N"
				    "************************************************************";
				N: GSV(Axis,inpAxis,MechanicalBrakeControl,stsBrakeStatus);
				N: XIC(stsBrakeStatus.0)OTE(stsBrakeOverriden);
				RC: "************************************************************$N"
				    "Axis Status$N"
				    "************************************************************$N"
				    "$N"
				    "These status define the overall behavior of the drive$'s internal state machine";
				N: MOV(inpAxis.CIPAxisState,stsAxisStatus)[EQU(stsAxisStatus,2) OTE(stsStopped) ,EQU(stsAxisStatus,4) OTE(stsRunning) ,[LIM(7,stsAxisStatus,8) ,GRT(inpAxis.AxisFault,0) ] OTE(stsAxisFaulted) ,[EQU(stsAxisStatus,9) ,EQU(stsAxisStatus,11) ] OTE(stsInhibited) ,EQU(stsAxisStatus,10) OTE(stsShutdown) ];
				RC: "Current motion statuses";
				N: [[XIC(inpAxis.HomingStatus) ,XIC(wrkCmdRequests.5) ] OTE(stsHoming) ,XIC(inpAxis.MoveStatus) XIO(wrkCmdRequests.5) OTE(stsMoving) ,XIC(inpAxis.JogStatus) XIO(wrkCmdRequests.5) OTE(stsJogging) ,XIO(inpAxis.HomingStatus) XIO(inpAxis.MoveStatus) XIO(inpAxis.JogStatus) XIO(wrkCmdRequests.5) OTE(stsIdle) ,MOV(inpAxis.ActualPosition,stsActualPosition) MOV(inpAxis.ActualVelocity,stsActualSpeed) MOV(inpAxis.CurrentFeedback,stsActualTorque) ];
				RC: "Check if the travel mode is cyclic, if so then calculate the unwind value for use in calculating the target position$N"
				    "This only needs to be checked every time the servo is turned on since the servo must be turned off to make a change to these parameters";
				N: XIC(stsRunning)ONS(wrkTravelModeONS)[GSV(Axis,inpAxis,TravelMode,wrkTravelMode) GSV(Axis,inpAxis,PositionUnwindNumerator,wrkPosUnwindNum) GSV(Axis,inpAxis,PositionUnwindDenominator,wrkPosUnwindDenom) ,CLR(wrkUnwindCycle) EQU(wrkTravelMode,wrkConstCyclicMode) NEQ(wrkPosUnwindDenom,0) DIV(wrkPosUnwindNum,wrkPosUnwindDenom,wrkUnwindCycle) ];
				RC: "************************************************************$N"
				    "AOI Mode$N"
				    "************************************************************$N"
				    "$N"
				    "Auto accepts program commands only$N"
				    "Manual accepts HMI only$N"
				    "Throw a fault if a command is sent in the wrong mode$N"
				    "Unlatch all commands with the following exceptions:$N"
				    "operator (o) jog commands because must be held high$N"
				    "ocmdStart when an operator is executing a jog type move";
				N: [XIC(inpEnableOperatorControl) [OTE(stsHMIControl) MOV(ocmdMoveSelect,wrkMoveSelect) MOV(wrkOcmds,wrkCmds) ,GRT(wrkPcmds,0) OTL(stsFaultProgramControlNOK) ] ,XIO(inpEnableOperatorControl) [OTE(stsProgramControl) MOV(pcmdMoveSelect,wrkMoveSelect) MOV(wrkPcmds,wrkCmds) ,GRT(wrkOcmds,0) OTL(stsFaultOperatorControlNOK) ] ,CLR(wrkPcmds) OTU(wrkOcmds.0) OTU(wrkOcmds.1) OTU(wrkOcmds.2) OTU(wrkOcmds.3) OTU(wrkOcmds.7) OTU(wrkOcmds.8) ,XIC(wrkOcmds.6) [ONS(wrkOperStartJogONS) LIM(1,ocmdMoveSelect,wrkHighestIndex) OTE(wrkOperJoggingOS) NEQ(inpServoMoves[ocmdMoveSelect].cfgType,wrkConstJogPos) NEQ(inpServoMoves[ocmdMoveSelect].cfgType,wrkConstJogNeg) ,XIO(wrkOperJoggingOS) NEQ(stsActiveMove.cfgType,wrkConstJogPos) NEQ(stsActiveMove.cfgType,wrkConstJogNeg) ] OTU(wrkOcmds.6) ];
				RC: "************************************************************$N"
				    "Auto Stop or Reset and Turn On Servo $N"
				    "on Safety Status$N"
				    "************************************************************";
				N: [XIC(inpSafetyOK) ONS(wrkAutoTurnOnONS) XIC(cfgSafetyAutoCmdOn) OTL(wrkCmds.3) ,XIO(inpSafetyOK) ONS(wrkAutoStopONS) OTL(wrkCmds.1) ];
				RC: "************************************************************$N"
				    "Clear Faults and Results$N"
				    "************************************************************$N"
				    "$N"
				    "cmdClearResults clears all results$N"
				    "New command clears faults and results";
				N: [XIC(wrkCmds.8) OTU(wrkCmds.8) CLR(wrkResults) ,GRT(wrkCmds,0) ONS(wrkClearFaultsONS) CLR(wrkResults) CLR(wrkFaults) ];
				RC: "************************************************************$N"
				    "Move Select Checking$N"
				    "************************************************************$N"
				    "$N"
				    "Check if MoveSelect is a valid index and configured type is valid$N"
				    "Selected array index must be within limits of array length and non-zero. Check now to ensure bad index does not cause controller fault$N"
				    "Do not allow start commands if selected move is invalid$N"
				    "Throw a fault if this happens";
				N: [LIM(1,wrkMoveSelect,wrkHighestIndex) LIM(wrkConstMoveAbs,inpServoMoves[wrkMoveSelect].cfgType,wrkConstChangeDynamics) OTE(wrkValidIndexAndType) ,XIO(wrkValidIndexAndType) [XIC(wrkCmds.6) OTU(wrkCmds.6) OTL(stsFaultInvalidMove) ,CLR(wrkMoveSelect) ] ];
				RC: "Check for new moves selected that may be MCD$N"
				    "Selecting an MCD will execute it without needing to issue cmdStart if a move was already in progress";
				N: NEQ(wrkMoveSelect,wrkMoveSelectMem)MOV(wrkMoveSelect,wrkMoveSelectMem)EQU(inpServoMoves[wrkMoveSelect].cfgType,wrkConstChangeDynamics)OTE(wrkNewMCDMoveSelected);
				RC: "************************************************************$N"
				    "Reject Commands While Busy$N"
				    "************************************************************$N"
				    "$N"
				    "Only accept commands when no other action is in progress$N"
				    "Stop, Off, and Change Dynamics commands are exceptions";
				N: [XIO(stsIdle) ,GRT(wrkCmdRequests,0) ]OTU(wrkCmds.2)OTU(wrkCmds.3)OTU(wrkCmds.4)OTU(wrkCmds.5)OTU(wrkCmds.6)OTU(wrkCmds.7);
				RC: "************************************************************$N"
				    "Check For Active Requests or Commands$N"
				    "************************************************************$N"
				    "$N"
				    "If there is no active move happening or new commands, skip to the end of the AOI";
				N: EQU(wrkCmds,0)EQU(wrkCmdRequests,0)XIO(wrkNewMCDMoveSelected)CLR(wrkResetTurnOnONS)CLR(wrkHomeONS)CLR(wrkMoveONS)CLR(wrkStopONS)CLR(wrkOffONS)JMP(skipAllCommandLogic);
				RC: "************************************************************$N"
				    "Prioritize Simultaneous Commands$N"
				    "************************************************************$N"
				    "When a cmd is received, unlatch all other commands in the following priority order. Priority is determined by the order of the branches$N"
				    "Priority 1: Off$N"
				    "Priority 2: Stop$N"
				    "Priority 3: Reset$N"
				    "Priority 4: On$N"
				    "Priority 5: Jog$N"
				    "Priority 6: Move$N"
				    "Priority 7: Home";
				N: [XIC(wrkCmds.0) CLR(wrkCmds) OTL(wrkCmds.0) ,XIC(wrkCmds.1) CLR(wrkCmds) OTL(wrkCmds.1) ,XIC(wrkCmds.2) CLR(wrkCmds) OTL(wrkCmds.2) ,XIC(wrkCmds.3) CLR(wrkCmds) OTL(wrkCmds.3) ,XIC(wrkCmds.4) CLR(wrkCmds) OTL(wrkCmds.4) ,XIC(wrkCmds.5) CLR(wrkCmds) OTL(wrkCmds.5) ,XIC(wrkCmds.6) CLR(wrkCmds) OTL(wrkCmds.6) ,XIC(wrkCmds.7) CLR(wrkCmds) OTL(wrkCmds.7) ];
				RC: "************************************************************$N"
				    "Turning On & Resetting Axis$N"
				    "************************************************************$N"
				    "$N"
				    "Skip over turn on logic if no new turn on commanded or active";
				N: XIO(wrkCmds.2)XIO(wrkCmdRequests.8)XIO(wrkCmds.3)XIO(wrkCmdRequests.9)CLR(wrkResetTurnOnONS)JMP(skipReset);
				RC: "Reset on program or operator reset commands$N"
				    "If configured to auto reset on safety, the first transition to a safe state will initiate a servo reset";
				N: ONS(wrkResetTurnOnONS.0)FLL(0,wrkMI.MASR,1)FLL(0,wrkMI.MAFR,1)FLL(0,wrkMI.MSO,1)[XIC(wrkCmds.2) OTL(wrkCmdRequests.8) ,XIC(wrkCmds.3) OTL(wrkCmdRequests.9) ];
				RC: "On reset, perform MASR and/or MAFR depending on the state of the servo in order to get the servo back to a stopped state$N"
				    "Once in the stopped state, turn on the servo$N"
				    "The reset attempt will timeout after 5 seconds if this fails and throw a fault$N"
				    "Also clear out all Motion Instructions in case one got hung up";
				N: [XIC(wrkCmdRequests.8) ,XIC(wrkCmdRequests.9) ][ONS(wrkResetTurnOnONS.1) [GEQ(wrkHTTStep,120) OTL(wrkReloadSavedSettings) ,FLL(0,wrkMI,1) CLR(wrkHTTStep) [XIC(wrkCmdRequests.8) CLR(wrkCmdRequests) OTL(wrkCmdRequests.8) ,XIC(wrkCmdRequests.9) CLR(wrkCmdRequests) OTL(wrkCmdRequests.9) ] ] ,[XIC(stsShutdown) MASR(inpAxis,wrkMI.MASR) ,XIC(stsAxisFaulted) MAFR(inpAxis,wrkMI.MAFR) ,XIC(stsStopped) XIC(wrkCmdRequests.9) MSO(inpAxis,wrkMI.MSO) ,[XIC(wrkMI.MASR.EN) XIC(wrkMI.MASR.ER) ,XIC(wrkMI.MAFR.EN) XIC(wrkMI.MAFR.ER) ,XIC(wrkMI.MSO.EN) XIC(wrkMI.MSO.ER) ,XIC(wrkResetTurnOnFailTON.DN) ] [XIC(wrkCmdRequests.8) OTL(stsResetFailed) OTU(stsResetComplete) OTU(wrkCmdRequests.8) ,XIC(wrkCmdRequests.9) OTL(stsTurnOnFailed) OTU(stsTurnOnComplete) OTU(wrkCmdRequests.9) ] ,XIC(wrkCmdRequests.8) [XIC(stsStopped) ,XIC(stsRunning) ] OTL(stsResetComplete) OTU(stsResetFailed) OTU(wrkCmdRequests.8) ,XIC(wrkCmdRequests.9) XIC(stsRunning) OTL(stsTurnOnComplete) OTU(stsTurnOnFailed) OTU(wrkCmdRequests.9) ] ];
				RC: "************************************************************$N"
				    "Homing Axis$N"
				    "************************************************************$N"
				    "$N"
				    "Skip over homing logic if no new home commanded or active";
				N: LBL(skipReset)XIO(wrkCmds.7)XIO(wrkCmdRequests.5)EQU(wrkHTTStep,0)CLR(wrkHomeONS)JMP(skipHome);
				RC: "Home on program or operator home commands$N"
				    "Throw faults if Perms or Intlks are bad$N"
				    "Save configured home sequence to check if it is a home to torque type sequence";
				N: ONS(wrkHomeONS.0)[CLR(stsActiveMoveIndex) COP(wrkHomeMove,stsActiveMove,1) FLL(0,wrkMI.HomeMAS,1) FLL(0,wrkMI.HomeToTorqueMAS,1) ,FLL(0,wrkMI.MAH,1) FLL(0,wrkMI.HomeToTorqueMAH,1) FLL(0,wrkMI.HomeToTorqueMAJ,1) FLL(0,wrkMI.HomeToTorqueMAM,1) ,XIO(wrkHomeMove.stsPermsOK) OTL(stsFaultMovePermNOK) ,XIO(wrkHomeMove.stsIntlksOK) OTL(stsFaultMoveIntlkNOK) ,XIC(wrkHomeMove.stsPermsOK) XIC(wrkHomeMove.stsIntlksOK) [SSV(Axis,inpAxis,HomePosition,cfgHomePositionReference) GSV(Axis,inpAxis,HomeSequence,wrkSavedHomeSeq) OTL(wrkCmdRequests.5) ,CLR(stsLastMoveIndex) COP(wrkHomeMove,stsLastMove,1) ,MOV(10,wrkHTTStep) ] ];
				RC: "Stop homing motion if interlocks are tripped$N"
				    "Throw a fault and set bad homing result status";
				N: [[XIC(wrkCmdRequests.5) ,XIC(stsHoming) ] XIO(wrkHomeMove.stsIntlksOK) OTL(stsFaultMoveIntlkNOK) ,XIC(stsAxisFaulted) ,XIO(stsRunning) ][OTL(stsHomingFailed) OTU(stsHomingComplete) OTU(wrkCmdRequests.5) ,GEQ(wrkHTTStep,120) OTL(wrkReloadSavedSettings) ,CLR(wrkHTTStep) MAS(inpAxis,wrkMI.HomeMAS,All,Yes,cfgStopDecelPercentMax,% of Maximum,Yes,cfgStopJerkPercentMax,% of Maximum) ];
				RC: "************************************************************$N"
				    "Homing Sequence$N"
				    "************************************************************$N"
				    "$N"
				    "For non-home to torque, simply execute a MAH instruction and finish.$N"
				    "Jump to step 100 for manual homing to torque (jogging while monitoring torque)$N"
				    "or for when the drive is configured for homing to torque because we still need to do SSVs to turn of soft overtravel, etc.";
				N: EQU(wrkHTTStep,10)[CLR(stsLastMCDIndex) CLR(stsLastMoveIndex) COP(wrkHomeMove,stsLastMove,1) ,LEQ(wrkSavedHomeSeq,3) XIO(cfgHomeToTorque) MOV(20,wrkHTTStep) ,[XIC(cfgHomeToTorque) ,GRT(wrkSavedHomeSeq,3) ] MOV(100,wrkHTTStep) ];
				RC: "Simply run an MAH instruction";
				N: EQU(wrkHTTStep,20)[SSV(Axis,inpAxis,TorqueLimitPositive,cfgHomingTorque) MUL(cfgHomingTorque,-1,wrkTempTorqueLimNeg) SSV(Axis,inpAxis,TorqueLimitNegative,wrkTempTorqueLimNeg) ,MAH(inpAxis,wrkMI.MAH) ,[XIC(wrkMI.MAH.PC) OTL(stsHomingComplete) OTU(stsHomingFailed) ,XIC(wrkMI.MAH.ER) OTL(stsHomingFailed) OTU(stsHomingComplete) ] OTU(wrkCmdRequests.5) CLR(wrkHTTStep) ];
				RC: "Save axis settings that will be changed during homing to torque so that they can be put back after.$N"
				    "Check if drive is configured to a home to torque style move. If it is, the MAJ and MAM steps can be skipped";
				N: EQU(wrkHTTStep,100)[GSV(Axis,inpAxis,SoftTravelLimitChecking,wrkSavedSoftOTChecking) GSV(Axis,inpAxis,PositionErrorTolerance,wrkSavedPosErrorTol) GSV(Axis,inpAxis,VelocityErrorTolerance,wrkSavedVelErrorTol) ,GSV(Axis,inpAxis,TorqueLimitPositive,wrkSavedTorqueLimPos) GSV(Axis,inpAxis,TorqueLimitNegative,wrkSavedTorqueLimNeg) ,GSV(Axis,inpAxis,HomeSequence,wrkSavedHomeSeq) OTU(wrkDriveConfiguredForHTT) LIM(4,wrkSavedHomeSeq,5) OTL(wrkDriveConfiguredForHTT) ]MOV(110,wrkHTTStep);
				RC: "Check configured homing to torque settings input into this AOI, fault if something out of range";
				N: EQU(wrkHTTStep,110)MOV(120,wrkHTTStep)[GRT(cfgHomeToTorqueTorqueTarget,wrkHomeToTorqueMax) ,LES(cfgHomeToTorqueTorqueTarget,0) ,LEQ(cfgHomeToTorquePosErrorTarget,0) ,LES(cfgHomeToTorquePosOffset,0) ,LEQ(cfgHomeToTorqueSpeed,0) ,LEQ(cfgHomeToTorqueAccel,0) ,LEQ(cfgHomeToTorqueDecel,0) ,LES(cfgHomeToTorqueAccelJerk,0) ,LES(cfgHomeToTorqueDecelJerk,0) ,NEQ(cfgHomeToTorqueDir,0) NEQ(cfgHomeToTorqueDir,1) ]XIO(wrkDriveConfiguredForHTT)OTL(stsFaultHomeToTorqueConfig)OTL(stsHomingFailed)OTU(stsHomingComplete)OTU(wrkCmdRequests.5)CLR(wrkHTTStep);
				RC: "Open up position and velocity error tolerance so that axis doesn$'t fault while reaching homing torque$N"
				    "Disable soft overtravel checking so that the servo does not fault before we reach the hard stop$N"
				    "Also set torque limits to 10% above specified homing torque to prevent over-torque fault$N"
				    "Change homing sequence to immeditate if it is not a home to torque style homing";
				N: EQU(wrkHTTStep,120)[SSV(Axis,inpAxis,SoftTravelLimitChecking,wrkTempSoftOTChecking) ,MUL(wrkSavedPosErrorTol,10,wrkTempPosErrorTol) SSV(Axis,inpAxis,PositionErrorTolerance,wrkTempPosErrorTol) ,MUL(wrkSavedVelErrorTol,10,wrkTempVelErrorTol) SSV(Axis,inpAxis,VelocityErrorTolerance,wrkTempVelErrorTol) ,SSV(Axis,inpAxis,TorqueLimitPositive,cfgHomeToTorqueTorqueTarget) MUL(cfgHomeToTorqueTorqueTarget,-1,wrkTempTorqueLimNeg) SSV(Axis,inpAxis,TorqueLimitNegative,wrkTempTorqueLimNeg) ,XIO(wrkDriveConfiguredForHTT) SSV(Axis,inpAxis,HomeSequence,wrkTempHomeSeq) ]MOV(130,wrkHTTStep);
				RC: "Double check that system values changed as expected$N"
				    "If drive is configured for a home to torque style homing sequence, skip to the MAH step";
				N: EQU(wrkHTTStep,130)[GSV(Axis,inpAxis,SoftTravelLimitChecking,wrkCurSoftOTChecking) GSV(Axis,inpAxis,PositionErrorTolerance,wrkCurPosErrorTol) GSV(Axis,inpAxis,VelocityErrorTolerance,wrkCurVelErrorTol) GSV(Axis,inpAxis,TorqueLimitPositive,wrkCurTorqueLimPos) GSV(Axis,inpAxis,TorqueLimitNegative,wrkCurTorqueLimNeg) GSV(Axis,inpAxis,HomeSequence,wrkCurHomeSeq) ,EQU(wrkCurSoftOTChecking,wrkTempSoftOTChecking) EQU(wrkCurPosErrorTol,wrkTempPosErrorTol) EQU(wrkCurVelErrorTol,wrkTempVelErrorTol) EQU(wrkCurTorqueLimPos,cfgHomeToTorqueTorqueTarget) EQU(wrkCurTorqueLimNeg,wrkTempTorqueLimNeg) EQU(wrkCurHomeSeq,wrkTempHomeSeq) [XIO(wrkDriveConfiguredForHTT) MOV(140,wrkHTTStep) ,XIC(wrkDriveConfiguredForHTT) MOV(170,wrkHTTStep) ] ,NEQ(wrkHTTStep,140) NEQ(wrkHTTStep,170) OTL(stsFaultHomeToTorqueSystemChange) MOV(900,wrkHTTStep) ];
				RC: "Start jogging in the specified direction at the specified settings$N"
				    "If fails, throw fault";
				N: EQU(wrkHTTStep,140)[MUL(cfgHomeToTorqueSpeed,cfgSpeedMultiplier,wrkHomeToTorqueSpeed) MUL(cfgHomeToTorqueAccel,cfgSpeedMultiplier,wrkHomeToTorqueAccel) MUL(cfgHomeToTorqueDecel,cfgSpeedMultiplier,wrkHomeToTorqueDecel) ,MUL(cfgHomeToTorqueAccelJerk,cfgSpeedMultiplier,wrkHomeToTorqueAccelJerk) MUL(cfgHomeToTorqueDecelJerk,cfgSpeedMultiplier,wrkHomeToTorqueDecelJerk) ,MAJ(inpAxis,wrkMI.HomeToTorqueMAJ,cfgHomeToTorqueDir,wrkHomeToTorqueSpeed,Units per sec,wrkHomeToTorqueAccel,Units per sec2,wrkHomeToTorqueDecel,Units per sec2,S-Curve,wrkHomeToTorqueAccelJerk,wrkHomeToTorqueDecelJerk,Units per sec3,Disabled,Programmed,0,None) ,XIC(wrkMI.HomeToTorqueMAJ.DN) MOV(150,wrkHTTStep) ,XIC(wrkMI.HomeToTorqueMAJ.ER) MOV(900,wrkHTTStep) ];
				RC: "Stop when torque feedback reaches specified torque level$N"
				    "If torque level is not updating, stop and throw fault$N"
				    "If somehow no longer jogging or axis faults, stop and throw fault";
				N: EQU(wrkHTTStep,150)[MOV(500,tmrPosErrorReached.PRE) MOV(500,tmrPosErrorFeedbackBad.PRE) MOV(500,tmrJoggingFailed.PRE) ,[MUL(cfgHomeToTorquePosErrorTarget,-1,wrkNegPosErrorTarget) LIM(cfgHomeToTorquePosErrorTarget,inpAxis.PositionError,wrkNegPosErrorTarget) TON(tmrPosErrorReached,?,?) XIC(tmrPosErrorReached.DN) MOV(160,wrkHTTStep) ,[EQU(inpAxis.PositionError,0) TON(tmrPosErrorFeedbackBad,?,?) XIC(tmrPosErrorFeedbackBad.DN) OTL(stsFaultHomeToTorqueNoFeedback) ,XIO(inpAxis.JogStatus) TON(tmrJoggingFailed,?,?) XIC(tmrJoggingFailed.DN) ,XIC(stsAxisFaulted) ] MOV(900,wrkHTTStep) ] MAS(inpAxis,wrkMI.HomeToTorqueMAS,All,No,0,Units per sec2,No,0,Units per sec3) ];
				RC: "Move back off of hard stop by specified position offset$N"
				    "throw fault if fails";
				N: EQU(wrkHTTStep,160)[XIC(wrkMI.HomeToTorqueMAS.ER) MOV(900,wrkHTTStep) ,XIC(wrkMI.HomeToTorqueMAS.DN) MOV(cfgHomeToTorquePosOffset,wrkHTTPosOffset) TON(tmrHomeStopDelay,?,?) ,XIC(tmrHomeStopDelay.DN) [EQU(cfgHomeToTorqueDir,0) GRT(cfgHomeToTorquePosOffset,0) MUL(cfgHomeToTorquePosOffset,-1,wrkHTTPosOffset) ,EQU(cfgHomeToTorqueDir,1) LES(cfgHomeToTorquePosOffset,0) MUL(cfgHomeToTorquePosOffset,-1,wrkHTTPosOffset) ,MUL(cfgHomeToTorqueSpeed,cfgSpeedMultiplier,wrkHomeToTorqueSpeed) MUL(cfgHomeToTorqueAccel,cfgSpeedMultiplier,wrkHomeToTorqueAccel) MUL(cfgHomeToTorqueDecel,cfgSpeedMultiplier,wrkHomeToTorqueDecel) ,MUL(cfgHomeToTorqueAccelJerk,cfgSpeedMultiplier,wrkHomeToTorqueAccelJerk) MUL(cfgHomeToTorqueDecelJerk,cfgSpeedMultiplier,wrkHomeToTorqueDecelJerk) ,MAM(inpAxis,wrkMI.HomeToTorqueMAM,1,wrkHTTPosOffset,wrkHomeToTorqueSpeed,Units per sec,wrkHomeToTorqueAccel,Units per sec2,wrkHomeToTorqueDecel,Units per sec2,S-Curve,wrkHomeToTorqueAccelJerk,wrkHomeToTorqueDecelJerk,Units per sec3,Disabled,Programmed,0,None,0,0) ,XIC(wrkMI.HomeToTorqueMAM.PC) MOV(170,wrkHTTStep) ,XIC(wrkMI.HomeToTorqueMAM.ER) MOV(900,wrkHTTStep) ] ];
				RC: "Home axis$N"
				    "If drive is configured for home to torque, this starts the drive$'s home to torque sequence.$N"
				    "Else, it does an immediate home";
				N: EQU(wrkHTTStep,170)[MAH(inpAxis,wrkMI.HomeToTorqueMAH) ,XIC(wrkMI.HomeToTorqueMAH.DN) MOV(180,wrkHTTStep) ,XIC(wrkMI.HomeToTorqueMAH.ER) MOV(900,wrkHTTStep) ];
				RC: "Homing to Torque Completed$N"
				    "Return axis settings to previous settings before homing to torque was initiated";
				N: EQU(wrkHTTStep,180)[SSV(Axis,inpAxis,SoftTravelLimitChecking,wrkSavedSoftOTChecking) SSV(Axis,inpAxis,PositionErrorTolerance,wrkSavedPosErrorTol) SSV(Axis,inpAxis,VelocityErrorTolerance,wrkSavedVelErrorTol) ,SSV(Axis,inpAxis,HomeSequence,wrkSavedHomeSeq) SSV(Axis,inpAxis,TorqueLimitPositive,wrkSavedTorqueLimPos) SSV(Axis,inpAxis,TorqueLimitNegative,wrkSavedTorqueLimNeg) ,OTL(stsHomingComplete) OTU(stsHomingFailed) OTU(wrkCmdRequests.5) CLR(wrkHTTStep) ];
				RC: "Homing to Torque Failed$N"
				    "Return axis settings to previous settings before homing to torque was initiated";
				N: EQU(wrkHTTStep,900)[SSV(Axis,inpAxis,SoftTravelLimitChecking,wrkSavedSoftOTChecking) SSV(Axis,inpAxis,PositionErrorTolerance,wrkSavedPosErrorTol) SSV(Axis,inpAxis,VelocityErrorTolerance,wrkSavedVelErrorTol) ,SSV(Axis,inpAxis,HomeSequence,wrkSavedHomeSeq) SSV(Axis,inpAxis,TorqueLimitPositive,wrkSavedTorqueLimPos) SSV(Axis,inpAxis,TorqueLimitNegative,wrkSavedTorqueLimNeg) ,OTL(stsHomingFailed) OTU(stsHomingComplete) OTU(wrkCmdRequests.5) CLR(wrkHTTStep) ];
				RC: "************************************************************$N"
				    "Move Axis$N"
				    "************************************************************$N"
				    "$N"
				    "Skip over move logic if no new start commanded or active";
				N: LBL(skipHome)[XIO(wrkCmds.5) XIO(wrkCmds.4) XIO(wrkCmds.6) XIO(wrkCmdRequests.0) XIO(wrkCmdRequests.1) XIO(wrkCmdRequests.2) XIO(wrkCmdRequests.3) XIO(wrkCmdRequests.4) XIO(wrkCmdRequests.10) XIO(wrkNewMCDMoveSelected) ,XIC(inpMAG_Enbld) ]CLR(wrkMoveONS)JMP(skipMove);
				N: ONS(wrkMoveONS.0)[FLL(0,wrkMI.MoveMAM,1) FLL(0,wrkMI.MoveMAS,1) ,FLL(0,wrkMI.ProgPosMAJ,1) FLL(0,wrkMI.ProgNegMAJ,1) ,FLL(0,wrkMI.OperPosMAJ,1) FLL(0,wrkMI.OperNegMAJ,1) FLL(0,wrkMI.JogMAS,1) ,FLL(0,wrkMI.JogMCD,1) FLL(0,wrkMI.MoveMCD,1) ];
				RC: "Check Permissives and Interlocks at start of move$N"
				    "Copy selected index of inpAxisMoves into Requested Move tag and throw faults if perms and/or intlks not ok";
				N: [XIC(wrkCmds.6) ONS(wrkMoveONS.1) ,XIC(wrkNewMCDMoveSelected) ONS(wrkMoveONS.2) ][NEQ(inpServoMoves[wrkMoveSelect].cfgType,wrkConstChangeDynamics) [MOV(wrkMoveSelect,stsActiveMoveIndex) COP(inpServoMoves[wrkMoveSelect],stsActiveMove,1) ,CLR(stsLastMCDIndex) MOV(wrkMoveSelect,stsLastMoveIndex) COP(inpServoMoves[wrkMoveSelect],stsLastMove,1) ,XIC(stsActiveMove.stsPermsOK) XIC(stsActiveMove.stsIntlksOK) [MOV(stsActualPosition,inpServoMoves[stsActiveMoveIndex].wrkLastPosition) ,LIM(wrkConstMoveAbs,stsActiveMove.cfgType,wrkConstMoveRNeg) RES(tmrMoveFail) OTL(wrkCmdRequests.0) ,EQU(stsActiveMove.cfgType,wrkConstJogPos) OTL(wrkCmdRequests.1) ,EQU(stsActiveMove.cfgType,wrkConstJogNeg) OTL(wrkCmdRequests.2) ] ,XIO(stsActiveMove.stsPermsOK) OTL(stsFaultMovePermNOK) ,XIO(stsActiveMove.stsIntlksOK) OTL(stsFaultMoveIntlkNOK) ] ,EQU(inpServoMoves[wrkMoveSelect].cfgType,wrkConstChangeDynamics) [MOV(wrkMoveSelect,stsMCDMoveIndex) COP(inpServoMoves[wrkMoveSelect],stsMCDMove,1) ,MOV(wrkMoveSelect,stsLastMCDIndex) COP(inpServoMoves[wrkMoveSelect],stsLastMCD,1) ,XIC(stsMCDMove.stsPermsOK) XIC(stsMCDMove.stsIntlksOK) [MOV(stsActualPosition,inpServoMoves[stsMCDMoveIndex].wrkLastPosition) ,OTU(stsChangeDynamicsComplete) OTU(stsChangeDynamicsFailed) ,OTL(wrkCmdRequests.10) ] ,XIO(stsMCDMove.stsPermsOK) OTL(stsFaultMovePermNOK) ,XIO(stsMCDMove.stsIntlksOK) OTL(stsFaultMoveIntlkNOK) ] ];
				RC: "************************************************************$N"
				    "Motion Axis Move$N"
				    "************************************************************$N"
				    "$N"
				    "Set configured torque once and then only when the configured torque for that move changes value$N"
				    "Move successful when instruction completes and the axis is in the configured position$N"
				    "Fail on an instruction error or if the axis is not in the configured position for 2 seconds after the insctruction completed";
				N: XIC(wrkCmdRequests.0)[ONS(wrkMoveONS.3) MOV(stsActiveMove.cfgTorque,inpAxis.TorqueLimitPositive) MUL(stsActiveMove.cfgTorque,-1,inpAxis.TorqueLimitNegative) MOV(stsActiveMove.cfgTorque,wrkLastTorque) ,NEQ(stsActiveMove.cfgTorque,wrkLastTorque) MOV(stsActiveMove.cfgTorque,inpAxis.TorqueLimitPositive) MUL(stsActiveMove.cfgTorque,-1,inpAxis.TorqueLimitNegative) MOV(stsActiveMove.cfgTorque,wrkLastTorque) ,MUL(stsActiveMove.cfgSpeed,cfgSpeedMultiplier,wrkMAMSpeed) MUL(stsActiveMove.cfgAccel,cfgSpeedMultiplier,wrkMAMAccel) MUL(stsActiveMove.cfgDecel,cfgSpeedMultiplier,wrkMAMDecel) MUL(stsActiveMove.cfgAccelJerk,cfgSpeedMultiplier,wrkMAMAccelJerk) MUL(stsActiveMove.cfgDecelJerk,cfgSpeedMultiplier,wrkMAMDecelJerk) ,ADD(stsActiveMove.tmrAtPosition.PRE,2000,tmrMoveFail.PRE) SUB(stsActiveMove.cfgType,1,wrkMoveType) MAM(inpAxis,wrkMI.MoveMAM,wrkMoveType,stsActiveMove.cfgPosition,wrkMAMSpeed,Units per sec,wrkMAMAccel,Units per sec2,wrkMAMDecel,Units per sec2,S-Curve,wrkMAMAccelJerk,wrkMAMDecelJerk,Units per sec3,Disabled,Programmed,0,None,0,0) ,[XIC(wrkMI.MoveMAM.PC) [XIC(stsActiveMove.stsAtPosition) OTL(stsMoveComplete) OTU(stsMoveFailed) ,XIO(stsActiveMove.stsAtPosition) TON(tmrMoveFail,?,?) XIC(tmrMoveFail.DN) OTL(stsMoveFailed) OTU(stsMoveComplete) ] ,XIC(wrkMI.MoveMAM.ER) OTL(stsMoveFailed) OTU(stsMoveComplete) ] OTU(wrkCmdRequests.0) ];
				RC: "************************************************************$N"
				    "Program Motion Axis Jog$N"
				    "************************************************************$N"
				    "$N"
				    "Set configured torque once and then only when the configured torque for that move changes value";
				N: [XIC(wrkCmdRequests.1) ,XIC(wrkCmdRequests.2) ][ONS(wrkMoveONS.4) MOV(stsActiveMove.cfgTorque,inpAxis.TorqueLimitPositive) MUL(stsActiveMove.cfgTorque,-1,inpAxis.TorqueLimitNegative) MOV(stsActiveMove.cfgTorque,wrkLastTorque) ,NEQ(stsActiveMove.cfgTorque,wrkLastTorque) MOV(stsActiveMove.cfgTorque,inpAxis.TorqueLimitPositive) MUL(stsActiveMove.cfgTorque,-1,inpAxis.TorqueLimitNegative) MOV(stsActiveMove.cfgTorque,wrkLastTorque) ,MUL(stsActiveMove.cfgSpeed,cfgSpeedMultiplier,wrkProgMAJSpeed) MUL(stsActiveMove.cfgAccel,cfgSpeedMultiplier,wrkProgMAJAccel) MUL(stsActiveMove.cfgDecel,cfgSpeedMultiplier,wrkProgMAJDecel) MUL(stsActiveMove.cfgAccelJerk,cfgSpeedMultiplier,wrkProgMAJAccelJerk) MUL(stsActiveMove.cfgDecelJerk,cfgSpeedMultiplier,wrkProgMAJDecelJerk) ,XIC(wrkCmdRequests.1) [MAJ(inpAxis,wrkMI.ProgPosMAJ,0,wrkProgMAJSpeed,Units per sec,wrkProgMAJAccel,Units per sec2,wrkProgMAJDecel,Units per sec2,S-Curve,wrkProgMAJAccelJerk,wrkProgMAJDecelJerk,Units per sec3,Disabled,Programmed,0,None) ,XIC(wrkMI.ProgPosMAJ.ER) OTL(stsJogPosFailed) ] ,XIC(wrkCmdRequests.2) [MAJ(inpAxis,wrkMI.ProgNegMAJ,1,wrkProgMAJSpeed,Units per sec,wrkProgMAJAccel,Units per sec2,wrkProgMAJDecel,Units per sec2,S-Curve,wrkProgMAJAccelJerk,wrkProgMAJDecelJerk,Units per sec3,Disabled,Programmed,0,None) ,XIC(wrkMI.ProgNegMAJ.ER) OTL(stsJogNegFailed) ] ];
				RC: "************************************************************$N"
				    "MAM & Program MAJ Interlock Checking$N"
				    "************************************************************$N"
				    "$N"
				    "If interlocks go bad, stop the MAM or MAJ$N"
				    "If it was a prorammed jog move being executed from the HMI by an operator, stop it as soon as the operator releases the start button$N"
				    "If it was executed by the teach pendant GO button then stop as soon as the operator releases the GO button";
				N: [XIC(wrkCmdRequests.0) ,XIC(wrkCmdRequests.1) ,XIC(wrkCmdRequests.2) ][[XIO(stsActiveMove.stsIntlksOK) OTL(stsFaultMoveIntlkNOK) ,XIC(stsAxisFaulted) ,XIO(stsRunning) ] [XIC(wrkCmdRequests.0) OTL(stsMoveFailed) ,XIC(wrkCmdRequests.1) OTL(stsJogPosFailed) ,XIC(wrkCmdRequests.2) OTL(stsJogNegFailed) ] ,XIC(stsHMIControl) [XIC(wrkCmdRequests.1) ,XIC(wrkCmdRequests.2) ] XIO(wrkOcmds.6) ][OTU(wrkCmdRequests.0) OTU(wrkCmdRequests.1) OTU(wrkCmdRequests.2) ,MAS(inpAxis,wrkMI.MoveMAS,All,Yes,cfgStopDecelPercentMax,% of Maximum,Yes,cfgStopJerkPercentMax,% of Maximum) ];
				RC: "************************************************************$N"
				    "Operator Jogging$N"
				    "************************************************************$N"
				    "$N"
				    "Jog on operator jog commands$N"
				    "Throw faults if AOI is not in correct mode to accept the command$N"
				    "The program or operator must hold the command high for the duration of the jog (OTE)$N"
				    "The AOI will stop jogging when the operator stops commanding a jog";
				N: [XIC(wrkCmds.4) ONS(wrkMoveONS.5) XIO(wrkCmds.5) [CLR(stsActiveMoveIndex) COP(wrkOperJogPosMove,stsActiveMove,1) ,XIC(wrkOperJogPosMove.stsPermsOK) XIC(wrkOperJogPosMove.stsIntlksOK) OTL(wrkCmdRequests.3) ,XIO(wrkOperJogPosMove.stsPermsOK) OTL(stsFaultMovePermNOK) ,XIO(wrkOperJogPosMove.stsIntlksOK) OTL(stsFaultMoveIntlkNOK) ] ,XIC(wrkCmds.5) ONS(wrkMoveONS.6) XIO(wrkCmds.4) [CLR(stsActiveMoveIndex) COP(wrkOperJogNegMove,stsActiveMove,1) ,XIC(wrkOperJogNegMove.stsPermsOK) XIC(wrkOperJogNegMove.stsIntlksOK) OTL(wrkCmdRequests.4) ,XIO(wrkOperJogNegMove.stsPermsOK) OTL(stsFaultMovePermNOK) ,XIO(wrkOperJogNegMove.stsIntlksOK) OTL(stsFaultMoveIntlkNOK) ] ];
				RC: "Set configured torque once and then only when the configured torque for that move changes value";
				N: [XIC(wrkCmdRequests.3) ,XIC(wrkCmdRequests.4) ][ONS(wrkMoveONS.7) MOV(stsActiveMove.cfgTorque,inpAxis.TorqueLimitPositive) MUL(stsActiveMove.cfgTorque,-1,inpAxis.TorqueLimitNegative) MOV(stsActiveMove.cfgTorque,wrkLastTorque) ,NEQ(stsActiveMove.cfgTorque,wrkLastTorque) MOV(stsActiveMove.cfgTorque,inpAxis.TorqueLimitPositive) MUL(stsActiveMove.cfgTorque,-1,inpAxis.TorqueLimitNegative) MOV(stsActiveMove.cfgTorque,wrkLastTorque) ,MUL(stsActiveMove.cfgSpeed,cfgSpeedMultiplier,wrkOperMAJSpeed) MUL(stsActiveMove.cfgAccel,cfgSpeedMultiplier,wrkOperMAJAccel) MUL(stsActiveMove.cfgDecel,cfgSpeedMultiplier,wrkOperMAJDecel) MUL(stsActiveMove.cfgAccelJerk,cfgSpeedMultiplier,wrkOperMAJAccelJerk) MUL(stsActiveMove.cfgDecelJerk,cfgSpeedMultiplier,wrkOperMAJDecelJerk) ,XIC(wrkCmdRequests.3) [MAJ(inpAxis,wrkMI.OperPosMAJ,0,wrkOperMAJSpeed,Units per sec,wrkOperMAJAccel,Units per sec2,wrkOperMAJDecel,Units per sec2,S-Curve,wrkOperMAJAccelJerk,wrkOperMAJDecelJerk,Units per sec3,Disabled,Programmed,0,None) ,XIC(wrkMI.OperPosMAJ.ER) OTL(stsJogPosFailed) ] ,XIC(wrkCmdRequests.4) [MAJ(inpAxis,wrkMI.OperNegMAJ,1,wrkOperMAJSpeed,Units per sec,wrkOperMAJAccel,Units per sec2,wrkOperMAJDecel,Units per sec2,S-Curve,wrkOperMAJAccelJerk,wrkOperMAJDecelJerk,Units per sec3,Disabled,Programmed,0,None) ,XIC(wrkMI.OperNegMAJ.ER) OTL(stsJogNegFailed) ] ];
				RC: "************************************************************$N"
				    "Operator MAJ Interlock Checking$N"
				    "************************************************************$N"
				    "$N"
				    "If interlocks go bad, the axis faults, or the operator released the jog button, stop the MAM";
				N: [[XIC(wrkCmdRequests.3) XIO(wrkOperJogPosMove.stsIntlksOK) OTL(stsJogPosFailed) ,XIC(wrkCmdRequests.4) XIO(wrkOperJogNegMove.stsIntlksOK) OTL(stsJogNegFailed) ] OTL(stsFaultMoveIntlkNOK) ,[XIC(stsAxisFaulted) ,XIO(stsRunning) ] [XIC(wrkCmdRequests.3) OTL(stsJogPosFailed) ,XIC(wrkCmdRequests.4) OTL(stsJogNegFailed) ] ,XIC(wrkCmdRequests.3) XIC(stsHMIControl) XIO(wrkOcmds.4) ,XIC(wrkCmdRequests.4) XIC(stsHMIControl) XIO(wrkOcmds.5) ][OTU(wrkCmdRequests.3) OTU(wrkCmdRequests.4) ,MAS(inpAxis,wrkMI.JogMAS,All,Yes,cfgStopDecelPercentMax,% of Maximum,Yes,cfgStopJerkPercentMax,% of Maximum) ];
				RC: "************************************************************$N"
				    "Motion Change Dynamics$N"
				    "************************************************************";
				N: XIC(wrkCmdRequests.10)[MUL(stsMCDMove.cfgSpeed,cfgSpeedMultiplier,wrkMCDSpeed) MUL(stsMCDMove.cfgAccel,cfgSpeedMultiplier,wrkMCDAccel) MUL(stsMCDMove.cfgDecel,cfgSpeedMultiplier,wrkMCDDecel) MUL(stsMCDMove.cfgAccelJerk,cfgSpeedMultiplier,wrkMCDAccelJerk) MUL(stsMCDMove.cfgDecelJerk,cfgSpeedMultiplier,wrkMCDDecelJerk) ,XIC(stsJogging) [MCD(inpAxis,wrkMI.JogMCD,Jog,Yes,wrkMCDSpeed,Yes,wrkMCDAccel,Yes,wrkMCDDecel,Yes,wrkMCDAccelJerk,Yes,wrkMCDDecelJerk,Units per sec,Units per sec2,Units per sec2,Units per sec3) ,[XIC(wrkMI.JogMCD.DN) OTL(stsChangeDynamicsComplete) OTU(stsChangeDynamicsFailed) ,[XIC(wrkMI.JogMCD.ER) ,XIC(stsAxisFaulted) ,XIO(stsRunning) ] OTL(stsChangeDynamicsFailed) OTU(stsChangeDynamicsComplete) ] OTU(wrkCmdRequests.10) ] ,XIC(stsMoving) [MCD(inpAxis,wrkMI.MoveMCD,Move,Yes,wrkMCDSpeed,Yes,wrkMCDAccel,Yes,wrkMCDDecel,Yes,wrkMCDAccelJerk,Yes,wrkMCDDecelJerk,Units per sec,Units per sec2,Units per sec2,Units per sec3) ,[XIC(wrkMI.MoveMCD.DN) OTL(stsChangeDynamicsComplete) OTU(stsChangeDynamicsFailed) ,[XIC(wrkMI.MoveMCD.ER) ,XIC(stsAxisFaulted) ,XIC(stsRunning) ] OTL(stsChangeDynamicsFailed) OTU(stsChangeDynamicsComplete) ] OTU(wrkCmdRequests.10) ] ,XIO(stsJogging) XIO(stsMoving) OTU(wrkCmdRequests.10) OTL(stsChangeDynamicsFailed) OTU(stsChangeDynamicsComplete) ];
				RC: "************************************************************$N"
				    "Stopping Axis$N"
				    "************************************************************$N"
				    "$N"
				    "Skip stopping logic if no new stop requested or in progress";
				N: LBL(skipMove)[XIO(wrkCmds.1) XIO(wrkCmdRequests.7) ,XIC(inpMAG_Enbld) ]CLR(wrkStopONS)JMP(skipStop);
				RC: "Stop on program or operator stop commands$N"
				    "Throw faults if AOI is not in correct mode to accept the command";
				N: ONS(wrkStopONS.0)FLL(0,wrkMI.TotalMAS,1)OTL(wrkCmdRequests.7);
				RC: "Turn off internal move requests and set appropriate fail status bits if servo was moving, jogging, or homing";
				N: XIC(wrkCmdRequests.7)[[XIC(stsMoving) OTL(stsMoveFailed) OTU(stsMoveComplete) ,[XIC(stsHoming) ,XIC(wrkCmdRequests.5) ,GRT(wrkHTTStep,0) ] OTL(stsHomingFailed) OTU(stsHomingComplete) [GEQ(wrkHTTStep,120) OTL(wrkReloadSavedSettings) ,CLR(wrkHTTStep) OTU(wrkCmdRequests.5) ] ] ,OTU(wrkCmdRequests.7) CLR(wrkCmdRequests) MAS(inpAxis,wrkMI.TotalMAS,All,Yes,cfgStopDecelPercentMax,% of Maximum,Yes,cfgStopJerkPercentMax,% of Maximum) ];
				RC: "************************************************************$N"
				    "Turning Off Axis$N"
				    "************************************************************$N"
				    "$N"
				    "Skip off logic if now servo off commanded or in progress";
				N: LBL(skipStop)XIO(wrkCmds.0)XIO(wrkCmdRequests.6)CLR(wrkOffONS)JMP(skipOff);
				RC: "Turn off axis on program or operator stop commands$N"
				    "Throw faults if AOI is not in correct mode to accept the command";
				N: ONS(wrkOffONS.0)FLL(0,wrkMI.MSF,1)OTL(wrkCmdRequests.6);
				RC: "Turn off internal move requests and set appropriate fail status bits f servo was moving, jogging, or homing";
				N: XIC(wrkCmdRequests.6)[[XIC(stsMoving) OTL(stsMoveFailed) OTU(stsMoveComplete) ,[XIC(stsHoming) ,XIC(wrkCmdRequests.5) ,GRT(wrkHTTStep,0) ] OTL(stsHomingFailed) OTU(stsHomingComplete) [GEQ(wrkHTTStep,120) OTL(wrkReloadSavedSettings) ,CLR(wrkHTTStep) OTU(wrkCmdRequests.5) ] ] ,OTU(wrkCmdRequests.6) CLR(wrkCmdRequests) MSF(inpAxis,wrkMI.MSF) ];
				RC: "************************************************************$N"
				    "Unlatch Commands$N"
				    "************************************************************";
				N: LBL(skipOff)CLR(wrkCmds);
				RC: "************************************************************$N"
				    "Fault Summary$N"
				    "************************************************************";
				N: LBL(skipAllCommandLogic)[XIC(stsTurnOnFailed) OTE(wrkFaults.9) ,XIC(stsHomingFailed) OTE(wrkFaults.10) ,XIC(stsMoveFailed) OTE(wrkFaults.11) ,XIC(stsJogPosFailed) OTE(wrkFaults.12) ,XIC(stsJogNegFailed) OTE(wrkFaults.13) ,XIC(stsChangeDynamicsFailed) OTE(wrkFaults.14) ];
				RC: "Move faults bits into output tags for the HMI to alarm on";
				N: [MOV(inpAxis.AxisFault,stsAxisFaults) MOV(inpAxis.ModuleFaults,stsModuleFaults) MOV(inpAxis.MotionFaultStatus,stsMotionFaults) COP(inpAxis.CIPAxisFaults,stsCIPAxisFaults,1) COP(inpAxis.CIPAxisFaultsRA,stsCIPAxisFaultsRA,1) ,MOV(inpAxis.GuardFaults,stsGuardFaults) MOV(inpAxis.AxisSafetyFaults,stsAxisSafetyFaults) MOV(inpAxis.CIPInitializationFaults,stsCIPInitializationFaults) MOV(inpAxis.CIPInitializationFaultsRA,stsCIPInitializationFaultsRA) ];
				N: MOV(wrkFaults,stsFaultWord)NEQ(wrkFaults,0)OTE(stsFaultSummary);
				RC: "************************************************************$N"
				    "Reload Saved Axis Parameters$N"
				    "************************************************************$N"
				    "$N"
				    "In the case where homing to torque is interrupted";
				N: XIC(wrkReloadSavedSettings)OTU(wrkReloadSavedSettings)[SSV(Axis,inpAxis,SoftTravelLimitChecking,wrkSavedSoftOTChecking) SSV(Axis,inpAxis,PositionErrorTolerance,wrkSavedPosErrorTol) SSV(Axis,inpAxis,VelocityErrorTolerance,wrkSavedVelErrorTol) ,SSV(Axis,inpAxis,HomeSequence,wrkSavedHomeSeq) SSV(Axis,inpAxis,TorqueLimitPositive,wrkSavedTorqueLimPos) SSV(Axis,inpAxis,TorqueLimitNegative,wrkSavedTorqueLimNeg) ];
				RC: "************************************************************$N"
				    "Reset Fail Watchdog$N"
				    "************************************************************";
				N: [XIC(wrkCmdRequests.8) ,XIC(wrkCmdRequests.9) ]MOV(5000,wrkResetTurnOnFailTON.PRE)TON(wrkResetTurnOnFailTON,?,?);
				RC: "************************************************************$N"
				    "Ready Status$N"
				    "************************************************************$N"
				    "$N"
				    "If idle, running, and no other command in process then the AOI is ready for a new command";
				N: XIO(inpAxis.HomingStatus)XIO(inpAxis.MoveStatus)XIO(inpAxis.JogStatus)EQU(wrkCmdRequests,0)EQU(inpAxis.CIPAxisState,4)OTE(stsReady);
		END_ROUTINE

		ROUTINE Prescan 
				N: GSV(Axis,inpAxis,SoftTravelLimitChecking,wrkSavedSoftOTChecking)GSV(Axis,inpAxis,PositionErrorTolerance,wrkSavedPosErrorTol)GSV(Axis,inpAxis,VelocityErrorTolerance,wrkSavedVelErrorTol)GSV(Axis,inpAxis,TorqueLimitPositive,wrkSavedTorqueLimPos)GSV(Axis,inpAxis,TorqueLimitNegative,wrkSavedTorqueLimNeg)GSV(Axis,inpAxis,HomeSequence,wrkSavedHomeSeq);
				N: CLR(wrkResults)CLR(wrkFaults)CLR(wrkPcmds)CLR(wrkOcmds)FLL(0,wrkMI,1);
				N: CLR(wrkHTTStep)CLR(wrkCmdRequests);
				RC: "Check if the travel mode is cyclic, if so then calculate the unwind value for use in calculating the target position";
				N: [GSV(Axis,inpAxis,TravelMode,wrkTravelMode) GSV(Axis,inpAxis,PositionUnwindNumerator,wrkPosUnwindNum) GSV(Axis,inpAxis,PositionUnwindDenominator,wrkPosUnwindDenom) ,CLR(wrkUnwindCycle) EQU(wrkTravelMode,wrkConstCyclicMode) NEQ(wrkPosUnwindDenom,0) DIV(wrkPosUnwindNum,wrkPosUnwindDenom,wrkUnwindCycle) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION RobotSftyAOI (Description := "Robot Safety AOI",
	                                            Class := Safety,
	                                            Revision := "1.0",
	                                            RevisionNote := "Lucid Motors$NBIW Controls$NRev 1.0$N20221021",
	                                            ExecutePrescan := No,
	                                            ExecutePostscan := No,
	                                            ExecuteEnableInFalse := No,
	                                            CreatedDate := "2022-10-21T11:50:27.825Z",
	                                            CreatedBy := "MFG\JulioGranillo",
	                                            EditedDate := "2023-06-02T14:11:47.510Z",
	                                            EditedBy := "LUCID\JulioGranillo",
	                                            SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			InO_sRxx : Luds_Robot (Usage := InOut,
			                    Required := Yes,
			                    Visible := Yes);
			sCell : Luds_ZoneSfty (Usage := InOut,
			                 Required := Yes,
			                 Visible := Yes);
			outRbtPwrEnbld : BOOL (Description := "AOI Output$NRobot Power Enabled",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			outAuxPwrEnbld : BOOL (Description := "AOI Output$NAuxiliary Power Enabled",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			outLTFullAuto : BOOL (Description := "AOI Output$NLight Full Auto and Servo On$NGreen",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			outLTDrivesOff : BOOL (Description := "AOI Output$NLight Drives Off$NRed",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			outLTPendEnbld : BOOL (Description := "AOI Output$NLight Teach Pendan Enabled$NYellow",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			outSftyChngd : BOOL (Description := "AOI Output$NRobot DCS Safety Changed",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			outEStopPBOk : BOOL (Description := "AOI Output$NRobot EStop PBs Ok",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			SftyFromStd : uds_StdToSfty (Usage := InOut,
			                       Required := Yes,
			                       Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
			sRxx : Luds_RobotInt (ExternalAccess := None,
			               DefaultData := "[0,[0,0,0],[0,0,0],0,[0,0,0,0,0,0,0,0,0],0,0,0,[0,0,0,0,0,0,0,0,0,0,0,0,0],0,0,0]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "################################$N"
				    "Fanuc Robot Safety AOI$N"
				    "$N"
				    "BIW Controls$N"
				    "Rev 1.0$N"
				    "################################";
				N: NOP();
				N: XIC(sCell.AnyGateRstPB)OTE(InO_sRxx.Int.AnyGateRstPB);
				N: XIC(sCell.SftyFltRst)OTE(InO_sRxx.Int.AnySftyRstPB);
				N: XIC(sCell.AnyBypassSwOn)OTE(InO_sRxx.Int.AnyBypassSW);
				N: XIC(InO_sRxx.I.CSO_08)OTE(InO_sRxx.Int.TeachSeld);
				N: XIC(InO_sRxx.I.CSO_07)OTE(InO_sRxx.Int.TeachOff);
				N: XIC(InO_sRxx.I.CSO_05)XIC(InO_sRxx.I.CSO_08)OTE(InO_sRxx.Int.PendantEnbld);
				N: XIC(InO_sRxx.I.CSO_15)OTE(InO_sRxx.Int.DrivesOff);
				N: XIO(InO_sRxx.I.CSO_11)OTE(InO_sRxx.Int.SftyIntEnbld);
				N: XIO(InO_sRxx.I.CSO_64)[OTE(InO_sRxx.Int.SftyChanged) ,OTE(outSftyChngd) ];
				N: [XIC(InO_sRxx.I.CSO_18) OTE(InO_sRxx.Int.SftyZn1) ,XIC(InO_sRxx.I.CSO_19) OTE(InO_sRxx.Int.SftyZn2) ,XIC(InO_sRxx.I.CSO_20) OTE(InO_sRxx.Int.SftyZn3) ,XIC(InO_sRxx.I.CSO_21) OTE(InO_sRxx.Int.SftyZn4) ,XIC(InO_sRxx.I.CSO_22) OTE(InO_sRxx.Int.SftyZn5) ,XIC(InO_sRxx.I.CSO_23) OTE(InO_sRxx.Int.SftyZn6) ,XIC(InO_sRxx.I.CSO_24) OTE(InO_sRxx.Int.SftyZn7) ];
				N: XIC(InO_sRxx.Int.ModRunMode)ESTOP(InO_sRxx.Int.EStopIns,MANUAL,InO_sRxx.I.CSO_06,InO_sRxx.I.CSO_06,InO_sRxx.Int.AnyGateRstPB,InO_sRxx.Int.AnySftyRstPB);
				N: XIC(InO_sRxx.Int.EStopIns.O1)[OTE(InO_sRxx.Int.EStopPBOk) ,OTE(outEStopPBOk) ];
				N: [XIC(InO_sRxx.Int.Zn1LtScrnActive) ,XIC(InO_sRxx.Int.SftyZn1) ][XIC(InO_sRxx.Int.Zn2LtScrnActive) ,XIC(InO_sRxx.Int.SftyZn2) ][XIC(InO_sRxx.Int.Zn3LtScrnActive) ,XIC(InO_sRxx.Int.SftyZn3) ][XIC(InO_sRxx.Int.Zn4LtScrnActive) ,XIC(InO_sRxx.Int.SftyZn4) ][XIC(InO_sRxx.Int.Zn5LtScrnActive) ,XIC(InO_sRxx.Int.SftyZn5) ][XIC(InO_sRxx.Int.Zn6LtScrnActive) ,XIC(InO_sRxx.Int.SftyZn6) ][XIC(InO_sRxx.Int.Zn7LtScrnActive) ,XIC(InO_sRxx.Int.SftyZn7) ]XIC(InO_sRxx.Int.AreaSafe)OTE(InO_sRxx.Int.EnblOperRbtShrd);
				N: XIC(sCell.AllEStopsOk)OTE(InO_sRxx.Int.AllEStopsOk);
				N: XIC(sCell.PerimeterSafe)OTE(InO_sRxx.Int.AllGatesOk);
				N: [XIC(InO_sRxx.Int.DisableDrives) ,XIC(InO_sRxx.Int.AnyBypassSW) ]OTE(InO_sRxx.Int.DisableDrives);
				N: XIC(InO_sRxx.Int.AllEStopsOk)XIC(InO_sRxx.Int.AllGatesOk)MOV(0,InO_sRxx.Int.RbtCntrlStopTmr.PRE)TOF(InO_sRxx.Int.RbtCntrlStopTmr,0,0);
				N: XIC(InO_sRxx.Int.ModRunMode)[XIC(InO_sRxx.Int.TeachOff) XIC(InO_sRxx.Int.AdjRbtsTeachOff) ,XIC(InO_sRxx.Int.PendantEnbld) XIC(InO_sRxx.Int.TeachPerm) ]OTE(InO_sRxx.Int.EnblRbtSetup);
				N: XIC(InO_sRxx.Int.DrivesOff)MOV(2000,InO_sRxx.Int.RbtEStopRestartTmr.PRE)TON(InO_sRxx.Int.RbtEStopRestartTmr,0,0);
				N: [XIC(InO_sRxx.Int.RbtCntrlStopTmr.DN) XIC(InO_sRxx.Int.EnblOperRbtShrd) XIO(InO_sRxx.Int.DisableDrives) ,XIC(InO_sRxx.Int.TeachSeld) XIC(InO_sRxx.Int.AllEStopsOk) ][XIC(InO_sRxx.Int.RbtEStopRestartTmr.DN) ,XIC(InO_sRxx.Int.EnblRbt) ]XIC(InO_sRxx.Int.EnblRbtSetup)OTE(InO_sRxx.Int.EnblRbt);
				N: XIC(InO_sRxx.Int.ModRunMode)[XIC(InO_sRxx.Int.AllGatesOk) XIC(InO_sRxx.Int.EnblOperRbtShrd) XIC(InO_sRxx.Int.AutoOrMan) ,XIC(InO_sRxx.Int.TeachSeld) ]XIC(InO_sRxx.Int.AllEStopsOk)XIC(InO_sRxx.Int.EnblExtAppROUT.O1)XIC(InO_sRxx.Int.EnblExtAppROUT.O2)OTE(InO_sRxx.Int.EnblExtApp);
				N: ROUT(InO_sRxx.Int.EnblExtAppROUT,POSITIVE,InO_sRxx.Int.EnblExtApp,InO_sRxx.Int.ExtAppPwrOn,InO_sRxx.Int.ExtAppPwrOn,InO_sRxx.Int.AnyGateRstPB);
				N: XIC(InO_sRxx.Int.EnblRbt)[[OTE(InO_sRxx.O.CSI_01) ,OTE(InO_sRxx.O.CSI_02) ,OTE(InO_sRxx.O.CSI_03) ,OTE(InO_sRxx.O.CSI_04) ] ,OTE(outRbtPwrEnbld) ];
				N: XIC(InO_sRxx.Int.SftyIntEnbld)XIO(InO_sRxx.Int.SftyChanged)XIC(InO_sRxx.I.CSO_05)OTE(InO_sRxx.O.CSI_05);
				N: XIC(InO_sRxx.Int.RstSftyChange)XIC(InO_sRxx.Int.SftyIntEnbld)XIC(InO_sRxx.Int.SftyChanged)OTE(InO_sRxx.O.CSI_64);
				N: XIC(InO_sRxx.Int.EnblExtApp)[[OTE(InO_sRxx.O.CSI_08) ,OTE(InO_sRxx.O.CSI_09) ] ,OTE(outAuxPwrEnbld) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION RobotStdSpeedSelect (Class := Standard,
	                                                   Revision := "1.0",
	                                                   ExecutePrescan := No,
	                                                   ExecutePostscan := No,
	                                                   ExecuteEnableInFalse := No,
	                                                   CreatedDate := "2023-02-01T03:36:08.749Z",
	                                                   CreatedBy := "MFG\JulioGranillo",
	                                                   EditedDate := "2023-06-02T20:22:52.780Z",
	                                                   EditedBy := "LUCID\JulioGranillo",
	                                                   SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			InO_Rxx_I1 : Ludt_RobotIn1 (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			stsSpeed : SINT (Usage := Output,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only,
			                    DefaultData := 0);
			inpNewSpeed : SINT (Usage := Input,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       DefaultData := 0);
			HMICmdFaster : BOOL (Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			HMICmdSlower : BOOL (Usage := Input,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := No,
			                        DefaultData := 0);
			InO_Rxx_O1 : Ludt_RobotOut1 (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
			FastCmdOns : BOOL (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			SlowCmdOns : BOOL (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			tmrNewSpeedReq : TIMER (ExternalAccess := None,
			                         DefaultData := "[0,0,0]");
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Speed Control$N"
				    "************************************************************";
				N: NOP();
				N: COP(InO_Rxx_I1.OverrideSpeed,stsSpeed,1);
				N: MOV(1000,tmrNewSpeedReq.PRE);
				N: [LES(inpNewSpeed,0) MOV(0,inpNewSpeed) ,GRT(inpNewSpeed,100) MOV(100,inpNewSpeed) ];
				RC: "************************************************************$N"
				    "Faster HMI PB$N"
				    "************************************************************$N"
				    "";
				N: XIC(HMICmdFaster)ONS(FastCmdOns)XIO(InO_Rxx_I1.PendEnbld)XIC(InO_Rxx_I1.Auto)XIO(InO_Rxx_O1.SpeedReq)XIO(InO_Rxx_I1.InProcess)[LES(stsSpeed,10) MOV(10,inpNewSpeed) ,LIM(10,stsSpeed,24) MOV(25,inpNewSpeed) ,LIM(25,stsSpeed,49) MOV(50,inpNewSpeed) ,LIM(50,stsSpeed,99) MOV(100,inpNewSpeed) ];
				RC: "************************************************************$N"
				    "Slower HMI PB$N"
				    "************************************************************$N"
				    "";
				N: XIC(HMICmdSlower)ONS(SlowCmdOns)XIO(InO_Rxx_I1.PendEnbld)XIC(InO_Rxx_I1.Auto)XIO(InO_Rxx_O1.SpeedReq)XIO(InO_Rxx_I1.InProcess)[LIM(2,stsSpeed,10) MOV(1,inpNewSpeed) ,LIM(11,stsSpeed,25) MOV(10,inpNewSpeed) ,LIM(26,stsSpeed,50) MOV(25,inpNewSpeed) ,GRT(stsSpeed,50) MOV(50,inpNewSpeed) ];
				RC: "************************************************************$N"
				    "Change Speed Request to RB$N"
				    "************************************************************$N"
				    "";
				N: [GRT(inpNewSpeed,0) OTL(InO_Rxx_O1.SpeedReq) ,[EQU(stsSpeed,inpNewSpeed) ,XIC(InO_Rxx_O1.SpeedReq) TON(tmrNewSpeedReq,?,?) XIC(tmrNewSpeedReq.DN) ] [CLR(inpNewSpeed) ,OTU(InO_Rxx_O1.SpeedReq) ] ];
				RC: "************************************************************$N"
				    "Send New Speed to RB$N"
				    "************************************************************$N"
				    "";
				N: LIM(0,inpNewSpeed,100)COP(inpNewSpeed,InO_Rxx_O1.NewSpeed,1);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION RobotStdZone (Class := Standard,
	                                            Revision := "1.0",
	                                            ExecutePrescan := No,
	                                            ExecutePostscan := No,
	                                            ExecuteEnableInFalse := No,
	                                            CreatedDate := "2023-02-02T01:40:50.215Z",
	                                            CreatedBy := "MFG\JulioGranillo",
	                                            EditedDate := "2023-04-11T16:02:01.789Z",
	                                            EditedBy := "MFG\oscarsandoval",
	                                            SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpUsed : BOOL (Description := "*Input Parameter*$NZone Used$N$NZn#Used$N",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := Yes,
			                   Visible := Yes,
			                   DefaultData := 0);
			inpRbtClrMem : BOOL (Description := "*Input Parameter*$NAll Adjacent Robot Zone Clear Memory$N-]/[-",
			                        Usage := Input,
			                        RADIX := Decimal,
			                        Required := Yes,
			                        Visible := Yes,
			                        DefaultData := 0);
			outRbtZnClrMem : BOOL (Description := "*Output*$NZnClrMem",
			                          Usage := Output,
			                          RADIX := Decimal,
			                          Required := No,
			                          Visible := Yes,
			                          ExternalAccess := Read Only,
			                          DefaultData := 0);
			inpToolCond : BOOL (Description := "*Input Parameter*$NTool conditions to enable Zone",
			                       Usage := Input,
			                       RADIX := Decimal,
			                       Required := Yes,
			                       Visible := Yes,
			                       DefaultData := 0);
			inpZnClr : BOOL (Description := "*Input Parameter*$NInterference Clear Zone$N$NINTF_CLR_#",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := Yes,
			                    Visible := Yes,
			                    DefaultData := 0);
			outZnPerm : BOOL (Description := "*Output*$N$NINTF_PRM_#",
			                     Usage := InOut,
			                     RADIX := Decimal,
			                     Required := Yes,
			                     Visible := Yes);
			outZnPermInd : BOOL (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			ZoneUsed : BOOL (Description := "AOI Internal Bit$NZone Used",
			                   RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 1);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "################################$N"
				    "Robot Zone AOI$N"
				    "################################";
				N: NOP();
				RC: "################################$N"
				    "Rung enables Zone AOI Logic$N"
				    "################################";
				N: XIC(inpUsed)OTE(ZoneUsed);
				RC: "################################$N"
				    "$N"
				    "inpRbtClrMem - All adjacent robots ZnClrMem -]/[- XIO$N"
				    "$N"
				    "################################$N"
				    "";
				N: XIO(inpZnClr)XIC(inpRbtClrMem)XIC(ZoneUsed)OTL(outRbtZnClrMem);
				RC: "################################$N"
				    "$N"
				    "inpToolCond - All Tool Pick / Drop Setup Conditions. AutoMode as required$N"
				    "$N"
				    "################################";
				N: XIC(inpToolCond)XIC(outRbtZnClrMem)XIC(ZoneUsed)[OTE(outZnPerm) ,OTE(outZnPermInd) ];
				N: XIC(inpZnClr)OTU(outRbtZnClrMem);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION Robot_Zone (Class := Standard,
	                                          Revision := "1.3",
	                                          RevisionExtension := "20200618",
	                                          RevisionNote := "v1.1 Standard tag names$Nv1.2 STRING_20 use$Nv1.3 Fixed stsAdjacentZone description",
	                                          Vendor := "Hokuto",
	                                          ExecutePrescan := No,
	                                          ExecutePostscan := No,
	                                          ExecuteEnableInFalse := No,
	                                          CreatedDate := "2018-03-19T18:28:19.895Z",
	                                          CreatedBy := "Not Available",
	                                          EditedDate := "2022-01-05T16:13:14.479Z",
	                                          EditedBy := "LUCID\DanWeinhold",
	                                          SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpReqZone : BOOL (Description := "Input$NThis Robot$NZone Request",
			                      Usage := Input,
			                      RADIX := Decimal,
			                      Required := Yes,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			outClrEnterZone : BOOL (Description := "Input$NAdjacent Robot$NZone Clear",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := Yes,
			                           Visible := Yes,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			inpAdjacentZoneA OF stsAdjacentZone.0 (Description := "Input$NAdjacent Robot$NZone Clear",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only);
			inpAdjacentZoneB OF stsAdjacentZone.1 (Description := "Input$NAdjacent Robot$NZone Clear",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only);
			inpAdjacentZoneC OF stsAdjacentZone.2 (Description := "Input$NAdjacent Robot$NZone Clear",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only);
			inpAdjacentZoneD OF stsAdjacentZone.3 (Description := "Input$NAdjacent Robot$NZone Clear",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only);
			inpAdjacentZoneE OF stsAdjacentZone.4 (Description := "Input$NAdjacent Robot$NZone Clear",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only);
			inpAdjacentZoneF OF stsAdjacentZone.5 (Description := "Input$NAdjacent Robot$NZone Clear",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only);
			inpAdjacentZoneG OF stsAdjacentZone.6 (Description := "Input$NAdjacent Robot$NZone Clear",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only);
			inpAdjacentZoneH OF stsAdjacentZone.7 (Description := "Input$NAdjacent Robot$NZone Clear",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only);
			inpAdjacentZoneI OF stsAdjacentZone.8 (Description := "Input$NAdjacent Robot$NZone Clear",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only);
			inpAdjacentZoneJ OF stsAdjacentZone.9 (Description := "Input$NAdjacent Robot$NZone Clear",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only);
			inpAdjacentZoneK OF stsAdjacentZone.10 (Description := "Input$NAdjacent Robot$NZone Clear",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only);
			inpAdjacentZoneL OF stsAdjacentZone.11 (Description := "Input$NAdjacent Robot$NZone Clear",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only);
			inpAdjacentZoneM OF stsAdjacentZone.12 (Description := "Input$NAdjacent Robot$NZone Clear",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only);
			inpAdjacentZoneN OF stsAdjacentZone.13 (Description := "Input$NAdjacent Robot$NZone Clear",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only);
			inpAdjacentZoneO OF stsAdjacentZone.14 (Description := "Input$NAdjacent Robot$NZone Clear",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only);
			inpAdjacentZoneP OF stsAdjacentZone.15 (Description := "Input$NAdjacent Robot$NZone Clear",
			                            Usage := Input,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only);
			stsCollisionFlt : BOOL (Description := "Status$NCollision Fault",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			stsCollisionFltQty : DINT (Description := "Collision$NFault$NQuantity",
			                              Usage := Output,
			                              RADIX := Decimal,
			                              Required := No,
			                              Visible := Yes,
			                              ExternalAccess := Read/Write,
			                              DefaultData := 0);
			stsZoneUsed : BOOL (Description := "HMI Use Only$NEnables $NVisibility",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := No,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			wrkDelayZone : TIMER (ExternalAccess := None,
			                       DefaultData := "[0,0,0]");
			wrkOns01 : BOOL (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			hmiDeviceName : STRING_20 (ExternalAccess := Read/Write,
			                        DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			hmiAdjacentZoneTxt : STRING_20[16] (ExternalAccess := Read/Write,
			                             DefaultData
			stsAdjacentZone : INT (Description := "Status of adjacent Zones$N1=Clear$N0=Occupied",
			                          RADIX := Binary,
			                          ExternalAccess := Read Only,
			                          DefaultData := -1);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "$N"
				    "************************************************************$N"
				    "Robot Zone AOI$N"
				    "************************************************************$N"
				    "Show Local Strings$N"
				    "STRINGs containing the text associated with each adjacent zone,$N"
				    "They correspond as follows:$N"
				    "A = [0]  -  I = [8]$N"
				    "B = [1]  -  J = [9]$N"
				    "C = [2]  -  K = [10]$N"
				    "D = [3]  -  L = [11]$N"
				    "E = [4]  -  M = [12]$N"
				    "F = [5]  -  N = [13]$N"
				    "G = [6]  -  O = [14]$N"
				    "H = [7]  -  P = [15]$N"
				    "$N"
				    "$N"
				    "";
				N: JMP(SkipText)[LOWER(hmiDeviceName,hmiDeviceName) ,LOWER(hmiAdjacentZoneTxt[0],hmiAdjacentZoneTxt[1]) LOWER(hmiAdjacentZoneTxt[2],hmiAdjacentZoneTxt[3]) LOWER(hmiAdjacentZoneTxt[4],hmiAdjacentZoneTxt[5]) LOWER(hmiAdjacentZoneTxt[6],hmiAdjacentZoneTxt[7]) ,LOWER(hmiAdjacentZoneTxt[8],hmiAdjacentZoneTxt[9]) LOWER(hmiAdjacentZoneTxt[10],hmiAdjacentZoneTxt[11]) LOWER(hmiAdjacentZoneTxt[12],hmiAdjacentZoneTxt[13]) LOWER(hmiAdjacentZoneTxt[14],hmiAdjacentZoneTxt[15]) ];
				N: LBL(SkipText)OTE(stsZoneUsed);
				RC: "$N"
				    "************************************************************$N"
				    "Adjacent Zones Monitoring$N"
				    "************************************************************$N"
				    "$N"
				    "***** The 16 inpAdjacentZone inputs are aliased to stsAdjacentZone *****";
				N: XIC(inpReqZone)EQU(stsAdjacentZone,-1)MOV(100,wrkDelayZone.PRE)TON(wrkDelayZone,?,?)XIC(wrkDelayZone.DN)OTL(outClrEnterZone);
				N: XIO(inpReqZone)OTU(outClrEnterZone);
				N: XIC(outClrEnterZone)NEQ(stsAdjacentZone,-1)OTE(stsCollisionFlt);
				N: XIC(stsCollisionFlt)ONS(wrkOns01)ADD(stsCollisionFltQty,1,stsCollisionFltQty);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION Robot_Holds (Description := "Fanuc Robot Holds",
	                                           Class := Standard,
	                                           Revision := "1.4",
	                                           RevisionExtension := "20200618",
	                                           RevisionNote := "v1.1 Standard tag names$Nv1.2 STRING_20 use$Nv1.3 Teach Hold logic removed.$Nv1.4 stsZoneRequested to output parameter",
	                                           Vendor := "Hokuto",
	                                           ExecutePrescan := No,
	                                           ExecutePostscan := No,
	                                           ExecuteEnableInFalse := No,
	                                           CreatedDate := "2018-03-21T13:56:41.821Z",
	                                           CreatedBy := "Not Available",
	                                           EditedDate := "2022-01-05T16:13:14.468Z",
	                                           EditedBy := "LUCID\DanWeinhold",
	                                           SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpThisRB : p_udt_Fanuc_RB_D_IO (Usage := InOut,
			                     Required := Yes,
			                     Visible := Yes);
			stsZoneCollisionHold : BOOL (Description := "Zone$NCollision",
			                                Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := Yes,
			                                ExternalAccess := Read Only,
			                                DefaultData := 0);
			stsDryCycleHold : BOOL (Description := "DryCyle$NAbnormal",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			inpZone : Robot_Zone[1] (Usage := InOut,
			                   Required := Yes,
			                   Visible := Yes);
			stsZoneRequested : BOOL (Description := "Zone$NRequested",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := No,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			wrkArraySize : DINT (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			ZoneIndex : DINT (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "$N"
				    "************************************************************$N"
				    "Robot Holds AOI$N"
				    "************************************************************$N"
				    "";
				N: NOP();
				RC: "$N"
				    "************************************************************$N"
				    "This Robot DryCycle Abnormal$N"
				    "************************************************************$N"
				    "$N"
				    "";
				N: [XIO(inpThisRB.O1.DI_033) XIC(inpThisRB.I1.DO_033) ,XIC(inpThisRB.O1.DI_033) XIO(inpThisRB.I1.DO_033) ]OTE(stsDryCycleHold);
				RC: "$N"
				    "************************************************************$N"
				    "Zone Monitoring$N"
				    "************************************************************";
				N: [XIC(inpThisRB.I1.DO_081) XIO(inpThisRB.O1.DI_097) ,XIC(inpThisRB.I1.DO_082) XIO(inpThisRB.O1.DI_098) ,XIC(inpThisRB.I1.DO_083) XIO(inpThisRB.O1.DI_099) ,XIC(inpThisRB.I1.DO_084) XIO(inpThisRB.O1.DI_100) ,XIC(inpThisRB.I1.DO_085) XIO(inpThisRB.O1.DI_101) ,XIC(inpThisRB.I1.DO_086) XIO(inpThisRB.O1.DI_102) ,XIC(inpThisRB.I1.DO_087) XIO(inpThisRB.O1.DI_103) ,XIC(inpThisRB.I1.DO_088) XIO(inpThisRB.O1.DI_104) ,XIC(inpThisRB.I1.DO_089) XIO(inpThisRB.O1.DI_105) ,XIC(inpThisRB.I1.DO_090) XIO(inpThisRB.O1.DI_106) ,XIC(inpThisRB.I1.DO_091) XIO(inpThisRB.O1.DI_107) ,XIC(inpThisRB.I1.DO_092) XIO(inpThisRB.O1.DI_108) ,XIC(inpThisRB.I1.DO_093) XIO(inpThisRB.O1.DI_109) ,XIC(inpThisRB.I1.DO_094) XIO(inpThisRB.O1.DI_110) ,XIC(inpThisRB.I1.DO_095) XIO(inpThisRB.O1.DI_111) ,XIC(inpThisRB.I1.DO_096) XIO(inpThisRB.O1.DI_112) ]OTE(stsZoneRequested);
				N: SIZE(inpZone[0],0,wrkArraySize)CLR(ZoneIndex)OTU(stsZoneCollisionHold);
				N: LBL(ZoneLoop)NOP();
				N: XIC(inpZone[ZoneIndex].stsCollisionFlt)OTL(stsZoneCollisionHold);
				N: ADD(ZoneIndex,1,ZoneIndex)LES(ZoneIndex,wrkArraySize)JMP(ZoneLoop);
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION ServoAxisFaults (Description := "Axis Module Faults Mapping$NData Consumption [6] DINTs",
	                                               Class := Standard,
	                                               Revision := "1.1",
	                                               RevisionExtension := "20191122",
	                                               RevisionNote := "v1.1 Standard tag names",
	                                               Vendor := "Hokuto",
	                                               ExecutePrescan := No,
	                                               ExecutePostscan := No,
	                                               ExecuteEnableInFalse := No,
	                                               CreatedDate := "2019-10-24T18:08:33.291Z",
	                                               CreatedBy := "LAPTOP-KKSRL2SB\ucarr",
	                                               EditedDate := "2022-01-05T16:13:14.533Z",
	                                               EditedBy := "LUCID\DanWeinhold",
	                                               SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpAxis : AXIS_CIP_DRIVE (Usage := InOut,
			                   Required := Yes,
			                   Visible := Yes);
			inpFaultsArray : DINT[1] (Usage := InOut,
			                          RADIX := Decimal,
			                          Required := Yes,
			                          Visible := Yes);
			inpFaultsArrayOffSetStart : DINT (Usage := Input,
			                                     RADIX := Decimal,
			                                     Required := Yes,
			                                     Visible := Yes,
			                                     DefaultData := 0);
			stsArraySizeFault : BOOL (Description := "Faults Array size insufficient for axis module faults mapping.",
			                             Usage := Output,
			                             RADIX := Decimal,
			                             Required := No,
			                             Visible := Yes,
			                             ExternalAccess := Read/Write,
			                             DefaultData := 0);
			stsOffSetStartFault : BOOL (Description := "Off Set Start value invalid, doesn$'t allow axis faults mapping into faults array.",
			                               Usage := Output,
			                               RADIX := Decimal,
			                               Required := No,
			                               Visible := Yes,
			                               ExternalAccess := Read/Write,
			                               DefaultData := 0);
			stsAxisModuleFaulted : BOOL (Description := "Axis Module any fault present",
			                                Usage := Output,
			                                RADIX := Decimal,
			                                Required := No,
			                                Visible := Yes,
			                                ExternalAccess := Read/Write,
			                                DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			stsCIPAxisFaultsDINT : DINT[2] (RADIX := Decimal,
			                               ExternalAccess := None,
			                               DefaultData := "[0,0]");
			stsCIPAxisFaultsRADINT : DINT[2] (RADIX := Decimal,
			                                 ExternalAccess := None,
			                                 DefaultData := "[0,0]");
			wrkFaultsArraySize : DINT (RADIX := Decimal,
			                             ExternalAccess := None,
			                             DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Servo Axis Faults AOI$N"
				    "************************************************************$N"
				    "CIP Axis and Module Faults Mapping to HMI tag";
				N: NOP();
				N: SIZE(inpFaultsArray,0,wrkFaultsArraySize);
				RC: "Validate the fault array dimension (size).$N"
				    "Since axis faults data is 6 DINTs, fault array size needs to be at least 6, if not, flag a fault bit to jump out of the mapping code.";
				N: CMP(wrkFaultsArraySize<6)OTE(stsArraySizeFault);
				RC: "Validate off set value where the mapping is going to start.$N"
				    "Off set is used to accommodate the axis data faults into the fault array, if off set value not valid, flag a fault bit to jump out of the mapping code.";
				N: [CMP((inpFaultsArrayOffSetStart+5)>=wrkFaultsArraySize) ,LES(inpFaultsArrayOffSetStart,0) ]OTE(stsOffSetStartFault);
				RC: "If either ArraySize or OffSetStart fault occurs,$N"
				    "jump out of the mapping code to prevent indexing data to a non existing location (controller major fault).";
				N: [XIC(stsArraySizeFault) ,XIC(stsOffSetStartFault) ]JMP(End);
				RC: "Make LINTs to DINTs$N"
				    "BTD instruction doesn$'t allow the use of LINTs";
				N: COP(inpAxis.CIPAxisFaults,stsCIPAxisFaultsDINT[0],2)COP(inpAxis.CIPAxisFaultsRA,stsCIPAxisFaultsRADINT[0],2);
				RC: "Map axis module faults to HMI faults array";
				N: NOP();
				RC: "Axis Faults";
				N: BTD(inpAxis.AxisFault,0,inpFaultsArray[inpFaultsArrayOffSetStart],0,9);
				RC: "Module Faults";
				N: BTD(inpAxis.ModuleFaults,0,inpFaultsArray[inpFaultsArrayOffSetStart],9,16);
				RC: "Motion Fault Status";
				N: BTD(inpAxis.MotionFaultStatus,0,inpFaultsArray[inpFaultsArrayOffSetStart],25,2);
				RC: "CIP Axis Faults";
				N: BTD(stsCIPAxisFaultsDINT[0],0,inpFaultsArray[inpFaultsArrayOffSetStart],27,5)BTD(stsCIPAxisFaultsDINT[0],5,inpFaultsArray[inpFaultsArrayOffSetStart+1],0,27)BTD(stsCIPAxisFaultsDINT[1],0,inpFaultsArray[inpFaultsArrayOffSetStart+1],27,5)BTD(stsCIPAxisFaultsDINT[1],5,inpFaultsArray[inpFaultsArrayOffSetStart+2],0,21);
				RC: "CIP Axis Faults RA";
				N: BTD(stsCIPAxisFaultsRADINT[0],0,inpFaultsArray[inpFaultsArrayOffSetStart+2],21,11)BTD(stsCIPAxisFaultsRADINT[0],11,inpFaultsArray[inpFaultsArrayOffSetStart+3],0,18);
				RC: "Guard Faults";
				N: BTD(inpAxis.GuardFaults,0,inpFaultsArray[inpFaultsArrayOffSetStart+3],18,14)BTD(inpAxis.GuardFaults,14,inpFaultsArray[inpFaultsArrayOffSetStart+4],0,14);
				RC: "Axis Safety Faults";
				N: BTD(inpAxis.AxisSafetyFaults,0,inpFaultsArray[inpFaultsArrayOffSetStart+4],14,16);
				RC: "CIP Initialization Faults";
				N: BTD(inpAxis.CIPInitializationFaults,0,inpFaultsArray[inpFaultsArrayOffSetStart+4],30,2)BTD(inpAxis.CIPInitializationFaults,2,inpFaultsArray[inpFaultsArrayOffSetStart+5],0,1);
				RC: "CIP Initialization Faults RA";
				N: BTD(inpAxis.CIPInitializationFaultsRA,0,inpFaultsArray[inpFaultsArrayOffSetStart+5],1,19);
				N: [NEQ(inpFaultsArray[inpFaultsArrayOffSetStart],0) ,NEQ(inpFaultsArray[inpFaultsArrayOffSetStart+1],0) ,NEQ(inpFaultsArray[inpFaultsArrayOffSetStart+2],0) ,NEQ(inpFaultsArray[inpFaultsArrayOffSetStart+3],0) ,NEQ(inpFaultsArray[inpFaultsArrayOffSetStart+4],0) ,NEQ(inpFaultsArray[inpFaultsArrayOffSetStart+5],0) ]OTE(stsAxisModuleFaulted);
				N: LBL(End)NOP();
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION SftyInst (Description := "Safety Instruction AOI",
	                                        Class := Standard,
	                                        Revision := "1.0",
	                                        ExecutePrescan := No,
	                                        ExecutePostscan := No,
	                                        ExecuteEnableInFalse := No,
	                                        CreatedDate := "2023-03-27T17:14:50.093Z",
	                                        CreatedBy := "MFG\JulioGranillo",
	                                        EditedDate := "2023-03-28T16:25:07.131Z",
	                                        EditedBy := "MFG\JulioGranillo",
	                                        SoftwareRevision := "v33.00")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			Inst : Ludh_SftyInstInternal (Usage := InOut,
			                Required := Yes,
			                Visible := Yes);
			InData : DINT[7] (Usage := InOut,
			                  RADIX := Decimal,
			                  Required := Yes,
			                  Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
			InData_Estop : DINT[2] (COMMENT[0] := "EStop Instruction Inputs",
			                       COMMENT[0].0 := "EnableIn",
			                       COMMENT[0].1 := "ResetType",
			                       COMMENT[0].2 := "ChannelA",
			                       COMMENT[0].3 := "ChannelB",
			                       COMMENT[0].4 := "CircuitReset",
			                       COMMENT[0].5 := "FaultReset",
			                       COMMENT[1] := "EStop Instruction Inputs",
			                       COMMENT[1].0 := "EnableOut",
			                       COMMENT[1].1 := "O1",
			                       COMMENT[1].2 := "CI",
			                       COMMENT[1].3 := "CRHO",
			                       COMMENT[1].4 := "II",
			                       COMMENT[1].5 := "FP",
			                       RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := "[0,0]");
			EstopIns : BOOL (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
			InData_LC : DINT[3] (COMMENT[0] := "Light Curtain Instruction Inputs",
			                    COMMENT[0].0 := "EnableIn",
			                    COMMENT[0].1 := "ResetType",
			                    COMMENT[0].2 := "ChannelA",
			                    COMMENT[0].3 := "ChannelB",
			                    COMMENT[0].4 := "MuteLightCurtain",
			                    COMMENT[0].5 := "CircuitReset",
			                    COMMENT[0].6 := "FaultReset",
			                    COMMENT[1] := "Light Curtain Instruction Inputs",
			                    COMMENT[1].0 := "InputFilterTime",
			                    COMMENT[2] := "Light Curtain Instruction Inputs",
			                    COMMENT[2].0 := "EnableOut",
			                    COMMENT[2].1 := "O1",
			                    COMMENT[2].2 := "CI",
			                    COMMENT[2].3 := "CRHO",
			                    COMMENT[2].4 := "LCB",
			                    COMMENT[2].5 := "LCM",
			                    COMMENT[2].6 := "II",
			                    COMMENT[2].7 := "FP",
			                    RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := "[0,0,0]");
			LCIns : BOOL (RADIX := Decimal,
			                ExternalAccess := None,
			                DefaultData := 0);
			InData_RIN : DINT[2] (COMMENT[0] := "Redundant Input Instruction Inputs",
			                     COMMENT[0].0 := "EnableIn",
			                     COMMENT[0].1 := "ResetType",
			                     COMMENT[0].2 := "ChannelA",
			                     COMMENT[0].3 := "ChannelB",
			                     COMMENT[0].4 := "CircuitReset",
			                     COMMENT[0].5 := "FaultReset",
			                     COMMENT[1] := "Redundant Input Instruction Inputs",
			                     COMMENT[1].0 := "EnableOut",
			                     COMMENT[1].1 := "O1",
			                     COMMENT[1].2 := "CI",
			                     COMMENT[1].3 := "CRHO",
			                     COMMENT[1].4 := "II",
			                     COMMENT[1].5 := "FP",
			                     RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := "[0,0]");
			RINIns : BOOL (RADIX := Decimal,
			                 ExternalAccess := None,
			                 DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "########################$N"
				    "Safety Instruction AOI$N"
				    "########################";
				N: OTE(Inst.Vis);
				N: [EQU(Inst.InstType,1) MOV(InData[0],InData_Estop[0]) MOV(InData[1],InData_Estop[1]) OTE(EstopIns) ,EQU(Inst.InstType,2) MOV(InData[0],InData_LC[0]) MOV(InData[1],InData_LC[1]) MOV(InData[2],InData_LC[2]) OTE(LCIns) ,EQU(Inst.InstType,3) MOV(InData[0],InData_RIN[0]) MOV(InData[1],InData_RIN[1]) OTE(RINIns) ];
				N: [XIC(EstopIns) XIC(InData_Estop[1].1) ,XIC(LCIns) XIC(InData_LC[2].1) ,XIC(RINIns) XIC(InData_RIN[1].1) ]OTE(Inst.O1);
				N: [XIC(EstopIns) XIC(InData_Estop[0].2) ,XIC(LCIns) XIC(InData_LC[0].2) ,XIC(RINIns) XIC(InData_RIN[0].2) ]OTE(Inst.ChA);
				N: [XIC(EstopIns) XIC(InData_Estop[0].3) ,XIC(LCIns) XIC(InData_LC[0].3) ,XIC(RINIns) XIC(InData_RIN[0].3) ]OTE(Inst.ChB);
				N: [XIC(EstopIns) XIC(InData_Estop[1].2) ,XIC(LCIns) XIC(InData_LC[2].2) ,XIC(RINIns) XIC(InData_RIN[1].2) ]OTE(Inst.CI);
				N: [XIC(EstopIns) XIC(InData_Estop[1].3) ,XIC(LCIns) XIC(InData_LC[2].3) ,XIC(RINIns) XIC(InData_RIN[1].3) ]OTE(Inst.CRHO);
				N: [XIC(EstopIns) XIC(InData_Estop[1].4) ,XIC(LCIns) XIC(InData_LC[2].6) ,XIC(RINIns) XIC(InData_RIN[1].4) ]OTE(Inst.II);
				N: [XIC(EstopIns) XIC(InData_Estop[1].5) ,XIC(LCIns) XIC(InData_LC[2].7) ,XIC(RINIns) XIC(InData_RIN[1].5) ]OTE(Inst.FP);
				N: XIC(LCIns)XIC(InData_LC[2].4)OTE(Inst.LCB);
				N: XIC(LCIns)XIC(InData_LC[2].5)OTE(Inst.LCM);
				RC: "########################$N"
				    "Safety Instruction$N"
				    "Status Indicator$N"
				    "########################";
				N: [XIC(Inst.O1) MOV(0,Inst.State) ,XIO(Inst.O1) XIO(Inst.FP) MOV(1,Inst.State) ,XIC(Inst.FP) MOV(2,Inst.State) ];
				RC: "########################$N"
				    "Description Codes$N"
				    "########################$N"
				    "$N"
				    "1-Instruction Inputs Off / 2- Inputs Inconsistent ChA Safe ChB Active at fault / 3 - Inputs Inconsistent ChB Safe ChA Active at Fault / 4 - Wiring or Contact Faulty - Inputs Inconsistent $N"
				    "5 -  Wiring or Contact Faulty ChA changed to Safe back to Active while ChB was active / 6 - Wiring or Contact Faulty ChB changed to Safe back to Active while ChB was Active$N"
				    "$N"
				    "11 - Cycle Inputs / 12 - CRHO Circuit reset held ON / 13 - Input status signal transitioned from ON to OFF while instruction was executing / 14 - Input status signal was OFF when instruction started$N"
				    "15 - Safety device was not tested at Startup$N"
				    "$N"
				    "0 - Normal Operation";
				N: NOP();
				N: [XIO(Inst.O1) XIO(Inst.ChA) XIO(Inst.ChB) XIO(Inst.CI) XIO(Inst.FP) MOV(1,Inst.InstFltMessage) ,[XIO(Inst.O1) XIC(Inst.ChA) XIO(Inst.ChB) XIO(Inst.CI) XIC(Inst.II) XIC(Inst.FP) ,EQU(Inst.FltCode,16#00004000) ] MOV(2,Inst.InstFltMessage) ,[XIO(Inst.O1) XIO(Inst.ChA) XIC(Inst.ChB) XIO(Inst.CI) XIC(Inst.II) XIC(Inst.FP) ,EQU(Inst.FltCode,16#00004001) ] MOV(3,Inst.InstFltMessage) ,XIO(Inst.O1) XIC(Inst.ChA) XIC(Inst.ChB) XIO(Inst.CI) XIC(Inst.II) XIC(Inst.FP) MOV(4,Inst.InstFltMessage) ,EQU(Inst.FltCode,16#00004002) MOV(5,Inst.InstFltMessage) ,EQU(Inst.FltCode,16#00004003) MOV(6,Inst.InstFltMessage) ,[XIO(Inst.O1) XIC(Inst.CI) XIO(Inst.FP) ,EQU(Inst.DiagCode,16#00004001) ] MOV(11,Inst.InstFltMessage) ,[XIO(Inst.O1) XIO(Inst.CI) XIC(Inst.CRHO) ,EQU(Inst.DiagCode,16#00000005) ] MOV(12,Inst.InstFltMessage) ,EQU(Inst.FltCode,16#00000020) MOV(13,Inst.InstFltMessage) ,EQU(Inst.DiagCode,16#00000020) MOV(14,Inst.InstFltMessage) ,EQU(Inst.DiagCode,16#00004000) MOV(15,Inst.InstFltMessage) ,XIC(Inst.O1) XIO(Inst.FP) MOV(0,Inst.InstFltMessage) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION ShiftRegiCntrl_Batch (Description := "Shift Register Control$Nfor Grouped data",
	                                                    Class := Standard,
	                                                    Revision := "1.1",
	                                                    RevisionExtension := "20191122",
	                                                    RevisionNote := "v1.1 Standard tag names",
	                                                    Vendor := "Hokuto",
	                                                    ExecutePrescan := No,
	                                                    ExecutePostscan := No,
	                                                    ExecuteEnableInFalse := No,
	                                                    CreatedDate := "2014-09-16T08:38:32.815Z",
	                                                    CreatedBy := "Not Available",
	                                                    EditedDate := "2022-01-05T16:13:14.545Z",
	                                                    EditedBy := "LUCID\DanWeinhold",
	                                                    SoftwareRevision := "v33.00",
	                                                    AdditionalHelpText := "This SRC_S will perform for model data transaction.$N$NReq_Move => Copy data [source] to [destination]. Then source will clear.$NReq_Copy => Copy data [source] to [destination]. Source will not clear.$NReq_Clear => Source will clear.")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpQtyData : DINT (Usage := Input,
			                      RADIX := Decimal,
			                      Required := Yes,
			                      Visible := Yes,
			                      DefaultData := 0);
			inpSR_Data : p_udt_Shift_Register_Data[2,128] (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			inpSR_State : p_udt_Shift_Register_State[2,128] (Usage := InOut,
			                       Required := Yes,
			                       Visible := Yes);
			inpDim0 : DINT (Description := "Start Shift Register Dimension0 xxxx[Dim1,Dim0]",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := Yes,
			                   Visible := Yes,
			                   DefaultData := 0);
			inpDim1 : DINT (Description := "Start Shift Register Dimension1 xxxx[Dim1,Dim0]",
			                   Usage := Input,
			                   RADIX := Decimal,
			                   Required := Yes,
			                   Visible := Yes,
			                   DefaultData := 0);
			inpChkDsbl : BOOL (Usage := Input,
			                      RADIX := Decimal,
			                      Required := Yes,
			                      Visible := Yes,
			                      DefaultData := 0);
			cmdFwd : BOOL (Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  DefaultData := 0);
			cmdRev : BOOL (Usage := Input,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  DefaultData := 0);
			stsBusy : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Faults : DINT (COMMENT.0 := "Operation overlap",
			                  COMMENT.1 := "Distination not empty",
			                  COMMENT.2 := "Spare",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0);
			stsFaulted : BOOL (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsFwdDone : BOOL (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsRevDone : BOOL (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			inpReset : BOOL (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			BusyIndiTmr : TIMER (ExternalAccess := None,
			                      DefaultData := "[0,0,0]");
			DataFwdCmd : BOOL (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			ons : DINT (RADIX := Decimal,
			              ExternalAccess := None,
			              DefaultData := 0);
			DataRevCmd : BOOL (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			FaultedIndiTmr : TIMER (ExternalAccess := None,
			                         DefaultData := "[0,0,0]");
			FwdDoneTmr : TIMER (ExternalAccess := None,
			                     DefaultData := "[0,0,0]");
			RevDoneTmr : TIMER (ExternalAccess := None,
			                     DefaultData := "[0,0,0]");
			wrkSource : DINT[5] (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := "[0,0,0,0,0]");
			SR_State_Busy : BOOL (RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			WhileIndex2 : DINT (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			WhileIndex1 : DINT (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			WhileCount : DINT (RADIX := Decimal,
			                     ExternalAccess := None,
			                     DefaultData := 0);
			Data_use : DINT (RADIX := Decimal,
			                   ExternalAccess := None,
			                   DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Shift Register Control  AOI$N"
				    "************************************************************$N"
				    "Batch$N"
				    "";
				N: NOP();
				N: [FLL(0,Data_use,1) ,LIM(1,inpQtyData,31) OTL(Data_use.[inpQtyData]) ];
				N: SUB(inpQtyData,1,WhileCount)OTU(SR_State_Busy);
				N: LBL(CHK_State)NOP();
				N: [COP(inpSR_Data[inpDim1,inpDim0+WhileCount].Model,wrkSource[0],1) ,COP(inpSR_Data[inpDim1,inpDim0+WhileCount].Style,wrkSource[1],1) ,COP(inpSR_Data[inpDim1,inpDim0+WhileCount].Variant,wrkSource[2],1) ,COP(inpSR_Data[inpDim1,inpDim0+WhileCount].SeqNum,wrkSource[3],1) ,COP(inpSR_Data[inpDim1,inpDim0+WhileCount].Route_to_Repair,wrkSource[4],1) ];
				N: [EQU(wrkSource[0],0) EQU(wrkSource[1],0) EQU(wrkSource[2],0) EQU(wrkSource[3],0) EQU(wrkSource[4],0) OTE(inpSR_State[inpDim1,inpDim0+WhileCount].Data_Empty) ,XIO(inpSR_State[inpDim1,inpDim0+WhileCount].Data_Empty) OTE(inpSR_State[inpDim1,inpDim0+WhileCount].Data_Existing) ,XIC(inpSR_State[inpDim1,inpDim0+WhileCount].Busy) OTL(SR_State_Busy) ];
				N: [XIC(cmdFwd) ,XIC(cmdRev) ][[XIC(inpSR_State[inpDim1,inpDim0+WhileCount].Busy) ,XIC(DataRevCmd) ,XIC(cmdRev) ] OTL(Faults.0) ,XIO(inpSR_State[inpDim1,inpDim0+WhileCount].Data_Empty) XIO(inpChkDsbl) OTL(Faults.1) ]OTU(inpSR_State[inpDim1,inpDim0+WhileCount].Busy);
				N: ADD(WhileCount,1,WhileCount);
				N: LES(WhileCount,inpQtyData)JMP(CHK_State);
				N: EQU(0,Faults)[XIC(cmdFwd) ONS(ons.0) OTL(DataFwdCmd) ,XIC(cmdRev) ONS(ons.1) OTL(DataRevCmd) ];
				N: NEQ(0,Faults)MOV(2000,FaultedIndiTmr.PRE)TON(FaultedIndiTmr,?,?);
				N: [XIC(FaultedIndiTmr.TT) ,XIC(FaultedIndiTmr.EN) ][OTE(stsFaulted) ,OTU(DataFwdCmd) ,OTU(DataRevCmd) ];
				N: XIC(inpReset)XIC(FaultedIndiTmr.DN)XIO(cmdFwd)XIO(cmdRev)XIO(SR_State_Busy)MOV(0,Faults);
				N: MOV(1000,BusyIndiTmr.PRE)MOV(500,FwdDoneTmr.PRE)MOV(500,RevDoneTmr.PRE);
				N: XIC(SR_State_Busy)TOF(BusyIndiTmr,?,?);
				N: [XIC(BusyIndiTmr.TT) ,XIC(BusyIndiTmr.EN) ]OTE(stsBusy);
				N: XIC(DataFwdCmd)XIO(DataRevCmd)XIO(SR_State_Busy)[OTL(inpSR_State[inpDim1,inpDim0+inpQtyData-1].Busy) ,COP(inpQtyData,WhileCount,1) SUB(WhileCount,1,WhileCount) ADD(inpDim0,WhileCount,WhileIndex1) ,SUB(WhileIndex1,1,WhileIndex2) ];
				N: LBL(Start_Fwd)NOP();
				N: XIC(DataFwdCmd)XIC(SR_State_Busy)[COP(inpSR_Data[inpDim1,WhileIndex2],inpSR_Data[inpDim1,WhileIndex1],1) COP(inpSR_State[inpDim1,WhileIndex2],inpSR_State[inpDim1,WhileIndex1],1) ,SUB(WhileCount,1,WhileCount) SUB(WhileIndex1,1,WhileIndex1) SUB(WhileIndex1,1,WhileIndex2) ];
				N: XIC(DataFwdCmd)XIC(SR_State_Busy)NEQ(WhileCount,0)JMP(Start_Fwd);
				N: XIC(DataFwdCmd)XIC(SR_State_Busy)EQU(WhileCount,0)[FLL(0,inpSR_Data[inpDim1,inpDim0],1) FLL(0,inpSR_State[inpDim1,inpDim0],1) ,OTU(DataFwdCmd) ,OTU(inpSR_State[inpDim1,inpDim0+inpQtyData-1].Busy) ,TOF(FwdDoneTmr,?,?) ];
				N: [XIC(FwdDoneTmr.EN) ,XIC(FwdDoneTmr.TT) ]OTE(stsFwdDone);
				N: XIC(DataRevCmd)XIO(DataFwdCmd)XIO(SR_State_Busy)[OTL(inpSR_State[inpDim1,inpDim0+inpQtyData-1].Busy) ,COP(inpQtyData,WhileCount,1) SUB(WhileCount,1,WhileCount) COP(inpDim0,WhileIndex1,1) ADD(WhileIndex1,1,WhileIndex2) ];
				N: LBL(Start_Rev)NOP();
				N: XIC(DataRevCmd)XIC(SR_State_Busy)[COP(inpSR_Data[inpDim1,WhileIndex2],inpSR_Data[inpDim1,WhileIndex1],1) COP(inpSR_State[inpDim1,WhileIndex2],inpSR_State[inpDim1,WhileIndex1],1) ,SUB(WhileCount,1,WhileCount) ADD(WhileIndex1,1,WhileIndex1) ADD(WhileIndex1,1,WhileIndex2) ];
				N: XIC(DataRevCmd)XIC(SR_State_Busy)NEQ(WhileCount,0)JMP(Start_Rev);
				N: XIC(DataRevCmd)XIC(SR_State_Busy)EQU(WhileCount,0)[FLL(0,inpSR_Data[inpDim1,inpDim0+inpQtyData-1],1) FLL(0,inpSR_State[inpDim1,inpDim0+inpQtyData-1],1) ,OTU(DataRevCmd) ,OTU(inpSR_State[inpDim1,inpDim0+inpQtyData-2].Busy) ,TOF(RevDoneTmr,?,?) ];
				N: [XIC(RevDoneTmr.EN) ,XIC(RevDoneTmr.TT) ]OTE(stsRevDone);
				N: [OTU(cmdFwd) ,OTU(cmdRev) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION ShiftRegiCntrl_MES (Description := "Shift Register Control$Nfor Single data MES",
	                                                  Class := Standard,
	                                                  Revision := "1.1",
	                                                  RevisionExtension := "20191122",
	                                                  RevisionNote := "v1.1 Standard tag names",
	                                                  Vendor := "Hokuto",
	                                                  ExecutePrescan := No,
	                                                  ExecutePostscan := No,
	                                                  ExecuteEnableInFalse := No,
	                                                  CreatedDate := "2014-09-16T08:38:32.815Z",
	                                                  CreatedBy := "Not Available",
	                                                  EditedDate := "2022-08-18T23:11:45.550Z",
	                                                  EditedBy := "MFG\JulioGranillo",
	                                                  SoftwareRevision := "v33.00",
	                                                  AdditionalHelpText := "This SRC_S will perform for model data transaction.$N$NReq_Move => Copy data [source] to [destination]. Then source will clear.$NReq_Copy => Copy data [source] to [destination]. Source will not clear.$NReq_Clear => Source will clear.")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpSourceData : udt_Shift_Register_Data (Usage := InOut,
			                         Required := Yes,
			                         Visible := Yes);
			inpSourceState : p_udt_Shift_Register_State (Usage := InOut,
			                          Required := Yes,
			                          Visible := Yes);
			inpDestinationData : udt_Shift_Register_Data (Usage := InOut,
			                              Required := Yes,
			                              Visible := Yes);
			inpDestinationState : p_udt_Shift_Register_State (Usage := InOut,
			                               Required := Yes,
			                               Visible := Yes);
			inpReset : BOOL (Usage := Input,
			                    RADIX := Decimal,
			                    Required := Yes,
			                    Visible := Yes,
			                    DefaultData := 0);
			cmdMove : BOOL (Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   DefaultData := 0);
			cmdCopy : BOOL (Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   DefaultData := 0);
			cmdClear : BOOL (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    DefaultData := 0);
			cmdOvrw : BOOL (Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   DefaultData := 0);
			stsBusy : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Faults : DINT (COMMENT.0 := "Operation overlap",
			                  COMMENT.1 := "Distination not empty",
			                  COMMENT.2 := "Spare",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0);
			stsFaulted : BOOL (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsMoveDone : BOOL (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			stsClearDone : BOOL (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			stsCopyDone : BOOL (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			stsOvrwDone : BOOL (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			inpManual : BOOL (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			BusyIndiTmr : TIMER (ExternalAccess := None,
			                      DefaultData := "[0,0,0]");
			DataMoveCmd : BOOL (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			DataClearCmd : BOOL (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			ons : DINT (RADIX := Decimal,
			              ExternalAccess := None,
			              DefaultData := 0);
			DataCopyCmd : BOOL (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			FaultedIndiTmr : TIMER (ExternalAccess := None,
			                         DefaultData := "[0,0,0]");
			MovDoneTmr : TIMER (ExternalAccess := None,
			                     DefaultData := "[0,0,0]");
			CopDoneTmr : TIMER (ExternalAccess := None,
			                     DefaultData := "[0,0,0]");
			ClrDoneTmr : TIMER (ExternalAccess := None,
			                     DefaultData := "[0,0,0]");
			wrkSource : DINT[10] (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := "[0,0,0,0,0,0,0,0,0,0]");
			DataOverWriteCmd : BOOL (RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			OvrwDoneTmr : TIMER (ExternalAccess := None,
			                      DefaultData := "[0,0,0]");
			wrkDestination : DINT[10] (RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := "[0,0,0,0,0,0,0,0,0,0]");
			hmiSRCName : STRING (ExternalAccess := Read Only,
			                     DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			wrkArraySize : INT (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			wrkArraySizeMaxIndex : INT (RADIX := Decimal,
			                               ExternalAccess := None,
			                               DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Shift Register Control  AOI$N"
				    "************************************************************$N"
				    "Single$N"
				    "";
				N: NOP();
				N: JMP(skiptext)LOWER(hmiSRCName,hmiSRCName);
				N: LBL(skiptext)[COP(inpSourceData.Model,wrkSource[0],1) ,COP(inpSourceData.Style,wrkSource[1],1) ,COP(inpSourceData.Variant,wrkSource[2],1) ,COP(inpSourceData.SeqNum,wrkSource[3],1) ,COP(inpSourceData.Route_to_Repair,wrkSource[4],1) ,COP(inpSourceData.PartID,wrkSource[5],1) ,COP(inpSourceData.JobType,wrkSource[6],1) ,COP(inpSourceData.State,wrkSource[7],1) ,COP(inpSourceData.ReqQty,wrkSource[8],1) ,COP(inpSourceData.PartStatus,wrkSource[9],1) ];
				N: [COP(inpDestinationData.Model,wrkDestination[0],1) ,COP(inpDestinationData.Style,wrkDestination[1],1) ,COP(inpDestinationData.Variant,wrkDestination[2],1) ,COP(inpDestinationData.SeqNum,wrkDestination[3],1) ,COP(inpDestinationData.Route_to_Repair,wrkDestination[4],1) ,COP(inpDestinationData.PartID,wrkDestination[5],1) ,COP(inpDestinationData.JobType,wrkDestination[6],1) ,COP(inpDestinationData.State,wrkDestination[7],1) ,COP(inpDestinationData.ReqQty,wrkDestination[8],1) ,COP(inpDestinationData.PartStatus,wrkDestination[9],1) ];
				N: EQU(wrkSource[0],0)EQU(wrkSource[1],0)EQU(wrkSource[2],0)EQU(wrkSource[3],0)EQU(wrkSource[4],0)EQU(wrkSource[5],0)EQU(wrkSource[6],0)EQU(wrkSource[7],0)EQU(wrkSource[8],0)EQU(wrkSource[9],0)EQU(inpSourceData.RFID.LEN,0)EQU(inpSourceData.JobNum.LEN,0)EQU(inpSourceData.PartNum.LEN,0)OTE(inpSourceState.Data_Empty);
				N: XIO(inpSourceState.Data_Empty)OTE(inpSourceState.Data_Existing);
				N: EQU(wrkDestination[0],0)EQU(wrkDestination[1],0)EQU(wrkDestination[2],0)EQU(wrkDestination[3],0)EQU(wrkDestination[4],0)EQU(wrkDestination[5],0)EQU(wrkDestination[6],0)EQU(wrkDestination[7],0)EQU(wrkDestination[8],0)EQU(wrkDestination[9],0)EQU(inpDestinationData.RFID.LEN,0)EQU(inpDestinationData.JobNum.LEN,0)EQU(inpDestinationData.PartNum.LEN,0)OTE(inpDestinationState.Data_Empty);
				N: XIO(inpDestinationState.Data_Empty)OTE(inpDestinationState.Data_Existing);
				N: XIC(cmdMove)ONS(ons.0)[[[XIC(inpSourceState.Busy) ,XIC(DataCopyCmd) ,XIC(DataClearCmd) ,XIC(DataOverWriteCmd) ,XIC(cmdCopy) ,XIC(cmdClear) ,XIC(cmdOvrw) ] OTL(Faults.0) ,XIO(inpDestinationState.Data_Empty) OTL(Faults.1) ] ,XIO(Faults.0) XIO(Faults.1) XIO(Faults.2) OTL(DataMoveCmd) ];
				N: XIC(cmdCopy)ONS(ons.1)[[[XIC(inpSourceState.Busy) ,XIC(DataMoveCmd) ,XIC(DataClearCmd) ,XIC(DataOverWriteCmd) ,XIC(cmdMove) ,XIC(cmdClear) ,XIC(cmdOvrw) ] OTL(Faults.0) ,XIO(inpDestinationState.Data_Empty) OTL(Faults.1) ] ,XIO(Faults.0) XIO(Faults.1) XIO(Faults.2) OTL(DataCopyCmd) ];
				N: XIC(cmdClear)ONS(ons.2)[[XIC(inpSourceState.Busy) ,XIC(DataMoveCmd) ,XIC(DataCopyCmd) ,XIC(DataOverWriteCmd) ,XIC(cmdMove) ,XIC(cmdCopy) ,XIC(cmdOvrw) ] OTL(Faults.0) ,XIO(Faults.0) OTL(DataClearCmd) ];
				N: XIC(cmdOvrw)ONS(ons.3)[[XIC(inpSourceState.Busy) ,XIC(DataMoveCmd) ,XIC(DataCopyCmd) ,XIC(DataClearCmd) ,XIC(cmdMove) ,XIC(cmdCopy) ,XIC(cmdClear) ] OTL(Faults.0) ,XIO(Faults.0) OTL(DataOverWriteCmd) ];
				N: NEQ(0,Faults)MOV(3000,FaultedIndiTmr.PRE)TON(FaultedIndiTmr,?,?);
				N: [XIC(FaultedIndiTmr.TT) ,XIC(FaultedIndiTmr.EN) ][OTE(stsFaulted) ,OTU(inpSourceState.Busy) ,OTU(DataMoveCmd) ,OTU(DataCopyCmd) ,OTU(DataClearCmd) ,OTU(DataOverWriteCmd) ];
				N: XIC(inpReset)XIC(FaultedIndiTmr.DN)XIO(cmdMove)XIO(cmdCopy)XIO(cmdClear)XIO(inpSourceState.Busy)MOV(0,Faults);
				N: MOV(1000,BusyIndiTmr.PRE)MOV(500,MovDoneTmr.PRE)MOV(500,CopDoneTmr.PRE)MOV(500,ClrDoneTmr.PRE)MOV(500,OvrwDoneTmr.PRE);
				N: XIC(inpSourceState.Busy)TOF(BusyIndiTmr,?,?);
				N: [XIC(BusyIndiTmr.TT) ,XIC(BusyIndiTmr.EN) ]OTE(stsBusy);
				N: XIC(DataMoveCmd)XIO(DataCopyCmd)XIO(DataClearCmd)XIO(DataOverWriteCmd)[XIO(inpDestinationState.Busy) COP(inpSourceData,inpDestinationData,1) COP(inpSourceState,inpDestinationState,1) OTL(inpSourceState.Busy) OTL(inpDestinationState.Busy) ,EQU(inpSourceData.Model,inpDestinationData.Model) EQU(inpSourceData.Style,inpDestinationData.Style) EQU(inpSourceData.Variant,inpDestinationData.Variant) EQU(inpSourceData.SeqNum,inpDestinationData.SeqNum) EQU(inpSourceData.Route_to_Repair,inpDestinationData.Route_to_Repair) EQU(inpSourceData.PartID,inpDestinationData.PartID) EQU(inpSourceData.JobType,inpDestinationData.JobType) EQU(inpSourceData.State,inpDestinationData.State) EQU(inpSourceData.ReqQty,inpDestinationData.ReqQty) EQU(inpSourceData.PartStatus,inpDestinationData.PartStatus) [FLL(0,inpSourceData,1) FLL(0,inpSourceState,1) ,OTU(DataMoveCmd) ,OTU(inpSourceState.Busy) ,OTU(inpDestinationState.Busy) ,TOF(MovDoneTmr,?,?) ] ];
				N: [XIC(MovDoneTmr.EN) ,XIC(MovDoneTmr.TT) ]OTE(stsMoveDone);
				N: XIO(DataMoveCmd)XIC(DataCopyCmd)XIO(DataClearCmd)XIO(DataOverWriteCmd)[XIO(inpDestinationState.Busy) COP(inpSourceData,inpDestinationData,1) COP(inpSourceState,inpDestinationState,1) OTL(inpSourceState.Busy) OTL(inpDestinationState.Busy) ,EQU(inpSourceData.Model,inpDestinationData.Model) EQU(inpSourceData.Style,inpDestinationData.Style) EQU(inpSourceData.Variant,inpDestinationData.Variant) EQU(inpSourceData.SeqNum,inpDestinationData.SeqNum) EQU(inpSourceData.Route_to_Repair,inpDestinationData.Route_to_Repair) EQU(inpSourceData.PartID,inpDestinationData.PartID) EQU(inpSourceData.JobType,inpDestinationData.JobType) EQU(inpSourceData.State,inpDestinationData.State) EQU(inpSourceData.ReqQty,inpDestinationData.ReqQty) EQU(inpSourceData.PartStatus,inpDestinationData.PartStatus) [OTU(DataCopyCmd) ,OTU(inpSourceState.Busy) ,OTU(inpDestinationState.Busy) ,TOF(CopDoneTmr,?,?) ] ];
				N: [XIC(CopDoneTmr.EN) ,XIC(CopDoneTmr.TT) ]OTE(stsCopyDone);
				N: XIO(DataMoveCmd)XIO(DataCopyCmd)XIC(DataClearCmd)XIO(DataOverWriteCmd)[FLL(0,inpSourceData,1) FLL(0,inpSourceState,1) OTL(inpSourceState.Busy) ,EQU(inpSourceData.Model,0) EQU(inpSourceData.Style,0) EQU(inpSourceData.Variant,0) EQU(inpSourceData.SeqNum,0) EQU(inpSourceData.Route_to_Repair,0) EQU(inpSourceData.PartID,'') EQU(inpSourceData.JobType,0) EQU(inpSourceData.State,0) EQU(inpSourceData.ReqQty,0) EQU(inpSourceData.PartStatus,0) [OTU(DataClearCmd) ,OTU(inpSourceState.Busy) ,TOF(ClrDoneTmr,?,?) ] ];
				N: [XIC(ClrDoneTmr.EN) ,XIC(ClrDoneTmr.TT) ]OTE(stsClearDone);
				N: XIO(DataMoveCmd)XIO(DataCopyCmd)XIO(DataClearCmd)XIC(DataOverWriteCmd)[XIO(inpDestinationState.Busy) COP(inpSourceData,inpDestinationData,1) COP(inpSourceState,inpDestinationState,1) OTL(inpSourceState.Busy) OTL(inpDestinationState.Busy) ,EQU(inpSourceData.Model,inpDestinationData.Model) EQU(inpSourceData.Style,inpDestinationData.Style) EQU(inpSourceData.Variant,inpDestinationData.Variant) EQU(inpSourceData.SeqNum,inpDestinationData.SeqNum) EQU(inpSourceData.Route_to_Repair,inpDestinationData.Route_to_Repair) EQU(inpSourceData.PartID,inpDestinationData.PartID) EQU(inpSourceData.JobType,inpDestinationData.JobType) EQU(inpSourceData.State,inpDestinationData.State) EQU(inpSourceData.ReqQty,inpDestinationData.ReqQty) EQU(inpSourceData.PartStatus,inpDestinationData.PartStatus) [OTU(DataOverWriteCmd) ,OTU(inpSourceState.Busy) ,OTU(inpDestinationState.Busy) ,TOF(OvrwDoneTmr,?,?) ] ];
				N: [XIC(OvrwDoneTmr.EN) ,XIC(OvrwDoneTmr.TT) ]OTE(stsOvrwDone);
				N: [OTU(cmdMove) ,OTU(cmdCopy) ,OTU(cmdClear) ,OTU(cmdOvrw) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION ShiftRegiCntrl_Single (Description := "Shift Register Control$Nfor Single data",
	                                                     Class := Standard,
	                                                     Revision := "1.2",
	                                                     RevisionExtension := "20201126",
	                                                     RevisionNote := "v1.1 Standard tag names$Nv1.2 MES Updates",
	                                                     Vendor := "Hokuto",
	                                                     ExecutePrescan := No,
	                                                     ExecutePostscan := No,
	                                                     ExecuteEnableInFalse := No,
	                                                     CreatedDate := "2014-09-16T08:38:32.815Z",
	                                                     CreatedBy := "Not Available",
	                                                     EditedDate := "2022-01-05T16:13:14.558Z",
	                                                     EditedBy := "LUCID\DanWeinhold",
	                                                     SoftwareRevision := "v33.00",
	                                                     AdditionalHelpText := "This SRC_S will perform for model data transaction.$N$NReq_Move => Copy data [source] to [destination]. Then source will clear.$NReq_Copy => Copy data [source] to [destination]. Source will not clear.$NReq_Clear => Source will clear.")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			inpSourceData : p_udt_Shift_Register_Data (Usage := InOut,
			                         Required := Yes,
			                         Visible := Yes);
			inpSourceState : p_udt_Shift_Register_State (Usage := InOut,
			                          Required := Yes,
			                          Visible := Yes);
			inpDestinationData : p_udt_Shift_Register_Data (Usage := InOut,
			                              Required := Yes,
			                              Visible := Yes);
			inpDestinationState : p_udt_Shift_Register_State (Usage := InOut,
			                               Required := Yes,
			                               Visible := Yes);
			inpReset : BOOL (Usage := Input,
			                    RADIX := Decimal,
			                    Required := Yes,
			                    Visible := Yes,
			                    DefaultData := 0);
			cmdMove : BOOL (Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   DefaultData := 0);
			cmdCopy : BOOL (Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   DefaultData := 0);
			cmdClear : BOOL (Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := Yes,
			                    DefaultData := 0);
			cmdOvrw : BOOL (Usage := Input,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   DefaultData := 0);
			stsBusy : BOOL (Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			Faults : DINT (COMMENT.0 := "Operation overlap",
			                  COMMENT.1 := "Distination not empty",
			                  COMMENT.2 := "Spare",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0);
			stsFaulted : BOOL (Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsMoveDone : BOOL (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			stsClearDone : BOOL (Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			stsCopyDone : BOOL (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			stsOvrwDone : BOOL (Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			inpManual : BOOL (Usage := Input,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     DefaultData := 0);
		END_PARAMETERS

		LOCAL_TAGS
			BusyIndiTmr : TIMER (ExternalAccess := None,
			                      DefaultData := "[0,0,0]");
			DataMoveCmd : BOOL (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			DataClearCmd : BOOL (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			ons : DINT (RADIX := Decimal,
			              ExternalAccess := None,
			              DefaultData := 0);
			DataCopyCmd : BOOL (RADIX := Decimal,
			                      ExternalAccess := None,
			                      DefaultData := 0);
			FaultedIndiTmr : TIMER (ExternalAccess := None,
			                         DefaultData := "[0,0,0]");
			MovDoneTmr : TIMER (ExternalAccess := None,
			                     DefaultData := "[0,0,0]");
			CopDoneTmr : TIMER (ExternalAccess := None,
			                     DefaultData := "[0,0,0]");
			ClrDoneTmr : TIMER (ExternalAccess := None,
			                     DefaultData := "[0,0,0]");
			wrkSource : DINT[10] (RADIX := Decimal,
			                    ExternalAccess := None,
			                    DefaultData := "[0,0,0,0,0,0,0,0,0,0]");
			DataOverWriteCmd : BOOL (RADIX := Decimal,
			                           ExternalAccess := None,
			                           DefaultData := 0);
			OvrwDoneTmr : TIMER (ExternalAccess := None,
			                      DefaultData := "[0,0,0]");
			wrkDestination : DINT[10] (RADIX := Decimal,
			                         ExternalAccess := None,
			                         DefaultData := "[0,0,0,0,0,0,0,0,0,0]");
			hmiSRCName : STRING (ExternalAccess := Read Only,
			                     DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			wrkArraySize : INT (RADIX := Decimal,
			                       ExternalAccess := None,
			                       DefaultData := 0);
			wrkArraySizeMaxIndex : INT (RADIX := Decimal,
			                               ExternalAccess := None,
			                               DefaultData := 0);
		END_LOCAL_TAGS

		ROUTINE Logic 
				RC: "************************************************************$N"
				    "Shift Register Control  AOI$N"
				    "************************************************************$N"
				    "Single$N"
				    "";
				N: NOP();
				N: JMP(skiptext)LOWER(hmiSRCName,hmiSRCName);
				N: LBL(skiptext)[COP(inpSourceData.Model,wrkSource[0],1) ,COP(inpSourceData.Style,wrkSource[1],1) ,COP(inpSourceData.Variant,wrkSource[2],1) ,COP(inpSourceData.SeqNum,wrkSource[3],1) ,COP(inpSourceData.Route_to_Repair,wrkSource[4],1) ,COP(inpSourceData.PartID,wrkSource[5],1) ,COP(inpSourceData.JobType,wrkSource[6],1) ,COP(inpSourceData.State,wrkSource[7],1) ,COP(inpSourceData.ReqQty,wrkSource[8],1) ,COP(inpSourceData.PartStatus,wrkSource[9],1) ];
				N: [COP(inpDestinationData.Model,wrkDestination[0],1) ,COP(inpDestinationData.Style,wrkDestination[1],1) ,COP(inpDestinationData.Variant,wrkDestination[2],1) ,COP(inpDestinationData.SeqNum,wrkDestination[3],1) ,COP(inpDestinationData.Route_to_Repair,wrkDestination[4],1) ,COP(inpDestinationData.PartID,wrkDestination[5],1) ,COP(inpDestinationData.JobType,wrkDestination[6],1) ,COP(inpDestinationData.State,wrkDestination[7],1) ,COP(inpDestinationData.ReqQty,wrkDestination[8],1) ,COP(inpDestinationData.PartStatus,wrkDestination[9],1) ];
				N: EQU(wrkSource[0],0)EQU(wrkSource[1],0)EQU(wrkSource[2],0)EQU(wrkSource[3],0)EQU(wrkSource[4],0)EQU(wrkSource[5],0)EQU(wrkSource[6],0)EQU(wrkSource[7],0)EQU(wrkSource[8],0)EQU(wrkSource[9],0)EQU(inpSourceData.RFID.LEN,0)EQU(inpSourceData.JobNum.LEN,0)EQU(inpSourceData.PartNum.LEN,0)OTE(inpSourceState.Data_Empty);
				N: XIO(inpSourceState.Data_Empty)OTE(inpSourceState.Data_Existing);
				N: EQU(wrkDestination[0],0)EQU(wrkDestination[1],0)EQU(wrkDestination[2],0)EQU(wrkDestination[3],0)EQU(wrkDestination[4],0)EQU(wrkDestination[5],0)EQU(wrkDestination[6],0)EQU(wrkDestination[7],0)EQU(wrkDestination[8],0)EQU(wrkDestination[9],0)EQU(inpDestinationData.RFID.LEN,0)EQU(inpDestinationData.JobNum.LEN,0)EQU(inpDestinationData.PartNum.LEN,0)OTE(inpDestinationState.Data_Empty);
				N: XIO(inpDestinationState.Data_Empty)OTE(inpDestinationState.Data_Existing);
				N: XIC(cmdMove)ONS(ons.0)[[[XIC(inpSourceState.Busy) ,XIC(DataCopyCmd) ,XIC(DataClearCmd) ,XIC(DataOverWriteCmd) ,XIC(cmdCopy) ,XIC(cmdClear) ,XIC(cmdOvrw) ] OTL(Faults.0) ,XIO(inpDestinationState.Data_Empty) OTL(Faults.1) ] ,XIO(Faults.0) XIO(Faults.1) XIO(Faults.2) OTL(DataMoveCmd) ];
				N: XIC(cmdCopy)ONS(ons.1)[[[XIC(inpSourceState.Busy) ,XIC(DataMoveCmd) ,XIC(DataClearCmd) ,XIC(DataOverWriteCmd) ,XIC(cmdMove) ,XIC(cmdClear) ,XIC(cmdOvrw) ] OTL(Faults.0) ,XIO(inpDestinationState.Data_Empty) OTL(Faults.1) ] ,XIO(Faults.0) XIO(Faults.1) XIO(Faults.2) OTL(DataCopyCmd) ];
				N: XIC(cmdClear)ONS(ons.2)[[XIC(inpSourceState.Busy) ,XIC(DataMoveCmd) ,XIC(DataCopyCmd) ,XIC(DataOverWriteCmd) ,XIC(cmdMove) ,XIC(cmdCopy) ,XIC(cmdOvrw) ] OTL(Faults.0) ,XIO(Faults.0) OTL(DataClearCmd) ];
				N: XIC(cmdOvrw)ONS(ons.3)[[XIC(inpSourceState.Busy) ,XIC(DataMoveCmd) ,XIC(DataCopyCmd) ,XIC(DataClearCmd) ,XIC(cmdMove) ,XIC(cmdCopy) ,XIC(cmdClear) ] OTL(Faults.0) ,XIO(Faults.0) OTL(DataOverWriteCmd) ];
				N: NEQ(0,Faults)MOV(3000,FaultedIndiTmr.PRE)TON(FaultedIndiTmr,?,?);
				N: [XIC(FaultedIndiTmr.TT) ,XIC(FaultedIndiTmr.EN) ][OTE(stsFaulted) ,OTU(inpSourceState.Busy) ,OTU(DataMoveCmd) ,OTU(DataCopyCmd) ,OTU(DataClearCmd) ,OTU(DataOverWriteCmd) ];
				N: XIC(inpReset)XIC(FaultedIndiTmr.DN)XIO(cmdMove)XIO(cmdCopy)XIO(cmdClear)XIO(inpSourceState.Busy)MOV(0,Faults);
				N: MOV(1000,BusyIndiTmr.PRE)MOV(500,MovDoneTmr.PRE)MOV(500,CopDoneTmr.PRE)MOV(500,ClrDoneTmr.PRE)MOV(500,OvrwDoneTmr.PRE);
				N: XIC(inpSourceState.Busy)TOF(BusyIndiTmr,?,?);
				N: [XIC(BusyIndiTmr.TT) ,XIC(BusyIndiTmr.EN) ]OTE(stsBusy);
				N: XIC(DataMoveCmd)XIO(DataCopyCmd)XIO(DataClearCmd)XIO(DataOverWriteCmd)[XIO(inpDestinationState.Busy) COP(inpSourceData,inpDestinationData,1) COP(inpSourceState,inpDestinationState,1) OTL(inpSourceState.Busy) OTL(inpDestinationState.Busy) ,EQU(inpSourceData.Model,inpDestinationData.Model) EQU(inpSourceData.Style,inpDestinationData.Style) EQU(inpSourceData.Variant,inpDestinationData.Variant) EQU(inpSourceData.SeqNum,inpDestinationData.SeqNum) EQU(inpSourceData.Route_to_Repair,inpDestinationData.Route_to_Repair) EQU(inpSourceData.PartID,inpDestinationData.PartID) EQU(inpSourceData.JobType,inpDestinationData.JobType) EQU(inpSourceData.State,inpDestinationData.State) EQU(inpSourceData.ReqQty,inpDestinationData.ReqQty) EQU(inpSourceData.PartStatus,inpDestinationData.PartStatus) [FLL(0,inpSourceData,1) FLL(0,inpSourceState,1) ,OTU(DataMoveCmd) ,OTU(inpSourceState.Busy) ,OTU(inpDestinationState.Busy) ,TOF(MovDoneTmr,?,?) ] ];
				N: [XIC(MovDoneTmr.EN) ,XIC(MovDoneTmr.TT) ]OTE(stsMoveDone);
				N: XIO(DataMoveCmd)XIC(DataCopyCmd)XIO(DataClearCmd)XIO(DataOverWriteCmd)[XIO(inpDestinationState.Busy) COP(inpSourceData,inpDestinationData,1) COP(inpSourceState,inpDestinationState,1) OTL(inpSourceState.Busy) OTL(inpDestinationState.Busy) ,EQU(inpSourceData.Model,inpDestinationData.Model) EQU(inpSourceData.Style,inpDestinationData.Style) EQU(inpSourceData.Variant,inpDestinationData.Variant) EQU(inpSourceData.SeqNum,inpDestinationData.SeqNum) EQU(inpSourceData.Route_to_Repair,inpDestinationData.Route_to_Repair) EQU(inpSourceData.PartID,inpDestinationData.PartID) EQU(inpSourceData.JobType,inpDestinationData.JobType) EQU(inpSourceData.State,inpDestinationData.State) EQU(inpSourceData.ReqQty,inpDestinationData.ReqQty) EQU(inpSourceData.PartStatus,inpDestinationData.PartStatus) [OTU(DataCopyCmd) ,OTU(inpSourceState.Busy) ,OTU(inpDestinationState.Busy) ,TOF(CopDoneTmr,?,?) ] ];
				N: [XIC(CopDoneTmr.EN) ,XIC(CopDoneTmr.TT) ]OTE(stsCopyDone);
				N: XIO(DataMoveCmd)XIO(DataCopyCmd)XIC(DataClearCmd)XIO(DataOverWriteCmd)[FLL(0,inpSourceData,1) FLL(0,inpSourceState,1) OTL(inpSourceState.Busy) ,EQU(inpSourceData.Model,0) EQU(inpSourceData.Style,0) EQU(inpSourceData.Variant,0) EQU(inpSourceData.SeqNum,0) EQU(inpSourceData.Route_to_Repair,0) EQU(inpSourceData.PartID,'') EQU(inpSourceData.JobType,0) EQU(inpSourceData.State,0) EQU(inpSourceData.ReqQty,0) EQU(inpSourceData.PartStatus,0) [OTU(DataClearCmd) ,OTU(inpSourceState.Busy) ,TOF(ClrDoneTmr,?,?) ] ];
				N: [XIC(ClrDoneTmr.EN) ,XIC(ClrDoneTmr.TT) ]OTE(stsClearDone);
				N: XIO(DataMoveCmd)XIO(DataCopyCmd)XIO(DataClearCmd)XIC(DataOverWriteCmd)[XIO(inpDestinationState.Busy) COP(inpSourceData,inpDestinationData,1) COP(inpSourceState,inpDestinationState,1) OTL(inpSourceState.Busy) OTL(inpDestinationState.Busy) ,EQU(inpSourceData.Model,inpDestinationData.Model) EQU(inpSourceData.Style,inpDestinationData.Style) EQU(inpSourceData.Variant,inpDestinationData.Variant) EQU(inpSourceData.SeqNum,inpDestinationData.SeqNum) EQU(inpSourceData.Route_to_Repair,inpDestinationData.Route_to_Repair) EQU(inpSourceData.PartID,inpDestinationData.PartID) EQU(inpSourceData.JobType,inpDestinationData.JobType) EQU(inpSourceData.State,inpDestinationData.State) EQU(inpSourceData.ReqQty,inpDestinationData.ReqQty) EQU(inpSourceData.PartStatus,inpDestinationData.PartStatus) [OTU(DataOverWriteCmd) ,OTU(inpSourceState.Busy) ,OTU(inpDestinationState.Busy) ,TOF(OvrwDoneTmr,?,?) ] ];
				N: [XIC(OvrwDoneTmr.EN) ,XIC(OvrwDoneTmr.TT) ]OTE(stsOvrwDone);
				N: [OTU(cmdMove) ,OTU(cmdCopy) ,OTU(cmdClear) ,OTU(cmdOvrw) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION

	ADD_ON_INSTRUCTION_DEFINITION vMES_v0100 (Description := "MES Common Process Instructions",
	                                          Class := Standard,
	                                          Revision := "1.2",
	                                          Vendor := "MAS",
	                                          ExecutePrescan := No,
	                                          ExecutePostscan := No,
	                                          ExecuteEnableInFalse := Yes,
	                                          CreatedDate := "2022-06-17T17:08:52.151Z",
	                                          CreatedBy := "AzureAD\AricSolomon",
	                                          EditedDate := "2023-05-15T14:54:37.390Z",
	                                          EditedBy := "ANGEL_VALENCIA\Angel",
	                                          SoftwareRevision := "v33.01")
		PARAMETERS
			EnableIn : BOOL (Description := "Enable Input - System Defined Parameter",
			                    Usage := Input,
			                    RADIX := Decimal,
			                    Required := No,
			                    Visible := No,
			                    ExternalAccess := Read Only);
			EnableOut : BOOL (Description := "Enable Output - System Defined Parameter",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := No,
			                     ExternalAccess := Read Only);
			stsFaultCode : DINT (Description := "Describes The Active MES Fault",
			                        Usage := Output,
			                        RADIX := Decimal,
			                        Required := No,
			                        Visible := Yes,
			                        ExternalAccess := Read Only,
			                        DefaultData := 0);
			stsLastFaultCode : DINT (Description := "Describes The Last MES Fault",
			                            Usage := Output,
			                            RADIX := Decimal,
			                            Required := No,
			                            Visible := Yes,
			                            ExternalAccess := Read Only,
			                            DefaultData := 0);
			stsLastTransactionTime : REAL (Description := "The Time It Took (In Second) For The Transaction To Complete",
			                                  Usage := Output,
			                                  RADIX := Float,
			                                  Required := No,
			                                  Visible := Yes,
			                                  ExternalAccess := Read Only,
			                                  DefaultData := 0.00000000e+000);
			stsAvgTransTime : REAL (Usage := Output,
			                           RADIX := Float,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0.00000000e+000);
			pinReq : uMES_User_Req_v1 (Usage := InOut,
			                  Required := Yes,
			                  Visible := Yes);
			poutHMI : uMES_HMI_v3 (Usage := InOut,
			                   Required := Yes,
			                   Visible := Yes);
			poutCmn : uMES_User_Results_v1 (Usage := InOut,
			                   Required := Yes,
			                   Visible := Yes);
			poutLastCmn : uMES_User_Results_v1 (Usage := InOut,
			                       Required := Yes,
			                       Visible := Yes);
			stsDiag : uMES_Diagnostics_v1 (Description := "Instruction Diagnostics",
			                   Usage := InOut,
			                   Required := Yes,
			                   Visible := Yes);
			stsFaulted : BOOL (Description := "MES Interface Faulted$NCheck Fault Code For More Information",
			                      Usage := Output,
			                      RADIX := Decimal,
			                      Required := No,
			                      Visible := Yes,
			                      ExternalAccess := Read Only,
			                      DefaultData := 0);
			stsTriggering : BOOL (Description := "Trigger MES",
			                         Usage := Output,
			                         RADIX := Decimal,
			                         Required := No,
			                         Visible := Yes,
			                         ExternalAccess := Read Only,
			                         DefaultData := 0);
			stsRetrying : BOOL (Description := "MES Handshake Is Being Retried",
			                       Usage := Output,
			                       RADIX := Decimal,
			                       Required := No,
			                       Visible := Yes,
			                       ExternalAccess := Read Only,
			                       DefaultData := 0);
			stsAcknowledged : BOOL (Description := "Acknowledged By MES",
			                           Usage := Output,
			                           RADIX := Decimal,
			                           Required := No,
			                           Visible := Yes,
			                           ExternalAccess := Read Only,
			                           DefaultData := 0);
			stsDone : BOOL (Description := "Call Completed",
			                   Usage := Output,
			                   RADIX := Decimal,
			                   Required := No,
			                   Visible := Yes,
			                   ExternalAccess := Read Only,
			                   DefaultData := 0);
			stsOK : BOOL (Description := "OK",
			                 Usage := Output,
			                 RADIX := Decimal,
			                 Required := No,
			                 Visible := Yes,
			                 ExternalAccess := Read Only,
			                 DefaultData := 0);
			stsNOK : BOOL (Description := "Not OK",
			                  Usage := Output,
			                  RADIX := Decimal,
			                  Required := No,
			                  Visible := Yes,
			                  ExternalAccess := Read Only,
			                  DefaultData := 0);
			stsFailed : BOOL (Description := "The Request To MES Has Failed",
			                     Usage := Output,
			                     RADIX := Decimal,
			                     Required := No,
			                     Visible := Yes,
			                     ExternalAccess := Read Only,
			                     DefaultData := 0);
			pinMES_RCV : uMES_IO_RCV_v1 (Usage := InOut,
			                      Required := Yes,
			                      Visible := Yes);
			poutMES_XMIT : uMES_IO_XMIT_v1 (Usage := InOut,
			                        Required := Yes,
			                        Visible := Yes);
		END_PARAMETERS

		LOCAL_TAGS
			Cntrl : uMES_Process_Trigger_v1 (Description := "Control",
			                ExternalAccess := None,
			                DefaultData := "[[0,250,0],0,[0,0,0],[0,500,0],0,0,0,0]");
			NULL_STRING_35 : STRING_35 (ExternalAccess := None,
			                         DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			ONS : DINT (RADIX := Decimal,
			              ExternalAccess := None,
			              DefaultData := 0);
			FltCodeOffset : DINT (Description := "Fault Code Offset",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			Trigger : BOOL (Description := "Trigger",
			                  RADIX := Decimal,
			                  ExternalAccess := None,
			                  DefaultData := 0);
			Reset : BOOL (Description := "Reset Ready For Build",
			                RADIX := Decimal,
			                ExternalAccess := None,
			                DefaultData := 0);
			Reset_TON : TIMER (Description := "Reset Ready For Build$NTime ON",
			                    ExternalAccess := None,
			                    DefaultData := "[0,0,0]");
			Transaction_Time_FIFO : CONTROL (Description := "Transaction Time FIFO",
			                                ExternalAccess := None,
			                                DefaultData := "[0,0,0]");
			FIFO_TimeDump : REAL (RADIX := Float,
			                        ExternalAccess := None,
			                        DefaultData := 0.00000000e+000);
			TransTime_FIFO : REAL[20] (RADIX := Float,
			                         ExternalAccess := None,
			                         DefaultData := "[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000]");
			Transaction_Time_AVE : CONTROL (ExternalAccess := None,
			                               DefaultData := "[0,20,0]");
			NULL_STRING_32 : STRING_32 (ExternalAccess := None,
			                         DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			NULL_STRING_17 : STRING_17 (ExternalAccess := None,
			                         DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			cfg_Config : uMES_User_Config_v1 (ExternalAccess := None,
			                     DefaultData := "[[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'],0,[0.00000000e+000,0.00000000e+000,0.00000000e+000],0]");
			bypass_toggle : DINT (Description := "bypass toggle value",
			                        RADIX := Decimal,
			                        ExternalAccess := None,
			                        DefaultData := 0);
			hmi_trigger_req : BOOL (Description := "hmi trigger request",
			                          RADIX := Decimal,
			                          ExternalAccess := None,
			                          DefaultData := 0);
			NULL_STRING : STRING (ExternalAccess := None,
			                      DefaultData := "[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00']");
			ConfigVisibility_TON : TIMER (Description := "Configuration Screen Visibility$NTimer",
			                               ExternalAccess := None,
			                               DefaultData := "[0,0,0]");
		END_LOCAL_TAGS

		ROUTINE EnableInFalse 
				RC: "###############################################################################################$N"
				    "Create Date: 2022.06.17$N"
				    "Created by: A.Solomon, MAS Equipment & Engineering$N"
				    "Last Revision Date: 2022.06.20$N"
				    "Last Revised by: A.Solomon, MAS Equipment & Engineering$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				N: [MOV(-2,stsFaultCode) ,OTE(stsFaulted) ];
				N: XIC(stsDone)XIO(stsDone)OTE(stsDone);
				N: XIC(stsRetrying)XIO(stsRetrying)OTE(stsRetrying);
				N: XIC(stsNOK)XIO(stsNOK)OTE(stsNOK);
				N: XIC(stsOK)XIO(stsOK)OTE(stsOK);
				N: FLL(0,poutMES_XMIT,1);
				N: FLL(0,poutCmn,1);
		END_ROUTINE

		ROUTINE Logic 
				RC: "###############################################################################################$N"
				    "Create Date: 2022.06.17$N"
				    "Created by: A.Solomon, MAS Equipment & Engineering$N"
				    "Last Revision Date: 2023.01.25$N"
				    "Last Revised by: A.Solomon, MAS Equipment & Engineering$N"
				    "################################################################################################";
				N: NOP();
				RC: "###############################################################################################$N"
				    "If MES Bypass Is Active$N"
				    "Clears The Received Data From MES $N"
				    "################################################################################################$N"
				    "";
				N: XIC(pinReq.Bypass.Active)FLL(0,pinMES_RCV,1);
				RC: "###############################################################################################$N"
				    "Oneshot When User Requests To Reset The Instruction$N"
				    "################################################################################################$N"
				    "";
				N: [XIC(pinReq.Retry) ,XIC(poutHMI.ResetPB.0) ,XIC(Reset_TON.EN) ]XIO(Reset)[MOV(500,Reset_TON.PRE) TON(Reset_TON,?,?) ,XIO(Reset_TON.DN) OTE(Reset) ];
				RC: "###############################################################################################$N"
				    "Request To Bypass MES Communications$N"
				    "################################################################################################$N"
				    "";
				N: [EQU(bypass_toggle,1) ,XIC(pinReq.Bypass.Active) ]OTE(Cntrl.Bypassed);
				N: XIC(poutHMI.EnableBypassPB.0)ADD(bypass_toggle,1,bypass_toggle);
				N: [GRT(bypass_toggle,1) ,LES(bypass_toggle,0) ]MOV(0,bypass_toggle);
				RC: "###############################################################################################$N"
				    "Controls For Manually Triggering The Instruction From The HMI$N"
				    "################################################################################################$N"
				    "";
				N: [XIC(poutHMI.ResendPB.0) ,XIC(hmi_trigger_req) ]XIO(stsDone)XIO(stsFaulted)XIO(pinReq.Trigger)XIO(pinMES_RCV.Trigger)XIO(Reset)OTE(hmi_trigger_req);
				RC: "###############################################################################################$N"
				    "Trigger MES$N"
				    "################################################################################################$N"
				    "";
				N: [[XIC(pinReq.Trigger) ,XIC(hmi_trigger_req) ] XIO(pinMES_RCV.Trigger) ,XIO(pinReq.Trigger) XIC(pinMES_RCV.Trigger) ]XIO(Reset)OTE(Trigger);
				N: XIC(pinMES_RCV.Trigger)OTE(poutCmn.Trigger);
				RC: "###############################################################################################$N"
				    "Define The Area Name For MES Lookup$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Trigger)XIO(pinReq.Bypass.Active)COP(cfg_Config.AreaName,poutMES_XMIT.AreaName,1);
				RC: "###############################################################################################$N"
				    "The Query Identifier TO MES$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Trigger)XIO(pinReq.Bypass.Active)[COP(pinReq.SerialNumber,poutMES_XMIT.SerialNumber,1) ,COP(pinReq.SerialNumber_Child,poutMES_XMIT.SerialNumber_Child,1) ,COP(pinReq.VIN,poutMES_XMIT.VIN,1) ,COP(pinReq.OrderState,poutMES_XMIT.OrderState,1) ,MOV(pinReq.SequenceNumber,poutMES_XMIT.SequenceNumber) ,COP(pinReq.Carrier_ID,poutMES_XMIT.Carrier_ID,1) ,COP(pinReq.RFID,poutMES_XMIT.RFID,1) ,COP(pinReq.Identifier,poutMES_XMIT.Identifier,1) ,COP(pinReq.Spare,poutMES_XMIT.Spare,1) ];
				RC: "###############################################################################################$N"
				    "The Query Identifier FROM MES$N"
				    "################################################################################################$N"
				    "";
				N: XIC(pinMES_RCV.Trigger)[COP(pinMES_RCV.SerialNumber,poutCmn.SerialNumber,1) ,COP(pinMES_RCV.SerialNumber_Child,poutCmn.SerialNumber_Child,1) ,COP(pinMES_RCV.VIN,poutCmn.VIN,1) ,COP(pinMES_RCV.OrderState,poutCmn.OrderState,1) ,MOV(pinMES_RCV.SequenceNumber,poutCmn.SequenceNumber) ,COP(pinMES_RCV.Carrier_ID,poutCmn.Carrier_ID,1) ,COP(pinMES_RCV.RFID,poutCmn.RFID,1) ,COP(pinMES_RCV.Identifier,poutCmn.Identifier,1) ,COP(pinMES_RCV.Spare,poutCmn.Spare,1) ,COP(pinMES_RCV.OptionCode,poutCmn.OptionCode,1) ,COP(pinMES_RCV.OptionCodeArray,poutCmn.OptionCodeArray,1) ];
				RC: "################################################################################################$N"
				    "###############################################################################################$N"
				    "Get Build Instructions Trigger Request To MES$N"
				    "################################################################################################$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				N: MOV(250,Cntrl.Start_ONDelay.PRE);
				RC: "###############################################################################################$N"
				    "Debounce Timer To Make Sure Data Is Not Changing While Starting The Trigger$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Trigger)[XIC(pinReq.Trigger) [NEQ(pinReq.SerialNumber,NULL_STRING_35) [EQU(pinReq.SerialNumber,poutMES_XMIT.SerialNumber) ,XIC(pinReq.Bypass.Active) ] ,NEQ(pinReq.SerialNumber_Child,NULL_STRING_35) [EQU(pinReq.SerialNumber_Child,poutMES_XMIT.SerialNumber_Child) ,XIC(pinReq.Bypass.Active) ] ,NEQ(pinReq.VIN,NULL_STRING_35) [EQU(pinReq.VIN,poutMES_XMIT.VIN) ,XIC(pinReq.Bypass.Active) ] ,NEQ(pinReq.SequenceNumber,0) [EQU(pinReq.SequenceNumber,poutMES_XMIT.SequenceNumber) ,XIC(pinReq.Bypass.Active) ] ,NEQ(pinReq.Carrier_ID,NULL_STRING_17) [EQU(pinReq.Carrier_ID,poutMES_XMIT.Carrier_ID) ,XIC(pinReq.Bypass.Active) ] ,NEQ(pinReq.RFID,NULL_STRING_35) [EQU(pinReq.RFID,poutMES_XMIT.RFID) ,XIC(pinReq.Bypass.Active) ] ,NEQ(pinReq.Identifier,NULL_STRING_35) [EQU(pinReq.Identifier,poutMES_XMIT.Identifier) ,XIC(pinReq.Bypass.Active) ] ] ,XIC(pinMES_RCV.Trigger) ]TON(Cntrl.Start_ONDelay,?,?);
				RC: "###############################################################################################$N"
				    "Conditions To Hit The Trigger To MES$N"
				    "Counts The Number Of Triggers Attempted This Cycle$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Cntrl.Start_ONDelay.DN)XIO(Cntrl.Done)XIO(Cntrl.Retry)XIO(Cntrl.Faulted)XIO(Cntrl.Failed)[XIC(pinReq.Trigger) LES(Cntrl.Count,cfg_Config.MaxRetries) ,XIC(pinMES_RCV.Trigger) ,XIC(Cntrl.Start) ][OTE(Cntrl.Start) ,ONS(ONS.0) ADD(Cntrl.Count,1,Cntrl.Count) ];
				RC: "###############################################################################################$N"
				    "MES Trigger To Get Build Instructions$N"
				    "Conditions To Say That This Process Is Active$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Cntrl.Start)[OTE(Cntrl.Active) ,OTE(stsTriggering) ,XIO(pinReq.Bypass.Active) XIC(pinReq.Trigger) OTE(poutMES_XMIT.Trigger) ];
				RC: "###############################################################################################$N"
				    "Transaction Timers$N"
				    "################################################################################################";
				N: NOP();
				N: [XIC(Trigger) ONS(ONS.1) ,XIC(Reset) ]RES(stsDiag.TransactionTimer);
				N: XIC(Cntrl.Start_ONDelay.DN)XIO(Cntrl.Done)XIO(Cntrl.Faulted)XIO(Cntrl.Failed)MOV(999999,stsDiag.TransactionTimer.PRE)RTO(stsDiag.TransactionTimer,?,?);
				N: NEQ(stsDiag.TransactionTimer.ACC,0)DIV(stsDiag.TransactionTimer.ACC,1000,stsLastTransactionTime);
				N: XIC(Cntrl.Done)MOV(20,Transaction_Time_FIFO.LEN)[XIC(Transaction_Time_FIFO.DN) FFU(TransTime_FIFO[0],FIFO_TimeDump,Transaction_Time_FIFO,?,?) ,FFL(stsLastTransactionTime,TransTime_FIFO[0],Transaction_Time_FIFO,?,?) ];
				N: XIC(Cntrl.Done)MOV(Transaction_Time_FIFO.POS,Transaction_Time_AVE.LEN)AVE(TransTime_FIFO[0],0,stsAvgTransTime,Transaction_Time_AVE,?,?);
				RC: "###############################################################################################$N"
				    "Sets The Time Delay Before Retrying A Trigger$N"
				    "(In Seconds)$N"
				    "[0] = First Retry$N"
				    "[1] = Second Retry$N"
				    "[2] = Third Retry & HIgher$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Cntrl.Active)[EQU(Cntrl.Count,1) MUL(cfg_Config.RetryTimer[0],1000,Cntrl.Retry_ONDelay.PRE) ,EQU(Cntrl.Count,2) MUL(cfg_Config.RetryTimer[1],1000,Cntrl.Retry_ONDelay.PRE) ,GEQ(Cntrl.Count,3) MUL(cfg_Config.RetryTimer[2],1000,Cntrl.Retry_ONDelay.PRE) ,GRT(Cntrl.Count,0) LEQ(Cntrl.Count,cfg_Config.MaxRetries) TON(Cntrl.Retry_ONDelay,?,?) ];
				RC: "###############################################################################################$N"
				    "Handles A Retry Of The Trigger If It Has Failed$N"
				    "################################################################################################$N"
				    "";
				N: [XIC(Cntrl.Retry_ONDelay.DN) ,XIC(Cntrl.Retry) ]XIO(pinMES_RCV.Trigger)XIO(Cntrl.Retry_OFFDelay.DN)[OTE(Cntrl.Retry) ,MOV(500,Cntrl.Retry_OFFDelay.PRE) TON(Cntrl.Retry_OFFDelay,?,?) ];
				RC: "###############################################################################################$N"
				    "MES Has Responed$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Cntrl.Start)[EQU(pinMES_RCV.Response,-1) ,XIC(pinMES_RCV.Trigger) EQU(pinReq.Status_Code,-1) ,XIC(pinReq.Bypass.Active) ,XIC(Cntrl.Ackd) ][OTE(Cntrl.Ackd) ,XIC(pinMES_RCV.Trigger) MOV(-1,poutMES_XMIT.Response) ,OTE(stsAcknowledged) ];
				RC: "###############################################################################################$N"
				    "Maps The Build Status From MES To The Common Tag$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Trigger)[XIC(Cntrl.Ackd) [XIC(pinMES_RCV.OK) ,XIC(pinReq.Bypass.Active) XIC(pinReq.Bypass.Force_OK) XIO(pinReq.Bypass.Force_NOK) ] ,XIC(poutCmn.OK) ]XIO(pinMES_RCV.NOK)[OTE(poutCmn.OK) ,OTE(stsOK) ];
				N: XIC(Trigger)[XIO(pinReq.Bypass.Active) MOV(pinMES_RCV.Status_Code,poutCmn.Status_Code) ,XIC(pinReq.Bypass.Active) MOV(-1,poutCmn.Status_Code) ];
				N: XIC(Trigger)[XIC(Cntrl.Ackd) [XIC(pinMES_RCV.NOK) ,XIC(pinReq.Bypass.Active) XIO(pinReq.Bypass.Force_OK) XIC(pinReq.Bypass.Force_NOK) ] ,XIC(poutCmn.NOK) ]XIO(pinMES_RCV.OK)[OTE(poutCmn.NOK) ,OTE(stsNOK) ];
				RC: "###############################################################################################$N"
				    "The Trigger Handshake Has Been Completed$N"
				    "Data Is Copied Over To The Common Build Status Tags$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Trigger)[XIC(Cntrl.Ackd) [XIC(pinReq.Trigger) EQU(pinMES_RCV.Response,1) ,XIC(pinMES_RCV.Trigger) EQU(pinReq.Status_Code,1) ,XIC(pinReq.Bypass.Active) ] ,XIC(Cntrl.Done) ][XIO(pinMES_RCV.Trigger) XIO(pinReq.Bypass.Active) [COP(pinMES_RCV.SerialNumber,poutCmn.SerialNumber,1) ,COP(pinMES_RCV.SerialNumber_Child,poutCmn.SerialNumber_Child,1) ,COP(pinMES_RCV.VIN,poutCmn.VIN,1) ,COP(pinMES_RCV.OrderState,poutCmn.OrderState,1) ,MOV(pinMES_RCV.SequenceNumber,poutCmn.SequenceNumber) ,COP(pinMES_RCV.Carrier_ID,poutCmn.Carrier_ID,1) ,COP(pinMES_RCV.RFID,poutCmn.RFID,1) ,COP(pinMES_RCV.Identifier,poutCmn.Identifier,1) ,COP(pinMES_RCV.Spare,poutCmn.Spare,1) ,COP(pinMES_RCV.OptionCode,poutCmn.OptionCode,1) ,COP(pinMES_RCV.OptionCodeArray,poutCmn.OptionCodeArray,1) ] ,XIC(pinReq.Bypass.Active) [COP(pinReq.SerialNumber,poutCmn.SerialNumber,1) ,COP(pinReq.SerialNumber_Child,poutCmn.SerialNumber_Child,1) ,COP(pinReq.VIN,poutCmn.VIN,1) ,MOV(pinReq.SequenceNumber,poutCmn.SequenceNumber) ,COP(pinReq.Carrier_ID,poutCmn.Carrier_ID,1) ,COP(pinReq.RFID,poutCmn.RFID,1) ,COP(pinReq.Identifier,poutCmn.Identifier,1) ,COP(pinReq.Spare,poutCmn.Spare,1) ,COP(pinReq.OptionCode,poutCmn.OptionCode,1) ,COP(pinReq.OptionCodeArray,poutCmn.OptionCodeArray,1) ] ,XIC(pinMES_RCV.Trigger) MOV(1,poutMES_XMIT.Response) ,COP(poutCmn,poutLastCmn,1) ,OTE(stsDone) ,OTE(Cntrl.Done) ];
				RC: "###############################################################################################$N"
				    "The Handshake With MES Has FAILED$N"
				    "################################################################################################$N"
				    "";
				N: [XIC(Cntrl.Retry) ,XIC(Cntrl.Failed) ]EQU(Cntrl.Count,cfg_Config.MaxRetries)[OTE(Cntrl.Failed) ,OTE(stsFailed) ];
				RC: "###############################################################################################$N"
				    "Send OK To MES$N"
				    "################################################################################################$N"
				    "";
				N: XIC(pinReq.OK)XIO(pinReq.Bypass.Active)OTE(poutMES_XMIT.OK);
				RC: "###############################################################################################$N"
				    "Send NOK To MES$N"
				    "################################################################################################$N"
				    "";
				N: XIC(pinReq.NOK)XIO(pinReq.Bypass.Active)OTE(poutMES_XMIT.NOK);
				RC: "###############################################################################################$N"
				    "Send Status Code To MES$N"
				    "################################################################################################$N"
				    "";
				N: NEQ(pinReq.Status_Code,0)XIO(pinReq.Bypass.Active)MOV(pinReq.Status_Code,poutMES_XMIT.Status_Code);
				N: [XIC(S:FS) ,XIO(Trigger) ,LES(Cntrl.Count,0) ,XIC(pinReq.FaultReset) ONS(ONS.2) XIC(Cntrl.Failed) ]MOV(0,Cntrl.Count);
				RC: "################################################################################################$N"
				    "################################################################################################$N"
				    "Get Build Instructions Request To MES$N"
				    "Fault Codes$N"
				    "################################################################################################$N"
				    "################################################################################################";
				N: NOP();
				RC: "###############################################################################################$N"
				    "Handles Faults Or Errors Detected In The Transaction$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				N: [XIC(S:FS) ,XIC(Reset) ,XIC(pinReq.FaultReset) ONS(ONS.3) ]MOV(0,Cntrl.FaultCode);
				RC: "###############################################################################################$N"
				    "Fault: MES Get Build Request Has Exceeded The Allowed Amount Of Retries$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Cntrl.Failed)MOV(101,Cntrl.FaultCode);
				RC: "###############################################################################################$N"
				    "Fault: Serial Number, VIN Or Sequence Number Is Missing From Request$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Trigger)XIC(pinReq.Trigger)EQU(pinReq.SerialNumber,NULL_STRING_35)EQU(pinReq.SerialNumber_Child,NULL_STRING_35)EQU(pinReq.VIN,NULL_STRING_35)EQU(pinReq.SequenceNumber,0)EQU(pinReq.Carrier_ID,NULL_STRING_17)EQU(pinReq.RFID,NULL_STRING_35)EQU(pinReq.Identifier,NULL_STRING_35)MOV(102,Cntrl.FaultCode);
				RC: "###############################################################################################$N"
				    "Fault: Area Name Is Missing From Request$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Trigger)EQU(cfg_Config.AreaName,NULL_STRING_35)MOV(103,Cntrl.FaultCode);
				RC: "###############################################################################################$N"
				    "Fault: The Configured Max Retries Is Invalid$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Trigger)XIC(pinReq.Trigger)LEQ(cfg_Config.MaxRetries,0)MOV(104,Cntrl.FaultCode);
				RC: "###############################################################################################$N"
				    "Fault: The Configured Retry Time Is Invalid$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Trigger)XIC(pinReq.Trigger)[LEQ(cfg_Config.RetryTimer[0],0.0) ,GEQ(cfg_Config.MaxRetries,2) LEQ(cfg_Config.RetryTimer[1],0.0) ,GEQ(cfg_Config.MaxRetries,3) LEQ(cfg_Config.RetryTimer[2],0.0) ]MOV(105,Cntrl.FaultCode);
				RC: "###############################################################################################$N"
				    "Fault: Triggers For BOTH Push & Pull Are ON$N"
				    "################################################################################################";
				N: XIC(pinReq.Trigger)XIC(pinMES_RCV.Trigger)MOV(106,Cntrl.FaultCode);
				RC: "###############################################################################################$N"
				    "Custom MES Fault Code Sent From MES Directly$N"
				    "################################################################################################$N"
				    "";
				N: XIC(Cntrl.Start)LEQ(Cntrl.Count,cfg_Config.MaxRetries)[LES(pinMES_RCV.Response,-1) ,GRT(pinMES_RCV.Response,1) ]MOV(pinMES_RCV.Response,Cntrl.FaultCode);
				N: NEQ(Cntrl.FaultCode,0)OTE(Cntrl.Faulted);
				RC: "###############################################################################################$N"
				    "Generates The Fault Code For Use Outside Of The Add-On Instruction$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				N: XIC(Cntrl.Faulted)ADD(cfg_Config.FaultCodeOffset,Cntrl.FaultCode,FltCodeOffset)ADD(FltCodeOffset,1000,stsDiag.FaultCode);
				N: XIO(Cntrl.Faulted)[MOV(0,FltCodeOffset) ,MOV(0,stsDiag.FaultCode) ];
				RC: "###############################################################################################$N"
				    "Maps Out The Fault Code$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				N: MOV(stsDiag.FaultCode,stsFaultCode);
				N: NEQ(stsDiag.FaultCode,0)MOV(stsDiag.FaultCode,stsDiag.LastFaultCode);
				N: NEQ(stsFaultCode,0)MOV(stsFaultCode,stsLastFaultCode);
				RC: "###############################################################################################$N"
				    "Maps Out The IO From MES$N"
				    "################################################################################################";
				N: NOP();
				N: XIC(Cntrl.Retry)OTE(stsRetrying);
				N: XIC(Cntrl.Faulted)[OTE(stsDiag.Faulted) ,OTE(stsFaulted) ];
				RC: "###############################################################################################$N"
				    "When A Fault Occurs, Captures Tag Values When The Fault Had Occured$N"
				    "For Trouble-Shooting Issues$N"
				    "################################################################################################";
				N: NOP();
				N: XIC(Cntrl.Faulted)ONS(ONS.4)[GSV(WallClockTime,,LocalDateTime,stsDiag.States.DateTime.Year) ,XIO(pinReq.Bypass.Active) OTU(stsDiag.States.BypassActive) ,XIC(pinReq.Bypass.Active) OTL(stsDiag.States.BypassActive) ,MOV(Cntrl.FaultCode,stsDiag.States.FaultCode) MOV(Cntrl.Count,stsDiag.States.TriggerCount) ,COP(stsDiag.TransactionTimer,stsDiag.States.TransactionTimers,1) ,COP(pinReq.SerialNumber,stsDiag.States.SerialNumber,1) COP(pinReq.VIN,stsDiag.States.VIN,1) ,COP(pinReq.SerialNumber_Child,stsDiag.States.SerialNumber_Child,1) COP(pinReq.OrderState,stsDiag.States.OrderState,1) ,COP(pinReq.Carrier_ID,stsDiag.States.Carrier_ID,1) COP(pinReq.RFID,stsDiag.States.RFID,1) ,COP(pinReq.Identifier,stsDiag.States.Identifier,1) COP(pinReq.Spare,stsDiag.States.Spare,1) ,MOV(pinReq.SequenceNumber,stsDiag.States.SequenceNumber) ,COP(cfg_Config,stsDiag.States.Config,1) ,COP(pinMES_RCV,stsDiag.States.MES_RCV,1) COP(poutMES_XMIT,stsDiag.States.MES_XMIT,1) ];
				RC: "###############################################################################################$N"
				    "HMI Display Controls & Configuration Controls$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				RC: "################################################################################################################$N"
				    "HMI Display Controls & Configuration Controls$N"
				    "Main Skin  - Skin Edge Color Control$N"
				    "Color 0=Green, 1=Red, 2=Yellow$N"
				    "################################################################################################################";
				N: [XIO(pinReq.Bypass.Active) XIO(Cntrl.Faulted) MOV(0,poutHMI.FltColor) ,XIC(Cntrl.Faulted) MOV(1,poutHMI.FltColor) ,XIC(pinReq.Bypass.Active) XIO(Cntrl.Faulted) MOV(2,poutHMI.FltColor) ];
				RC: "################################################################################################################$N"
				    "HMI Display Controls & Configuration Controls$N"
				    "Main Skin  -  Indicators $N"
				    "################################################################################################################";
				N: [XIC(Cntrl.Faulted) OTE(poutHMI.Faulted) ,XIC(poutCmn.OK) OTE(poutHMI.OK) ,XIC(poutCmn.NOK) OTE(poutHMI.NOK) ,XIC(stsTriggering) OTE(poutHMI.Start) ,XIC(Cntrl.Active) OTE(poutHMI.Active) ,XIC(Cntrl.Ackd) OTE(poutHMI.Ackd) ,XIC(Cntrl.Done) OTE(poutHMI.Done) ,XIC(Cntrl.Failed) OTE(poutHMI.Failed) ];
				RC: "################################################################################################################$N"
				    "HMI Display Controls & Configuration Controls$N"
				    "Main Skin  -  Data Mapping $N"
				    "################################################################################################################";
				N: [COP(poutCmn.SerialNumber,poutHMI.SerialNumber,1) COP(poutCmn.VIN,poutHMI.VIN,1) ,MOV(poutCmn.SequenceNumber,poutHMI.SequenceNumber) COP(poutCmn.SerialNumber_Child,poutHMI.SerialNum_Child1,1) ,COP(poutCmn.Carrier_ID,poutHMI.Carrier_ID,1) COP(poutCmn.RFID,poutHMI.RFID,1) COP(poutCmn.Identifier,poutHMI.Identifier,1) ];
				RC: "################################################################################################################$N"
				    "HMI Display Controls & Configuration Controls$N"
				    "Fault Skin  -  Move Fault Code to Fault Skin for Display $N"
				    "################################################################################################################";
				N: MOV(Cntrl.FaultCode,poutHMI.FaultCode);
				RC: "################################################################################################################$N"
				    "HMI Display Controls & Configuration Controls$N"
				    "Config Skin  -  Move Data to Config Skin Tags for Display and Editing$N"
				    "################################################################################################################";
				N: XIC(poutHMI.ConfigSetupPB.0)ONS(ONS.5)[COP(cfg_Config.AreaName,poutHMI.Config.AreaName,1) MOV(cfg_Config.MaxRetries,poutHMI.Config.MaxRetrys) MOV(cfg_Config.FaultCodeOffset,poutHMI.Config.FltCodeOffset) ,MOV(cfg_Config.RetryTimer[0],poutHMI.Config.RetryTmr1) MOV(cfg_Config.RetryTimer[1],poutHMI.Config.RetryTmr2) MOV(cfg_Config.RetryTimer[2],poutHMI.Config.RetryTmr3) ,MOV(poutCmn.SequenceNumber,poutHMI.Config.SequenceNumber) COP(poutCmn.SerialNumber,poutHMI.Config.SerialNumber,1) COP(poutCmn.SerialNumber_Child,poutHMI.Config.SerialNumber_Child,1) ,COP(poutCmn.VIN,poutHMI.Config.VIN,1) COP(poutCmn.RFID,poutHMI.Config.RFID,1) COP(poutCmn.Carrier_ID,poutHMI.Config.Carrier_ID,1) ,COP(poutCmn.Identifier,poutHMI.Config.Carrier_ID,1) ];
				RC: "################################################################################################################$N"
				    "HMI Display Controls & Configuration Controls$N"
				    "Config Skin  -  Clear Data to Config Skin tags when Cancel is pressed$N"
				    "################################################################################################################";
				N: XIC(poutHMI.Config.CancelConfigPB.0)ONS(ONS.6)[COP(NULL_STRING_32,poutHMI.Config.AreaName,1) MOV(0,poutHMI.Config.MaxRetrys) MOV(0,poutHMI.Config.FltCodeOffset) ,MOV(0,poutHMI.Config.RetryTmr1) MOV(0,poutHMI.Config.RetryTmr2) MOV(0,poutHMI.Config.RetryTmr3) ,MOV(0,poutHMI.Config.SequenceNumber) COP(NULL_STRING_35,poutHMI.Config.SerialNumber,1) COP(NULL_STRING_35,poutHMI.Config.SerialNumber_Child,1) ,COP(NULL_STRING_17,poutHMI.Config.VIN,1) COP(NULL_STRING_35,poutHMI.Config.RFID,1) COP(NULL_STRING_17,poutHMI.Config.Carrier_ID,1) ,COP(NULL_STRING_35,poutHMI.Config.Identifier,1) ];
				RC: "################################################################################################################$N"
				    "HMI Display Controls & Configuration Controls$N"
				    "Config Skin  -  Move Screen Data back to Config tags when Apply is pressed$N"
				    "################################################################################################################";
				N: XIC(poutHMI.Config.ConfigApplyPB.0)ONS(ONS.7)[COP(poutHMI.Config.AreaName,cfg_Config.AreaName,1) MOV(poutHMI.Config.MaxRetrys,cfg_Config.MaxRetries) MOV(poutHMI.Config.FltCodeOffset,cfg_Config.FaultCodeOffset) ,MOV(poutHMI.Config.RetryTmr1,cfg_Config.RetryTimer[0]) MOV(poutHMI.Config.RetryTmr2,cfg_Config.RetryTimer[1]) MOV(poutHMI.Config.RetryTmr3,cfg_Config.RetryTimer[2]) ,MOV(poutHMI.Config.SequenceNumber,poutCmn.SequenceNumber) COP(poutHMI.Config.SerialNumber,poutCmn.SerialNumber,1) COP(poutHMI.Config.SerialNumber_Child,poutCmn.SerialNumber_Child,1) ,COP(poutHMI.Config.VIN,poutCmn.VIN,1) COP(poutHMI.Config.RFID,poutCmn.RFID,1) COP(poutHMI.Config.Carrier_ID,poutCmn.Carrier_ID,1) ,COP(poutHMI.Config.Identifier,poutCmn.Identifier,1) ];
				RC: "################################################################################################################$N"
				    "HMI Display Controls & Configuration Controls$N"
				    "Config Skin  -  Config Skin Visiblity control$N"
				    "################################################################################################################";
				N: [XIC(poutHMI.ConfigSetupPB.0) ,XIC(poutHMI.Config.ConFigVisibility) ]XIO(poutHMI.Config.ConfigClosePB.0)[MOV(180000,ConfigVisibility_TON.PRE) TON(ConfigVisibility_TON,?,?) ,XIO(ConfigVisibility_TON.DN) OTE(poutHMI.Config.ConFigVisibility) ];
				RC: "###############################################################################################$N"
				    "Clears Data When A Request Is Not Being Made$N"
				    "################################################################################################$N"
				    "";
				N: NOP();
				N: XIC(pinReq.Bypass.Active)FLL(0,poutMES_XMIT,1);
				N: [XIC(S:FS) ,XIO(Trigger) ][FLL(0,poutMES_XMIT,1) ,FLL(0,poutCmn,1) ];
				N: EQU(pinMES_RCV.Response,0)XIO(pinReq.Trigger)XIO(pinMES_RCV.Trigger)ONS(ONS.10)[FLL(0,pinMES_RCV.SerialNumber,1) ,FLL(0,pinMES_RCV.SerialNumber_Child,1) ,FLL(0,pinMES_RCV.VIN,1) ,FLL(0,pinMES_RCV.OrderState,1) ,FLL(0,pinMES_RCV.Carrier_ID,1) ,FLL(0,pinMES_RCV.RFID,1) ,FLL(0,pinMES_RCV.Identifier,1) ,FLL(0,pinMES_RCV.Spare,1) ,MOV(0,pinMES_RCV.SequenceNumber) ,MOV(0,pinMES_RCV.Status_Code) ,FLL(0,pinMES_RCV.OptionCode,1) ,FLL(0,pinMES_RCV.OptionCodeArray,1) ,OTU(pinMES_RCV.OK) ,OTU(pinMES_RCV.NOK) ];
		END_ROUTINE

	END_ADD_ON_INSTRUCTION_DEFINITION